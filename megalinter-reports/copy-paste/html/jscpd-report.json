{
  "statistics": {
    "detectionDate": "2023-03-06T08:21:29.269Z",
    "formats": {
      "python": {
        "sources": {
          "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py": {
            "lines": 55,
            "tokens": 584,
            "sources": 1,
            "clones": 183,
            "duplicatedLines": 1699,
            "duplicatedTokens": 14419,
            "percentage": 3089.09,
            "percentageTokens": 2469.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py": {
            "lines": 45,
            "tokens": 491,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 30,
            "duplicatedTokens": 317,
            "percentage": 66.67,
            "percentageTokens": 64.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py": {
            "lines": 50,
            "tokens": 520,
            "sources": 1,
            "clones": 21,
            "duplicatedLines": 157,
            "duplicatedTokens": 1968,
            "percentage": 314,
            "percentageTokens": 378.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py": {
            "lines": 48,
            "tokens": 511,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 444,
            "percentage": 87.5,
            "percentageTokens": 86.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py": {
            "lines": 50,
            "tokens": 548,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 51,
            "duplicatedTokens": 550,
            "percentage": 102,
            "percentageTokens": 100.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py": {
            "lines": 51,
            "tokens": 479,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 46,
            "duplicatedTokens": 421,
            "percentage": 90.2,
            "percentageTokens": 87.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py": {
            "lines": 63,
            "tokens": 659,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 77,
            "duplicatedTokens": 647,
            "percentage": 122.22,
            "percentageTokens": 98.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py": {
            "lines": 98,
            "tokens": 697,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 9.18,
            "percentageTokens": 10.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2067_validate_uniform_mapping_format.py": {
            "lines": 43,
            "tokens": 386,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 20.93,
            "percentageTokens": 19.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2066_validate_cluster_name_with_special_char.py": {
            "lines": 88,
            "tokens": 765,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 165,
            "percentage": 20.45,
            "percentageTokens": 21.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py": {
            "lines": 58,
            "tokens": 528,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 15.52,
            "percentageTokens": 14.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2063_check_hypervisors_fqdn.py": {
            "lines": 75,
            "tokens": 784,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 164,
            "percentage": 26.67,
            "percentageTokens": 20.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2061_check_fake_mode_is_hypervisor_option.py": {
            "lines": 61,
            "tokens": 644,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 14.75,
            "percentageTokens": 11.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py": {
            "lines": 59,
            "tokens": 668,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 234,
            "duplicatedTokens": 2086,
            "percentage": 396.61,
            "percentageTokens": 312.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py": {
            "lines": 53,
            "tokens": 529,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 29,
            "duplicatedTokens": 283,
            "percentage": 54.72,
            "percentageTokens": 53.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2058_post_large_json_to_rhsm.py": {
            "lines": 83,
            "tokens": 792,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 10.84,
            "percentageTokens": 9.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2057_validate_subscription_register_clean_together.py": {
            "lines": 67,
            "tokens": 749,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 34,
            "duplicatedTokens": 341,
            "percentage": 50.75,
            "percentageTokens": 45.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2056_validate_non_root_to_run_virtwho.py": {
            "lines": 60,
            "tokens": 633,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 32,
            "duplicatedTokens": 262,
            "percentage": 53.33,
            "percentageTokens": 41.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py": {
            "lines": 47,
            "tokens": 482,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 62,
            "duplicatedTokens": 703,
            "percentage": 131.91,
            "percentageTokens": 145.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2054_validate_trigger_event_with_different_interval.py": {
            "lines": 59,
            "tokens": 505,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 15.25,
            "percentageTokens": 15.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py": {
            "lines": 136,
            "tokens": 1524,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 31,
            "duplicatedTokens": 478,
            "percentage": 22.79,
            "percentageTokens": 31.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2052_validate_hypervisors_connection.py": {
            "lines": 109,
            "tokens": 970,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 8.26,
            "percentageTokens": 7.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2051_validate_virt_who_password_commandline.py": {
            "lines": 26,
            "tokens": 234,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 34.62,
            "percentageTokens": 32.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2049_validate_hostname_without_domain.py": {
            "lines": 70,
            "tokens": 750,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 80,
            "percentage": 14.29,
            "percentageTokens": 10.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2048_register_system_with_activaiton_key.py": {
            "lines": 81,
            "tokens": 835,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 405,
            "percentage": 61.73,
            "percentageTokens": 48.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py": {
            "lines": 63,
            "tokens": 727,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 77,
            "duplicatedTokens": 780,
            "percentage": 122.22,
            "percentageTokens": 107.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py": {
            "lines": 99,
            "tokens": 848,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 58,
            "duplicatedTokens": 522,
            "percentage": 58.59,
            "percentageTokens": 61.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py": {
            "lines": 124,
            "tokens": 1251,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 315,
            "percentage": 27.42,
            "percentageTokens": 25.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2044_subscribe_guest_with_activation_key.py": {
            "lines": 155,
            "tokens": 1396,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 30,
            "duplicatedTokens": 270,
            "percentage": 19.35,
            "percentageTokens": 19.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py": {
            "lines": 125,
            "tokens": 1236,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 112,
            "duplicatedTokens": 1131,
            "percentage": 89.6,
            "percentageTokens": 91.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py": {
            "lines": 95,
            "tokens": 844,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 93,
            "duplicatedTokens": 718,
            "percentage": 97.89,
            "percentageTokens": 85.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py": {
            "lines": 53,
            "tokens": 527,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 51,
            "duplicatedTokens": 464,
            "percentage": 96.23,
            "percentageTokens": 88.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py": {
            "lines": 111,
            "tokens": 1100,
            "sources": 1,
            "clones": 25,
            "duplicatedLines": 192,
            "duplicatedTokens": 2319,
            "percentage": 172.97,
            "percentageTokens": 210.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py": {
            "lines": 103,
            "tokens": 919,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 99,
            "duplicatedTokens": 1070,
            "percentage": 96.12,
            "percentageTokens": 116.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py": {
            "lines": 66,
            "tokens": 750,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 26,
            "duplicatedTokens": 241,
            "percentage": 39.39,
            "percentageTokens": 32.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py": {
            "lines": 31,
            "tokens": 288,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 173,
            "percentage": 70.97,
            "percentageTokens": 60.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2036_validate_global_debug_by_virtwho_conf.py": {
            "lines": 31,
            "tokens": 297,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 29.03,
            "percentageTokens": 25.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py": {
            "lines": 70,
            "tokens": 668,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 165,
            "percentage": 20,
            "percentageTokens": 24.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py": {
            "lines": 58,
            "tokens": 506,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 62,
            "duplicatedTokens": 533,
            "percentage": 106.9,
            "percentageTokens": 105.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py": {
            "lines": 55,
            "tokens": 575,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 30,
            "duplicatedTokens": 285,
            "percentage": 54.55,
            "percentageTokens": 49.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py": {
            "lines": 48,
            "tokens": 499,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 28,
            "duplicatedTokens": 269,
            "percentage": 58.33,
            "percentageTokens": 53.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py": {
            "lines": 38,
            "tokens": 341,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 25,
            "duplicatedTokens": 208,
            "percentage": 65.79,
            "percentageTokens": 61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py": {
            "lines": 93,
            "tokens": 1262,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 54,
            "duplicatedTokens": 693,
            "percentage": 58.06,
            "percentageTokens": 54.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py": {
            "lines": 97,
            "tokens": 977,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 31,
            "duplicatedTokens": 330,
            "percentage": 31.96,
            "percentageTokens": 33.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py": {
            "lines": 80,
            "tokens": 834,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 46,
            "duplicatedTokens": 515,
            "percentage": 57.5,
            "percentageTokens": 61.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py": {
            "lines": 70,
            "tokens": 717,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 61,
            "duplicatedTokens": 756,
            "percentage": 87.14,
            "percentageTokens": 105.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py": {
            "lines": 92,
            "tokens": 1033,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 164,
            "duplicatedTokens": 1776,
            "percentage": 178.26,
            "percentageTokens": 171.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py": {
            "lines": 101,
            "tokens": 1134,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 86,
            "duplicatedTokens": 1018,
            "percentage": 85.15,
            "percentageTokens": 89.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py": {
            "lines": 85,
            "tokens": 916,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 68,
            "duplicatedTokens": 751,
            "percentage": 80,
            "percentageTokens": 81.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py": {
            "lines": 75,
            "tokens": 783,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 57,
            "duplicatedTokens": 644,
            "percentage": 76,
            "percentageTokens": 82.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py": {
            "lines": 88,
            "tokens": 883,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 51,
            "duplicatedTokens": 522,
            "percentage": 57.95,
            "percentageTokens": 59.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py": {
            "lines": 77,
            "tokens": 897,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 26,
            "duplicatedTokens": 243,
            "percentage": 33.77,
            "percentageTokens": 27.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py": {
            "lines": 160,
            "tokens": 1649,
            "sources": 1,
            "clones": 20,
            "duplicatedLines": 162,
            "duplicatedTokens": 1929,
            "percentage": 101.25,
            "percentageTokens": 116.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py": {
            "lines": 146,
            "tokens": 1591,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 147,
            "duplicatedTokens": 1683,
            "percentage": 100.68,
            "percentageTokens": 105.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py": {
            "lines": 166,
            "tokens": 1598,
            "sources": 1,
            "clones": 30,
            "duplicatedLines": 257,
            "duplicatedTokens": 3003,
            "percentage": 154.82,
            "percentageTokens": 187.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py": {
            "lines": 120,
            "tokens": 1286,
            "sources": 1,
            "clones": 16,
            "duplicatedLines": 124,
            "duplicatedTokens": 1514,
            "percentage": 103.33,
            "percentageTokens": 117.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py": {
            "lines": 100,
            "tokens": 1031,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 81,
            "duplicatedTokens": 922,
            "percentage": 81,
            "percentageTokens": 89.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py": {
            "lines": 88,
            "tokens": 979,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 42,
            "duplicatedTokens": 455,
            "percentage": 47.73,
            "percentageTokens": 46.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py": {
            "lines": 112,
            "tokens": 1257,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 41,
            "duplicatedTokens": 532,
            "percentage": 36.61,
            "percentageTokens": 42.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2013_validate_unreachable_proxy_by_config.py": {
            "lines": 110,
            "tokens": 1123,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 8.18,
            "percentageTokens": 6.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py": {
            "lines": 158,
            "tokens": 1675,
            "sources": 1,
            "clones": 28,
            "duplicatedLines": 274,
            "duplicatedTokens": 3031,
            "percentage": 173.42,
            "percentageTokens": 180.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py": {
            "lines": 140,
            "tokens": 1521,
            "sources": 1,
            "clones": 20,
            "duplicatedLines": 188,
            "duplicatedTokens": 2085,
            "percentage": 134.29,
            "percentageTokens": 137.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py": {
            "lines": 128,
            "tokens": 1405,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 125,
            "duplicatedTokens": 1478,
            "percentage": 97.66,
            "percentageTokens": 105.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py": {
            "lines": 118,
            "tokens": 1280,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 163,
            "duplicatedTokens": 1802,
            "percentage": 138.14,
            "percentageTokens": 140.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py": {
            "lines": 112,
            "tokens": 1238,
            "sources": 1,
            "clones": 13,
            "duplicatedLines": 108,
            "duplicatedTokens": 1289,
            "percentage": 96.43,
            "percentageTokens": 104.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py": {
            "lines": 51,
            "tokens": 498,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 34,
            "duplicatedTokens": 451,
            "percentage": 66.67,
            "percentageTokens": 90.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2006_validate_config_function_by_cli.py": {
            "lines": 87,
            "tokens": 962,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 21,
            "duplicatedTokens": 222,
            "percentage": 24.14,
            "percentageTokens": 23.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2005_validate_password_option_by_cli.py": {
            "lines": 127,
            "tokens": 1216,
            "sources": 1,
            "clones": 20,
            "duplicatedLines": 182,
            "duplicatedTokens": 1991,
            "percentage": 143.31,
            "percentageTokens": 163.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2004_validate_username_option_by_cli.py": {
            "lines": 116,
            "tokens": 1163,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 128,
            "duplicatedTokens": 1376,
            "percentage": 110.34,
            "percentageTokens": 118.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2003_validate_server_option_by_cli.py": {
            "lines": 113,
            "tokens": 1082,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 73,
            "duplicatedTokens": 828,
            "percentage": 64.6,
            "percentageTokens": 76.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2002_validate_env_option_by_cli.py": {
            "lines": 99,
            "tokens": 1001,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 50,
            "duplicatedTokens": 600,
            "percentage": 50.51,
            "percentageTokens": 59.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier2/tc_2001_validate_owner_option_by_cli.py": {
            "lines": 87,
            "tokens": 819,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 26,
            "duplicatedTokens": 331,
            "percentage": 29.89,
            "percentageTokens": 40.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1113_check_virtwho_status.py": {
            "lines": 99,
            "tokens": 965,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 9.09,
            "percentageTokens": 7.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py": {
            "lines": 78,
            "tokens": 879,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 52,
            "duplicatedTokens": 661,
            "percentage": 66.67,
            "percentageTokens": 75.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1111_template_conf_validation.py": {
            "lines": 46,
            "tokens": 376,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 19.57,
            "percentageTokens": 20.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py": {
            "lines": 40,
            "tokens": 371,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 22.5,
            "percentageTokens": 20.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py": {
            "lines": 39,
            "tokens": 375,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 77,
            "duplicatedTokens": 731,
            "percentage": 197.44,
            "percentageTokens": 194.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1108_check_hypervisor_facts.py": {
            "lines": 111,
            "tokens": 1096,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 187,
            "percentage": 18.92,
            "percentageTokens": 17.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py": {
            "lines": 73,
            "tokens": 677,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 176,
            "percentage": 28.77,
            "percentageTokens": 26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py": {
            "lines": 78,
            "tokens": 966,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 148,
            "percentage": 17.95,
            "percentageTokens": 15.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py": {
            "lines": 131,
            "tokens": 1365,
            "sources": 1,
            "clones": 34,
            "duplicatedLines": 534,
            "duplicatedTokens": 4788,
            "percentage": 407.63,
            "percentageTokens": 350.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py": {
            "lines": 67,
            "tokens": 598,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 282,
            "percentage": 46.27,
            "percentageTokens": 47.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py": {
            "lines": 79,
            "tokens": 739,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 19,
            "duplicatedTokens": 256,
            "percentage": 24.05,
            "percentageTokens": 34.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py": {
            "lines": 95,
            "tokens": 1122,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 141,
            "duplicatedTokens": 1542,
            "percentage": 148.42,
            "percentageTokens": 137.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py": {
            "lines": 79,
            "tokens": 891,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 78,
            "duplicatedTokens": 909,
            "percentage": 98.73,
            "percentageTokens": 102.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py": {
            "lines": 112,
            "tokens": 1240,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 76,
            "duplicatedTokens": 872,
            "percentage": 67.86,
            "percentageTokens": 70.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py": {
            "lines": 98,
            "tokens": 1088,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 124,
            "duplicatedTokens": 1220,
            "percentage": 126.53,
            "percentageTokens": 112.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py": {
            "lines": 81,
            "tokens": 937,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 93,
            "duplicatedTokens": 1033,
            "percentage": 114.81,
            "percentageTokens": 110.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py": {
            "lines": 50,
            "tokens": 466,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 78,
            "duplicatedTokens": 828,
            "percentage": 156,
            "percentageTokens": 177.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py": {
            "lines": 61,
            "tokens": 616,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 173,
            "duplicatedTokens": 1552,
            "percentage": 283.61,
            "percentageTokens": 251.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py": {
            "lines": 61,
            "tokens": 616,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 58,
            "duplicatedTokens": 603,
            "percentage": 95.08,
            "percentageTokens": 97.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py": {
            "lines": 79,
            "tokens": 720,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 46,
            "duplicatedTokens": 446,
            "percentage": 58.23,
            "percentageTokens": 61.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py": {
            "lines": 97,
            "tokens": 964,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 98,
            "duplicatedTokens": 941,
            "percentage": 101.03,
            "percentageTokens": 97.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py": {
            "lines": 47,
            "tokens": 441,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 42,
            "duplicatedTokens": 381,
            "percentage": 89.36,
            "percentageTokens": 86.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py": {
            "lines": 83,
            "tokens": 843,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 78,
            "duplicatedTokens": 810,
            "percentage": 93.98,
            "percentageTokens": 96.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py": {
            "lines": 73,
            "tokens": 752,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 49,
            "duplicatedTokens": 493,
            "percentage": 67.12,
            "percentageTokens": 65.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py": {
            "lines": 72,
            "tokens": 794,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 48,
            "duplicatedTokens": 500,
            "percentage": 66.67,
            "percentageTokens": 62.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py": {
            "lines": 55,
            "tokens": 556,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 65,
            "duplicatedTokens": 655,
            "percentage": 118.18,
            "percentageTokens": 117.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py": {
            "lines": 55,
            "tokens": 556,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 61,
            "duplicatedTokens": 627,
            "percentage": 110.91,
            "percentageTokens": 112.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py": {
            "lines": 59,
            "tokens": 554,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 49,
            "duplicatedTokens": 465,
            "percentage": 83.05,
            "percentageTokens": 83.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py": {
            "lines": 61,
            "tokens": 608,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 354,
            "percentage": 62.3,
            "percentageTokens": 58.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py": {
            "lines": 43,
            "tokens": 418,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 358,
            "percentage": 88.37,
            "percentageTokens": 85.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py": {
            "lines": 55,
            "tokens": 554,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 171,
            "duplicatedTokens": 1681,
            "percentage": 310.91,
            "percentageTokens": 303.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py": {
            "lines": 55,
            "tokens": 554,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 61,
            "duplicatedTokens": 625,
            "percentage": 110.91,
            "percentageTokens": 112.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py": {
            "lines": 55,
            "tokens": 544,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 49,
            "duplicatedTokens": 463,
            "percentage": 89.09,
            "percentageTokens": 85.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py": {
            "lines": 75,
            "tokens": 762,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 48,
            "duplicatedTokens": 456,
            "percentage": 64,
            "percentageTokens": 59.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py": {
            "lines": 43,
            "tokens": 416,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 356,
            "percentage": 88.37,
            "percentageTokens": 85.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py": {
            "lines": 60,
            "tokens": 564,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 193,
            "percentage": 38.33,
            "percentageTokens": 34.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py": {
            "lines": 44,
            "tokens": 426,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 32,
            "duplicatedTokens": 306,
            "percentage": 72.73,
            "percentageTokens": 71.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1076_check_guest_facts_by_subscription_manager.py": {
            "lines": 65,
            "tokens": 575,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 172,
            "percentage": 32.31,
            "percentageTokens": 29.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py": {
            "lines": 31,
            "tokens": 295,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 173,
            "percentage": 70.97,
            "percentageTokens": 58.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py": {
            "lines": 46,
            "tokens": 513,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 184,
            "percentage": 50,
            "percentageTokens": 35.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py": {
            "lines": 49,
            "tokens": 434,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 288,
            "percentage": 69.39,
            "percentageTokens": 66.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py": {
            "lines": 73,
            "tokens": 740,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 35,
            "duplicatedTokens": 353,
            "percentage": 47.95,
            "percentageTokens": 47.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py": {
            "lines": 64,
            "tokens": 661,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 77,
            "duplicatedTokens": 798,
            "percentage": 120.31,
            "percentageTokens": 120.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py": {
            "lines": 56,
            "tokens": 579,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 55,
            "duplicatedTokens": 570,
            "percentage": 98.21,
            "percentageTokens": 98.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py": {
            "lines": 41,
            "tokens": 386,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 31,
            "duplicatedTokens": 304,
            "percentage": 75.61,
            "percentageTokens": 78.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py": {
            "lines": 66,
            "tokens": 678,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 70,
            "duplicatedTokens": 716,
            "percentage": 106.06,
            "percentageTokens": 105.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py": {
            "lines": 52,
            "tokens": 561,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 65,
            "duplicatedTokens": 825,
            "percentage": 125,
            "percentageTokens": 147.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py": {
            "lines": 37,
            "tokens": 363,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 33,
            "duplicatedTokens": 320,
            "percentage": 89.19,
            "percentageTokens": 88.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py": {
            "lines": 33,
            "tokens": 317,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 300,
            "percentage": 93.94,
            "percentageTokens": 94.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py": {
            "lines": 37,
            "tokens": 363,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 28,
            "duplicatedTokens": 278,
            "percentage": 75.68,
            "percentageTokens": 76.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py": {
            "lines": 47,
            "tokens": 519,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 39,
            "duplicatedTokens": 448,
            "percentage": 82.98,
            "percentageTokens": 86.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py": {
            "lines": 45,
            "tokens": 494,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 43,
            "duplicatedTokens": 470,
            "percentage": 95.56,
            "percentageTokens": 95.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py": {
            "lines": 94,
            "tokens": 1061,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 47,
            "duplicatedTokens": 509,
            "percentage": 50,
            "percentageTokens": 47.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py": {
            "lines": 43,
            "tokens": 469,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 39,
            "duplicatedTokens": 415,
            "percentage": 90.7,
            "percentageTokens": 88.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py": {
            "lines": 51,
            "tokens": 560,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 35,
            "duplicatedTokens": 469,
            "percentage": 68.63,
            "percentageTokens": 83.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py": {
            "lines": 52,
            "tokens": 478,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 26,
            "duplicatedTokens": 261,
            "percentage": 50,
            "percentageTokens": 54.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py": {
            "lines": 61,
            "tokens": 528,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 54,
            "duplicatedTokens": 448,
            "percentage": 88.52,
            "percentageTokens": 84.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py": {
            "lines": 31,
            "tokens": 305,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 186,
            "percentage": 51.61,
            "percentageTokens": 60.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py": {
            "lines": 61,
            "tokens": 639,
            "sources": 1,
            "clones": 13,
            "duplicatedLines": 228,
            "duplicatedTokens": 2088,
            "percentage": 373.77,
            "percentageTokens": 326.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py": {
            "lines": 74,
            "tokens": 723,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 371,
            "percentage": 50,
            "percentageTokens": 51.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py": {
            "lines": 92,
            "tokens": 875,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 53,
            "duplicatedTokens": 538,
            "percentage": 57.61,
            "percentageTokens": 61.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py": {
            "lines": 45,
            "tokens": 474,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 102,
            "duplicatedTokens": 953,
            "percentage": 226.67,
            "percentageTokens": 201.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py": {
            "lines": 71,
            "tokens": 810,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 55,
            "duplicatedTokens": 695,
            "percentage": 77.46,
            "percentageTokens": 85.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py": {
            "lines": 62,
            "tokens": 681,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 67,
            "duplicatedTokens": 815,
            "percentage": 108.06,
            "percentageTokens": 119.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py": {
            "lines": 63,
            "tokens": 672,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 47,
            "duplicatedTokens": 486,
            "percentage": 74.6,
            "percentageTokens": 72.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py": {
            "lines": 57,
            "tokens": 675,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 34,
            "duplicatedTokens": 368,
            "percentage": 59.65,
            "percentageTokens": 54.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py": {
            "lines": 57,
            "tokens": 675,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 32,
            "duplicatedTokens": 300,
            "percentage": 56.14,
            "percentageTokens": 44.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py": {
            "lines": 137,
            "tokens": 1365,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 82,
            "duplicatedTokens": 901,
            "percentage": 59.85,
            "percentageTokens": 66.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py": {
            "lines": 65,
            "tokens": 706,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 58,
            "duplicatedTokens": 662,
            "percentage": 89.23,
            "percentageTokens": 93.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py": {
            "lines": 54,
            "tokens": 535,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 48,
            "duplicatedTokens": 486,
            "percentage": 88.89,
            "percentageTokens": 90.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py": {
            "lines": 67,
            "tokens": 698,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 61,
            "duplicatedTokens": 686,
            "percentage": 91.04,
            "percentageTokens": 98.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py": {
            "lines": 41,
            "tokens": 427,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 19,
            "duplicatedTokens": 178,
            "percentage": 46.34,
            "percentageTokens": 41.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1040_check_virt_who_password_function.py": {
            "lines": 26,
            "tokens": 218,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 34.62,
            "percentageTokens": 34.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py": {
            "lines": 80,
            "tokens": 907,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 41,
            "duplicatedTokens": 512,
            "percentage": 51.25,
            "percentageTokens": 56.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py": {
            "lines": 37,
            "tokens": 388,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 24.32,
            "percentageTokens": 19.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1037_check_sam_satellite_options_by_cli.py": {
            "lines": 38,
            "tokens": 376,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 23.68,
            "percentageTokens": 20.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py": {
            "lines": 48,
            "tokens": 448,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 36,
            "duplicatedTokens": 285,
            "percentage": 75,
            "percentageTokens": 63.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py": {
            "lines": 49,
            "tokens": 475,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 28,
            "duplicatedTokens": 315,
            "percentage": 57.14,
            "percentageTokens": 66.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py": {
            "lines": 33,
            "tokens": 285,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 186,
            "percentage": 72.73,
            "percentageTokens": 65.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py": {
            "lines": 47,
            "tokens": 474,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 28,
            "duplicatedTokens": 249,
            "percentage": 59.57,
            "percentageTokens": 52.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1028_check_guest_attr_by_curl.py": {
            "lines": 66,
            "tokens": 673,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 15,
            "duplicatedTokens": 159,
            "percentage": 22.73,
            "percentageTokens": 23.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py": {
            "lines": 58,
            "tokens": 618,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 15.52,
            "percentageTokens": 12.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1025_start_virtwho_service_by_ssh.py": {
            "lines": 47,
            "tokens": 455,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 19.15,
            "percentageTokens": 16.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py": {
            "lines": 44,
            "tokens": 469,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 19,
            "duplicatedTokens": 236,
            "percentage": 43.18,
            "percentageTokens": 50.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py": {
            "lines": 38,
            "tokens": 331,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 23.68,
            "percentageTokens": 22.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py": {
            "lines": 51,
            "tokens": 444,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 17.65,
            "percentageTokens": 17.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1021_check_reporter_id_function_by_cli.py": {
            "lines": 47,
            "tokens": 462,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 47,
            "duplicatedTokens": 541,
            "percentage": 100,
            "percentageTokens": 117.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1020_check_log_file_function_by_cli.py": {
            "lines": 49,
            "tokens": 574,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 156,
            "percentage": 36.73,
            "percentageTokens": 27.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1019_check_log_dir_function_by_cli.py": {
            "lines": 47,
            "tokens": 564,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 383,
            "percentage": 63.83,
            "percentageTokens": 67.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1018_check_log_per_config_function_by_cli.py": {
            "lines": 79,
            "tokens": 954,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 39,
            "duplicatedTokens": 470,
            "percentage": 49.37,
            "percentageTokens": 49.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1017_check_config_function_by_cli.py": {
            "lines": 35,
            "tokens": 348,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 151,
            "percentage": 40,
            "percentageTokens": 43.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1016_check_print_function_by_cli.py": {
            "lines": 51,
            "tokens": 582,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 17.65,
            "percentageTokens": 13.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py": {
            "lines": 71,
            "tokens": 666,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 65,
            "duplicatedTokens": 502,
            "percentage": 91.55,
            "percentageTokens": 75.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1014_check_interval_function_by_cli.py": {
            "lines": 86,
            "tokens": 751,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 36,
            "duplicatedTokens": 251,
            "percentage": 41.86,
            "percentageTokens": 33.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py": {
            "lines": 42,
            "tokens": 476,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 38,
            "duplicatedTokens": 414,
            "percentage": 90.48,
            "percentageTokens": 86.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py": {
            "lines": 44,
            "tokens": 424,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 20.45,
            "percentageTokens": 17.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py": {
            "lines": 52,
            "tokens": 592,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 67,
            "duplicatedTokens": 788,
            "percentage": 128.85,
            "percentageTokens": 133.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1010_check_virtwho_debug_function_by_cli.py": {
            "lines": 46,
            "tokens": 492,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 142,
            "percentage": 30.43,
            "percentageTokens": 28.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py": {
            "lines": 36,
            "tokens": 332,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 23,
            "duplicatedTokens": 254,
            "percentage": 63.89,
            "percentageTokens": 76.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py": {
            "lines": 34,
            "tokens": 322,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 36,
            "duplicatedTokens": 338,
            "percentage": 105.88,
            "percentageTokens": 104.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py": {
            "lines": 34,
            "tokens": 329,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 19,
            "duplicatedTokens": 196,
            "percentage": 55.88,
            "percentageTokens": 59.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1006_run_virtwho_with_default_config.py": {
            "lines": 43,
            "tokens": 466,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 20.93,
            "percentageTokens": 16.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1005_check_virtwho_service_function.py": {
            "lines": 46,
            "tokens": 415,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 19.57,
            "percentageTokens": 18.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py": {
            "lines": 45,
            "tokens": 434,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 20,
            "percentageTokens": 17.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1003_check_virtwho_package_info.py": {
            "lines": 64,
            "tokens": 625,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 14.06,
            "percentageTokens": 12.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py": {
            "lines": 51,
            "tokens": 439,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 17.65,
            "percentageTokens": 17.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py": {
            "lines": 48,
            "tokens": 420,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 18.75,
            "percentageTokens": 18.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/smoke/test_virtwho_smoke.py": {
            "lines": 249,
            "tokens": 3280,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 45,
            "duplicatedTokens": 605,
            "percentage": 18.07,
            "percentageTokens": 18.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/sca/test_virtwho_sca.py": {
            "lines": 79,
            "tokens": 875,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 108,
            "percentage": 10.13,
            "percentageTokens": 12.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/gating/test_virtwho_gating.py": {
            "lines": 127,
            "tokens": 1533,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 32,
            "duplicatedTokens": 423,
            "percentage": 25.2,
            "percentageTokens": 27.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "virt_who/settings.py": {
            "lines": 747,
            "tokens": 8543,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 44,
            "duplicatedTokens": 416,
            "percentage": 5.89,
            "percentageTokens": 4.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "virt_who/scheduler.py": {
            "lines": 13,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "virt_who/base.py": {
            "lines": 524,
            "tokens": 5498,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 168,
            "percentage": 3.05,
            "percentageTokens": 3.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "virt_who/__init__.py": {
            "lines": 86,
            "tokens": 525,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "utils/merge-xunit.py": {
            "lines": 59,
            "tokens": 468,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "utils/installer.py": {
            "lines": 440,
            "tokens": 3496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/polarion_importer.py": {
            "lines": 346,
            "tokens": 2730,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/polarion_caseid_mapping.py": {
            "lines": 180,
            "tokens": 1259,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 15327,
          "tokens": 155618,
          "sources": 190,
          "clones": 573,
          "duplicatedLines": 5925,
          "duplicatedTokens": 60127,
          "percentage": 38.66,
          "percentageTokens": 38.64,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "bash": {
        "sources": {
          "utils/bridge_setup.sh": {
            "lines": 49,
            "tokens": 487,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "docker/rm_containers.sh": {
            "lines": 41,
            "tokens": 239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "docker/mk_image.sh": {
            "lines": 183,
            "tokens": 1376,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "docker/mk_container.sh": {
            "lines": 79,
            "tokens": 718,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 352,
          "tokens": 2820,
          "sources": 4,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "markdown": {
        "sources": {
          "requirements.txt": {
            "lines": 10,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 10,
          "tokens": 20,
          "sources": 1,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 15689,
      "tokens": 158458,
      "sources": 195,
      "clones": 573,
      "duplicatedLines": 5925,
      "duplicatedTokens": 60127,
      "percentage": 37.77,
      "percentageTokens": 37.95,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133740\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(\n            key in (\"libvirt-local\", \"vdsm\")\n            for key in (hypervisor1_type, hypervisor2_type)\n        ):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py",
        "start": 10,
        "end": 20,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 20,
          "column": 3,
          "position": 170
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 10,
        "end": 20,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 20,
          "column": 5,
          "position": 170
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133737\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(\n            key in (\"libvirt-local\", \"vdsm\")\n            for key in (hypervisor1_type, hypervisor2_type)\n        ):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        if self.pkg_check(self.ssh_host(), \"virt-who\")[9:15] >= \"0.23.3\":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init(uid=\"01\")\n\n        # case config\n        results = dict()\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 5,
          "position": 228
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 15,
          "position": 228
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_case_init(uid=\"01\")\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_01_name = \"virtwho-config-{0}\".format(hypervisor1_type)\n        config_01_file = \"/etc/virt-who.d/{0}.conf\".format(config_01_name)\n        guest_01_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 21,
        "end": 31,
        "startLoc": {
          "line": 21,
          "column": 19,
          "position": 202
        },
        "endLoc": {
          "line": 31,
          "column": 14,
          "position": 288
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 19,
        "end": 29,
        "startLoc": {
          "line": 19,
          "column": 24,
          "position": 167
        },
        "endLoc": {
          "line": 29,
          "column": 15,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check mapping info included two hypervisors\")\n        res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)\n        res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 40,
        "end": 51,
        "startLoc": {
          "line": 40,
          "column": 2,
          "position": 372
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 520
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py",
        "start": 35,
        "end": 46,
        "startLoc": {
          "line": 35,
          "column": 2,
          "position": 343
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 491
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133731\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(\n            key in (\"libvirt-local\", \"vdsm\")\n            for key in (hypervisor1_type, hypervisor2_type)\n        ):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        self.vw_case_init(uid=\"01\")\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_01_name = \"virtwho-config-{0}\".format(hypervisor1_type)\n        config_01_file = \"/etc/virt-who.d/{0}.conf\".format(config_01_name)\n        config_02_name = \"virtwho-config-{0}\".format(hypervisor2_type)\n        config_02_file = \"/etc/virt-who.d/{0}.conf\".format(config_02_name)\n        guest_01_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py",
        "start": 10,
        "end": 31,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 31,
          "column": 14,
          "position": 277
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 10,
        "end": 31,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 31,
          "column": 13,
          "position": 277
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "uid=\"02\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check mapping info included two hypervisors\")\n        res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)\n        res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py",
        "start": 37,
        "end": 49,
        "startLoc": {
          "line": 37,
          "column": 2,
          "position": 343
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 511
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 46,
        "startLoc": {
          "line": 39,
          "column": 2,
          "position": 352
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 491
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133733\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(\n            key in (\"libvirt-local\", \"vdsm\")\n            for key in (hypervisor1_type, hypervisor2_type)\n        ):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        self.vw_case_init(uid=\"01\")\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_01_name = \"virtwho-config-{0}\".format(hypervisor1_type)\n        config_01_file = \"/etc/virt-who.d/{0}.conf\".format(config_01_name)\n        config_02_name = \"virtwho-config-{0}\".format(hypervisor2_type)\n        config_02_file = \"/etc/virt-who.d/{0}.conf\".format(config_02_name)\n        guest_01_uuid = self.get_hypervisor_guestuuid(uid=\"01\")\n        guest_02_uuid = self.get_hypervisor_guestuuid(uid=\"02\")\n\n        # case steps\n        logger.info(\">>>step1: create config file include two different hypervisors\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py",
        "start": 10,
        "end": 35,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 35,
          "column": 65,
          "position": 313
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 10,
        "end": 35,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 35,
          "column": 66,
          "position": 313
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check mapping info included two hypervisors\")\n        res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)\n        res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py",
        "start": 39,
        "end": 51,
        "startLoc": {
          "line": 39,
          "column": 2,
          "position": 383
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 548
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 46,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 491
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133743\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(\n            key in (\"libvirt-local\", \"vdsm\")\n            for key in (hypervisor1_type, hypervisor2_type)\n        ):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        if self.pkg_check(self.ssh_host(), \"virt-who\")[9:15] >= \"0.23.3\":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init(uid=\"01\")\n\n        # case config\n        results = dict()\n        config_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 12,
          "position": 228
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 15,
          "position": 228
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check how many modes in rhsm.log\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 49,
          "position": 293
        },
        "endLoc": {
          "line": 38,
          "column": 45,
          "position": 365
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-198867\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-198375\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-198374\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2067_validate_uniform_mapping_format.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-196078\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2066_validate_cluster_name_with_special_char.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-195890\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-188359\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2063_check_hypervisors_fqdn.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-175058\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2061_check_fake_mode_is_hypervisor_option.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-175032\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        compose_id",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 19,
        "end": 26,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 161
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py",
        "start": 20,
        "end": 28,
        "startLoc": {
          "line": 20,
          "column": 9,
          "position": 155
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-175019\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        compose_id = self.get_config(\"rhel_compose\")\n        option",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 7,
          "position": 213
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 28,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 249
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-171258\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2058_post_large_json_to_rhsm.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136773\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2057_validate_subscription_register_clean_together.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        self.vw_thread_clean()\n        ret, output = self.run_service(self.ssh_host(), \"virt-who\", \"restart\")\n        time.sleep(30)\n        error_num, error_list = self.vw_callback_error_num()\n        thread_num = self.vw_callback_thread_num()\n        logger.info(\"error_num: {0}, thread_num: {1}\".format(error_num, thread_num))\n        results.setdefault(\"step3\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2057_validate_subscription_register_clean_together.py",
        "start": 48,
        "end": 55,
        "startLoc": {
          "line": 48,
          "column": 16,
          "position": 501
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 589
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2057_validate_subscription_register_clean_together.py",
        "start": 25,
        "end": 32,
        "startLoc": {
          "line": 25,
          "column": 42,
          "position": 196
        },
        "endLoc": {
          "line": 32,
          "column": 8,
          "position": 284
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136771\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2056_validate_non_root_to_run_virtwho.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        self.vw_etc_d_mode_create(config_name, config_file)\n        new_user",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2056_validate_non_root_to_run_virtwho.py",
        "start": 13,
        "end": 24,
        "startLoc": {
          "line": 13,
          "column": 16,
          "position": 114
        },
        "endLoc": {
          "line": 24,
          "column": 9,
          "position": 203
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2057_validate_subscription_register_clean_together.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 16,
          "position": 166
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136781\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ":\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        self.vw_etc_d_mode_create(config_name, config_file)\n        config",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 12,
        "end": 24,
        "startLoc": {
          "line": 12,
          "column": 16,
          "position": 101
        },
        "endLoc": {
          "line": 24,
          "column": 7,
          "position": 198
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2056_validate_non_root_to_run_virtwho.py",
        "start": 12,
        "end": 21,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 106
        },
        "endLoc": {
          "line": 21,
          "column": 16,
          "position": 166
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136726\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2054_validate_trigger_event_with_different_interval.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136733\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "()\n            data, tty_output, rhsm_output = self.vw_start()\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            if hypervisor_type in (\"libvirt-remote\", \"libvirt-local\", \"hyperv\", \"esx\"):\n                res2 = self.validate_guest_state(\n                    data, owner, guest_uuid, exp_state=\"3|4|5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py",
        "start": 81,
        "end": 86,
        "startLoc": {
          "line": 81,
          "column": 22,
          "position": 925
        },
        "endLoc": {
          "line": 86,
          "column": 8,
          "position": 1015
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py",
        "start": 50,
        "end": 54,
        "startLoc": {
          "line": 50,
          "column": 25,
          "position": 524
        },
        "endLoc": {
          "line": 54,
          "column": 2,
          "position": 612
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "()\n            data, tty_output, rhsm_output = self.vw_start()\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            output = self.system_sku_consumed(self.ssh_guest())\n            res2 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)\n            res3 = self.validate_guest_state(data, owner, guest_uuid, exp_state=1)\n            results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py",
        "start": 99,
        "end": 105,
        "startLoc": {
          "line": 99,
          "column": 23,
          "position": 1125
        },
        "endLoc": {
          "line": 105,
          "column": 8,
          "position": 1236
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py",
        "start": 66,
        "end": 72,
        "startLoc": {
          "line": 66,
          "column": 24,
          "position": 720
        },
        "endLoc": {
          "line": 72,
          "column": 8,
          "position": 831
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136725\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2052_validate_hypervisors_connection.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136708\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2051_validate_virt_who_password_commandline.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136708\")\n        hypervisor_type",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2049_validate_hostname_without_domain.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 16,
          "position": 80
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 5,
          "position": 80
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137101\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2048_register_system_with_activaiton_key.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2048_register_system_with_activaiton_key.py",
        "start": 13,
        "end": 24,
        "startLoc": {
          "line": 13,
          "column": 14,
          "position": 107
        },
        "endLoc": {
          "line": 24,
          "column": 16,
          "position": 196
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 15,
        "end": 28,
        "startLoc": {
          "line": 15,
          "column": 16,
          "position": 147
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137103\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 9,
          "position": 113
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 200
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 16,
        "end": 28,
        "startLoc": {
          "line": 16,
          "column": 9,
          "position": 150
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: delete virt-who host from webui\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 26,
        "end": 31,
        "startLoc": {
          "line": 26,
          "column": 42,
          "position": 208
        },
        "endLoc": {
          "line": 31,
          "column": 44,
          "position": 280
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137102\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        register_type = self.get_config(\"register_type\")\n        if \"stage\" in register_type:\n            self.vw_case_skip(register_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        host_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 11,
        "end": 26,
        "startLoc": {
          "line": 11,
          "column": 18,
          "position": 89
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 209
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2048_register_system_with_activaiton_key.py",
        "start": 10,
        "end": 28,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_name = self.get_hypervisor_hostname()\n        guest_name",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 19,
        "end": 28,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 142
        },
        "endLoc": {
          "line": 28,
          "column": 11,
          "position": 231
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2066_validate_cluster_name_with_special_char.py",
        "start": 27,
        "end": 37,
        "startLoc": {
          "line": 27,
          "column": 9,
          "position": 229
        },
        "endLoc": {
          "line": 37,
          "column": 5,
          "position": 319
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n\n        # Case Steps\n        logger.info(\">>>step1: run virt-who to send mappings\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: get guest_id and vw_host_uuid\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 30,
        "end": 38,
        "startLoc": {
          "line": 30,
          "column": 2,
          "position": 266
        },
        "endLoc": {
          "line": 38,
          "column": 42,
          "position": 350
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 23,
        "end": 44,
        "startLoc": {
          "line": 23,
          "column": 12,
          "position": 196
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137101\")\n        hypervisor_type",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 16,
          "position": 80
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 14,
          "position": 80
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        register_type = self.get_config(\"register_type\")\n        if \"stage\" in register_type:\n            self.vw_case_skip(register_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 16,
          "position": 230
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 10,
        "end": 37,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 37,
          "column": 5,
          "position": 319
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "# Case Steps\n        logger.info(\">>>step1: run virt-who to send mappings\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\n            \">>>step2: attach physical vdc for hypervisor, then check subscriptions\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py",
        "start": 36,
        "end": 43,
        "startLoc": {
          "line": 36,
          "column": 9,
          "position": 312
        },
        "endLoc": {
          "line": 43,
          "column": 73,
          "position": 394
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 25,
        "end": 44,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 200
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137100\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2044_subscribe_guest_with_activation_key.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        register_type = self.get_config(\"register_type\")\n        if \"stage\" in register_type:\n            self.vw_case_skip(register_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        hypervisor_type",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2044_subscribe_guest_with_activation_key.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 16,
          "position": 197
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2048_register_system_with_activaiton_key.py",
        "start": 10,
        "end": 28,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step1\", []).append(res)\n\n            logger.info(\n                \">>>step2: Register guest with auto-attach enabled \"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2044_subscribe_guest_with_activation_key.py",
        "start": 65,
        "end": 71,
        "startLoc": {
          "line": 65,
          "column": 8,
          "position": 547
        },
        "endLoc": {
          "line": 71,
          "column": 53,
          "position": 621
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137111\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        register_type = self.get_config(\"register_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        if \"stage\" in register_type:\n            self.vw_case_skip(register_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 5,
          "position": 165
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2063_check_hypervisors_fqdn.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 16,
          "position": 165
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137110\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 42,
      "fragment": ")\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            if org == default_org:\n                res2 = self.satellite_hosts_search(\n                    ssh_sat,\n                    register_config,\n                    default_org,\n                    host_name,\n                    host_uuid,\n                    exp_exist=True,\n                )\n                res3 = self.satellite_hosts_search(\n                    ssh_sat,\n                    register_config,\n                    extra_org,\n                    host_name,\n                    host_uuid,\n                    exp_exist=False,\n                )\n            else:\n                res2 = self.satellite_hosts_search(\n                    ssh_sat,\n                    register_config,\n                    default_org,\n                    host_name,\n                    host_uuid,\n                    exp_exist=False,\n                )\n                res3 = self.satellite_hosts_search(\n                    ssh_sat,\n                    register_config,\n                    extra_org,\n                    host_name,\n                    host_uuid,\n                    exp_exist=True,\n                )\n            results.setdefault(step, []).append(res1)\n            results.setdefault(step, []).append(res2)\n            results.setdefault(step, []).append(res3)\n\n        logger.info(\">>>step finally: delete host and hypervisor from extra_org\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 46,
        "end": 87,
        "startLoc": {
          "line": 46,
          "column": 16,
          "position": 483
        },
        "endLoc": {
          "line": 87,
          "column": 61,
          "position": 759
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 52,
        "end": 94,
        "startLoc": {
          "line": 52,
          "column": 10,
          "position": 554
        },
        "endLoc": {
          "line": 94,
          "column": 43,
          "position": 832
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136731\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config = self.get_register_config()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 22,
        "end": 30,
        "startLoc": {
          "line": 22,
          "column": 16,
          "position": 180
        },
        "endLoc": {
          "line": 30,
          "column": 14,
          "position": 263
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 21,
        "end": 29,
        "startLoc": {
          "line": 21,
          "column": 8,
          "position": 165
        },
        "endLoc": {
          "line": 29,
          "column": 8,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136724\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"env.*differs|env.* is different|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 89,
        "end": 96,
        "startLoc": {
          "line": 89,
          "column": 12,
          "position": 899
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 983
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 48,
        "end": 55,
        "startLoc": {
          "line": 48,
          "column": 13,
          "position": 460
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 544
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136727\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 23,
          "position": 166
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 17,
          "position": 166
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        self.vw_option_enable(\"[defaults]\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        register_config = self.get_register_config()\n        register_owner",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 13,
        "end": 28,
        "startLoc": {
          "line": 13,
          "column": 16,
          "position": 112
        },
        "endLoc": {
          "line": 28,
          "column": 15,
          "position": 241
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 15,
        "end": 30,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 30,
          "column": 13,
          "position": 276
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault(\"step1\", []).append(res1)\n        results.setdefault(\"step1\", []).append(res2)\n\n        logger.info(\n            \">>>step2: disable owner option in /etc/virt-who.d/, \"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 37,
        "end": 45,
        "startLoc": {
          "line": 37,
          "column": 15,
          "position": 300
        },
        "endLoc": {
          "line": 45,
          "column": 55,
          "position": 411
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 38,
        "end": 46,
        "startLoc": {
          "line": 38,
          "column": 13,
          "position": 332
        },
        "endLoc": {
          "line": 46,
          "column": 89,
          "position": 443
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: skip this step because owner cannot be set to no-ascci\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 53,
        "end": 58,
        "startLoc": {
          "line": 53,
          "column": 6,
          "position": 480
        },
        "endLoc": {
          "line": 58,
          "column": 67,
          "position": 552
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 53,
        "end": 59,
        "startLoc": {
          "line": 53,
          "column": 2,
          "position": 507
        },
        "endLoc": {
          "line": 59,
          "column": 91,
          "position": 581
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\n            \">>>step5: correct owner in /etc/virt-who.conf, \"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 77,
        "end": 84,
        "startLoc": {
          "line": 77,
          "column": 9,
          "position": 640
        },
        "endLoc": {
          "line": 84,
          "column": 50,
          "position": 731
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 78,
        "end": 85,
        "startLoc": {
          "line": 78,
          "column": 9,
          "position": 766
        },
        "endLoc": {
          "line": 85,
          "column": 93,
          "position": 857
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"owner.* is different|\" \"Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 89,
        "end": 96,
        "startLoc": {
          "line": 89,
          "column": 12,
          "position": 776
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 862
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 48,
        "end": 55,
        "startLoc": {
          "line": 48,
          "column": 13,
          "position": 431
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 517
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        # Case Result\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 94,
        "end": 100,
        "startLoc": {
          "line": 94,
          "column": 6,
          "position": 825
        },
        "endLoc": {
          "line": 100,
          "column": 5,
          "position": 896
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 94,
        "end": 100,
        "startLoc": {
          "line": 94,
          "column": 2,
          "position": 946
        },
        "endLoc": {
          "line": 100,
          "column": 6,
          "position": 1017
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137014\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name_1",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 14,
          "position": 178
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 5,
          "position": 178
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136719\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 13,
          "position": 174
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 14,
          "position": 119
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 215
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136721\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2036_validate_global_debug_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136716\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136731\")\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 3,
          "position": 80
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 16,
          "position": 80
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: interval is null value in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 26,
          "column": 57,
          "position": 216
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 14,
        "end": 24,
        "startLoc": {
          "line": 14,
          "column": 14,
          "position": 119
        },
        "endLoc": {
          "line": 24,
          "column": 42,
          "position": 181
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136712\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 16,
          "position": 212
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 25,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 25,
          "column": 17,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\n            \">>>step2: run virt-who when all the options enabled with double quotes\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py",
        "start": 41,
        "end": 47,
        "startLoc": {
          "line": 41,
          "column": 14,
          "position": 382
        },
        "endLoc": {
          "line": 47,
          "column": 73,
          "position": 456
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136711\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        invalid_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py",
        "start": 10,
        "end": 24,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 24,
          "column": 13,
          "position": 201
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 28,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who with the unexpected config file name\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 60,
          "position": 222
        },
        "endLoc": {
          "line": 32,
          "column": 62,
          "position": 291
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 53,
          "position": 228
        },
        "endLoc": {
          "line": 33,
          "column": 54,
          "position": 297
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136639\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: add xxxxxx=aaa to config file\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 209
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136637\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n\n        # Case Steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 213
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 35,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136636\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py",
        "start": 17,
        "end": 29,
        "startLoc": {
          "line": 17,
          "column": 11,
          "position": 144
        },
        "endLoc": {
          "line": 29,
          "column": 14,
          "position": 244
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 15,
        "end": 25,
        "startLoc": {
          "line": 15,
          "column": 16,
          "position": 147
        },
        "endLoc": {
          "line": 25,
          "column": 17,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136635\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n        host_name = self.get_hypervisor_hostname()\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 10,
        "end": 29,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 29,
          "column": 3,
          "position": 255
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 34,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 34,
          "column": 13,
          "position": 288
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", value, config_file)\n                data, tty_output, rhsm_output = self.vw_start()\n                res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n                if key == \"step4\":\n                    res2 = self.vw_msg_search(str(data), hypervisorId, exp_exist=False)\n                    self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 64,
        "end": 69,
        "startLoc": {
          "line": 64,
          "column": 15,
          "position": 609
        },
        "endLoc": {
          "line": 69,
          "column": 5,
          "position": 695
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py",
        "start": 81,
        "end": 86,
        "startLoc": {
          "line": 81,
          "column": 22,
          "position": 752
        },
        "endLoc": {
          "line": 86,
          "column": 5,
          "position": 838
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n                else:\n                    res2 = self.vw_msg_search(str(data), hypervisorId, exp_exist=True)\n                results.setdefault(step, []).append(res1)\n                results.setdefault(step, []).append(res2)\n                self.vw_option_del(\"filter_hosts\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 69,
        "end": 74,
        "startLoc": {
          "line": 69,
          "column": 12,
          "position": 703
        },
        "endLoc": {
          "line": 74,
          "column": 15,
          "position": 771
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py",
        "start": 85,
        "end": 90,
        "startLoc": {
          "line": 85,
          "column": 6,
          "position": 835
        },
        "endLoc": {
          "line": 90,
          "column": 23,
          "position": 903
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136632\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config[\"server\"]\n        register_username = register_config[\"username\"]\n        register_password = register_config[\"password\"]\n        register_prefix",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 28,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 28,
          "column": 16,
          "position": 242
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 28,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 28,
          "column": 14,
          "position": 242
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_encrypted_password=xxxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 43,
        "startLoc": {
          "line": 38,
          "column": 12,
          "position": 355
        },
        "endLoc": {
          "line": 43,
          "column": 61,
          "position": 427
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136631\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config[\"server\"]\n        register_username = register_config[\"username\"]\n        register_password = register_config[\"password\"]\n        register_prefix = register_config[\"prefix\"]\n        self.system_unregister(self.ssh_host())\n\n        # Case Steps\n        logger.info(\n            \">>>step1: run virt-who with rhsm_hostname, \"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 12,
        "end": 34,
        "startLoc": {
          "line": 12,
          "column": 15,
          "position": 101
        },
        "endLoc": {
          "line": 34,
          "column": 46,
          "position": 286
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 13,
        "end": 32,
        "startLoc": {
          "line": 13,
          "column": 18,
          "position": 124
        },
        "endLoc": {
          "line": 32,
          "column": 65,
          "position": 272
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 36,
        "end": 42,
        "startLoc": {
          "line": 36,
          "column": 9,
          "position": 292
        },
        "endLoc": {
          "line": 42,
          "column": 5,
          "position": 365
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 35,
        "end": 41,
        "startLoc": {
          "line": 35,
          "column": 12,
          "position": 315
        },
        "endLoc": {
          "line": 41,
          "column": 10,
          "position": 388
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_password=xxxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 41,
        "end": 46,
        "startLoc": {
          "line": 41,
          "column": 18,
          "position": 359
        },
        "endLoc": {
          "line": 46,
          "column": 51,
          "position": 434
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 44,
        "startLoc": {
          "line": 38,
          "column": 16,
          "position": 352
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", \"xxxxxx\", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n        res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: run virt-who with rhsm_password=红帽©¥®ðπ∉\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 48,
        "end": 55,
        "startLoc": {
          "line": 48,
          "column": 16,
          "position": 450
        },
        "endLoc": {
          "line": 55,
          "column": 53,
          "position": 562
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 45,
        "end": 52,
        "startLoc": {
          "line": 45,
          "column": 26,
          "position": 443
        },
        "endLoc": {
          "line": 52,
          "column": 27,
          "position": 555
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: run virt-who with rhsm_password null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 67,
        "end": 72,
        "startLoc": {
          "line": 67,
          "column": 6,
          "position": 697
        },
        "endLoc": {
          "line": 72,
          "column": 55,
          "position": 769
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 66,
        "end": 72,
        "startLoc": {
          "line": 66,
          "column": 6,
          "position": 645
        },
        "endLoc": {
          "line": 72,
          "column": 83,
          "position": 719
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136630\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        compose_id = self.get_config(\"rhel_compose\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config[\"server\"]\n        register_username = register_config[\"username\"]\n        register_password = register_config[\"password\"]\n        register_prefix = register_config[\"prefix\"]\n        self.system_unregister(self.ssh_host())\n\n        # Case Steps\n        logger.info(\n            \">>>step1: run virt-who with rhsm_hostname, rhsm_port, \"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 34,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 34,
          "column": 57,
          "position": 286
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 32,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 32,
          "column": 65,
          "position": 272
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_username=xxxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 36,
        "end": 46,
        "startLoc": {
          "line": 36,
          "column": 9,
          "position": 292
        },
        "endLoc": {
          "line": 46,
          "column": 51,
          "position": 434
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 12,
          "position": 315
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", \"xxxxxx\", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n        res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: run virt-who with rhsm_username=红帽©¥®ðπ∉\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 48,
        "end": 55,
        "startLoc": {
          "line": 48,
          "column": 16,
          "position": 450
        },
        "endLoc": {
          "line": 55,
          "column": 53,
          "position": 562
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 45,
        "end": 52,
        "startLoc": {
          "line": 45,
          "column": 26,
          "position": 443
        },
        "endLoc": {
          "line": 52,
          "column": 27,
          "position": 555
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: run virt-who with rhsm_username null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 76,
        "end": 81,
        "startLoc": {
          "line": 76,
          "column": 13,
          "position": 784
        },
        "endLoc": {
          "line": 81,
          "column": 55,
          "position": 870
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 67,
        "end": 72,
        "startLoc": {
          "line": 67,
          "column": 13,
          "position": 683
        },
        "endLoc": {
          "line": 72,
          "column": 83,
          "position": 719
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ", \" \", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        error_num = 1\n        if \"RHEL-9\" in compose_id:\n            error_num = 2\n        res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)\n        res2 = self.vw_msg_search(rhsm_output, error_msg)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: run virt-who with rhsm_username disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 83,
        "end": 93,
        "startLoc": {
          "line": 83,
          "column": 16,
          "position": 886
        },
        "endLoc": {
          "line": 93,
          "column": 52,
          "position": 1017
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 74,
        "end": 84,
        "startLoc": {
          "line": 74,
          "column": 16,
          "position": 785
        },
        "endLoc": {
          "line": 84,
          "column": 52,
          "position": 916
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)\n        res2 = self.vw_msg_search(rhsm_output, error_msg)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        # Case Result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 94,
        "end": 102,
        "startLoc": {
          "line": 94,
          "column": 16,
          "position": 1026
        },
        "endLoc": {
          "line": 102,
          "column": 2,
          "position": 1134
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 85,
        "end": 93,
        "startLoc": {
          "line": 85,
          "column": 16,
          "position": 925
        },
        "endLoc": {
          "line": 93,
          "column": 2,
          "position": 1033
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-137169\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config[\"server\"]\n        register_username = register_config[\"username\"]\n        register_password = register_config[\"password\"]\n        register_prefix = register_config[\"prefix\"]\n        self.system_unregister(self.ssh_host())\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 30,
          "column": 5,
          "position": 264
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 31,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 31,
          "column": 13,
          "position": 265
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "logger.info(\n                \">>>step1: run virt-who with rhsm_hostname, \"\n                \"rhsm_port, rhsm_prefix good value\"\n            )\n            self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n            self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n            self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n            self.vw_option_add(\"rhsm_username\", register_username, config_file)\n            self.vw_option_add(\"rhsm_password\", register_password, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step1\", []).append(res)\n\n            logger.info(\">>>step2: run virt-who with rhsm_prefix=/xxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 35,
        "end": 48,
        "startLoc": {
          "line": 35,
          "column": 13,
          "position": 295
        },
        "endLoc": {
          "line": 48,
          "column": 47,
          "position": 449
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 44,
        "startLoc": {
          "line": 33,
          "column": 9,
          "position": 280
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ", config_file)\n            data, tty_output, rhsm_output = self.vw_start()\n            if \"stage\" in server_type:\n                res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n                results.setdefault(\"step3\", []).append(res1)\n            else:\n                res1 = self.op_normal_value(\n                    data, exp_error=\"1|2\", exp_thread=1, exp_send=0\n                )\n                res2 = self.vw_msg_search(rhsm_output, \"HTTP error\", exp_exist=True)\n                results.setdefault(\"step3\", []).append(res1)\n                results.setdefault(\"step3\", []).append(res2)\n\n        finally",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 69,
        "end": 82,
        "startLoc": {
          "line": 69,
          "column": 14,
          "position": 725
        },
        "endLoc": {
          "line": 82,
          "column": 8,
          "position": 892
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 55,
        "end": 68,
        "startLoc": {
          "line": 55,
          "column": 4,
          "position": 545
        },
        "endLoc": {
          "line": 68,
          "column": 7,
          "position": 712
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136628\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        compose_id = self.get_config(\"rhel_compose\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config[\"server\"]\n        register_username = register_config[\"username\"]\n        register_password = register_config[\"password\"]\n        register_prefix = register_config[\"prefix\"]\n        self.system_unregister(self.ssh_host())\n        self.vw_option_disable(\"port\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 31,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 31,
          "column": 7,
          "position": 280
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 30,
          "column": 9,
          "position": 268
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n            self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n            self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n            self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n            self.vw_option_add(\"rhsm_username\", register_username, config_file)\n            self.vw_option_add(\"rhsm_password\", register_password, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step1\", []).append(res)\n\n            logger.info(\">>>step2: run virt-who with rhsm_port=123\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 37,
        "end": 47,
        "startLoc": {
          "line": 37,
          "column": 13,
          "position": 304
        },
        "endLoc": {
          "line": 47,
          "column": 44,
          "position": 446
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 12,
          "position": 315
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136627\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        compose_id = self.get_config(\"rhel_compose\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config[\"server\"]\n        register_username = register_config[\"username\"]\n        register_password = register_config[\"password\"]\n        register_prefix = register_config[\"prefix\"]\n        self.system_unregister(self.ssh_host())\n        self.vw_option_disable(\"hostname\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 31,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 31,
          "column": 11,
          "position": 280
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 30,
          "column": 9,
          "position": 268
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "logger.info(\n                \">>>step1: run virt-who with rhsm_hostname, rhsm_port, \"\n                \"rhsm_prefix good value\"\n            )\n            self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n            self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n            self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n            self.vw_option_add(\"rhsm_username\", register_username, config_file)\n            self.vw_option_add(\"rhsm_password\", register_password, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step1\", []).append(res)\n\n            logger.info(\">>>step2: run virt-who with rhsm_hostname=xxxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py",
        "start": 35,
        "end": 48,
        "startLoc": {
          "line": 35,
          "column": 13,
          "position": 295
        },
        "endLoc": {
          "line": 48,
          "column": 51,
          "position": 449
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 44,
        "startLoc": {
          "line": 33,
          "column": 9,
          "position": 280
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", config_file)\n            data, tty_output, rhsm_output = self.vw_start()\n            error_num = 1\n            if \"RHEL-9\" in compose_id:\n                error_num = 2\n            res1 = self.op_normal_value(\n                data, exp_error=error_num, exp_thread=1, exp_send=0\n            )\n            res2 = self.vw_msg_search(rhsm_output, \"Name or service not known\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py",
        "start": 49,
        "end": 57,
        "startLoc": {
          "line": 49,
          "column": 9,
          "position": 461
        },
        "endLoc": {
          "line": 57,
          "column": 28,
          "position": 550
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 74,
        "end": 80,
        "startLoc": {
          "line": 74,
          "column": 4,
          "position": 788
        },
        "endLoc": {
          "line": 80,
          "column": 10,
          "position": 873
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136592\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        msg_list",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 11,
          "position": 125
        },
        "endLoc": {
          "line": 26,
          "column": 9,
          "position": 223
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 14,
        "end": 28,
        "startLoc": {
          "line": 14,
          "column": 7,
          "position": 138
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        for",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py",
        "start": 35,
        "end": 40,
        "startLoc": {
          "line": 35,
          "column": 2,
          "position": 314
        },
        "endLoc": {
          "line": 40,
          "column": 4,
          "position": 383
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 43,
        "startLoc": {
          "line": 38,
          "column": 2,
          "position": 354
        },
        "endLoc": {
          "line": 43,
          "column": 7,
          "position": 423
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136591\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: password option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 43,
        "startLoc": {
          "line": 38,
          "column": 42,
          "position": 257
        },
        "endLoc": {
          "line": 43,
          "column": 43,
          "position": 329
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step2\", []).append(res1)\n            results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: password option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 54,
        "end": 60,
        "startLoc": {
          "line": 54,
          "column": 8,
          "position": 450
        },
        "endLoc": {
          "line": 60,
          "column": 46,
          "position": 524
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 53,
        "end": 59,
        "startLoc": {
          "line": 53,
          "column": 2,
          "position": 507
        },
        "endLoc": {
          "line": 59,
          "column": 91,
          "position": 581
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_thread=1, exp_send=0\n                )\n                res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step3\", []).append(res1)\n            results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: password option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 80,
        "end": 86,
        "startLoc": {
          "line": 80,
          "column": 8,
          "position": 732
        },
        "endLoc": {
          "line": 86,
          "column": 42,
          "position": 806
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 66,
        "end": 72,
        "startLoc": {
          "line": 66,
          "column": 6,
          "position": 645
        },
        "endLoc": {
          "line": 72,
          "column": 83,
          "position": 719
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step4\", []).append(res1)\n            results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: password option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 97,
        "end": 103,
        "startLoc": {
          "line": 97,
          "column": 8,
          "position": 927
        },
        "endLoc": {
          "line": 103,
          "column": 39,
          "position": 1001
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 79,
        "end": 85,
        "startLoc": {
          "line": 79,
          "column": 8,
          "position": 783
        },
        "endLoc": {
          "line": 85,
          "column": 93,
          "position": 857
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step7\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 144,
        "end": 151,
        "startLoc": {
          "line": 144,
          "column": 3,
          "position": 1459
        },
        "endLoc": {
          "line": 151,
          "column": 8,
          "position": 1538
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 125,
        "end": 132,
        "startLoc": {
          "line": 125,
          "column": 14,
          "position": 1241
        },
        "endLoc": {
          "line": 132,
          "column": 8,
          "position": 1320
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136590\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: username option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 43,
        "startLoc": {
          "line": 38,
          "column": 42,
          "position": 257
        },
        "endLoc": {
          "line": 43,
          "column": 43,
          "position": 329
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "res1 = self.op_normal_value(\n                    data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0\n                )\n                res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)\n        else:\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, error_msg",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 64,
        "end": 72,
        "startLoc": {
          "line": 64,
          "column": 17,
          "position": 611
        },
        "endLoc": {
          "line": 72,
          "column": 10,
          "position": 708
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 74,
        "end": 82,
        "startLoc": {
          "line": 74,
          "column": 17,
          "position": 661
        },
        "endLoc": {
          "line": 82,
          "column": 9,
          "position": 758
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_option_update_value(option_tested, \"\", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step4\", []).append(res1)\n        else:\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, error_msg",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 76,
        "end": 89,
        "startLoc": {
          "line": 76,
          "column": 42,
          "position": 757
        },
        "endLoc": {
          "line": 89,
          "column": 10,
          "position": 903
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 86,
        "end": 99,
        "startLoc": {
          "line": 86,
          "column": 42,
          "position": 807
        },
        "endLoc": {
          "line": 99,
          "column": 9,
          "position": 953
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_option_disable(option_tested, config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step5\", []).append(res1)\n        else:\n            msg_list",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 93,
        "end": 103,
        "startLoc": {
          "line": 93,
          "column": 39,
          "position": 952
        },
        "endLoc": {
          "line": 103,
          "column": 9,
          "position": 1053
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 103,
        "end": 113,
        "startLoc": {
          "line": 103,
          "column": 39,
          "position": 1002
        },
        "endLoc": {
          "line": 113,
          "column": 12,
          "position": 1103
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        config_name_ok = \"virtwho-config-ok\"\n        config_file_ok = \"/etc/virt-who.d/{0}.conf\".format(config_name_ok)\n        self.vw_etc_d_mode_create(config_name_ok, config_file_ok)\n        self.vw_option_disable(option_tested, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step6\", []).append(res1)\n        else:\n            msg_list",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 111,
        "end": 124,
        "startLoc": {
          "line": 111,
          "column": 64,
          "position": 1153
        },
        "endLoc": {
          "line": 124,
          "column": 9,
          "position": 1287
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 121,
        "end": 134,
        "startLoc": {
          "line": 121,
          "column": 64,
          "position": 1203
        },
        "endLoc": {
          "line": 134,
          "column": 12,
          "position": 1337
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        self.vw_option_enable(option_tested, config_file)\n        self.vw_option_update_value(option_tested, \"\", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step7\", []).append(res1)\n        else:\n            res1 = self.op_normal_value(data, exp_error=\"1|2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 130,
        "end": 141,
        "startLoc": {
          "line": 130,
          "column": 61,
          "position": 1383
        },
        "endLoc": {
          "line": 141,
          "column": 6,
          "position": 1514
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 142,
        "end": 154,
        "startLoc": {
          "line": 142,
          "column": 61,
          "position": 1437
        },
        "endLoc": {
          "line": 154,
          "column": 8,
          "position": 1570
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136589\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: server option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 20,
        "end": 28,
        "startLoc": {
          "line": 20,
          "column": 9,
          "position": 157
        },
        "endLoc": {
          "line": 28,
          "column": 40,
          "position": 231
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: server option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 40,
          "position": 232
        },
        "endLoc": {
          "line": 33,
          "column": 41,
          "position": 304
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        else:\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0\n            )\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: server option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 46,
        "end": 55,
        "startLoc": {
          "line": 46,
          "column": 13,
          "position": 402
        },
        "endLoc": {
          "line": 55,
          "column": 44,
          "position": 499
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 51,
        "end": 59,
        "startLoc": {
          "line": 51,
          "column": 5,
          "position": 427
        },
        "endLoc": {
          "line": 59,
          "column": 91,
          "position": 581
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: server option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 75,
        "end": 82,
        "startLoc": {
          "line": 75,
          "column": 13,
          "position": 656
        },
        "endLoc": {
          "line": 82,
          "column": 40,
          "position": 746
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 79,
        "end": 72,
        "startLoc": {
          "line": 79,
          "column": 17,
          "position": 716
        },
        "endLoc": {
          "line": 72,
          "column": 83,
          "position": 719
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: server option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 100,
        "end": 106,
        "startLoc": {
          "line": 100,
          "column": 2,
          "position": 906
        },
        "endLoc": {
          "line": 106,
          "column": 37,
          "position": 975
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 79,
        "end": 85,
        "startLoc": {
          "line": 79,
          "column": 2,
          "position": 788
        },
        "endLoc": {
          "line": 85,
          "column": 93,
          "position": 857
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n            msg_list = [\n                \"Name or service not known|\"\n                \"Connection timed out|\"\n                \"Failed to connect|\"\n                \"Error in .* backend\"\n            ]\n            res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        else:\n            msg_list = [\"SERVER.* not set|virt-who can't be started|No host supplied\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 112,
        "end": 127,
        "startLoc": {
          "line": 112,
          "column": 13,
          "position": 1026
        },
        "endLoc": {
          "line": 127,
          "column": 8,
          "position": 1166
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 88,
        "end": 103,
        "startLoc": {
          "line": 88,
          "column": 13,
          "position": 800
        },
        "endLoc": {
          "line": 103,
          "column": 8,
          "position": 940
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: server option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 122,
        "end": 130,
        "startLoc": {
          "line": 122,
          "column": 62,
          "position": 1108
        },
        "endLoc": {
          "line": 130,
          "column": 62,
          "position": 1201
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 103,
        "end": 111,
        "startLoc": {
          "line": 103,
          "column": 47,
          "position": 1059
        },
        "endLoc": {
          "line": 111,
          "column": 64,
          "position": 1152
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step6\", []).append(res1)\n        results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: server option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 137,
        "end": 142,
        "startLoc": {
          "line": 137,
          "column": 8,
          "position": 1289
        },
        "endLoc": {
          "line": 142,
          "column": 59,
          "position": 1361
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 125,
        "end": 130,
        "startLoc": {
          "line": 125,
          "column": 6,
          "position": 1310
        },
        "endLoc": {
          "line": 130,
          "column": 61,
          "position": 1382
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\", []).append(res1)\n        results.setdefault(\"step7\", []).append(res2)\n\n        # Case Result\n        notes",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 152,
        "end": 158,
        "startLoc": {
          "line": 152,
          "column": 9,
          "position": 1432
        },
        "endLoc": {
          "line": 158,
          "column": 6,
          "position": 1517
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 153,
        "end": 161,
        "startLoc": {
          "line": 153,
          "column": 13,
          "position": 1555
        },
        "endLoc": {
          "line": 161,
          "column": 5,
          "position": 1644
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136588\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: env option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 25,
        "end": 33,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 212
        },
        "endLoc": {
          "line": 33,
          "column": 37,
          "position": 286
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: env option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 37,
          "position": 287
        },
        "endLoc": {
          "line": 38,
          "column": 38,
          "position": 359
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ", \"xxxxxx\", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"env.*differs|env.* is different|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: env option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 39,
        "end": 49,
        "startLoc": {
          "line": 39,
          "column": 14,
          "position": 368
        },
        "endLoc": {
          "line": 49,
          "column": 41,
          "position": 493
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 89,
        "end": 59,
        "startLoc": {
          "line": 89,
          "column": 6,
          "position": 893
        },
        "endLoc": {
          "line": 59,
          "column": 91,
          "position": 581
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"codec can't decode|Communication with subscription manager failed|env.*differs\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: env option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 50,
        "end": 60,
        "startLoc": {
          "line": 50,
          "column": 12,
          "position": 508
        },
        "endLoc": {
          "line": 60,
          "column": 37,
          "position": 627
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 61,
        "end": 72,
        "startLoc": {
          "line": 61,
          "column": 13,
          "position": 598
        },
        "endLoc": {
          "line": 72,
          "column": 83,
          "position": 719
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: env option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 61,
        "end": 71,
        "startLoc": {
          "line": 61,
          "column": 12,
          "position": 642
        },
        "endLoc": {
          "line": 71,
          "column": 34,
          "position": 761
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 74,
        "end": 85,
        "startLoc": {
          "line": 74,
          "column": 13,
          "position": 736
        },
        "endLoc": {
          "line": 85,
          "column": 93,
          "position": 857
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: env option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 77,
        "end": 82,
        "startLoc": {
          "line": 77,
          "column": 8,
          "position": 820
        },
        "endLoc": {
          "line": 82,
          "column": 59,
          "position": 892
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 105,
        "end": 111,
        "startLoc": {
          "line": 105,
          "column": 8,
          "position": 1078
        },
        "endLoc": {
          "line": 111,
          "column": 64,
          "position": 1152
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step6\", []).append(res1)\n        results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: env option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 90,
        "end": 96,
        "startLoc": {
          "line": 90,
          "column": 9,
          "position": 967
        },
        "endLoc": {
          "line": 96,
          "column": 56,
          "position": 1056
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 136,
        "end": 130,
        "startLoc": {
          "line": 136,
          "column": 56,
          "position": 1272
        },
        "endLoc": {
          "line": 130,
          "column": 61,
          "position": 1382
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\n            \"env not in|env.* not set|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 98,
        "end": 105,
        "startLoc": {
          "line": 98,
          "column": 3,
          "position": 1079
        },
        "endLoc": {
          "line": 105,
          "column": 8,
          "position": 1169
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 86,
        "end": 93,
        "startLoc": {
          "line": 86,
          "column": 14,
          "position": 931
        },
        "endLoc": {
          "line": 93,
          "column": 8,
          "position": 1021
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\", []).append(res1)\n        results.setdefault(\"step7\", []).append(res2)\n\n        # Case Result\n        notes = list()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 102,
        "end": 110,
        "startLoc": {
          "line": 102,
          "column": 9,
          "position": 1115
        },
        "endLoc": {
          "line": 110,
          "column": 14,
          "position": 1212
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 151,
        "end": 159,
        "startLoc": {
          "line": 151,
          "column": 9,
          "position": 1429
        },
        "endLoc": {
          "line": 159,
          "column": 3,
          "position": 1526
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136587\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: owner option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 19,
        "end": 27,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 142
        },
        "endLoc": {
          "line": 27,
          "column": 39,
          "position": 216
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: owner option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 39,
          "position": 217
        },
        "endLoc": {
          "line": 32,
          "column": 40,
          "position": 289
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ", \"xxxxxx\", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"owner.* is different|\" \"Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: skip this step because owner cannot be set to no-ascci\")\n        # logger.info(\">>>step3: owner option is 红帽€467aa value\")",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 44,
        "startLoc": {
          "line": 33,
          "column": 14,
          "position": 298
        },
        "endLoc": {
          "line": 44,
          "column": 58,
          "position": 429
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 89,
        "end": 59,
        "startLoc": {
          "line": 89,
          "column": 8,
          "position": 770
        },
        "endLoc": {
          "line": 59,
          "column": 69,
          "position": 556
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"owner not in|\"\n            \"owner.* not set|\"\n            \"virt-who can't be started|\"\n            \"Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: owner option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 51,
        "end": 64,
        "startLoc": {
          "line": 51,
          "column": 12,
          "position": 464
        },
        "endLoc": {
          "line": 64,
          "column": 36,
          "position": 592
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 70,
        "end": 85,
        "startLoc": {
          "line": 70,
          "column": 13,
          "position": 601
        },
        "endLoc": {
          "line": 85,
          "column": 93,
          "position": 857
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: owner option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 67,
        "end": 72,
        "startLoc": {
          "line": 67,
          "column": 9,
          "position": 624
        },
        "endLoc": {
          "line": 72,
          "column": 61,
          "position": 710
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 77,
        "end": 111,
        "startLoc": {
          "line": 77,
          "column": 9,
          "position": 806
        },
        "endLoc": {
          "line": 111,
          "column": 64,
          "position": 1152
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step6\", []).append(res1)\n        results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: owner option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 85,
        "end": 91,
        "startLoc": {
          "line": 85,
          "column": 9,
          "position": 803
        },
        "endLoc": {
          "line": 91,
          "column": 58,
          "position": 892
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 136,
        "end": 130,
        "startLoc": {
          "line": 136,
          "column": 56,
          "position": 1272
        },
        "endLoc": {
          "line": 130,
          "column": 61,
          "position": 1382
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\", []).append(res1)\n        results.setdefault(\"step7\", []).append(res2)\n\n        # Case Result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 95,
        "end": 101,
        "startLoc": {
          "line": 95,
          "column": 9,
          "position": 941
        },
        "endLoc": {
          "line": 101,
          "column": 2,
          "position": 1031
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 153,
        "end": 161,
        "startLoc": {
          "line": 153,
          "column": 13,
          "position": 1555
        },
        "endLoc": {
          "line": 161,
          "column": 2,
          "position": 1649
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136586\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: type option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 20,
        "end": 28,
        "startLoc": {
          "line": 20,
          "column": 9,
          "position": 154
        },
        "endLoc": {
          "line": 28,
          "column": 38,
          "position": 228
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 55,
        "end": 60,
        "startLoc": {
          "line": 55,
          "column": 8,
          "position": 597
        },
        "endLoc": {
          "line": 60,
          "column": 7,
          "position": 665
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 94,
        "end": 99,
        "startLoc": {
          "line": 94,
          "column": 2,
          "position": 946
        },
        "endLoc": {
          "line": 99,
          "column": 14,
          "position": 1014
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: type option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 55,
        "end": 60,
        "startLoc": {
          "line": 55,
          "column": 2,
          "position": 602
        },
        "endLoc": {
          "line": 60,
          "column": 60,
          "position": 669
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 105,
        "end": 111,
        "startLoc": {
          "line": 105,
          "column": 2,
          "position": 1083
        },
        "endLoc": {
          "line": 111,
          "column": 64,
          "position": 1152
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        logger.warning(\n            \"libvirt-local mode will be used to instead when type option is disabled\"\n        )\n        config_name_ok = \"virtwho-config-ok\"\n        config_file_ok = \"/etc/virt-who.d/{0}.conf\".format(config_name_ok)\n        self.vw_etc_d_mode_create(config_name_ok, config_file_ok)\n        self.vw_option_disable(option_tested, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"Error in .* backend\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 60,
        "end": 69,
        "startLoc": {
          "line": 60,
          "column": 60,
          "position": 670
        },
        "endLoc": {
          "line": 69,
          "column": 22,
          "position": 751
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 72,
        "end": 82,
        "startLoc": {
          "line": 72,
          "column": 61,
          "position": 711
        },
        "endLoc": {
          "line": 82,
          "column": 16,
          "position": 794
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step6\", []).append(res1)\n        results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: type option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 69,
        "end": 75,
        "startLoc": {
          "line": 69,
          "column": 22,
          "position": 752
        },
        "endLoc": {
          "line": 75,
          "column": 57,
          "position": 841
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 136,
        "end": 130,
        "startLoc": {
          "line": 136,
          "column": 56,
          "position": 1272
        },
        "endLoc": {
          "line": 130,
          "column": 61,
          "position": 1382
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136585\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: header option is space value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 40,
          "position": 255
        },
        "endLoc": {
          "line": 38,
          "column": 41,
          "position": 327
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step3\", []).append(res1)\n\n        logger.info(\">>>step4: header option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 53,
        "end": 58,
        "startLoc": {
          "line": 53,
          "column": 13,
          "position": 534
        },
        "endLoc": {
          "line": 58,
          "column": 40,
          "position": 606
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 57,
        "end": 62,
        "startLoc": {
          "line": 57,
          "column": 4,
          "position": 585
        },
        "endLoc": {
          "line": 62,
          "column": 48,
          "position": 657
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if vw_pkg[9:15] >= \"0.25.7\":\n            res1 = self.op_normal_value(data, exp_error=3, exp_thread=0, exp_send=0)\n        else:\n            logger.warning(\n                \"libvirt-local mode will be used when run without header option\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 75,
        "end": 81,
        "startLoc": {
          "line": 75,
          "column": 14,
          "position": 793
        },
        "endLoc": {
          "line": 81,
          "column": 65,
          "position": 868
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 59,
        "end": 65,
        "startLoc": {
          "line": 59,
          "column": 5,
          "position": 618
        },
        "endLoc": {
          "line": 65,
          "column": 72,
          "position": 693
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"no section headers\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list)\n        results.setdefault(\"step7\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 104,
        "end": 109,
        "startLoc": {
          "line": 104,
          "column": 5,
          "position": 1137
        },
        "endLoc": {
          "line": 109,
          "column": 8,
          "position": 1218
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 94,
        "end": 99,
        "startLoc": {
          "line": 94,
          "column": 14,
          "position": 998
        },
        "endLoc": {
          "line": 99,
          "column": 8,
          "position": 1079
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136709\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2013_validate_unreachable_proxy_by_config.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136581\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "# Case Steps\n        logger.info(\">>>step1: password option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: password option is wrong value\")\n        self.vw_option_update_value(option_tested, \"xxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 30,
        "end": 37,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 268
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 359
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 37,
        "end": 44,
        "startLoc": {
          "line": 37,
          "column": 9,
          "position": 249
        },
        "endLoc": {
          "line": 44,
          "column": 9,
          "position": 340
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step2\", []).append(res1)\n            results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: password option is 红帽€467aa value\")\n        self.vw_option_update_value(option_tested, \"红帽€467aa\", sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 49,
        "end": 57,
        "startLoc": {
          "line": 49,
          "column": 13,
          "position": 466
        },
        "endLoc": {
          "line": 57,
          "column": 15,
          "position": 570
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 53,
        "end": 61,
        "startLoc": {
          "line": 53,
          "column": 13,
          "position": 434
        },
        "endLoc": {
          "line": 61,
          "column": 12,
          "position": 538
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, password value is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step2\", []).append(res1)\n        else:\n            msg_list = [\n                \"Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied\"\n            ]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step3\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 57,
        "end": 73,
        "startLoc": {
          "line": 57,
          "column": 11,
          "position": 568
        },
        "endLoc": {
          "line": 73,
          "column": 8,
          "position": 729
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 37,
        "end": 53,
        "startLoc": {
          "line": 37,
          "column": 8,
          "position": 360
        },
        "endLoc": {
          "line": 53,
          "column": 8,
          "position": 521
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step3\", []).append(res1)\n            results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: password option is null value\")\n        self.vw_option_update_value(option_tested, \"\", sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 68,
        "end": 77,
        "startLoc": {
          "line": 68,
          "column": 13,
          "position": 671
        },
        "endLoc": {
          "line": 77,
          "column": 15,
          "position": 778
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 74,
        "end": 87,
        "startLoc": {
          "line": 74,
          "column": 13,
          "position": 653
        },
        "endLoc": {
          "line": 87,
          "column": 12,
          "position": 820
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step4\", []).append(res1)\n            results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: password option is disable\")\n        self.vw_option_disable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 86,
        "end": 95,
        "startLoc": {
          "line": 86,
          "column": 47,
          "position": 875
        },
        "endLoc": {
          "line": 95,
          "column": 15,
          "position": 979
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 98,
        "end": 104,
        "startLoc": {
          "line": 98,
          "column": 62,
          "position": 882
        },
        "endLoc": {
          "line": 104,
          "column": 12,
          "position": 1012
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 102,
        "end": 109,
        "startLoc": {
          "line": 102,
          "column": 8,
          "position": 1054
        },
        "endLoc": {
          "line": 109,
          "column": 8,
          "position": 1134
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 84,
        "end": 91,
        "startLoc": {
          "line": 84,
          "column": 8,
          "position": 853
        },
        "endLoc": {
          "line": 91,
          "column": 8,
          "position": 933
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step5\", []).append(res1)\n            results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: password option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 104,
        "end": 112,
        "startLoc": {
          "line": 104,
          "column": 47,
          "position": 1076
        },
        "endLoc": {
          "line": 112,
          "column": 64,
          "position": 1169
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 103,
        "end": 111,
        "startLoc": {
          "line": 103,
          "column": 47,
          "position": 1059
        },
        "endLoc": {
          "line": 111,
          "column": 64,
          "position": 1152
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step6\", []).append(res1)\n            results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: password option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 125,
        "end": 133,
        "startLoc": {
          "line": 125,
          "column": 21,
          "position": 1310
        },
        "endLoc": {
          "line": 133,
          "column": 61,
          "position": 1403
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 136,
        "end": 130,
        "startLoc": {
          "line": 136,
          "column": 56,
          "position": 1272
        },
        "endLoc": {
          "line": 130,
          "column": 61,
          "position": 1382
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step7\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 135,
        "end": 142,
        "startLoc": {
          "line": 135,
          "column": 3,
          "position": 1426
        },
        "endLoc": {
          "line": 142,
          "column": 8,
          "position": 1505
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 116,
        "end": 123,
        "startLoc": {
          "line": 116,
          "column": 14,
          "position": 1208
        },
        "endLoc": {
          "line": 123,
          "column": 8,
          "position": 1287
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step7\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 142,
        "end": 149,
        "startLoc": {
          "line": 142,
          "column": 8,
          "position": 1506
        },
        "endLoc": {
          "line": 149,
          "column": 8,
          "position": 1586
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 123,
        "end": 130,
        "startLoc": {
          "line": 123,
          "column": 8,
          "position": 1288
        },
        "endLoc": {
          "line": 130,
          "column": 8,
          "position": 1368
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step7\", []).append(res1)\n            results.setdefault(\"step7\", []).append(res2)\n\n        # Case Result\n        notes = list()\n        if \"rhevm\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 144,
        "end": 154,
        "startLoc": {
          "line": 144,
          "column": 21,
          "position": 1528
        },
        "endLoc": {
          "line": 154,
          "column": 8,
          "position": 1631
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 151,
        "end": 159,
        "startLoc": {
          "line": 151,
          "column": 9,
          "position": 1429
        },
        "endLoc": {
          "line": 159,
          "column": 6,
          "position": 1528
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136580\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\", \"kubevirt\"):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), \"virt-who\")[9:15] >= \"0.23.3\":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == \"libvirt-remote\":\n            hypervisor_type = \"libvirt\"\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        sysconfig_file = \"/etc/sysconfig/virt-who\"\n        guest_uuid = self.get_hypervisor_guestuuid()\n        option_tested = \"VIRTWHO_{0}_USERNAME\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 23,
          "position": 248
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 23,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "# Case Steps\n        logger.info(\">>>step1: username option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: username option is wrong value\")\n        self.vw_option_update_value(option_tested, \"xxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 30,
        "end": 37,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 268
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 359
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 37,
        "end": 44,
        "startLoc": {
          "line": 37,
          "column": 9,
          "position": 249
        },
        "endLoc": {
          "line": 44,
          "column": 9,
          "position": 340
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "msg_list = [\n            \"Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: username option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 39,
        "end": 47,
        "startLoc": {
          "line": 39,
          "column": 9,
          "position": 383
        },
        "endLoc": {
          "line": 47,
          "column": 46,
          "position": 482
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 46,
        "end": 59,
        "startLoc": {
          "line": 46,
          "column": 13,
          "position": 453
        },
        "endLoc": {
          "line": 59,
          "column": 91,
          "position": 581
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 48,
        "end": 55,
        "startLoc": {
          "line": 48,
          "column": 11,
          "position": 494
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 581
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 37,
        "end": 44,
        "startLoc": {
          "line": 37,
          "column": 8,
          "position": 360
        },
        "endLoc": {
          "line": 44,
          "column": 8,
          "position": 447
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "msg_list = [\n            \"Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: username option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 50,
        "end": 58,
        "startLoc": {
          "line": 50,
          "column": 9,
          "position": 517
        },
        "endLoc": {
          "line": 58,
          "column": 42,
          "position": 616
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 66,
        "end": 72,
        "startLoc": {
          "line": 66,
          "column": 13,
          "position": 661
        },
        "endLoc": {
          "line": 72,
          "column": 83,
          "position": 719
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_option_update_value(option_tested, \"\", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step4\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 58,
        "end": 68,
        "startLoc": {
          "line": 58,
          "column": 42,
          "position": 617
        },
        "endLoc": {
          "line": 68,
          "column": 47,
          "position": 726
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 76,
        "end": 86,
        "startLoc": {
          "line": 76,
          "column": 42,
          "position": 765
        },
        "endLoc": {
          "line": 86,
          "column": 47,
          "position": 874
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step4\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 66,
        "end": 73,
        "startLoc": {
          "line": 66,
          "column": 8,
          "position": 705
        },
        "endLoc": {
          "line": 73,
          "column": 8,
          "position": 785
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 101,
        "end": 108,
        "startLoc": {
          "line": 101,
          "column": 8,
          "position": 1037
        },
        "endLoc": {
          "line": 108,
          "column": 8,
          "position": 1117
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step4\", []).append(res1)\n            results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: username option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 68,
        "end": 76,
        "startLoc": {
          "line": 68,
          "column": 47,
          "position": 727
        },
        "endLoc": {
          "line": 76,
          "column": 39,
          "position": 820
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 98,
        "end": 85,
        "startLoc": {
          "line": 98,
          "column": 62,
          "position": 882
        },
        "endLoc": {
          "line": 85,
          "column": 93,
          "position": 857
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_option_disable(option_tested, sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step5\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 76,
        "end": 86,
        "startLoc": {
          "line": 76,
          "column": 39,
          "position": 821
        },
        "endLoc": {
          "line": 86,
          "column": 47,
          "position": 927
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 94,
        "end": 104,
        "startLoc": {
          "line": 94,
          "column": 39,
          "position": 969
        },
        "endLoc": {
          "line": 104,
          "column": 47,
          "position": 1075
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step5\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step5\", []).append(res1)\n            results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: username option is disable but another config is ok\")\n        config_name",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 79,
        "end": 95,
        "startLoc": {
          "line": 79,
          "column": 2,
          "position": 856
        },
        "endLoc": {
          "line": 95,
          "column": 12,
          "position": 1025
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 96,
        "end": 112,
        "startLoc": {
          "line": 96,
          "column": 2,
          "position": 987
        },
        "endLoc": {
          "line": 112,
          "column": 15,
          "position": 1156
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        self.vw_option_disable(option_tested, sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step6\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 94,
        "end": 107,
        "startLoc": {
          "line": 94,
          "column": 64,
          "position": 1022
        },
        "endLoc": {
          "line": 107,
          "column": 21,
          "position": 1161
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 112,
        "end": 125,
        "startLoc": {
          "line": 112,
          "column": 64,
          "position": 1170
        },
        "endLoc": {
          "line": 125,
          "column": 21,
          "position": 1309
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step6\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 100,
        "end": 109,
        "startLoc": {
          "line": 100,
          "column": 2,
          "position": 1090
        },
        "endLoc": {
          "line": 109,
          "column": 8,
          "position": 1180
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 117,
        "end": 125,
        "startLoc": {
          "line": 117,
          "column": 2,
          "position": 1221
        },
        "endLoc": {
          "line": 125,
          "column": 6,
          "position": 1309
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step6\", []).append(res1)\n            results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: username option is null but another config is ok\")\n        self.vw_option_enable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 107,
        "end": 116,
        "startLoc": {
          "line": 107,
          "column": 21,
          "position": 1162
        },
        "endLoc": {
          "line": 116,
          "column": 15,
          "position": 1266
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 136,
        "end": 131,
        "startLoc": {
          "line": 136,
          "column": 56,
          "position": 1272
        },
        "endLoc": {
          "line": 131,
          "column": 12,
          "position": 1393
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        self.vw_option_enable(option_tested, sysconfig_file)\n        self.vw_option_update_value(option_tested, \"\", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step7\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 115,
        "end": 126,
        "startLoc": {
          "line": 115,
          "column": 61,
          "position": 1256
        },
        "endLoc": {
          "line": 126,
          "column": 21,
          "position": 1379
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 133,
        "end": 144,
        "startLoc": {
          "line": 133,
          "column": 61,
          "position": 1404
        },
        "endLoc": {
          "line": 144,
          "column": 21,
          "position": 1527
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step7\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 124,
        "end": 131,
        "startLoc": {
          "line": 124,
          "column": 8,
          "position": 1358
        },
        "endLoc": {
          "line": 131,
          "column": 8,
          "position": 1438
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 105,
        "end": 112,
        "startLoc": {
          "line": 105,
          "column": 8,
          "position": 1140
        },
        "endLoc": {
          "line": 112,
          "column": 8,
          "position": 1220
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step7\", []).append(res1)\n            results.setdefault(\"step7\", []).append(res2)\n\n        # Case Result\n        notes = list()\n        if \"libvirt\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 126,
        "end": 136,
        "startLoc": {
          "line": 126,
          "column": 21,
          "position": 1380
        },
        "endLoc": {
          "line": 136,
          "column": 10,
          "position": 1483
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 151,
        "end": 159,
        "startLoc": {
          "line": 151,
          "column": 9,
          "position": 1429
        },
        "endLoc": {
          "line": 159,
          "column": 6,
          "position": 1528
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136579\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\", \"kubevirt\"):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), \"virt-who\")[9:15] >= \"0.23.3\":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == \"libvirt-remote\":\n            hypervisor_type = \"libvirt\"\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        sysconfig_file = \"/etc/sysconfig/virt-who\"\n        guest_uuid = self.get_hypervisor_guestuuid()\n        option_tested = \"VIRTWHO_{0}_SERVER\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 21,
          "position": 248
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 23,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n\n        # Case Steps\n        logger.info(\">>>step1: server option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: server option is wrong value\")\n        self.vw_option_update_value(option_tested, \"xxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 264
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 359
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 25,
        "end": 34,
        "startLoc": {
          "line": 25,
          "column": 12,
          "position": 220
        },
        "endLoc": {
          "line": 34,
          "column": 9,
          "position": 315
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: server option is 红帽€467aa value\")\n        self.vw_option_update_value(option_tested, \"红帽€467aa\", sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 41,
        "end": 48,
        "startLoc": {
          "line": 41,
          "column": 9,
          "position": 393
        },
        "endLoc": {
          "line": 48,
          "column": 15,
          "position": 496
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 48,
        "end": 56,
        "startLoc": {
          "line": 48,
          "column": 13,
          "position": 463
        },
        "endLoc": {
          "line": 56,
          "column": 12,
          "position": 513
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: server option is null value\")\n        self.vw_option_update_value(option_tested, \"\", sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 52,
        "end": 59,
        "startLoc": {
          "line": 52,
          "column": 9,
          "position": 527
        },
        "endLoc": {
          "line": 59,
          "column": 15,
          "position": 630
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 74,
        "end": 83,
        "startLoc": {
          "line": 74,
          "column": 13,
          "position": 653
        },
        "endLoc": {
          "line": 83,
          "column": 12,
          "position": 760
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        else:\n            msg_list = [\"SERVER.* not set|virt-who can't be started|No host supplied\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: server option is disable\")\n        self.vw_option_disable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 67,
        "end": 80,
        "startLoc": {
          "line": 67,
          "column": 13,
          "position": 683
        },
        "endLoc": {
          "line": 80,
          "column": 15,
          "position": 847
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 94,
        "end": 107,
        "startLoc": {
          "line": 94,
          "column": 13,
          "position": 822
        },
        "endLoc": {
          "line": 107,
          "column": 12,
          "position": 986
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n            msg_list = [\n                \"Name or service not known|Connection timed out|Failed to connect|Error in .* backend\"\n            ]\n            res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        else:\n            msg_list = [\"SERVER.* not set|virt-who can't be started|No host supplied\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: server option is disable but another config is ok\")\n        config_name",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 85,
        "end": 101,
        "startLoc": {
          "line": 85,
          "column": 13,
          "position": 887
        },
        "endLoc": {
          "line": 101,
          "column": 12,
          "position": 1057
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 64,
        "end": 131,
        "startLoc": {
          "line": 64,
          "column": 13,
          "position": 670
        },
        "endLoc": {
          "line": 131,
          "column": 15,
          "position": 1205
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"SERVER.* not set|Error in .* backend|No host supplied\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step6\", []).append(res1)\n        results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: server option is null but another config is ok\")\n        self.vw_option_enable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 104,
        "end": 113,
        "startLoc": {
          "line": 104,
          "column": 15,
          "position": 1095
        },
        "endLoc": {
          "line": 113,
          "column": 15,
          "position": 1224
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 134,
        "end": 143,
        "startLoc": {
          "line": 134,
          "column": 12,
          "position": 1243
        },
        "endLoc": {
          "line": 143,
          "column": 12,
          "position": 1372
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"SERVER.* not set|Error in .* backend|No host supplied\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 114,
        "end": 119,
        "startLoc": {
          "line": 114,
          "column": 3,
          "position": 1236
        },
        "endLoc": {
          "line": 119,
          "column": 8,
          "position": 1322
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 104,
        "end": 139,
        "startLoc": {
          "line": 104,
          "column": 14,
          "position": 1092
        },
        "endLoc": {
          "line": 139,
          "column": 8,
          "position": 1326
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\", []).append(res1)\n        results.setdefault(\"step7\", []).append(res2)\n\n        # Case Result\n        notes = list()\n        if \"libvirt\" not in hypervisor_type:\n            notes.append(\n                \"Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log\"\n            )\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530557\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 116,
        "end": 128,
        "startLoc": {
          "line": 116,
          "column": 56,
          "position": 1268
        },
        "endLoc": {
          "line": 128,
          "column": 59,
          "position": 1393
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 151,
        "end": 140,
        "startLoc": {
          "line": 151,
          "column": 9,
          "position": 1429
        },
        "endLoc": {
          "line": 140,
          "column": 59,
          "position": 1509
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136578\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), \"virt-who\")[9:15] >= \"0.23.3\":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == \"libvirt-remote\":\n            hypervisor_type = \"libvirt\"\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        sysconfig_file = \"/etc/sysconfig/virt-who\"\n        guest_uuid = self.get_hypervisor_guestuuid()\n        option_tested = \"VIRTWHO_{0}_ENV\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 12,
        "end": 27,
        "startLoc": {
          "line": 12,
          "column": 7,
          "position": 103
        },
        "endLoc": {
          "line": 27,
          "column": 18,
          "position": 245
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 12,
        "end": 27,
        "startLoc": {
          "line": 12,
          "column": 11,
          "position": 106
        },
        "endLoc": {
          "line": 27,
          "column": 23,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n\n        # Case Steps\n        logger.info(\">>>step1: env option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: env option is wrong value\")\n        self.vw_option_update_value(option_tested, \"xxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 261
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 356
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 30,
        "end": 39,
        "startLoc": {
          "line": 30,
          "column": 12,
          "position": 275
        },
        "endLoc": {
          "line": 39,
          "column": 9,
          "position": 370
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"env.*differs|env.* is different|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: env option is 红帽€467aa value\")\n        self.vw_option_update_value(option_tested, \"红帽€467aa\", sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 37,
        "end": 48,
        "startLoc": {
          "line": 37,
          "column": 15,
          "position": 360
        },
        "endLoc": {
          "line": 48,
          "column": 15,
          "position": 493
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 48,
        "end": 50,
        "startLoc": {
          "line": 48,
          "column": 13,
          "position": 460
        },
        "endLoc": {
          "line": 50,
          "column": 12,
          "position": 507
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"codec can't decode|Communication with subscription manager failed|env.*differs\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: env option is null value\")\n        self.vw_option_update_value(option_tested, \"\", sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 48,
        "end": 59,
        "startLoc": {
          "line": 48,
          "column": 15,
          "position": 494
        },
        "endLoc": {
          "line": 59,
          "column": 15,
          "position": 627
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 61,
        "end": 61,
        "startLoc": {
          "line": 61,
          "column": 13,
          "position": 598
        },
        "endLoc": {
          "line": 61,
          "column": 12,
          "position": 641
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 59,
        "end": 66,
        "startLoc": {
          "line": 59,
          "column": 15,
          "position": 628
        },
        "endLoc": {
          "line": 66,
          "column": 8,
          "position": 712
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 72,
        "end": 79,
        "startLoc": {
          "line": 72,
          "column": 12,
          "position": 773
        },
        "endLoc": {
          "line": 79,
          "column": 8,
          "position": 857
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: env option is disable\")\n        self.vw_option_disable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 64,
        "end": 70,
        "startLoc": {
          "line": 64,
          "column": 8,
          "position": 675
        },
        "endLoc": {
          "line": 70,
          "column": 15,
          "position": 758
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 100,
        "end": 72,
        "startLoc": {
          "line": 100,
          "column": 8,
          "position": 901
        },
        "endLoc": {
          "line": 72,
          "column": 12,
          "position": 772
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: env option is disable but another config is ok\")\n        config_name",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 70,
        "end": 81,
        "startLoc": {
          "line": 70,
          "column": 14,
          "position": 756
        },
        "endLoc": {
          "line": 81,
          "column": 12,
          "position": 882
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 59,
        "end": 83,
        "startLoc": {
          "line": 59,
          "column": 3,
          "position": 625
        },
        "endLoc": {
          "line": 83,
          "column": 15,
          "position": 896
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\n            \"env not in|env.* not set|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step6\", []).append(res1)\n        results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: env option is null but another config is ok\")\n        self.vw_option_enable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 84,
        "end": 95,
        "startLoc": {
          "line": 84,
          "column": 15,
          "position": 920
        },
        "endLoc": {
          "line": 95,
          "column": 15,
          "position": 1053
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 86,
        "end": 97,
        "startLoc": {
          "line": 86,
          "column": 12,
          "position": 934
        },
        "endLoc": {
          "line": 97,
          "column": 12,
          "position": 1067
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\n            \"env not in|env.* not set|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\", []).append(res1)\n        results.setdefault(\"step7\", []).append(res2)\n\n        # Case Result\n        notes = list()\n        register_type = self.get_config(\"register_type\")\n        if \"stage\" in register_type:\n            notes.append(\n                \"Bug(Step2, Step3): Set env to wrong or special value, still can sent report normally for stage\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 96,
        "end": 111,
        "startLoc": {
          "line": 96,
          "column": 3,
          "position": 1065
        },
        "endLoc": {
          "line": 111,
          "column": 97,
          "position": 1226
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 84,
        "end": 113,
        "startLoc": {
          "line": 84,
          "column": 14,
          "position": 917
        },
        "endLoc": {
          "line": 113,
          "column": 116,
          "position": 1240
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136577\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), \"virt-who\")[9:15] >= \"0.23.3\":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == \"libvirt-remote\":\n            hypervisor_type = \"libvirt\"\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        sysconfig_file = \"/etc/sysconfig/virt-who\"\n        guest_uuid = self.get_hypervisor_guestuuid()\n        option_tested = \"VIRTWHO_{0}_OWNER\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 20,
          "position": 245
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 23,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n\n        # Case Steps\n        logger.info(\">>>step1: owner option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: owner option is wrong value\")\n        self.vw_option_update_value(option_tested, \"xxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 261
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 356
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 24,
        "end": 33,
        "startLoc": {
          "line": 24,
          "column": 12,
          "position": 205
        },
        "endLoc": {
          "line": 33,
          "column": 9,
          "position": 300
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: owner option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 41,
        "end": 47,
        "startLoc": {
          "line": 41,
          "column": 9,
          "position": 390
        },
        "endLoc": {
          "line": 47,
          "column": 43,
          "position": 479
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 52,
        "end": 59,
        "startLoc": {
          "line": 52,
          "column": 9,
          "position": 490
        },
        "endLoc": {
          "line": 59,
          "column": 91,
          "position": 581
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: owner option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 52,
        "end": 58,
        "startLoc": {
          "line": 52,
          "column": 9,
          "position": 524
        },
        "endLoc": {
          "line": 58,
          "column": 39,
          "position": 613
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 65,
        "end": 72,
        "startLoc": {
          "line": 65,
          "column": 9,
          "position": 628
        },
        "endLoc": {
          "line": 72,
          "column": 83,
          "position": 719
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: owner option is disable\")\n        self.vw_option_disable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 63,
        "end": 70,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 658
        },
        "endLoc": {
          "line": 70,
          "column": 15,
          "position": 758
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 63,
        "end": 65,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 658
        },
        "endLoc": {
          "line": 65,
          "column": 12,
          "position": 603
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\n            \"owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 70,
        "end": 77,
        "startLoc": {
          "line": 70,
          "column": 14,
          "position": 756
        },
        "endLoc": {
          "line": 77,
          "column": 8,
          "position": 843
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 59,
        "end": 66,
        "startLoc": {
          "line": 59,
          "column": 3,
          "position": 625
        },
        "endLoc": {
          "line": 66,
          "column": 8,
          "position": 712
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        logger.info(\">>>step6: owner option is disable but another config is ok\")\n        config_name",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 74,
        "end": 81,
        "startLoc": {
          "line": 74,
          "column": 9,
          "position": 789
        },
        "endLoc": {
          "line": 81,
          "column": 12,
          "position": 882
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 76,
        "end": 73,
        "startLoc": {
          "line": 76,
          "column": 9,
          "position": 803
        },
        "endLoc": {
          "line": 73,
          "column": 7,
          "position": 714
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step6\", []).append(res1)\n        results.setdefault(\"step6\", []).append(res2)\n\n        logger.info(\">>>step7: owner option is null but another config is ok\")\n        self.vw_option_enable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 88,
        "end": 95,
        "startLoc": {
          "line": 88,
          "column": 9,
          "position": 953
        },
        "endLoc": {
          "line": 95,
          "column": 15,
          "position": 1053
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 136,
        "end": 92,
        "startLoc": {
          "line": 136,
          "column": 56,
          "position": 1272
        },
        "endLoc": {
          "line": 92,
          "column": 12,
          "position": 903
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\n            \"owner not in|owner.* not set|Communication with subscription manager failed\"\n        ]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 96,
        "end": 103,
        "startLoc": {
          "line": 96,
          "column": 3,
          "position": 1065
        },
        "endLoc": {
          "line": 103,
          "column": 8,
          "position": 1155
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 84,
        "end": 91,
        "startLoc": {
          "line": 84,
          "column": 14,
          "position": 917
        },
        "endLoc": {
          "line": 91,
          "column": 8,
          "position": 1007
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step7\", []).append(res1)\n        results.setdefault(\"step7\", []).append(res2)\n\n        # Case Result\n        notes = list()\n        if \"libvirt\" not in hypervisor_type:\n            notes.append(\n                \"Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log\"\n            )\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530254\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 100,
        "end": 112,
        "startLoc": {
          "line": 100,
          "column": 9,
          "position": 1101
        },
        "endLoc": {
          "line": 112,
          "column": 59,
          "position": 1226
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 151,
        "end": 140,
        "startLoc": {
          "line": 151,
          "column": 9,
          "position": 1429
        },
        "endLoc": {
          "line": 140,
          "column": 59,
          "position": 1509
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136710\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136710\")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2006_validate_config_function_by_cli.py",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 3,
          "position": 92
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 11,
          "position": 92
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "num = rhsm_output.count('\"guestId\": \"{0}\"'.format(guest_uuid))\n        logger.info(\"Actual mapping info num: {0}\".format(num))\n        logger.info(\"Expected mapping info num: 1 for sat63 above and stage\")\n        results.setdefault(\"step2\", []).append(num == 1)\n\n        logger.info(\">>>step3: check '#virt-who -o -c' with wrong config file\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2006_validate_config_function_by_cli.py",
        "start": 50,
        "end": 55,
        "startLoc": {
          "line": 50,
          "column": 9,
          "position": 502
        },
        "endLoc": {
          "line": 55,
          "column": 59,
          "position": 566
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py",
        "start": 49,
        "end": 54,
        "startLoc": {
          "line": 49,
          "column": 9,
          "position": 502
        },
        "endLoc": {
          "line": 54,
          "column": 37,
          "position": 566
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136574\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: password option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 35,
        "end": 40,
        "startLoc": {
          "line": 35,
          "column": 42,
          "position": 242
        },
        "endLoc": {
          "line": 40,
          "column": 43,
          "position": 317
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step2\", []).append(res1)\n        else:\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0\n            )\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault(\"step2\", []).append(res1)\n            results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: password option is 红帽€467aa value\")\n        cli",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 51,
        "end": 63,
        "startLoc": {
          "line": 51,
          "column": 13,
          "position": 396
        },
        "endLoc": {
          "line": 63,
          "column": 4,
          "position": 541
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 49,
        "end": 61,
        "startLoc": {
          "line": 49,
          "column": 13,
          "position": 383
        },
        "endLoc": {
          "line": 61,
          "column": 5,
          "position": 528
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step4\", []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 95,
        "end": 103,
        "startLoc": {
          "line": 95,
          "column": 13,
          "position": 842
        },
        "endLoc": {
          "line": 103,
          "column": 11,
          "position": 941
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 82,
        "end": 90,
        "startLoc": {
          "line": 82,
          "column": 13,
          "position": 818
        },
        "endLoc": {
          "line": 90,
          "column": 12,
          "position": 917
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step5\", []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 115,
        "end": 123,
        "startLoc": {
          "line": 115,
          "column": 13,
          "position": 1062
        },
        "endLoc": {
          "line": 123,
          "column": 11,
          "position": 1161
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 100,
        "end": 108,
        "startLoc": {
          "line": 100,
          "column": 13,
          "position": 1019
        },
        "endLoc": {
          "line": 108,
          "column": 12,
          "position": 1118
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n            results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 117,
        "end": 124,
        "startLoc": {
          "line": 117,
          "column": 8,
          "position": 1097
        },
        "endLoc": {
          "line": 124,
          "column": 8,
          "position": 1177
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 97,
        "end": 104,
        "startLoc": {
          "line": 97,
          "column": 8,
          "position": 877
        },
        "endLoc": {
          "line": 104,
          "column": 8,
          "position": 957
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136573\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        compose_id = self.get_config(\"rhel_compose\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\", \"kubevirt\"):\n            self.vw_case_skip(hypervisor_type)\n        if \"RHEL-7\" not in compose_id:\n            self.vw_case_skip(compose_id)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == \"libvirt-remote\":\n            hypervisor_type = \"libvirt\"\n        base_cli = self.vw_cli_base() + \"-d\"\n        msg_list = [\n            \"Unable to login|\"\n            \"incorrect user.*|\"\n            \"Authentication failure|\"\n            \"Incorrect.*username|\"\n            \"Unauthorized|\"\n            \"Error.* backend|\"\n            \"Permission denied\"\n        ]\n\n        # Case Steps\n        logger.info(\">>>step1: username option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 10,
        "end": 35,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 35,
          "column": 42,
          "position": 241
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 10,
        "end": 35,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 35,
          "column": 42,
          "position": 241
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: username option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 35,
        "end": 40,
        "startLoc": {
          "line": 35,
          "column": 42,
          "position": 242
        },
        "endLoc": {
          "line": 40,
          "column": 43,
          "position": 317
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: username option is 红帽€467aa value\")\n        pkg",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 9,
          "position": 374
        },
        "endLoc": {
          "line": 53,
          "column": 4,
          "position": 464
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 53,
        "end": 48,
        "startLoc": {
          "line": 53,
          "column": 13,
          "position": 434
        },
        "endLoc": {
          "line": 48,
          "column": 5,
          "position": 486
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0\n            )\n            res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: username option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 67,
        "end": 74,
        "startLoc": {
          "line": 67,
          "column": 13,
          "position": 621
        },
        "endLoc": {
          "line": 74,
          "column": 42,
          "position": 711
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 78,
        "end": 85,
        "startLoc": {
          "line": 78,
          "column": 13,
          "position": 674
        },
        "endLoc": {
          "line": 85,
          "column": 42,
          "position": 764
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ".format(hypervisor_type),\n        )\n        data, tty_output, rhsm_output = self.vw_start(cli)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, \" \"username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step4\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 78,
        "end": 88,
        "startLoc": {
          "line": 78,
          "column": 19,
          "position": 739
        },
        "endLoc": {
          "line": 88,
          "column": 47,
          "position": 845
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 89,
        "end": 99,
        "startLoc": {
          "line": 89,
          "column": 19,
          "position": 792
        },
        "endLoc": {
          "line": 99,
          "column": 47,
          "position": 898
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step4\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 84,
        "end": 92,
        "startLoc": {
          "line": 84,
          "column": 13,
          "position": 789
        },
        "endLoc": {
          "line": 92,
          "column": 11,
          "position": 888
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 64,
        "end": 72,
        "startLoc": {
          "line": 64,
          "column": 13,
          "position": 670
        },
        "endLoc": {
          "line": 72,
          "column": 12,
          "position": 769
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n            results.setdefault(\"step4\", []).append(res1)\n            results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: username option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 88,
        "end": 96,
        "startLoc": {
          "line": 88,
          "column": 47,
          "position": 846
        },
        "endLoc": {
          "line": 96,
          "column": 39,
          "position": 939
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 99,
        "end": 107,
        "startLoc": {
          "line": 99,
          "column": 47,
          "position": 899
        },
        "endLoc": {
          "line": 107,
          "column": 39,
          "position": 992
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ".format(hypervisor_type), \" \"\n        )\n        data, tty_output, rhsm_output = self.vw_start(cli)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, \" \"username is not necessary\"\n            )\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step5\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 98,
        "end": 108,
        "startLoc": {
          "line": 98,
          "column": 20,
          "position": 957
        },
        "endLoc": {
          "line": 108,
          "column": 47,
          "position": 1065
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 109,
        "end": 119,
        "startLoc": {
          "line": 109,
          "column": 20,
          "position": 1010
        },
        "endLoc": {
          "line": 119,
          "column": 47,
          "position": 1118
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step5\", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 104,
        "end": 112,
        "startLoc": {
          "line": 104,
          "column": 13,
          "position": 1009
        },
        "endLoc": {
          "line": 112,
          "column": 11,
          "position": 1108
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 99,
        "end": 107,
        "startLoc": {
          "line": 99,
          "column": 13,
          "position": 1002
        },
        "endLoc": {
          "line": 107,
          "column": 12,
          "position": 1101
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n            results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 106,
        "end": 113,
        "startLoc": {
          "line": 106,
          "column": 8,
          "position": 1044
        },
        "endLoc": {
          "line": 113,
          "column": 8,
          "position": 1124
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 86,
        "end": 93,
        "startLoc": {
          "line": 86,
          "column": 8,
          "position": 824
        },
        "endLoc": {
          "line": 93,
          "column": 8,
          "position": 904
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n            results.setdefault(\"step5\", []).append(res1)\n            results.setdefault(\"step5\", []).append(res2)\n\n        # Case Result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 108,
        "end": 117,
        "startLoc": {
          "line": 108,
          "column": 47,
          "position": 1066
        },
        "endLoc": {
          "line": 117,
          "column": 2,
          "position": 1163
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 119,
        "end": 128,
        "startLoc": {
          "line": 119,
          "column": 47,
          "position": 1119
        },
        "endLoc": {
          "line": 128,
          "column": 2,
          "position": 1216
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136572\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        compose_id = self.get_config(\"rhel_compose\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\", \"kubevirt\"):\n            self.vw_case_skip(hypervisor_type)\n        if \"RHEL-7\" not in compose_id:\n            self.vw_case_skip(compose_id)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == \"libvirt-remote\":\n            hypervisor_type = \"libvirt\"\n        base_cli = self.vw_cli_base() + \"-d\"\n        msg_list = [\n            \"Name or service not known|\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 29,
          "position": 209
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 19,
          "position": 209
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: server option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 40,
          "position": 233
        },
        "endLoc": {
          "line": 37,
          "column": 41,
          "position": 308
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".format(hypervisor_type),\n        )\n        data, tty_output, rhsm_output = self.vw_start(cli)\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: server option is 红帽€467aa value\")\n        cli",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 41,
        "end": 50,
        "startLoc": {
          "line": 41,
          "column": 21,
          "position": 336
        },
        "endLoc": {
          "line": 50,
          "column": 4,
          "position": 455
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 44,
        "end": 56,
        "startLoc": {
          "line": 44,
          "column": 23,
          "position": 345
        },
        "endLoc": {
          "line": 56,
          "column": 5,
          "position": 503
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: server option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 84,
        "end": 92,
        "startLoc": {
          "line": 84,
          "column": 62,
          "position": 761
        },
        "endLoc": {
          "line": 92,
          "column": 37,
          "position": 854
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 99,
        "end": 107,
        "startLoc": {
          "line": 99,
          "column": 47,
          "position": 899
        },
        "endLoc": {
          "line": 107,
          "column": 39,
          "position": 992
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        else:\n            msg_list = [\"server.* not set|virt-who can't be started|No host supplied\"]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 101,
        "end": 110,
        "startLoc": {
          "line": 101,
          "column": 13,
          "position": 925
        },
        "endLoc": {
          "line": 110,
          "column": 8,
          "position": 1043
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 80,
        "end": 89,
        "startLoc": {
          "line": 80,
          "column": 13,
          "position": 701
        },
        "endLoc": {
          "line": 89,
          "column": 8,
          "position": 819
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n            res1 = self.op_normal_value(\n                data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0\n            )\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        # Case Result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 105,
        "end": 114,
        "startLoc": {
          "line": 105,
          "column": 62,
          "position": 985
        },
        "endLoc": {
          "line": 114,
          "column": 2,
          "position": 1082
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 119,
        "end": 128,
        "startLoc": {
          "line": 119,
          "column": 47,
          "position": 1119
        },
        "endLoc": {
          "line": 128,
          "column": 2,
          "position": 1216
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136571\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: env option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 37,
          "position": 243
        },
        "endLoc": {
          "line": 33,
          "column": 38,
          "position": 318
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: env option is 红帽€467aa value\")\n        cli",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 44,
        "end": 51,
        "startLoc": {
          "line": 44,
          "column": 9,
          "position": 391
        },
        "endLoc": {
          "line": 51,
          "column": 4,
          "position": 484
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 52,
        "end": 50,
        "startLoc": {
          "line": 52,
          "column": 9,
          "position": 490
        },
        "endLoc": {
          "line": 50,
          "column": 5,
          "position": 497
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\">>>step4: env option is null value\")\n        cli",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 61,
        "end": 68,
        "startLoc": {
          "line": 61,
          "column": 9,
          "position": 553
        },
        "endLoc": {
          "line": 68,
          "column": 4,
          "position": 646
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 65,
        "end": 61,
        "startLoc": {
          "line": 65,
          "column": 9,
          "position": 628
        },
        "endLoc": {
          "line": 61,
          "column": 5,
          "position": 631
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: env option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 74,
        "end": 80,
        "startLoc": {
          "line": 74,
          "column": 28,
          "position": 707
        },
        "endLoc": {
          "line": 80,
          "column": 34,
          "position": 796
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 99,
        "end": 107,
        "startLoc": {
          "line": 99,
          "column": 47,
          "position": 899
        },
        "endLoc": {
          "line": 107,
          "column": 39,
          "position": 992
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        # Case Result\n        notes",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 85,
        "end": 92,
        "startLoc": {
          "line": 85,
          "column": 53,
          "position": 851
        },
        "endLoc": {
          "line": 92,
          "column": 6,
          "position": 939
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 119,
        "end": 128,
        "startLoc": {
          "line": 119,
          "column": 47,
          "position": 1119
        },
        "endLoc": {
          "line": 128,
          "column": 5,
          "position": 1211
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        # Case Result\n        notes = list()\n        register_type = self.get_config(\"register_type\")\n        if \"stage\" in register_type:\n            notes.append(\n                \"Bug(Step2,Step3): Set env to wrong or special value,\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 87,
        "end": 96,
        "startLoc": {
          "line": 87,
          "column": 11,
          "position": 890
        },
        "endLoc": {
          "line": 96,
          "column": 55,
          "position": 976
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 95,
        "end": 104,
        "startLoc": {
          "line": 95,
          "column": 12,
          "position": 968
        },
        "endLoc": {
          "line": 104,
          "column": 116,
          "position": 1054
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136568\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2001_validate_owner_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: owner option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2001_validate_owner_option_by_cli.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 39,
          "position": 221
        },
        "endLoc": {
          "line": 32,
          "column": 40,
          "position": 296
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger.info(\">>>step5: owner option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2001_validate_owner_option_by_cli.py",
        "start": 68,
        "end": 73,
        "startLoc": {
          "line": 68,
          "column": 9,
          "position": 556
        },
        "endLoc": {
          "line": 73,
          "column": 36,
          "position": 642
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 100,
        "end": 107,
        "startLoc": {
          "line": 100,
          "column": 13,
          "position": 902
        },
        "endLoc": {
          "line": 107,
          "column": 39,
          "position": 992
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n\n        # Case Result\n        notes = list()\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier2/tc_2001_validate_owner_option_by_cli.py",
        "start": 78,
        "end": 85,
        "startLoc": {
          "line": 78,
          "column": 9,
          "position": 691
        },
        "endLoc": {
          "line": 85,
          "column": 3,
          "position": 785
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 120,
        "end": 93,
        "startLoc": {
          "line": 120,
          "column": 13,
          "position": 1122
        },
        "endLoc": {
          "line": 93,
          "column": 14,
          "position": 948
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-196077\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1113_check_virtwho_status.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-196077\")\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 5,
          "position": 80
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 11,
          "position": 80
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res1)\n\n        for",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 31,
        "end": 36,
        "startLoc": {
          "line": 31,
          "column": 23,
          "position": 236
        },
        "endLoc": {
          "line": 36,
          "column": 4,
          "position": 307
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py",
        "start": 35,
        "end": 39,
        "startLoc": {
          "line": 35,
          "column": 11,
          "position": 276
        },
        "endLoc": {
          "line": 39,
          "column": 3,
          "position": 346
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-195889\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1111_template_conf_validation.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-195888\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-183803\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 16,
          "position": 116
        },
        "endLoc": {
          "line": 25,
          "column": 5,
          "position": 205
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py",
        "start": 16,
        "end": 28,
        "startLoc": {
          "line": 16,
          "column": 11,
          "position": 141
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "))\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 30,
        "end": 35,
        "startLoc": {
          "line": 30,
          "column": 12,
          "position": 254
        },
        "endLoc": {
          "line": 35,
          "column": 56,
          "position": 327
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 2,
          "position": 382
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-174862\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1108_check_hypervisor_facts.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        self.vw_option_add",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1108_check_hypervisor_facts.py",
        "start": 15,
        "end": 27,
        "startLoc": {
          "line": 15,
          "column": 9,
          "position": 136
        },
        "endLoc": {
          "line": 27,
          "column": 14,
          "position": 247
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 9,
          "position": 127
        },
        "endLoc": {
          "line": 25,
          "column": 23,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-171210\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        vdc_virtual_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 16,
          "position": 177
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py",
        "start": 16,
        "end": 25,
        "startLoc": {
          "line": 16,
          "column": 11,
          "position": 141
        },
        "endLoc": {
          "line": 25,
          "column": 17,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-171135\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res1)\n\n        logger.info('>>>step2: Configure \"print_=false\" then run virt-who by cli'",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py",
        "start": 24,
        "end": 29,
        "startLoc": {
          "line": 24,
          "column": 40,
          "position": 192
        },
        "endLoc": {
          "line": 29,
          "column": 62,
          "position": 264
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 54,
          "position": 257
        },
        "endLoc": {
          "line": 34,
          "column": 57,
          "position": 329
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-170860\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 19,
        "end": 27,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 161
        },
        "endLoc": {
          "line": 27,
          "column": 16,
          "position": 243
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 215
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step1\", []).append(s1)\n            s2 = self.vw_msg_search(\n                rhsm_output",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 45,
        "end": 50,
        "startLoc": {
          "line": 45,
          "column": 11,
          "position": 396
        },
        "endLoc": {
          "line": 50,
          "column": 12,
          "position": 473
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 32,
        "startLoc": {
          "line": 28,
          "column": 5,
          "position": 233
        },
        "endLoc": {
          "line": 32,
          "column": 4,
          "position": 308
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134082\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)\n        res1 = self.op_normal_value(\n            data,\n            exp_error=0,\n            exp_thread=1,\n            exp_send=1,\n            exp_interval=60,\n            exp_looptime=60,\n        )\n        res2 = self.vw_msg_search(output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=True)\n        results.setdefault(\"step4\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py",
        "start": 53,
        "end": 64,
        "startLoc": {
          "line": 53,
          "column": 50,
          "position": 456
        },
        "endLoc": {
          "line": 64,
          "column": 8,
          "position": 559
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py",
        "start": 36,
        "end": 47,
        "startLoc": {
          "line": 36,
          "column": 44,
          "position": 296
        },
        "endLoc": {
          "line": 47,
          "column": 8,
          "position": 399
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134081\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "(\"tcp_port\", filename=libvirt_conf)\n        ret, output = self.run_service(self.ssh_host(), \"libvirtd\", \"restart\")\n        ret, output = self.run_service(self.ssh_host(), \"libvirtd\", \"status\")\n        if \"is running\" in output or \"Active: active (running)\" in output:\n            logger.info(\"Succeeded to restart libvirt service\")\n            results.setdefault(\"step4\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py",
        "start": 69,
        "end": 74,
        "startLoc": {
          "line": 69,
          "column": 18,
          "position": 598
        },
        "endLoc": {
          "line": 74,
          "column": 8,
          "position": 688
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py",
        "start": 38,
        "end": 43,
        "startLoc": {
          "line": 38,
          "column": 17,
          "position": 302
        },
        "endLoc": {
          "line": 43,
          "column": 8,
          "position": 392
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134080\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        instance_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 11,
        "end": 24,
        "startLoc": {
          "line": 11,
          "column": 15,
          "position": 85
        },
        "endLoc": {
          "line": 24,
          "column": 13,
          "position": 192
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 28,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 28,
          "column": 16,
          "position": 254
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Quantity Used:.*1\", exp_exist=True)\n        res3 = self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step3\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 52,
        "end": 59,
        "startLoc": {
          "line": 52,
          "column": 2,
          "position": 530
        },
        "endLoc": {
          "line": 59,
          "column": 8,
          "position": 617
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 37,
        "end": 44,
        "startLoc": {
          "line": 37,
          "column": 17,
          "position": 324
        },
        "endLoc": {
          "line": 44,
          "column": 8,
          "position": 411
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_exist=True\n        )\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n        results.setdefault(\"step3\", []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for guest with quantity=2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 57,
        "end": 63,
        "startLoc": {
          "line": 57,
          "column": 43,
          "position": 603
        },
        "endLoc": {
          "line": 63,
          "column": 58,
          "position": 669
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 110,
        "end": 116,
        "startLoc": {
          "line": 110,
          "column": 10,
          "position": 1074
        },
        "endLoc": {
          "line": 116,
          "column": 53,
          "position": 1140
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134079\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        self.vw_case_skip(\"instance sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        instance_sku = register_config[\"instance\"]\n\n        # case steps\n        logger.info(\">>>step1: set cpu.cpu_socket(s) to 1 in guest\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 48,
          "position": 210
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 48,
          "position": 210
        }
      }
    },
    {
      "format": "python",
      "lines": 48,
      "fragment": ")\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for guest without quantity\")\n        self.system_sku_unattach(self.ssh_guest())\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, \"physical\")\n        physical_pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Quantity Used:.*1\", exp_exist=True)\n        res3 = self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n        results.setdefault(\"step2\", []).append(res3)\n\n        logger.info(\">>>step3: attach physical sku for guest with quantity=1\")\n        self.system_sku_unattach(self.ssh_guest())\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, \"physical\")\n        physical_pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=1)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Quantity Used:.*1\", exp_exist=True)\n        res3 = self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n        results.setdefault(\"step3\", []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for guest with quantity=2\")\n        self.system_sku_unattach(self.ssh_guest())\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, \"physical\")\n        physical_pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=2)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Quantity Used:.*2\", exp_exist=True)\n        res3 = self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n        results.setdefault(\"step4\", []).append(res3)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py",
        "start": 30,
        "end": 77,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 237
        },
        "endLoc": {
          "line": 77,
          "column": 5,
          "position": 870
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 30,
        "end": 78,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 237
        },
        "endLoc": {
          "line": 78,
          "column": 7,
          "position": 871
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134078\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 17,
        "end": 30,
        "startLoc": {
          "line": 17,
          "column": 13,
          "position": 152
        },
        "endLoc": {
          "line": 30,
          "column": 14,
          "position": 259
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 28,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 28,
          "column": 16,
          "position": 254
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(res)\n\n        logger.info(\">>>step3: attach physical sku for host without quantity\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 40,
        "end": 45,
        "startLoc": {
          "line": 40,
          "column": 67,
          "position": 368
        },
        "endLoc": {
          "line": 45,
          "column": 58,
          "position": 437
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 34,
        "end": 39,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 316
        },
        "endLoc": {
          "line": 39,
          "column": 57,
          "position": 385
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134077\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        instance_sku = register_config[\"instance\"]\n        sku_attrs",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 14,
        "end": 28,
        "startLoc": {
          "line": 14,
          "column": 16,
          "position": 122
        },
        "endLoc": {
          "line": 28,
          "column": 10,
          "position": 239
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 203
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": ")\n            data, tty_output, rhsm_output = self.vw_start()\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step2\", []).append(res)\n\n            logger.info(\">>>step3: attach physical sku for host without quantity\")\n            self.system_sku_unattach(self.ssh_host())\n            self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)\n            output = self.system_sku_consumed(self.ssh_host())\n            res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n            res2 = self.vw_msg_search(output, \"Quantity Used:.*8\", exp_exist=True)\n            res3 = self.vw_msg_search(\n                output, \"Status Details:.*Subscription is current\"\n            )\n            results.setdefault(\"step3\", []).append(res1)\n            results.setdefault(\"step3\", []).append(res2)\n            results.setdefault(\"step3\", []).append(res3)\n\n            logger.info(\">>>step4: attach physical sku for host with quantity=1\")\n            self.system_sku_unattach(self.ssh_host())\n            cmd = \"subscription-manager attach --pool={0} --quantity=1\".format(\n                physical_pool_id\n            )\n            ret, output = self.runcmd(cmd, self.ssh_host(), desc=\"subscription attach\")\n            error_msg = \"must be attached using a quantity evenly divisible by 2\"\n            res = self.vw_msg_search(output, error_msg, exp_exist=True)\n            results.setdefault(\"step4\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 38,
        "end": 64,
        "startLoc": {
          "line": 38,
          "column": 43,
          "position": 339
        },
        "endLoc": {
          "line": 64,
          "column": 8,
          "position": 662
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 34,
        "end": 64,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 316
        },
        "endLoc": {
          "line": 64,
          "column": 8,
          "position": 687
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.system_sku_attach(\n                self.ssh_host(), pool_id=physical_pool_id, quantity=2\n            )\n            output = self.system_sku_consumed(self.ssh_host())\n            msg = \"Status Details:.*Only supports 2 of 8 sockets\"\n            res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n            res2 = self.vw_msg_search(output, \"Quantity Used:.*2\", exp_exist=True)\n            res3 = self.vw_msg_search(output, msg, exp_exist=True)\n            results",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 68,
        "end": 76,
        "startLoc": {
          "line": 68,
          "column": 13,
          "position": 696
        },
        "endLoc": {
          "line": 76,
          "column": 8,
          "position": 805
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 73,
        "end": 81,
        "startLoc": {
          "line": 73,
          "column": 13,
          "position": 784
        },
        "endLoc": {
          "line": 81,
          "column": 3,
          "position": 893
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            results.setdefault(\"step6\", []).append(res1)\n            results.setdefault(\"step6\", []).append(res2)\n            results.setdefault(\"step6\", []).append(res3)\n            results.setdefault(\"step6\", []).append(res4)\n\n        finally",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 89,
        "end": 95,
        "startLoc": {
          "line": 89,
          "column": 5,
          "position": 991
        },
        "endLoc": {
          "line": 95,
          "column": 8,
          "position": 1063
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 101,
        "end": 106,
        "startLoc": {
          "line": 101,
          "column": 13,
          "position": 1120
        },
        "endLoc": {
          "line": 106,
          "column": 7,
          "position": 1191
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134076\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ")\n        self.vw_case_skip(\"instance sku\")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type not in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        instance_sku = register_config[\"instance\"]\n\n        # case steps\n        logger.info(\">>>step1: set cpu.cpu_socket(s) to 1 in host\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 30,
          "column": 47,
          "position": 247
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 48,
          "position": 210
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(res)\n\n        logger.info(\">>>step3: attach physical sku for host without quantity\")\n        self.system_sku_unattach(self.ssh_host())\n        sku_attrs",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 31,
        "end": 41,
        "startLoc": {
          "line": 31,
          "column": 4,
          "position": 270
        },
        "endLoc": {
          "line": 41,
          "column": 10,
          "position": 381
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 37,
        "end": 47,
        "startLoc": {
          "line": 37,
          "column": 4,
          "position": 342
        },
        "endLoc": {
          "line": 47,
          "column": 5,
          "position": 453
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", exp_exist=True)\n        res3 = self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n        results.setdefault(\"step3\", []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for host with quantity=1\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 46,
        "end": 54,
        "startLoc": {
          "line": 46,
          "column": 20,
          "position": 478
        },
        "endLoc": {
          "line": 54,
          "column": 57,
          "position": 566
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 55,
        "end": 116,
        "startLoc": {
          "line": 55,
          "column": 20,
          "position": 581
        },
        "endLoc": {
          "line": 116,
          "column": 53,
          "position": 1140
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n        results.setdefault(\"step3\", []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for host with quantity=1\")\n        self.system_sku_unattach(self.ssh_host())\n        sku_attrs",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 49,
        "end": 56,
        "startLoc": {
          "line": 49,
          "column": 9,
          "position": 507
        },
        "endLoc": {
          "line": 56,
          "column": 10,
          "position": 582
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 51,
        "end": 58,
        "startLoc": {
          "line": 51,
          "column": 43,
          "position": 538
        },
        "endLoc": {
          "line": 58,
          "column": 4,
          "position": 613
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "(physical_pool_id)\n        ret, output = self.runcmd(cmd, self.ssh_host(), desc=\"subscription attach\")\n        error_msg = \"must be attached using a quantity evenly divisible by 2\"\n        res = self.vw_msg_search(output, error_msg, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 58,
        "end": 63,
        "startLoc": {
          "line": 58,
          "column": 2,
          "position": 622
        },
        "endLoc": {
          "line": 63,
          "column": 5,
          "position": 698
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 58,
        "end": 66,
        "startLoc": {
          "line": 58,
          "column": 7,
          "position": 620
        },
        "endLoc": {
          "line": 66,
          "column": 7,
          "position": 701
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "self.system_sku_unattach(self.ssh_host())\n        sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, \"physical\")\n        physical_pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)\n        output = self.system_sku_consumed(self.ssh_host())\n        res1",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 66,
        "end": 71,
        "startLoc": {
          "line": 66,
          "column": 9,
          "position": 719
        },
        "endLoc": {
          "line": 71,
          "column": 5,
          "position": 801
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 70,
        "end": 77,
        "startLoc": {
          "line": 70,
          "column": 13,
          "position": 740
        },
        "endLoc": {
          "line": 77,
          "column": 4,
          "position": 826
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        output = self.system_sku_consumed(self.ssh_host())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Quantity Used:.*2\", exp_exist=True)\n        res3 = self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step5\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 69,
        "end": 76,
        "startLoc": {
          "line": 69,
          "column": 2,
          "position": 782
        },
        "endLoc": {
          "line": 76,
          "column": 8,
          "position": 869
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 43,
        "end": 50,
        "startLoc": {
          "line": 43,
          "column": 17,
          "position": 427
        },
        "endLoc": {
          "line": 50,
          "column": 8,
          "position": 514
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "= self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step5\", []).append(res1)\n        results.setdefault(\"step5\", []).append(res2)\n        results.setdefault(\"step5\", []).append(res3)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 73,
        "end": 79,
        "startLoc": {
          "line": 73,
          "column": 2,
          "position": 843
        },
        "endLoc": {
          "line": 79,
          "column": 5,
          "position": 916
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 86,
        "end": 92,
        "startLoc": {
          "line": 86,
          "column": 2,
          "position": 1011
        },
        "endLoc": {
          "line": 92,
          "column": 8,
          "position": 1084
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134075\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_skip(\"instance sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 181
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 215
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 67,
          "position": 233
        },
        "endLoc": {
          "line": 34,
          "column": 52,
          "position": 302
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 53,
          "position": 228
        },
        "endLoc": {
          "line": 33,
          "column": 54,
          "position": 297
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134058\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        limit_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 11,
        "end": 26,
        "startLoc": {
          "line": 11,
          "column": 14,
          "position": 85
        },
        "endLoc": {
          "line": 26,
          "column": 19,
          "position": 214
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 27,
        "end": 36,
        "startLoc": {
          "line": 27,
          "column": 8,
          "position": 231
        },
        "endLoc": {
          "line": 36,
          "column": 5,
          "position": 316
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 26,
        "end": 35,
        "startLoc": {
          "line": 26,
          "column": 11,
          "position": 221
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 306
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134053\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        self.vw_case_skip(\"limited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        limit_physical_sku = register_config[\"limit\"]\n        limit_virtual_sku = register_config[\"limit\"]\n\n        # Case Steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 10,
        "end": 29,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 29,
          "column": 13,
          "position": 235
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 29,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 29,
          "column": 13,
          "position": 235
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self.vw_web_unattach(host_name, host_uuid)\n        sku_attrs = self.system_sku_attr(\n            self.ssh_host(), limit_physical_sku, \"physical\"\n        )\n        physical_pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, physical_pool_id)\n\n        logger.info(\">>>step3: attach virtual sku by pool_id in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, \"virtual\")\n        virtual_pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Quantity Used:.*1\", exp_exist=True)\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        logger.info(\n            \">>>step4: unattach physical sku from host/hypervisor and check virtual pool\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 30,
        "end": 54,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 238
        },
        "endLoc": {
          "line": 54,
          "column": 78,
          "position": 532
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 29,
        "end": 54,
        "startLoc": {
          "line": 29,
          "column": 9,
          "position": 228
        },
        "endLoc": {
          "line": 54,
          "column": 77,
          "position": 532
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, limit_virtual_sku, exp_exist=False)\n        results.setdefault(\"step4\", []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 56,
        "end": 62,
        "startLoc": {
          "line": 56,
          "column": 16,
          "position": 541
        },
        "endLoc": {
          "line": 62,
          "column": 2,
          "position": 616
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 56,
        "end": 62,
        "startLoc": {
          "line": 56,
          "column": 19,
          "position": 541
        },
        "endLoc": {
          "line": 62,
          "column": 2,
          "position": 616
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134054\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        self.vw_case_skip(\"limited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 14,
          "position": 214
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "limit_physical_sku = register_config[\"limit\"]\n        limit_virtual_sku = register_config[\"limit\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self.vw_web_unattach(host_name, host_uuid)\n        sku_attrs = self.system_sku_attr(\n            self.ssh_host(), limit_physical_sku, \"physical\"\n        )\n        pool_id",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 27,
        "end": 41,
        "startLoc": {
          "line": 27,
          "column": 9,
          "position": 224
        },
        "endLoc": {
          "line": 41,
          "column": 8,
          "position": 363
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 26,
        "end": 40,
        "startLoc": {
          "line": 26,
          "column": 9,
          "position": 214
        },
        "endLoc": {
          "line": 40,
          "column": 17,
          "position": 353
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134073\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 53,
      "fragment": ")\n        self.vw_case_skip(\"limited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        limit_physical_sku = register_config[\"limit\"]\n        limit_virtual_sku = register_config[\"limit\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self.vw_web_unattach(host_name, host_uuid)\n        sku_attrs = self.system_sku_attr(\n            self.ssh_host(), limit_physical_sku, \"physical\"\n        )\n        pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step3: check virtual sku attrs in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, \"virtual\")\n        available = sku_attrs[\"available\"]\n        if available == \"1\":\n            logger.info(\n                \"Succeeded to check, vitual sku({0}) Available({1})\".format(\n                    limit_virtual_sku, available\n                )\n            )\n            results.setdefault(\"step3\", []).append(True)\n        else:\n            logger.error(\n                \"Failed to check, vitual sku({0}) Available({1})\".format(\n                    limit_virtual_sku, available\n                )\n            )\n            results.setdefault(\"step3\", []).append(False)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 10,
        "end": 62,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 62,
          "column": 7,
          "position": 525
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 62,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 62,
          "column": 4,
          "position": 525
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Quantity Used:.*1\", exp_exist=True)\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 64,
        "end": 71,
        "startLoc": {
          "line": 64,
          "column": 8,
          "position": 557
        },
        "endLoc": {
          "line": 71,
          "column": 7,
          "position": 651
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 65,
        "end": 71,
        "startLoc": {
          "line": 65,
          "column": 2,
          "position": 556
        },
        "endLoc": {
          "line": 71,
          "column": 7,
          "position": 649
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134068\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": ")\n        self.vw_case_skip(\"limited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        limit_physical_sku = register_config[\"limit\"]\n        limit_virtual_sku = register_config[\"limit\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self.vw_web_unattach(host_name, host_uuid)\n        sku_attrs = self.system_sku_attr(\n            self.ssh_host(), limit_physical_sku, \"physical\"\n        )\n        pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step3: check virtual sku is created or not in guest\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py",
        "start": 10,
        "end": 43,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 43,
          "column": 57,
          "position": 382
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 44,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 44,
          "column": 45,
          "position": 392
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134055\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        vdc_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 17,
          "position": 216
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 27,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 27,
          "column": 19,
          "position": 224
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 27,
        "end": 36,
        "startLoc": {
          "line": 27,
          "column": 12,
          "position": 233
        },
        "endLoc": {
          "line": 36,
          "column": 17,
          "position": 333
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 26,
        "end": 35,
        "startLoc": {
          "line": 26,
          "column": 11,
          "position": 221
        },
        "endLoc": {
          "line": 35,
          "column": 13,
          "position": 321
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ")\n\n        logger.info(\">>>step5: check repo status in guest\")\n        cmd = \"subscription-manager repos --list\"\n        ret, output = self.runcmd(cmd, self.ssh_guest())\n        if \"stage\" in register_type:\n            res = self.vw_msg_search(output, \"Available Repositories\", exp_exist=True)\n        else:\n            res = self.vw_msg_search(\n                output, \"no repositories available\", exp_exist=True\n            )\n        results.setdefault(\"step5\", []).append(res)\n\n        logger.info(\">>>step6: check subscription status in guest\")\n        cmd = \"subscription-manager status\"\n        ret, output = self.runcmd(cmd, self.ssh_guest())\n        res1 = self.vw_msg_search(output, \"Overall Status: Current\", exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Invalid\", exp_exist=False)\n        results.setdefault(\"step6\", []).append(res1)\n        results.setdefault(\"step6\", []).append(res2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 62,
        "end": 83,
        "startLoc": {
          "line": 62,
          "column": 13,
          "position": 606
        },
        "endLoc": {
          "line": 83,
          "column": 14,
          "position": 835
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 69,
        "end": 90,
        "startLoc": {
          "line": 69,
          "column": 5,
          "position": 647
        },
        "endLoc": {
          "line": 90,
          "column": 7,
          "position": 876
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134057\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 17,
          "position": 206
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(res)\n\n        logger.info(\">>>step3: attach physical sku for host/hypervisor\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 32,
        "end": 40,
        "startLoc": {
          "line": 32,
          "column": 9,
          "position": 261
        },
        "endLoc": {
          "line": 40,
          "column": 52,
          "position": 356
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 37,
        "end": 39,
        "startLoc": {
          "line": 37,
          "column": 4,
          "position": 342
        },
        "endLoc": {
          "line": 39,
          "column": 57,
          "position": 385
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", exp_exist=True)\n        res3 = self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n        results.setdefault(\"step4\", []).append(res3)\n\n        logger.info(\">>>step5: attach virtual sku for guest with quantity=2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 52,
        "end": 60,
        "startLoc": {
          "line": 52,
          "column": 20,
          "position": 524
        },
        "endLoc": {
          "line": 60,
          "column": 57,
          "position": 612
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 70,
        "end": 78,
        "startLoc": {
          "line": 70,
          "column": 20,
          "position": 787
        },
        "endLoc": {
          "line": 78,
          "column": 58,
          "position": 875
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134052\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type not in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        vdc_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 17,
          "position": 221
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 11,
        "end": 28,
        "startLoc": {
          "line": 11,
          "column": 15,
          "position": 85
        },
        "endLoc": {
          "line": 28,
          "column": 16,
          "position": 254
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "(), \"cpu.cpu_socket(s)\", \"4\")\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(res)\n\n        logger.info(\n            \">>>step3: attach physical sku for host/hypervisor without quantity\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 31,
        "end": 40,
        "startLoc": {
          "line": 31,
          "column": 9,
          "position": 264
        },
        "endLoc": {
          "line": 40,
          "column": 69,
          "position": 369
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 31,
        "end": 39,
        "startLoc": {
          "line": 31,
          "column": 10,
          "position": 251
        },
        "endLoc": {
          "line": 39,
          "column": 57,
          "position": 385
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Quantity Used:.*2\", exp_exist=True)\n        res3 = self.vw_msg_search(\n            output, \"Status Details:.*Subscription is current\", exp_exist=True\n        )\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n        results.setdefault(\"step3\", []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for host/hypervisor with quantity=1\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 47,
        "end": 56,
        "startLoc": {
          "line": 47,
          "column": 17,
          "position": 464
        },
        "endLoc": {
          "line": 56,
          "column": 68,
          "position": 572
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 45,
        "end": 116,
        "startLoc": {
          "line": 45,
          "column": 13,
          "position": 458
        },
        "endLoc": {
          "line": 116,
          "column": 53,
          "position": 1140
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_exist=True\n        )\n        results.setdefault(\"step4\", []).append(res1)\n        results.setdefault(\"step4\", []).append(res2)\n        results.setdefault(\"step4\", []).append(res3)\n        self.system_custom_facts_remove(self.ssh_host",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 65,
        "end": 70,
        "startLoc": {
          "line": 65,
          "column": 48,
          "position": 712
        },
        "endLoc": {
          "line": 70,
          "column": 9,
          "position": 779
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py",
        "start": 72,
        "end": 77,
        "startLoc": {
          "line": 72,
          "column": 43,
          "position": 809
        },
        "endLoc": {
          "line": 77,
          "column": 10,
          "position": 876
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134070\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku = register_config[\"vdc\"]\n        vdc_virtual_sku = register_config[\"vdc_bonus\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 29,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 29,
          "column": 67,
          "position": 234
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 29,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 29,
          "column": 48,
          "position": 234
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "vdc_physical_sku = register_config[\"vdc\"]\n        vdc_virtual_sku = register_config[\"vdc_bonus\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        physical_pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, physical_pool_id)\n\n        logger.info(\">>>step3: attach virtual sku by pool_id in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, \"virtual\")\n        virtual_pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res)\n\n        logger.info(\n            \">>>step4: unregister host/hypervisor and check virtual pool revoked or not\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 25,
        "end": 48,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 206
        },
        "endLoc": {
          "line": 48,
          "column": 77,
          "position": 472
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 26,
        "end": 48,
        "startLoc": {
          "line": 26,
          "column": 9,
          "position": 216
        },
        "endLoc": {
          "line": 48,
          "column": 38,
          "position": 480
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134064\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 39,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku = register_config[\"vdc\"]\n        vdc_virtual_sku = register_config[\"vdc_bonus\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        physical_pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, physical_pool_id)\n\n        logger.info(\">>>step3: attach virtual sku by pool_id in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, \"virtual\")\n        virtual_pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res)\n\n        logger.info(\n            \">>>step4: unattach physical sku from host/hypervisor and check virtual pool\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 10,
        "end": 48,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 48,
          "column": 78,
          "position": 472
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 48,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 48,
          "column": 38,
          "position": 480
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False)\n        results.setdefault(\"step4\", []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 50,
        "end": 56,
        "startLoc": {
          "line": 50,
          "column": 16,
          "position": 481
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 556
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 50,
        "end": 56,
        "startLoc": {
          "line": 50,
          "column": 19,
          "position": 481
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 556
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134066\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        vdc_physical_sku = register_config[\"vdc\"]\n        vdc_virtual_sku = register_config[\"vdc_bonus\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        pool_id",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py",
        "start": 10,
        "end": 37,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 340
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 37,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 37,
          "column": 17,
          "position": 340
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134060\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku = register_config[\"vdc\"]\n        vdc_virtual_sku = register_config[\"vdc_bonus\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 10,
        "end": 39,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 39,
          "column": 7,
          "position": 355
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 40,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 40,
          "column": 4,
          "position": 365
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134062\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku = register_config[\"vdc\"]\n        vdc_virtual_sku = register_config[\"vdc_bonus\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step3: check virtual sku is created or not in guest\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py",
        "start": 10,
        "end": 39,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 39,
          "column": 57,
          "position": 359
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 39,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 39,
          "column": 51,
          "position": 359
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134072\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 11,
        "end": 26,
        "startLoc": {
          "line": 11,
          "column": 16,
          "position": 85
        },
        "endLoc": {
          "line": 26,
          "column": 14,
          "position": 214
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 26,
        "end": 35,
        "startLoc": {
          "line": 26,
          "column": 10,
          "position": 221
        },
        "endLoc": {
          "line": 35,
          "column": 14,
          "position": 321
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 26,
        "end": 35,
        "startLoc": {
          "line": 26,
          "column": 11,
          "position": 221
        },
        "endLoc": {
          "line": 35,
          "column": 13,
          "position": 321
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", exp_exist=True)\n        results.setdefault(\"step3\", []).append(res)\n\n        logger.info(\n            \">>>step4: unregister host/hypervisor and check virtual pool revoked or not\"\n        )\n        self.vw_web_host_delete(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 44,
        "end": 52,
        "startLoc": {
          "line": 44,
          "column": 14,
          "position": 438
        },
        "endLoc": {
          "line": 52,
          "column": 14,
          "position": 519
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 44,
        "end": 52,
        "startLoc": {
          "line": 44,
          "column": 16,
          "position": 440
        },
        "endLoc": {
          "line": 52,
          "column": 16,
          "position": 521
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134071\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 39,
      "fragment": ")\n        self.vw_case_skip(\"unlimited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        unlimited_sku = register_config[\"unlimit\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, \"physical\")\n        physical_pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, physical_pool_id)\n\n        logger.info(\">>>step3: attach virtual sku by pool_id in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, \"virtual\")\n        virtual_pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res = self.vw_msg_search(output, unlimited_sku, exp_exist=True)\n        results.setdefault(\"step3\", []).append(res)\n\n        logger.info(\n            \">>>step4: unattach physical sku from host/hypervisor and check virtual pool\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 10,
        "end": 48,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 48,
          "column": 78,
          "position": 470
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 48,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 48,
          "column": 77,
          "position": 470
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", exp_exist=True)\n        results.setdefault(\"step3\", []).append(res)\n\n        logger.info(\n            \">>>step4: unattach physical sku from host/hypervisor and check virtual pool\"\n        )\n        self.vw_web_unattach(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 44,
        "end": 52,
        "startLoc": {
          "line": 44,
          "column": 14,
          "position": 438
        },
        "endLoc": {
          "line": 52,
          "column": 14,
          "position": 519
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 44,
        "end": 52,
        "startLoc": {
          "line": 44,
          "column": 16,
          "position": 440
        },
        "endLoc": {
          "line": 52,
          "column": 16,
          "position": 521
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, unlimited_sku, exp_exist=False)\n        results.setdefault(\"step4\", []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 50,
        "end": 56,
        "startLoc": {
          "line": 50,
          "column": 16,
          "position": 479
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 554
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 50,
        "end": 56,
        "startLoc": {
          "line": 50,
          "column": 19,
          "position": 479
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 554
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134069\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        self.vw_case_skip(\"unlimited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 14,
          "position": 224
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 19,
          "position": 224
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "unlimited_sku = register_config[\"unlimit\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, \"physical\")\n        pool_id",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 27,
        "end": 37,
        "startLoc": {
          "line": 27,
          "column": 9,
          "position": 224
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 338
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 26,
        "end": 36,
        "startLoc": {
          "line": 26,
          "column": 9,
          "position": 214
        },
        "endLoc": {
          "line": 36,
          "column": 17,
          "position": 328
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n            self.system_sku_attach(self.ssh_guest())\n            ins_attrs = self.system_sku_installed(self.ssh_guest())\n            results.setdefault(\"step3\", []).append(ins_attrs[\"status\"] == \"Subscribed\")\n        except:\n            results.setdefault(\"step3\", []).append(False)\n            pass\n\n        # case result\n        notes = list()\n        if \"satellite\" in register_type:\n            notes.append(\"Bug(Step3): Unable to use auto-attach\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1659014\")\n        self.vw_case_result(results, notes)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 43,
        "end": 56,
        "startLoc": {
          "line": 43,
          "column": 14,
          "position": 418
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 544
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py",
        "start": 47,
        "end": 60,
        "startLoc": {
          "line": 47,
          "column": 13,
          "position": 428
        },
        "endLoc": {
          "line": 60,
          "column": 2,
          "position": 554
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134067\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": ")\n        self.vw_case_skip(\"unlimited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        unlimited_sku = register_config[\"unlimit\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, \"physical\")\n        pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 10,
        "end": 40,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 40,
          "column": 7,
          "position": 363
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 40,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 40,
          "column": 4,
          "position": 363
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        cmd = \"subscription-manager repos --list\"\n        ret, output = self.runcmd(cmd, self.ssh_guest())\n        if \"stage\" in register_type:\n            res = self.vw_msg_search(output, \"Available Repositories\", exp_exist=True)\n        else:\n            res = self.vw_msg_search(\n                output, \"no repositories available\", exp_exist=True\n            )\n        results.setdefault(\"step4\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 48,
        "end": 57,
        "startLoc": {
          "line": 48,
          "column": 39,
          "position": 479
        },
        "endLoc": {
          "line": 57,
          "column": 8,
          "position": 573
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 71,
        "end": 80,
        "startLoc": {
          "line": 71,
          "column": 39,
          "position": 656
        },
        "endLoc": {
          "line": 80,
          "column": 8,
          "position": 750
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134065\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": ")\n        self.vw_case_skip(\"unlimited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        unlimited_sku = register_config[\"unlimit\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, \"physical\")\n        pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step3: check virtual sku is created or not in guest\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py",
        "start": 10,
        "end": 39,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 39,
          "column": 57,
          "position": 357
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 40,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 40,
          "column": 51,
          "position": 367
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134083\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        register_owner",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py",
        "start": 10,
        "end": 24,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 24,
          "column": 15,
          "position": 194
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 31,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 31,
          "column": 13,
          "position": 269
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134063\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        guest_name",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py",
        "start": 10,
        "end": 24,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 24,
          "column": 11,
          "position": 195
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 25,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 25,
          "column": 16,
          "position": 203
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\")\n        res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault(\"step2\", []).append(res)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 33,
          "position": 231
        },
        "endLoc": {
          "line": 37,
          "column": 7,
          "position": 343
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 39,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 39,
          "column": 14,
          "position": 367
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134061\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1076_check_guest_facts_by_subscription_manager.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1076_check_guest_facts_by_subscription_manager.py",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 11,
          "position": 173
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 215
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134059\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 13,
          "position": 174
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 215
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134056\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py",
        "start": 18,
        "end": 32,
        "startLoc": {
          "line": 18,
          "column": 14,
          "position": 161
        },
        "endLoc": {
          "line": 32,
          "column": 13,
          "position": 269
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 27,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 27,
          "column": 10,
          "position": 226
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133683\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        register_config",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 96
        },
        "endLoc": {
          "line": 26,
          "column": 16,
          "position": 219
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 13,
        "end": 23,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 106
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 184
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133747\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 195
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 31,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 31,
          "column": 13,
          "position": 269
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "self.system_register(self.ssh_host(), register_type, register_config)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step3\", []).append(res)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py",
        "start": 68,
        "end": 73,
        "startLoc": {
          "line": 68,
          "column": 13,
          "position": 649
        },
        "endLoc": {
          "line": 73,
          "column": 14,
          "position": 732
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 49,
        "end": 54,
        "startLoc": {
          "line": 49,
          "column": 13,
          "position": 508
        },
        "endLoc": {
          "line": 54,
          "column": 3,
          "position": 591
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133744\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133680\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 47,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        guest_name = self.get_hostname(self.ssh_guest())\n        guest_uuid = self.get_hypervisor_guestuuid()\n        json_file = \"/tmp/fake.json\"\n        conf_file = \"/etc/virt-who.d/fake.conf\"\n\n        # case steps\n        logger.info(\">>>step1: create json file\")\n        cli = \"virt-who -d\"\n        self.vw_fake_json_create(cli, json_file)\n        self.vw_etc_d_delete_all()\n        if \"libvirt-local\" in hypervisor_type or \"vdsm\" in hypervisor_type:\n            self.vw_fake_conf_create(conf_file, json_file, is_hypervisor=False)\n        else:\n            self.vw_fake_conf_create(conf_file, json_file, is_hypervisor=True)\n\n        logger.info(\">>>step2: run virt-who with fake conf\")\n        data, tty_output, rhsm_output = self.vw_start(cli=\"virt-who -d\")\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info(\">>>step3: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), \"RH00002\", \"physical\")\n        pool_id = sku_attrs[\"pool_id\"]\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step4: attach bonus sku for guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), \"RH00050\", \"virtual\")\n        pool_id = sku_attrs[\"pool_id\"]\n        self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res = self.vw_msg_search(output, \"RH00050\", exp_exist=True)\n        results.setdefault(\"step4\", []).append(res)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py",
        "start": 10,
        "end": 56,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 56,
          "column": 14,
          "position": 571
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py",
        "start": 10,
        "end": 56,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 56,
          "column": 7,
          "position": 571
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133681\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ")\n        guest_uuid = self.get_hypervisor_guestuuid()\n        json_file = \"/tmp/fake.json\"\n        conf_file = \"/etc/virt-who.d/fake.conf\"\n\n        # case steps\n        logger.info(\">>>step1: create json file\")\n        cli = \"virt-who -d\"\n        self.vw_fake_json_create(cli, json_file)\n        self.vw_etc_d_delete_all()\n        if \"libvirt-local\" in hypervisor_type or \"vdsm\" in hypervisor_type:\n            self.vw_fake_conf_create(conf_file, json_file, is_hypervisor=False)\n        else:\n            self.vw_fake_conf_create(conf_file, json_file, is_hypervisor=True)\n\n        logger.info(\">>>step2: run virt-who with fake conf\")\n        data, tty_output, rhsm_output = self.vw_start(cli=\"virt-who -d\")\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py",
        "start": 19,
        "end": 41,
        "startLoc": {
          "line": 19,
          "column": 2,
          "position": 150
        },
        "endLoc": {
          "line": 41,
          "column": 14,
          "position": 378
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py",
        "start": 21,
        "end": 43,
        "startLoc": {
          "line": 21,
          "column": 2,
          "position": 177
        },
        "endLoc": {
          "line": 43,
          "column": 7,
          "position": 405
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133703\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_enable",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 17,
          "position": 166
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 23,
          "position": 166
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_enable(\"[defaults]\", virtwho_conf)\n        self.vw_option_enable(\"hypervisor_id\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 17,
        "end": 28,
        "startLoc": {
          "line": 17,
          "column": 9,
          "position": 126
        },
        "endLoc": {
          "line": 28,
          "column": 12,
          "position": 241
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 17,
        "end": 28,
        "startLoc": {
          "line": 17,
          "column": 9,
          "position": 126
        },
        "endLoc": {
          "line": 28,
          "column": 10,
          "position": 241
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "if \"esx\" in hypervisor_type or \"rhevm\" in hypervisor_type:\n            steps = {\"step1\": \"uuid\", \"step2\": \"hostname\", \"step3\": \"hwuuid\"}\n        else:\n            steps = {\"step1\": \"uuid\", \"step2\": \"hostname\"}\n\n        # Case Steps\n        for step, option in sorted(steps.items(), key=lambda item: item[0]):\n            logger.info(\n                \">>>{0}: Run virt-who with hypervisor_id={1} in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 33,
        "end": 41,
        "startLoc": {
          "line": 33,
          "column": 9,
          "position": 294
        },
        "endLoc": {
          "line": 41,
          "column": 68,
          "position": 401
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 29,
        "end": 37,
        "startLoc": {
          "line": 29,
          "column": 9,
          "position": 255
        },
        "endLoc": {
          "line": 37,
          "column": 70,
          "position": 362
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133695\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        register_config = self.get_register_config()\n        register_owner = register_config[\"owner\"]\n        register_env",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 11,
        "end": 27,
        "startLoc": {
          "line": 11,
          "column": 9,
          "position": 104
        },
        "endLoc": {
          "line": 27,
          "column": 13,
          "position": 240
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 29,
        "startLoc": {
          "line": 14,
          "column": 9,
          "position": 139
        },
        "endLoc": {
          "line": 29,
          "column": 13,
          "position": 241
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault(\"step1\", []).append(res1)\n        results.setdefault(\"step1\", []).append(res2)\n\n        logger.info(\n            \">>>step2: Run virt-who with owner and env setting in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 34,
        "end": 41,
        "startLoc": {
          "line": 34,
          "column": 2,
          "position": 315
        },
        "endLoc": {
          "line": 41,
          "column": 74,
          "position": 406
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 39,
        "end": 46,
        "startLoc": {
          "line": 39,
          "column": 2,
          "position": 352
        },
        "endLoc": {
          "line": 46,
          "column": 89,
          "position": 443
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", virtwho_conf)\n        self.vw_option_update_value(\"env\", register_env, virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault(\"step2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 44,
        "end": 49,
        "startLoc": {
          "line": 44,
          "column": 15,
          "position": 431
        },
        "endLoc": {
          "line": 49,
          "column": 8,
          "position": 522
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 6,
          "position": 278
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 369
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133698\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        register_config = self.get_register_config()\n        register_owner = register_config[\"owner\"]\n\n        # case steps\n        logger.info(\">>>step1: Run virt-who with owner setting in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 66,
          "position": 213
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 30,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 30,
          "column": 55,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault(\"step1\", []).append(res1)\n        results.setdefault(\"step1\", []).append(res2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py",
        "start": 30,
        "end": 37,
        "startLoc": {
          "line": 30,
          "column": 15,
          "position": 247
        },
        "endLoc": {
          "line": 37,
          "column": 14,
          "position": 355
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 33,
        "end": 45,
        "startLoc": {
          "line": 33,
          "column": 13,
          "position": 292
        },
        "endLoc": {
          "line": 45,
          "column": 7,
          "position": 437
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133692\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 24,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 24,
          "column": 13,
          "position": 185
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 23,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 184
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault(\"step1\", []).append(res1)\n        results.setdefault(\"step1\", []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py",
        "start": 26,
        "end": 34,
        "startLoc": {
          "line": 26,
          "column": 13,
          "position": 201
        },
        "endLoc": {
          "line": 34,
          "column": 2,
          "position": 317
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 13,
          "position": 292
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 363
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133690\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/tmp/{0}.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py",
        "start": 12,
        "end": 23,
        "startLoc": {
          "line": 12,
          "column": 16,
          "position": 100
        },
        "endLoc": {
          "line": 23,
          "column": 16,
          "position": 186
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 13,
        "end": 24,
        "startLoc": {
          "line": 13,
          "column": 7,
          "position": 113
        },
        "endLoc": {
          "line": 24,
          "column": 27,
          "position": 199
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault(\"step1\", []).append(res1)\n        results.setdefault(\"step1\", []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py",
        "start": 30,
        "end": 38,
        "startLoc": {
          "line": 30,
          "column": 12,
          "position": 247
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 363
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 13,
          "position": 292
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 363
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133693\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        log_dir",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 8,
          "position": 184
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 23,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 184
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133688\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        log_dir = \"/var/log/rhsm/virtwho/\"\n        log_file = \"/var/log/rhsm/virtwho/rhsm.log\"\n\n        # case steps\n        logger.info(\">>>step1: Run virt-who with log-dir setting in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 27,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 27,
          "column": 68,
          "position": 206
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 27,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 27,
          "column": 64,
          "position": 206
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n        ret, output = self.runcmd(\"ls {0}\".format(log_file), self.ssh_host())\n        if ret == 0:\n            logger.info(\"Succeeded to find file: {0}\".format(log_file))\n            ret, output = self.runcmd(\"cat {0}\".format(log_file), self.ssh_host())\n            d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)\n            d2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n            if d1 is False or d2 is False:\n                results.setdefault(\"step1\", []).append(False)\n        else:\n            logger.error(\"{0} is not exist\".format(log_file))\n            results.setdefault(\"step1\", []).append(False)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py",
        "start": 29,
        "end": 46,
        "startLoc": {
          "line": 29,
          "column": 8,
          "position": 229
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 494
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py",
        "start": 31,
        "end": 48,
        "startLoc": {
          "line": 31,
          "column": 9,
          "position": 254
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 519
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133689\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n\n        # case steps\n        logger.info(\n            \">>>step1: Run virt-who with log-per-config=False in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 73,
          "position": 194
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 25,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 25,
          "column": 59,
          "position": 192
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133686\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info('>>>step1: Run virt-who with \"onestho=True\"'",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 24,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 24,
          "column": 45,
          "position": 181
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 24,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 24,
          "column": 57,
          "position": 181
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133687\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(\n            output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=False\n        )\n        results.setdefault(\"step3\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py",
        "start": 42,
        "end": 48,
        "startLoc": {
          "line": 42,
          "column": 8,
          "position": 436
        },
        "endLoc": {
          "line": 48,
          "column": 8,
          "position": 521
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py",
        "start": 24,
        "end": 38,
        "startLoc": {
          "line": 24,
          "column": 7,
          "position": 179
        },
        "endLoc": {
          "line": 38,
          "column": 8,
          "position": 392
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133684\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        default_reporter_id",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 20,
          "position": 173
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 215
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "self.vw_option_enable(\"reporter_id\", virtwho_conf)\n                self.vw_option_update_value(\"reporter_id\", value, virtwho_conf)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(step, []).append(res)\n            if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 17,
          "position": 281
        },
        "endLoc": {
          "line": 37,
          "column": 3,
          "position": 370
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py",
        "start": 42,
        "end": 47,
        "startLoc": {
          "line": 42,
          "column": 13,
          "position": 397
        },
        "endLoc": {
          "line": 47,
          "column": 5,
          "position": 486
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133685\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable(\"[global]\", virtwho_conf)\n        self.vw_option_enable(\"debug\", virtwho_conf)\n        self.vw_option_update_value(\"debug\", \"True\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info(\">>>step1: enable interval and set to 10 in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 24,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 24,
          "column": 64,
          "position": 181
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 15,
        "end": 24,
        "startLoc": {
          "line": 15,
          "column": 19,
          "position": 147
        },
        "endLoc": {
          "line": 24,
          "column": 57,
          "position": 181
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(\n            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600\n        )\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: enable interval and set to 60 in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 26,
        "end": 33,
        "startLoc": {
          "line": 26,
          "column": 5,
          "position": 204
        },
        "endLoc": {
          "line": 33,
          "column": 64,
          "position": 288
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 28,
        "end": 36,
        "startLoc": {
          "line": 28,
          "column": 3,
          "position": 239
        },
        "endLoc": {
          "line": 36,
          "column": 75,
          "position": 325
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)\n        res = self.op_normal_value(\n            data,\n            exp_error=0,\n            exp_thread=1,\n            exp_send=1,\n            exp_interval=60,\n            exp_loopnum=1,\n            exp_looptime=60,\n        )\n        results.setdefault(\"step2\", []).append(res)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 34,
        "end": 47,
        "startLoc": {
          "line": 34,
          "column": 13,
          "position": 303
        },
        "endLoc": {
          "line": 47,
          "column": 7,
          "position": 402
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 40,
        "end": 53,
        "startLoc": {
          "line": 40,
          "column": 26,
          "position": 367
        },
        "endLoc": {
          "line": 53,
          "column": 14,
          "position": 466
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133682\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=True)\n        results.setdefault(\"step1\", []).append(res1)\n        results.setdefault(\"step1\", []).append(res2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py",
        "start": 24,
        "end": 31,
        "startLoc": {
          "line": 24,
          "column": 2,
          "position": 187
        },
        "endLoc": {
          "line": 31,
          "column": 14,
          "position": 297
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py",
        "start": 24,
        "end": 31,
        "startLoc": {
          "line": 24,
          "column": 2,
          "position": 181
        },
        "endLoc": {
          "line": 31,
          "column": 7,
          "position": 291
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133714\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ":\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 12,
        "end": 25,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 104
        },
        "endLoc": {
          "line": 25,
          "column": 12,
          "position": 212
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 13,
        "end": 35,
        "startLoc": {
          "line": 13,
          "column": 6,
          "position": 108
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        register_owner = register_config[\"owner\"]\n        if \"esx\" in hypervisor_type or \"rhevm\" in hypervisor_type:\n            steps = {\"step1\": \"uuid\", \"step2\": \"hostname\", \"step3\": \"hwuuid\"}\n        else:\n            steps = {\"step1\": \"uuid\", \"step2\": \"hostname\"}\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 20,
        "end": 35,
        "startLoc": {
          "line": 20,
          "column": 21,
          "position": 168
        },
        "endLoc": {
          "line": 35,
          "column": 13,
          "position": 330
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 23,
        "end": 38,
        "startLoc": {
          "line": 23,
          "column": 13,
          "position": 197
        },
        "endLoc": {
          "line": 38,
          "column": 13,
          "position": 359
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133709\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        register_owner = register_config[\"owner\"]\n        if \"esx\" in hypervisor_type or \"rhevm\" in hypervisor_type:\n            steps = {\"step1\": \"uuid\", \"step2\": \"hostname\", \"step3\": \"hwuuid\"}\n        else:\n            steps = {\"step1\": \"uuid\", \"step2\": \"hostname\"}\n\n        # case steps\n        for step, option in sorted(steps.items(), key=lambda item: item[0]):\n            logger.info(\n                \">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 38,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 38,
          "column": 70,
          "position": 372
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 38,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 38,
          "column": 71,
          "position": 372
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133705\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        register_owner = register_config[\"owner\"]\n        if \"esx\" in hypervisor_type or \"rhevm\" in hypervisor_type:\n            steps = {\"step1\": \"uuid\", \"step2\": \"hostname\", \"step3\": \"hwuuid\"}\n        else:\n            steps = {\"step1\": \"uuid\", \"step2\": \"hostname\"}\n\n        # case steps\n        for step, option in sorted(steps.items(), key=lambda item: item[0]):\n            logger.info(\n                \">>>{0}: run virt-who with hypervisor_id={1}\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 38,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 38,
          "column": 46,
          "position": 372
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 38,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 38,
          "column": 71,
          "position": 372
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "= host_uuid\n            if hypervisorId in data[register_owner].keys():\n                logger.info(\"Succeeded to search hypervisorId:{0}\".format(hypervisorId))\n                results.setdefault(step, []).append(True)\n            else:\n                logger.error(\"Failed to search hypervisorId:{0}\".format(hypervisorId))\n                results.setdefault(step, []).append(False)\n            if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py",
        "start": 52,
        "end": 59,
        "startLoc": {
          "line": 52,
          "column": 2,
          "position": 524
        },
        "endLoc": {
          "line": 59,
          "column": 3,
          "position": 610
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 54,
        "end": 61,
        "startLoc": {
          "line": 54,
          "column": 2,
          "position": 534
        },
        "endLoc": {
          "line": 61,
          "column": 5,
          "position": 620
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n                )\n                results.setdefault(step, []).append(False)\n            self.vw_option_del(\"hypervisor_id\", filename=config_file)\n            self.vw_web_host_delete(host_name, hypervisorId)\n        if \"stage\" in register_type:\n            self.stage_consumer_clean(self.ssh_host(), register_config)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py",
        "start": 84,
        "end": 93,
        "startLoc": {
          "line": 84,
          "column": 19,
          "position": 794
        },
        "endLoc": {
          "line": 93,
          "column": 2,
          "position": 875
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 59,
        "end": 67,
        "startLoc": {
          "line": 59,
          "column": 13,
          "position": 599
        },
        "endLoc": {
          "line": 67,
          "column": 2,
          "position": 678
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133705\")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if \"esx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 6,
          "position": 94
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 16,
          "position": 94
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ":\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 12,
        "end": 27,
        "startLoc": {
          "line": 12,
          "column": 16,
          "position": 101
        },
        "endLoc": {
          "line": 27,
          "column": 13,
          "position": 221
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 13,
        "end": 26,
        "startLoc": {
          "line": 13,
          "column": 6,
          "position": 108
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 223
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133707\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 213
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 35,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(s1)\n\n        logger.info(\n            \">>>step2: run virt-who with filter_hosts=[host_uuid] and exclude_hosts=[host_uuid]\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 27,
        "end": 33,
        "startLoc": {
          "line": 27,
          "column": 64,
          "position": 221
        },
        "endLoc": {
          "line": 33,
          "column": 85,
          "position": 292
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 60,
          "position": 229
        },
        "endLoc": {
          "line": 33,
          "column": 50,
          "position": 298
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)\n        results.setdefault(\"step2\", []).append(s2)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 36,
        "end": 42,
        "startLoc": {
          "line": 36,
          "column": 2,
          "position": 326
        },
        "endLoc": {
          "line": 42,
          "column": 5,
          "position": 431
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 36,
        "end": 43,
        "startLoc": {
          "line": 36,
          "column": 2,
          "position": 360
        },
        "endLoc": {
          "line": 43,
          "column": 7,
          "position": 466
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step4\", []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)\n        results.setdefault(\"step4\", []).append(s2)\n        self.vw_option_del(\"exclude_hosts\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 62,
        "end": 68,
        "startLoc": {
          "line": 62,
          "column": 2,
          "position": 670
        },
        "endLoc": {
          "line": 68,
          "column": 16,
          "position": 779
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 52,
        "end": 58,
        "startLoc": {
          "line": 52,
          "column": 2,
          "position": 618
        },
        "endLoc": {
          "line": 58,
          "column": 15,
          "position": 727
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133700\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if \"esx\" not in hypervisor_type:\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n\n        # case steps\n        logger.info(\n            \">>>step1: run virt-who with exlude_host_parents=* to get domain_id\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 29,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 29,
          "column": 69,
          "position": 230
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 28,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 28,
          "column": 60,
          "position": 228
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)\n        results.setdefault(\"step1\", []).append(s2)\n        domain_id",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 31,
        "end": 37,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 248
        },
        "endLoc": {
          "line": 37,
          "column": 10,
          "position": 353
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 35,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 235
        },
        "endLoc": {
          "line": 35,
          "column": 7,
          "position": 341
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", filename=config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)\n        results.setdefault(\"step2\", []).append(s2)\n\n        logger.info(\">>>step3: run virt-who with exclude_host_parents=\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 47,
        "end": 54,
        "startLoc": {
          "line": 47,
          "column": 10,
          "position": 437
        },
        "endLoc": {
          "line": 54,
          "column": 52,
          "position": 551
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 34,
        "end": 43,
        "startLoc": {
          "line": 34,
          "column": 7,
          "position": 310
        },
        "endLoc": {
          "line": 43,
          "column": 55,
          "position": 470
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", filename=config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step4\", []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)\n        results.setdefault(\"step4\", []).append(s2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 55,
        "end": 62,
        "startLoc": {
          "line": 55,
          "column": 3,
          "position": 563
        },
        "endLoc": {
          "line": 62,
          "column": 14,
          "position": 673
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 62,
        "end": 58,
        "startLoc": {
          "line": 62,
          "column": 10,
          "position": 666
        },
        "endLoc": {
          "line": 58,
          "column": 5,
          "position": 723
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133702\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if \"esx\" not in hypervisor_type:\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n\n        # case steps\n        logger.info(\n            \">>>step1: run virt-who with filter_host_parents='' to get domain_id\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 29,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 29,
          "column": 70,
          "position": 230
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 28,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 28,
          "column": 60,
          "position": 228
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ", filename=config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)\n        results.setdefault(\"step1\", []).append(s2)\n        domain_id = re.findall(\n            r\"Skipping host '{0}' because its parent '(.*?)'\".format(host_hwuuid),\n            rhsm_output,\n        )[-1]\n        logger.info(\n            \"Succeeded to find: {0}:{1}:{2}\".format(host_hwuuid, domain_id, host_uuid)\n        )\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py",
        "start": 31,
        "end": 45,
        "startLoc": {
          "line": 31,
          "column": 3,
          "position": 244
        },
        "endLoc": {
          "line": 45,
          "column": 7,
          "position": 408
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 31,
        "end": 44,
        "startLoc": {
          "line": 31,
          "column": 4,
          "position": 244
        },
        "endLoc": {
          "line": 44,
          "column": 5,
          "position": 407
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", domain_id, filename=config_file\n        )\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py",
        "start": 47,
        "end": 52,
        "startLoc": {
          "line": 47,
          "column": 22,
          "position": 423
        },
        "endLoc": {
          "line": 52,
          "column": 5,
          "position": 516
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 47,
        "end": 40,
        "startLoc": {
          "line": 47,
          "column": 23,
          "position": 434
        },
        "endLoc": {
          "line": 40,
          "column": 6,
          "position": 444
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133694\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_str",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 9,
          "position": 212
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 35,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(s1)\n\n        logger.info(\">>>step2: run virt-who with exclude_hosts=[host_uuid]\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 47,
          "position": 233
        },
        "endLoc": {
          "line": 33,
          "column": 56,
          "position": 302
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 60,
          "position": 229
        },
        "endLoc": {
          "line": 33,
          "column": 50,
          "position": 298
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        self.vw_option_add(\"exclude_hosts\", host_uuid, filename=config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(s1)\n        s2 = self.vw_msg_search(rhsm_output",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 56,
          "position": 303
        },
        "endLoc": {
          "line": 38,
          "column": 12,
          "position": 391
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 35,
        "end": 40,
        "startLoc": {
          "line": 35,
          "column": 12,
          "position": 311
        },
        "endLoc": {
          "line": 40,
          "column": 4,
          "position": 433
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133697\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_str = '\"hypervisorId\": \"{0}\"'.format(host_uuid)\n\n        # case steps\n        logger.info(\">>>step1: run virt-who without filter_hosts\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 28,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 28,
          "column": 46,
          "position": 232
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 28,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 28,
          "column": 47,
          "position": 232
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(s1)\n\n        logger.info(\">>>step2: run virt-who with filter_hosts=[host_uuid]\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 46,
          "position": 233
        },
        "endLoc": {
          "line": 33,
          "column": 55,
          "position": 302
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 60,
          "position": 229
        },
        "endLoc": {
          "line": 33,
          "column": 50,
          "position": 298
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133691\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config[\"server\"]\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 11,
        "end": 24,
        "startLoc": {
          "line": 11,
          "column": 18,
          "position": 89
        },
        "endLoc": {
          "line": 24,
          "column": 3,
          "position": 199
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py",
        "start": 16,
        "end": 26,
        "startLoc": {
          "line": 16,
          "column": 11,
          "position": 141
        },
        "endLoc": {
          "line": 26,
          "column": 18,
          "position": 222
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step1\", []).append(s1)\n            s2 = self.vw_msg_search(\n                rhsm_output, \"Connection built.*{0}\".format(proxy_server)\n            )",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 46,
        "end": 52,
        "startLoc": {
          "line": 46,
          "column": 22,
          "position": 361
        },
        "endLoc": {
          "line": 52,
          "column": 2,
          "position": 446
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 51,
        "startLoc": {
          "line": 28,
          "column": 12,
          "position": 236
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 483
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n            self.vw_option_update_value(\n                \"no_proxy\", register_server, \"/etc/rhsm/rhsm.conf\"\n            )\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step3\", []).append(s1)\n\n            logger.info(\">>>step4: set no_proxy=* in /etc/rhsm/rhsm.conf\")\n            self.vw_option_update_value(\"no_proxy\", \"*\", \"/etc/rhsm/rhsm.conf\")\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step4\", []).append(s1)\n            self.vw_option_update_value(\"no_proxy\", \"\", \"/etc/rhsm/rhsm.conf\")\n\n            logger.info(\n                \">>>step5: set rhsm_no_proxy=[register_server] in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 74,
        "end": 90,
        "startLoc": {
          "line": 74,
          "column": 13,
          "position": 660
        },
        "endLoc": {
          "line": 90,
          "column": 70,
          "position": 847
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 73,
        "end": 89,
        "startLoc": {
          "line": 73,
          "column": 13,
          "position": 707
        },
        "endLoc": {
          "line": 89,
          "column": 70,
          "position": 894
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n            self.vw_option_enable(\"[defaults]\", \"/etc/virt-who.conf\")\n            self.vw_option_enable(\"rhsm_no_proxy\", \"/etc/virt-who.conf\")\n            self.vw_option_update_value(\n                \"rhsm_no_proxy\", register_server, \"/etc/virt-who.conf\"\n            )\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step5\", []).append(s1)\n\n            logger.info(\">>>step6: set rhsm_no_proxy=* in /etc/virt-who.conf\")\n            self.vw_option_update_value(\"rhsm_no_proxy\", \"*\", \"/etc/virt-who.conf\")\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(\"step6\", []).append(s1)\n            self.vw_option_disable(\"rhsm_no_proxy\", \"/etc/virt-who.conf\")\n\n            if hypervisor_type not in (\"libvirt-local\", \"vdsm\"):\n                # frequently start virt-who will get 429 error, sleep 15s to fix",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 91,
        "end": 109,
        "startLoc": {
          "line": 91,
          "column": 13,
          "position": 850
        },
        "endLoc": {
          "line": 109,
          "column": 65,
          "position": 1067
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 90,
        "end": 108,
        "startLoc": {
          "line": 90,
          "column": 13,
          "position": 897
        },
        "endLoc": {
          "line": 108,
          "column": 7,
          "position": 1114
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n                self.vw_option_add(\"rhsm_no_proxy\", register_server, config_file)\n                data, tty_output, rhsm_output = self.vw_start()\n                s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n                results.setdefault(\"step7\", []).append(s1)\n\n                time",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 113,
        "end": 119,
        "startLoc": {
          "line": 113,
          "column": 17,
          "position": 1087
        },
        "endLoc": {
          "line": 119,
          "column": 5,
          "position": 1166
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 110,
        "end": 116,
        "startLoc": {
          "line": 110,
          "column": 17,
          "position": 1123
        },
        "endLoc": {
          "line": 116,
          "column": 7,
          "position": 1202
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n                logger.info(\">>>step8: set rhsm_no_proxy=* in /etc/virt-who.d/x.conf\")\n                self.vw_option_update_value(\"rhsm_no_proxy\", \"*\", config_file)\n                data, tty_output, rhsm_output = self.vw_start()\n                s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n                results.setdefault(\"step8\", []).append(s1)\n                self.vw_option_del(\"rhsm_no_proxy\", config_file)\n            else:\n                logger.info(\"Skip step7 and step8 for {0}\".format(hypervisor_type))\n        except:\n            results.setdefault(\"step except\", []).append(False)\n            pass\n\n        finally:\n            self.vw_option_update_value(\"proxy_hostname\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 119,
        "end": 133,
        "startLoc": {
          "line": 119,
          "column": 3,
          "position": 1171
        },
        "endLoc": {
          "line": 133,
          "column": 17,
          "position": 1318
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 114,
        "end": 129,
        "startLoc": {
          "line": 114,
          "column": 3,
          "position": 1198
        },
        "endLoc": {
          "line": 129,
          "column": 11,
          "position": 1346
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133713\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        register_server",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 16,
          "position": 222
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 30,
          "column": 10,
          "position": 254
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "logger.info(\n            \">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value\"\n        )\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_hostname disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 32,
        "end": 44,
        "startLoc": {
          "line": 32,
          "column": 9,
          "position": 266
        },
        "endLoc": {
          "line": 44,
          "column": 52,
          "position": 417
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 13,
          "position": 295
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133712\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        register_server = register_config[\"server\"]\n        register_username = register_config[\"username\"]\n        register_password = register_config[\"password\"]\n        register_prefix = register_config[\"prefix\"]\n\n        # case steps\n        logger.info(\n            \">>>step1: run virt-who with rhsm_username and rhsm_password good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 33,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 33,
          "column": 73,
          "position": 272
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 33,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 33,
          "column": 79,
          "position": 272
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\n            \">>>step2: run virt-who with rhsm_username and rhsm_encrypted_password good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 34,
        "end": 45,
        "startLoc": {
          "line": 34,
          "column": 9,
          "position": 275
        },
        "endLoc": {
          "line": 45,
          "column": 83,
          "position": 419
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 12,
          "position": 315
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(res)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 49,
        "end": 54,
        "startLoc": {
          "line": 49,
          "column": 16,
          "position": 456
        },
        "endLoc": {
          "line": 54,
          "column": 14,
          "position": 527
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 45,
        "end": 49,
        "startLoc": {
          "line": 45,
          "column": 16,
          "position": 426
        },
        "endLoc": {
          "line": 49,
          "column": 5,
          "position": 496
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133710\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config[\"type\"]\n        register_server = register_config[\"server\"]\n        register_username = register_config[\"username\"]\n        register_password = register_config[\"password\"]\n        register_prefix = register_config[\"prefix\"]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who without rhsm_username and rhsm_password\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 32,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 32,
          "column": 65,
          "position": 270
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 33,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 33,
          "column": 79,
          "position": 272
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\n            \">>>step2: run virt-who with rhsm_username and rhsm_password good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 32,
        "end": 38,
        "startLoc": {
          "line": 32,
          "column": 65,
          "position": 271
        },
        "endLoc": {
          "line": 38,
          "column": 73,
          "position": 345
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 39,
        "end": 47,
        "startLoc": {
          "line": 39,
          "column": 9,
          "position": 348
        },
        "endLoc": {
          "line": 47,
          "column": 8,
          "position": 472
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 12,
          "position": 315
        },
        "endLoc": {
          "line": 44,
          "column": 8,
          "position": 416
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(res)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 44,
        "end": 49,
        "startLoc": {
          "line": 44,
          "column": 18,
          "position": 415
        },
        "endLoc": {
          "line": 49,
          "column": 7,
          "position": 486
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 45,
        "end": 49,
        "startLoc": {
          "line": 45,
          "column": 16,
          "position": 426
        },
        "endLoc": {
          "line": 49,
          "column": 5,
          "position": 496
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step3\", []).append(res)\n\n        logger.info(\n            \">>>step4: run virt-who with rhsm_username and rhsm_password disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 53,
        "end": 59,
        "startLoc": {
          "line": 53,
          "column": 3,
          "position": 520
        },
        "endLoc": {
          "line": 59,
          "column": 70,
          "position": 597
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 52,
        "end": 56,
        "startLoc": {
          "line": 52,
          "column": 12,
          "position": 521
        },
        "endLoc": {
          "line": 56,
          "column": 62,
          "position": 529
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step4\", []).append(res)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 62,
        "end": 67,
        "startLoc": {
          "line": 62,
          "column": 16,
          "position": 619
        },
        "endLoc": {
          "line": 67,
          "column": 14,
          "position": 690
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 59,
        "end": 63,
        "startLoc": {
          "line": 59,
          "column": 14,
          "position": 616
        },
        "endLoc": {
          "line": 63,
          "column": 5,
          "position": 686
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info(\">>>step1: run virt-who without encrypted_password\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 13,
        "end": 27,
        "startLoc": {
          "line": 13,
          "column": 11,
          "position": 123
        },
        "endLoc": {
          "line": 27,
          "column": 52,
          "position": 229
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 12,
        "end": 29,
        "startLoc": {
          "line": 12,
          "column": 7,
          "position": 103
        },
        "endLoc": {
          "line": 29,
          "column": 63,
          "position": 238
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: run virt-who with encrypted_password\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 52,
          "position": 230
        },
        "endLoc": {
          "line": 32,
          "column": 49,
          "position": 302
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133706\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1040_check_virt_who_password_function.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133704\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "for step, option in sorted(steps.items(), key=lambda item: item[0]):\n            logger.info(\">>>{0}: run virt-who to check {1}\".format(step, option))\n            if option == \"http_proxy\":\n                value = \"http://{0}\".format(proxy_server)\n                bad_value = \"http://{0}\".format(bad_proxy_server)\n            if option == \"https_proxy\":\n                value = \"https://{0}\".format(proxy_server)\n                bad_value = \"https://{0}\".format(bad_proxy_server)\n            logger.info(\"> run virt-who with good {0}\".format(option))\n            self.vw_option_add",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py",
        "start": 33,
        "end": 42,
        "startLoc": {
          "line": 33,
          "column": 9,
          "position": 259
        },
        "endLoc": {
          "line": 42,
          "column": 14,
          "position": 391
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 36,
        "end": 45,
        "startLoc": {
          "line": 36,
          "column": 9,
          "position": 307
        },
        "endLoc": {
          "line": 45,
          "column": 17,
          "position": 439
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "(option, value, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            s2 = self.vw_msg_search(\n                rhsm_output,\n                \"Connection built.*{0}\".format(proxy_server),\n                exp_exist=True,\n            )\n            s3 = self.vw_msg_search(\n                rhsm_output, \"Using proxy.*{0}\".format(proxy_server), exp_exist=True\n            )\n            results.setdefault(step, []).append(s1)\n            results.setdefault(step, []).append(s2)\n            results.setdefault(step, []).append(s3)\n\n            logger.info(\"> run virt-who with bad {0}\".format(option))\n            self.vw_option_update_value(option, bad_value, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=0)\n            s4 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            s5 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)\n            results.setdefault(step, []).append(s4)\n            results.setdefault(step, []).append(s5)\n\n            logger.info(\">>> run virt-who with no_proxy and bad proxy\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py",
        "start": 42,
        "end": 65,
        "startLoc": {
          "line": 42,
          "column": 14,
          "position": 392
        },
        "endLoc": {
          "line": 65,
          "column": 47,
          "position": 696
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 46,
        "end": 69,
        "startLoc": {
          "line": 46,
          "column": 23,
          "position": 451
        },
        "endLoc": {
          "line": 69,
          "column": 50,
          "position": 755
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133701\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133748\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1037_check_sam_satellite_options_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133739\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        swap_file",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py",
        "start": 12,
        "end": 23,
        "startLoc": {
          "line": 12,
          "column": 16,
          "position": 100
        },
        "endLoc": {
          "line": 23,
          "column": 10,
          "position": 187
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 12,
        "end": 24,
        "startLoc": {
          "line": 12,
          "column": 7,
          "position": 103
        },
        "endLoc": {
          "line": 24,
          "column": 5,
          "position": 194
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n\n        logger.info(\">>>step2: check how many modes in rhsm.log\")\n        modes = re.findall(r'Using configuration.*\\(\"(.*?)\" mode\\)', rhsm_output)\n        if len(modes) == 1:\n            logger.info(\n                \"Succeeded to check, only one mode in rhsm.log: {0}\".format(modes)\n            )\n            results.setdefault(\"step2\", []).append(True)\n        else:\n            logger.error(\n                \"Failed to check, the modes number is not matched: {0}\".format(modes)\n            )\n            results.setdefault(\"step2\", []).append(False)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py",
        "start": 33,
        "end": 49,
        "startLoc": {
          "line": 33,
          "column": 3,
          "position": 326
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 448
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py",
        "start": 36,
        "end": 52,
        "startLoc": {
          "line": 36,
          "column": 4,
          "position": 357
        },
        "endLoc": {
          "line": 52,
          "column": 2,
          "position": 479
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133735\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type in (\"libvirt-local\", \"vdsm\"):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), \"virt-who\")[9:15] >= \"0.23.3\":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # case config",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py",
        "start": 10,
        "end": 18,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 18,
          "column": 14,
          "position": 158
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 10,
        "end": 18,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 18,
          "column": 14,
          "position": 158
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check mapping info duplicated or not\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 12,
          "position": 264
        },
        "endLoc": {
          "line": 37,
          "column": 49,
          "position": 339
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 44,
        "startLoc": {
          "line": 38,
          "column": 16,
          "position": 352
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133730\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "in hypervisor_type:\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info(\n            \">>>step1: run virt-who service with one config file in /etc/virt-who.d/\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py",
        "start": 12,
        "end": 27,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 96
        },
        "endLoc": {
          "line": 27,
          "column": 74,
          "position": 206
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 12,
        "end": 29,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 98
        },
        "endLoc": {
          "line": 29,
          "column": 63,
          "position": 238
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133746\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info(\">>>step1: restart virt-who service, check status and thread\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 62,
          "position": 174
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py",
        "start": 16,
        "end": 29,
        "startLoc": {
          "line": 16,
          "column": 11,
          "position": 141
        },
        "endLoc": {
          "line": 29,
          "column": 63,
          "position": 238
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step3\", []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py",
        "start": 42,
        "end": 48,
        "startLoc": {
          "line": 42,
          "column": 9,
          "position": 398
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 474
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py",
        "start": 68,
        "end": 74,
        "startLoc": {
          "line": 68,
          "column": 16,
          "position": 664
        },
        "endLoc": {
          "line": 74,
          "column": 2,
          "position": 740
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133745\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1028_check_guest_attr_by_curl.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        self.vw_etc_d_mode_create(config_name, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check guest attributes by curl\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1028_check_guest_attr_by_curl.py",
        "start": 23,
        "end": 29,
        "startLoc": {
          "line": 23,
          "column": 61,
          "position": 177
        },
        "endLoc": {
          "line": 29,
          "column": 43,
          "position": 260
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py",
        "start": 31,
        "end": 44,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 256
        },
        "endLoc": {
          "line": 44,
          "column": 56,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133741\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133738\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1025_start_virtwho_service_by_ssh.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133736\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        ret, output = self.runcmd(cmd, self.ssh_host())\n        logger.info(output)\n        if ret == 0 and output is not None and output != \"\":\n            res = self.vw_msg_search(output, \"-rw-------\")\n            results.setdefault(\"step2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py",
        "start": 34,
        "end": 39,
        "startLoc": {
          "line": 34,
          "column": 9,
          "position": 338
        },
        "endLoc": {
          "line": 39,
          "column": 8,
          "position": 418
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py",
        "start": 21,
        "end": 26,
        "startLoc": {
          "line": 21,
          "column": 12,
          "position": 173
        },
        "endLoc": {
          "line": 26,
          "column": 8,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133734\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133732\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134123\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1021_check_reporter_id_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134122\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1020_check_log_file_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "))\n                results.setdefault(step, []).append(False)\n\n        # case result\n        notes = list()\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type == \"kubevirt\":\n            notes.append(\"(step1,2) No kubeconfig option for cli\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441\")\n        self.vw_case_result(results, notes)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1020_check_log_file_function_by_cli.py",
        "start": 41,
        "end": 50,
        "startLoc": {
          "line": 41,
          "column": 9,
          "position": 494
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 574
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1021_check_reporter_id_function_by_cli.py",
        "start": 38,
        "end": 48,
        "startLoc": {
          "line": 38,
          "column": 12,
          "position": 380
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 462
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134121\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1019_check_log_dir_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ".format(step))\n            data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(step, []).append(res)\n            ret, output = self.runcmd(\"ls {0}\".format(log_file), self.ssh_host())\n            if ret == 0:\n                ret, output = self.runcmd(\"cat {0}\".format(log_file), self.ssh_host())\n                d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)\n                d2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n                if d1 is False or d2 is False:\n                    results.setdefault(step, []).append(False)\n            else:\n                logger.error(\"{0} is not exist\".format(log_file))\n                results.setdefault(step, []).append(False)\n\n        # case result\n        notes = list()\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type == \"kubevirt\":\n            notes.append(\"(step1,2) No kubeconfig option for cli\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441\")\n        self.vw_case_result(results, notes)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1019_check_log_dir_function_by_cli.py",
        "start": 27,
        "end": 48,
        "startLoc": {
          "line": 27,
          "column": 44,
          "position": 257
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 564
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1021_check_reporter_id_function_by_cli.py",
        "start": 25,
        "end": 48,
        "startLoc": {
          "line": 25,
          "column": 48,
          "position": 239
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 462
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133696\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "for fd in files:\n                fd = fd.strip()\n                ret, output = self.runcmd(\"cat {0}\".format(fd), self.ssh_host())\n                if \"destination\" in fd:\n                    d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)\n                    d2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n                    if d1 is False or d2 is False:\n                        logger.error(\"Failed to validate virtwho.destination file\")\n                        results.setdefault(step",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 51,
        "end": 59,
        "startLoc": {
          "line": 51,
          "column": 13,
          "position": 565
        },
        "endLoc": {
          "line": 59,
          "column": 5,
          "position": 693
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 72,
        "end": 80,
        "startLoc": {
          "line": 72,
          "column": 9,
          "position": 725
        },
        "endLoc": {
          "line": 80,
          "column": 8,
          "position": 853
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", []).append(False)\n                if \"main\" in fd:\n                    m1 = self.vw_msg_search(output, \"Report for config\", exp_exist=True)\n                    m2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n                    if m1 is False or m2 is False:\n                        logger.error(\"Failed to validate virtwho.main file\")\n                        results.setdefault(step",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 59,
        "end": 65,
        "startLoc": {
          "line": 59,
          "column": 5,
          "position": 694
        },
        "endLoc": {
          "line": 65,
          "column": 5,
          "position": 786
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 80,
        "end": 86,
        "startLoc": {
          "line": 80,
          "column": 8,
          "position": 854
        },
        "endLoc": {
          "line": 86,
          "column": 8,
          "position": 946
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", []).append(False)\n                if \"rhsm_log\" in fd:\n                    r1 = self.vw_msg_search(\n                        output, \"Using reporter_id=\", exp_exist=True\n                    )\n                    r2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n                    if r1 is False or r2 is False:\n                        logger.error(\"Failed to validate virtwho.rhsm_log file\")\n                        results.setdefault(step",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 65,
        "end": 73,
        "startLoc": {
          "line": 65,
          "column": 5,
          "position": 787
        },
        "endLoc": {
          "line": 73,
          "column": 5,
          "position": 883
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 86,
        "end": 92,
        "startLoc": {
          "line": 86,
          "column": 8,
          "position": 947
        },
        "endLoc": {
          "line": 92,
          "column": 8,
          "position": 1039
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n                        results.setdefault(step, []).append(False)\n        # case result\n        notes = list()\n        hypervisor_type = self.get_config(\"hypervisor_type\")\n        if hypervisor_type == \"kubevirt\":\n            notes.append(\"(step1,2) No kubeconfig option for cli\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441\")\n        self.vw_case_result(results, notes)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 72,
        "end": 80,
        "startLoc": {
          "line": 72,
          "column": 43,
          "position": 876
        },
        "endLoc": {
          "line": 80,
          "column": 2,
          "position": 954
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1021_check_reporter_id_function_by_cli.py",
        "start": 39,
        "end": 48,
        "startLoc": {
          "line": 39,
          "column": 17,
          "position": 383
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 462
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133658\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1017_check_config_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133653\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1016_check_print_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133655\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(\n            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600\n        )\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: enable VIRTWHO_INTERVAL and set to 10\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 27,
        "end": 34,
        "startLoc": {
          "line": 27,
          "column": 13,
          "position": 230
        },
        "endLoc": {
          "line": 34,
          "column": 50,
          "position": 311
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 28,
        "end": 36,
        "startLoc": {
          "line": 28,
          "column": 13,
          "position": 242
        },
        "endLoc": {
          "line": 36,
          "column": 75,
          "position": 325
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)\n        res = self.op_normal_value(\n            data,\n            exp_error=0,\n            exp_thread=1,\n            exp_send=1,\n            exp_interval=60,\n            exp_loopnum=1,\n            exp_looptime=60,\n        )\n        results.setdefault(\"step3\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 44,
        "end": 55,
        "startLoc": {
          "line": 44,
          "column": 13,
          "position": 439
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 524
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 40,
        "end": 51,
        "startLoc": {
          "line": 40,
          "column": 26,
          "position": 367
        },
        "endLoc": {
          "line": 51,
          "column": 8,
          "position": 452
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)\n        res = self.op_normal_value(\n            data,\n            exp_error=0,\n            exp_thread=1,\n            exp_send=1,\n            exp_interval=120,\n            exp_loopnum=1,\n            exp_looptime=120,\n        )\n        results.setdefault(\"step4\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 58,
        "end": 69,
        "startLoc": {
          "line": 58,
          "column": 13,
          "position": 559
        },
        "endLoc": {
          "line": 69,
          "column": 8,
          "position": 644
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 48,
        "end": 59,
        "startLoc": {
          "line": 48,
          "column": 13,
          "position": 421
        },
        "endLoc": {
          "line": 59,
          "column": 8,
          "position": 506
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133650\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1014_check_interval_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "exp_send=1, exp_loopnum=1\n        )\n        res = self.op_normal_value(\n            data,\n            exp_error=0,\n            exp_thread=1,\n            exp_send=1,\n            exp_interval=60,\n            exp_loopnum=1,\n            exp_looptime=60,\n        )\n        results.setdefault(\"step3\", []).append(res)\n\n        logger.info(\">>>step4: run virt-who with -i 120 option\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1014_check_interval_function_by_cli.py",
        "start": 53,
        "end": 66,
        "startLoc": {
          "line": 53,
          "column": 2,
          "position": 498
        },
        "endLoc": {
          "line": 66,
          "column": 44,
          "position": 586
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 45,
        "end": 57,
        "startLoc": {
          "line": 45,
          "column": 2,
          "position": 456
        },
        "endLoc": {
          "line": 57,
          "column": 51,
          "position": 542
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "exp_send=1, exp_loopnum=1\n        )\n        res = self.op_normal_value(\n            data,\n            exp_error=0,\n            exp_thread=1,\n            exp_send=1,\n            exp_interval=120,\n            exp_loopnum=1,\n            exp_looptime=120,\n        )\n        results.setdefault(\"step4\", []).append(res)\n\n        # case result\n        notes",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1014_check_interval_function_by_cli.py",
        "start": 68,
        "end": 82,
        "startLoc": {
          "line": 68,
          "column": 2,
          "position": 609
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 696
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 59,
        "end": 72,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 576
        },
        "endLoc": {
          "line": 72,
          "column": 5,
          "position": 661
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133651\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=True)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info('>>>step2: Run virt-who with \"VIRTWHO_ONE_SHOT=0\"'",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 25,
        "end": 30,
        "startLoc": {
          "line": 25,
          "column": 13,
          "position": 210
        },
        "endLoc": {
          "line": 30,
          "column": 51,
          "position": 287
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 26,
        "end": 31,
        "startLoc": {
          "line": 26,
          "column": 13,
          "position": 207
        },
        "endLoc": {
          "line": 31,
          "column": 46,
          "position": 284
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step2\", []).append(res)\n\n        logger.info('>>>step3: Run virt-who with \"VIRTWHO_ONE_SHOT\" disabled'",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 31,
        "end": 36,
        "startLoc": {
          "line": 31,
          "column": 13,
          "position": 304
        },
        "endLoc": {
          "line": 36,
          "column": 58,
          "position": 381
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 13,
          "position": 299
        },
        "endLoc": {
          "line": 37,
          "column": 49,
          "position": 376
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step3\", []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 37,
        "end": 43,
        "startLoc": {
          "line": 37,
          "column": 13,
          "position": 395
        },
        "endLoc": {
          "line": 43,
          "column": 2,
          "position": 476
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 38,
        "end": 44,
        "startLoc": {
          "line": 38,
          "column": 13,
          "position": 388
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 469
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133649\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133662\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        if self.pkg_check(self.ssh_host(), \"virt-who\")[9:15] >= \"1.31.0\":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        sysconf_file = \"/etc/sysconfig/virt-who\"\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info('>>>step1: Run virt-who with \"VIRTWHO_DEBUG=1\"'",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 48,
          "position": 180
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 51,
          "position": 180
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=True)\n        results.setdefault(\"step1\", []).append(res1)\n        results.setdefault(\"step1\", []).append(res2)\n\n        logger.info('>>>step2: Run virt-who with \"VIRTWHO_DEBUG=0\"'",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 25,
        "end": 32,
        "startLoc": {
          "line": 25,
          "column": 13,
          "position": 210
        },
        "endLoc": {
          "line": 32,
          "column": 48,
          "position": 323
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py",
        "start": 24,
        "end": 31,
        "startLoc": {
          "line": 24,
          "column": 13,
          "position": 182
        },
        "endLoc": {
          "line": 31,
          "column": 44,
          "position": 295
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", filename=sysconf_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(\n            output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=False\n        )\n        results.setdefault(\"step2\", []).append(res1)\n        results.setdefault(\"step2\", []).append(res2)\n\n        logger.info('>>>step3: Run virt-who with \"VIRTWHO_DEBUG\" disabled'",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 33,
        "end": 42,
        "startLoc": {
          "line": 33,
          "column": 4,
          "position": 335
        },
        "endLoc": {
          "line": 42,
          "column": 55,
          "position": 457
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 25,
        "end": 41,
        "startLoc": {
          "line": 25,
          "column": 4,
          "position": 205
        },
        "endLoc": {
          "line": 41,
          "column": 52,
          "position": 427
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ", filename=sysconf_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(\n            output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=False\n        )\n        results.setdefault(\"step3\", []).append(res1)\n        results.setdefault(\"step3\", []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 43,
        "end": 53,
        "startLoc": {
          "line": 43,
          "column": 16,
          "position": 466
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 592
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 25,
        "end": 52,
        "startLoc": {
          "line": 25,
          "column": 4,
          "position": 205
        },
        "endLoc": {
          "line": 52,
          "column": 2,
          "position": 560
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133661\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1010_check_virtwho_debug_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        res2 = self.vw_msg_search(output=tty_output, msg=\"\\[.*DEBUG\\]\", exp_exist=True)\n        results.setdefault(\"step1\", []).append(res1)\n        results.setdefault(\"step1\", []).append(res2)\n\n        logger.info(\">>>step2: Run virt-who by cli without -d option\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1010_check_virtwho_debug_function_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 2,
          "position": 255
        },
        "endLoc": {
          "line": 34,
          "column": 50,
          "position": 321
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2006_validate_config_function_by_cli.py",
        "start": 44,
        "end": 49,
        "startLoc": {
          "line": 44,
          "column": 9,
          "position": 432
        },
        "endLoc": {
          "line": 49,
          "column": 52,
          "position": 498
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134108\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 32,
          "position": 209
        },
        "endLoc": {
          "line": 32,
          "column": 56,
          "position": 284
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1017_check_config_function_by_cli.py",
        "start": 24,
        "end": 39,
        "startLoc": {
          "line": 24,
          "column": 12,
          "position": 181
        },
        "endLoc": {
          "line": 39,
          "column": 56,
          "position": 398
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\")\n        res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault(\"step2\", []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 229
        },
        "endLoc": {
          "line": 37,
          "column": 2,
          "position": 332
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 31,
        "end": 40,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 272
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 375
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-134107\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable(\"[global]\", \"/etc/virt-who.conf\")\n        self.vw_option_enable(\"debug\", \"/etc/virt-who.conf\")\n        self.vw_option_update_value(\"debug\", \"True\", \"/etc/virt-who.conf\")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        guest_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 22,
          "column": 11,
          "position": 177
        }
      },
      "secondFile": {
        "name": "tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py",
        "start": 16,
        "end": 35,
        "startLoc": {
          "line": 16,
          "column": 11,
          "position": 141
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ", config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        guest_uuid = self.get_hypervisor_guestuuid()\n\n        # case steps\n        logger.info(\">>>step1: run virt-who for {0}\".format(config_file))\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\")\n        res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault(\"step2\", []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py",
        "start": 20,
        "end": 35,
        "startLoc": {
          "line": 20,
          "column": 12,
          "position": 160
        },
        "endLoc": {
          "line": 35,
          "column": 2,
          "position": 322
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 25,
        "end": 40,
        "startLoc": {
          "line": 25,
          "column": 23,
          "position": 213
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 375
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133789\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault(\"step1\", []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\")\n        res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault(\"step2\", []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py",
        "start": 25,
        "end": 35,
        "startLoc": {
          "line": 25,
          "column": 52,
          "position": 209
        },
        "endLoc": {
          "line": 35,
          "column": 2,
          "position": 329
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 39,
        "end": 40,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 40,
          "column": 2,
          "position": 375
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133660\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1006_run_virtwho_with_default_config.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133659\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1005_check_virtwho_service_function.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133657\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133656\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1003_check_virtwho_package_info.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133654\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-133652\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        for step, option in sorted(steps.items(), key=lambda item: item[0]):\n            logger.info(\">>>{0}: run virt-who to check {1}\".format(step, option))\n            if option == \"http_proxy\":\n                value = \"http://{0}\".format(proxy_server)\n            if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/smoke/test_virtwho_smoke.py",
        "start": 69,
        "end": 74,
        "startLoc": {
          "line": 69,
          "column": 12,
          "position": 739
        },
        "endLoc": {
          "line": 74,
          "column": 3,
          "position": 813
        }
      },
      "secondFile": {
        "name": "tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 34,
        "end": 40,
        "startLoc": {
          "line": 34,
          "column": 5,
          "position": 303
        },
        "endLoc": {
          "line": 40,
          "column": 10,
          "position": 378
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "def test_vw_host_to_guest_association(self):\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        assert self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid)\n        assert self.vw_web_associate(\n            self.host_name, self.host_uuid, self.guest_name, self.guest_uuid\n        )\n\n    def test_guest_entilement_with_sca_enabled",
      "tokens": 0,
      "firstFile": {
        "name": "tests/sca/test_virtwho_sca.py",
        "start": 65,
        "end": 73,
        "startLoc": {
          "line": 65,
          "column": 5,
          "position": 711
        },
        "endLoc": {
          "line": 73,
          "column": 39,
          "position": 819
        }
      },
      "secondFile": {
        "name": "tests/smoke/test_virtwho_smoke.py",
        "start": 35,
        "end": 43,
        "startLoc": {
          "line": 35,
          "column": 5,
          "position": 323
        },
        "endLoc": {
          "line": 43,
          "column": 21,
          "position": 431
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "(cls())\n        cls.host_name = cls.get_hypervisor_hostname(cls())\n        cls.host_uuid = cls.get_hypervisor_hostuuid(cls())\n        cls.host_hwuuid = cls.get_hypervisor_hwuuid(cls())\n        cls.guest_name = cls.get_guest_name(cls())\n        cls.guest_uuid = cls.get_hypervisor_guestuuid(cls())\n\n    def setUp(self):\n        self.vw_etc_conf_disable_all()\n        self.vw_etc_sys_disable_all()\n        self.vw_etc_d_delete_all()\n        self.vw_etc_d_mode_create(self.config_name, self.config_file)\n        self.vw_option_enable(\"[global]\", self.global_file)\n        self.vw_option_enable(\"debug\", self.global_file)\n        self.vw_option_update_value(\"debug\", \"True\", self.global_file)\n\n    def get_guest_name(self):\n        return self.get_hostname(self.ssh_guest())\n\n    def test_virtwho_debug",
      "tokens": 0,
      "firstFile": {
        "name": "tests/gating/test_virtwho_gating.py",
        "start": 15,
        "end": 34,
        "startLoc": {
          "line": 15,
          "column": 13,
          "position": 107
        },
        "endLoc": {
          "line": 34,
          "column": 19,
          "position": 309
        }
      },
      "secondFile": {
        "name": "tests/smoke/test_virtwho_smoke.py",
        "start": 16,
        "end": 35,
        "startLoc": {
          "line": 16,
          "column": 20,
          "position": 123
        },
        "endLoc": {
          "line": 35,
          "column": 34,
          "position": 325
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs[\"pool_id\"])\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, \"virtual\")\n        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs[\"pool_id\"])\n        output = self.system_sku_consumed(self.ssh_guest())\n        assert self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)\n        ret, output = self.runcmd(\"subscription-manager repos --list\", self.ssh_guest())\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tests/gating/test_virtwho_gating.py",
        "start": 112,
        "end": 120,
        "startLoc": {
          "line": 112,
          "column": 2,
          "position": 1280
        },
        "endLoc": {
          "line": 120,
          "column": 3,
          "position": 1424
        }
      },
      "secondFile": {
        "name": "tests/smoke/test_virtwho_smoke.py",
        "start": 132,
        "end": 140,
        "startLoc": {
          "line": 132,
          "column": 2,
          "position": 1557
        },
        "endLoc": {
          "line": 140,
          "column": 7,
          "position": 1701
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "assert self.vw_msg_search(\n                output, \"no repositories available\", exp_exist=True\n            )\n        ret, output = self.runcmd(\"subscription-manager status\", self.ssh_guest())\n        assert self.vw_msg_search(output, \"Overall Status: Current\", exp_exist=True)\n        assert self.vw_msg_search(output, \"Invalid\", exp_exist=False)",
      "tokens": 0,
      "firstFile": {
        "name": "tests/gating/test_virtwho_gating.py",
        "start": 123,
        "end": 128,
        "startLoc": {
          "line": 123,
          "column": 13,
          "position": 1456
        },
        "endLoc": {
          "line": 128,
          "column": 2,
          "position": 1533
        }
      },
      "secondFile": {
        "name": "tests/smoke/test_virtwho_smoke.py",
        "start": 140,
        "end": 143,
        "startLoc": {
          "line": 140,
          "column": 9,
          "position": 1701
        },
        "endLoc": {
          "line": 143,
          "column": 2,
          "position": 1774
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", self).__init__(*args, **kwargs)\n        self.rhevm_ip = None\n        self.rhevm_ssh_user = None\n        self.rhevm_ssh_passwd = None\n        self.rhevm_admin_user = None\n        self.rhevm_admin_passwd = None\n        self.master = None\n        self.master_user = None\n        self.master_passwd = None\n        self.datacenter",
      "tokens": 0,
      "firstFile": {
        "name": "virt_who/settings.py",
        "start": 502,
        "end": 511,
        "startLoc": {
          "line": 502,
          "column": 8,
          "position": 5681
        },
        "endLoc": {
          "line": 511,
          "column": 11,
          "position": 5771
        }
      },
      "secondFile": {
        "name": "virt_who/settings.py",
        "start": 453,
        "end": 462,
        "startLoc": {
          "line": 453,
          "column": 9,
          "position": 5076
        },
        "endLoc": {
          "line": 462,
          "column": 6,
          "position": 5166
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "= None\n        self.datacenter = None\n        self.cluster = None\n        self.cputype = None\n        self.storage = None\n        self.guest_name = None\n        self.guest_user = None\n        self.guest_passwd = None\n        self.template = None\n        self.disk = None\n        self.nfs_path = None\n\n    def read(self, reader):\n        self.rhevm_ip = reader.get(\"vdsm\"",
      "tokens": 0,
      "firstFile": {
        "name": "virt_who/settings.py",
        "start": 510,
        "end": 523,
        "startLoc": {
          "line": 510,
          "column": 2,
          "position": 5764
        },
        "endLoc": {
          "line": 523,
          "column": 7,
          "position": 5882
        }
      },
      "secondFile": {
        "name": "virt_who/settings.py",
        "start": 464,
        "end": 477,
        "startLoc": {
          "line": 464,
          "column": 2,
          "position": 5186
        },
        "endLoc": {
          "line": 477,
          "column": 8,
          "position": 5304
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", port=22):\n        host = ssh[\"host\"]\n        if \":\" in host:\n            var = host.split(\":\")\n            host = var[0]\n            port = int(var[1])\n        username = ssh[\"username\"]\n        password = ssh[\"password\"]\n        retcode",
      "tokens": 0,
      "firstFile": {
        "name": "virt_who/base.py",
        "start": 91,
        "end": 99,
        "startLoc": {
          "line": 91,
          "column": 5,
          "position": 1017
        },
        "endLoc": {
          "line": 99,
          "column": 8,
          "position": 1101
        }
      },
      "secondFile": {
        "name": "virt_who/base.py",
        "start": 47,
        "end": 55,
        "startLoc": {
          "line": 47,
          "column": 8,
          "position": 490
        },
        "endLoc": {
          "line": 55,
          "column": 4,
          "position": 574
        }
      }
    }
  ]
}