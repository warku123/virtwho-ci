Results of black linter (version 23.1.0)
See documentation on https://megalinter.io/0d699a348a2c104040efd78f2d2970e6ae8e5769/descriptors/python_black/
-----------------------------------------------

‚ùå [ERROR] for workspace /tmp/lint
Linter raw log:
--- /tmp/lint/tests/gating/test_virtwho_gating.py	2023-03-06 05:02:18.572378 +0000
+++ /tmp/lint/tests/gating/test_virtwho_gating.py	2023-03-06 06:24:55.606088 +0000
@@ -4,17 +4,16 @@
 from virt_who.register import Register
 from virt_who.testing import Testing
 
 
 class VirtWhoGatingTestCase(Testing):
-
     @classmethod
     def setUpClass(cls):
         super(VirtWhoGatingTestCase, cls).setUpClass()
         cls.config_name = "virtwho-config"
         cls.config_file = "/etc/virt-who.d/virtwo_gating.conf"
-        cls.global_file = '/etc/virt-who.conf'
+        cls.global_file = "/etc/virt-who.conf"
         cls.vw_case_init(cls())
         cls.host_name = cls.get_hypervisor_hostname(cls())
         cls.host_uuid = cls.get_hypervisor_hostuuid(cls())
         cls.host_hwuuid = cls.get_hypervisor_hwuuid(cls())
         cls.guest_name = cls.get_guest_name(cls())
@@ -23,93 +22,107 @@
     def setUp(self):
         self.vw_etc_conf_disable_all()
         self.vw_etc_sys_disable_all()
         self.vw_etc_d_delete_all()
         self.vw_etc_d_mode_create(self.config_name, self.config_file)
-        self.vw_option_enable('[global]', self.global_file)
-        self.vw_option_enable('debug', self.global_file)
-        self.vw_option_update_value('debug', 'True', self.global_file)
+        self.vw_option_enable("[global]", self.global_file)
+        self.vw_option_enable("debug", self.global_file)
+        self.vw_option_update_value("debug", "True", self.global_file)
 
     def get_guest_name(self):
         return self.get_hostname(self.ssh_guest())
 
     def test_virtwho_debug(self):
-        self.vw_option_update_value('debug', 'False', self.global_file)
+        self.vw_option_update_value("debug", "False", self.global_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert(self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=False))
-        self.vw_option_update_value('debug', 'True', self.global_file)
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
+        self.vw_option_update_value("debug", "True", self.global_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert(self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=True))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
 
     def test_virtwho_oneshot(self):
         data, tty_output, rhsm_output = self.vw_start(
-            'virt-who -o', exp_send=1, oneshot=True)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1))
+            "virt-who -o", exp_send=1, oneshot=True
+        )
+        assert self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
         data, tty_output, rhsm_output = self.vw_start(
-            'virt-who', exp_send=1, oneshot=False)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+            "virt-who", exp_send=1, oneshot=False
+        )
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
 
     def test_virtwho_interval(self):
         self.vw_option_enable("interval", self.global_file)
-        self.vw_option_update_value("interval", '60', self.global_file)
+        self.vw_option_update_value("interval", "60", self.global_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        assert(self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60,
-            exp_loopnum=1, exp_looptime=60))
+        assert self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
 
     def test_virtwho_hypervisor_id(self):
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
-        hypervisor_type = self.get_config('hypervisor_type')
-        steps = {'step1':'uuid', 'step2':'hostname'}
-        if hypervisor_type in ('esx', 'rhevm'):
-            steps['step3'] = 'hwuuid'
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
+        hypervisor_type = self.get_config("hypervisor_type")
+        steps = {"step1": "uuid", "step2": "hostname"}
+        if hypervisor_type in ("esx", "rhevm"):
+            steps["step3"] = "hwuuid"
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             self.vw_option_add("hypervisor_id", option, self.config_file)
             data, tty_output, rhsm_output = self.vw_start()
-            assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+            assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             if option == "hwuuid":
                 hypervisorId = self.host_hwuuid
             elif option == "hostname":
                 hypervisorId = self.host_name
             else:
                 hypervisorId = self.host_uuid
-            assert(hypervisorId in data[register_owner].keys())
+            assert hypervisorId in data[register_owner].keys()
             self.vw_option_del("hypervisor_id", self.config_file)
 
     def test_virtwho_rhsm_options(self):
         self.system_unregister(self.ssh_host())
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        self.vw_option_add("rhsm_hostname", register_config['server'], self.config_file)
+        register_type = register_config["type"]
+        self.vw_option_add("rhsm_hostname", register_config["server"], self.config_file)
         self.vw_option_add("rhsm_port", "443", self.config_file)
-        self.vw_option_add("rhsm_prefix", register_config['prefix'], self.config_file)
-        self.vw_option_add("rhsm_username", register_config['username'], self.config_file)
-        self.vw_option_add("rhsm_password", register_config['password'], self.config_file)
+        self.vw_option_add("rhsm_prefix", register_config["prefix"], self.config_file)
+        self.vw_option_add(
+            "rhsm_username", register_config["username"], self.config_file
+        )
+        self.vw_option_add(
+            "rhsm_password", register_config["password"], self.config_file
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         self.system_register(self.ssh_host(), register_type, register_config)
 
     def test_virtwho_vdc_subscription(self):
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        register_type = register_config["type"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
         data, tty_output, rhsm_output = self.vw_start()
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
         output = self.system_sku_consumed(self.ssh_guest())
-        assert(self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True))
-        ret, output = self.runcmd('subscription-manager repos --list', self.ssh_guest())
+        assert self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
+        ret, output = self.runcmd("subscription-manager repos --list", self.ssh_guest())
         if "stage" in register_type:
-            assert(self.vw_msg_search(output, "Available Repositories" , exp_exist=True))
+            assert self.vw_msg_search(output, "Available Repositories", exp_exist=True)
         else:
-            assert(self.vw_msg_search(output, "no repositories available" , exp_exist=True))
-        ret, output = self.runcmd('subscription-manager status', self.ssh_guest())
-        assert(self.vw_msg_search(output, "Overall Status: Current" , exp_exist=True))
-        assert(self.vw_msg_search(output, "Invalid" , exp_exist=False))
+            assert self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+        ret, output = self.runcmd("subscription-manager status", self.ssh_guest())
+        assert self.vw_msg_search(output, "Overall Status: Current", exp_exist=True)
+        assert self.vw_msg_search(output, "Invalid", exp_exist=False)
would reformat /tmp/lint/tests/gating/test_virtwho_gating.py
--- /tmp/lint/tests/sca/test_virtwho_sca.py	2023-03-06 05:02:18.572378 +0000
+++ /tmp/lint/tests/sca/test_virtwho_sca.py	2023-03-06 06:24:55.631323 +0000
@@ -4,68 +4,77 @@
 from virt_who.register import Register
 from virt_who.testing import Testing
 
 
 class VirtWhoSCATestCase(Testing):
-
     @classmethod
     def setUpClass(cls):
         super(VirtWhoSCATestCase, cls).setUpClass()
         register_config = cls.get_register_config(cls())
-        if 'satellite' in register_config['type']:
-            cls.satellite_sca_set(cls(), cls.ssh_host(cls()), register_config, enable=True)
+        if "satellite" in register_config["type"]:
+            cls.satellite_sca_set(
+                cls(), cls.ssh_host(cls()), register_config, enable=True
+            )
         else:
             cls.stage_sca_set(cls(), cls.ssh_host(cls()), register_config, enable=True)
-        cls.register_owner = register_config['owner']
+        cls.register_owner = register_config["owner"]
         cls.vw_case_init(cls())
         cls.vw_etc_conf_disable_all(cls())
         cls.vw_etc_sys_disable_all(cls())
         cls.vw_etc_d_delete_all(cls())
-        cls.vw_etc_d_mode_create(cls(), 'virtwho-config', '/etc/virt-who.d/virtwo_sca.conf')
-        cls.vw_option_enable(cls(), '[global]', '/etc/virt-who.conf')
-        cls.vw_option_enable(cls(), 'debug', '/etc/virt-who.conf')
-        cls.vw_option_update_value(cls(), 'debug', 'True', '/etc/virt-who.conf')
+        cls.vw_etc_d_mode_create(
+            cls(), "virtwho-config", "/etc/virt-who.d/virtwo_sca.conf"
+        )
+        cls.vw_option_enable(cls(), "[global]", "/etc/virt-who.conf")
+        cls.vw_option_enable(cls(), "debug", "/etc/virt-who.conf")
+        cls.vw_option_update_value(cls(), "debug", "True", "/etc/virt-who.conf")
         cls.host_uuid = cls.get_hypervisor_hostuuid(cls())
         cls.host_name = cls.get_hypervisor_hostname(cls())
         cls.guest_name = cls.get_guest_name(cls())
         cls.guest_uuid = cls.get_hypervisor_guestuuid(cls())
 
     @classmethod
     def tearDownClass(cls):
         register_config = cls.get_register_config(cls())
-        if 'satellite' in register_config['type']:
-            cls.satellite_sca_set(cls(), cls.ssh_host(cls()), register_config, enable=False)
+        if "satellite" in register_config["type"]:
+            cls.satellite_sca_set(
+                cls(), cls.ssh_host(cls()), register_config, enable=False
+            )
         else:
             cls.stage_sca_set(cls(), cls.ssh_host(cls()), register_config, enable=False)
 
     def get_guest_name(self):
         return self.get_hostname(self.ssh_guest())
 
     def test_vw_report_mapping_with_sca_enabled(self):
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         logger.info(f"---data is: {data}---")
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert (self.register_owner in data.keys())
-        assert (self.host_uuid in data[self.register_owner].keys())
-        assert (self.guest_uuid in data[self.register_owner].keys())
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.register_owner in data.keys()
+        assert self.host_uuid in data[self.register_owner].keys()
+        assert self.guest_uuid in data[self.register_owner].keys()
 
         # test hypervisor facts
-        facts_items = ['socket', 'type', 'dmi', 'version']
-        if self.get_config('hypervisor_type') in ('esx', 'rhevm', 'ahv'):
-            facts_items.append('cluster')
+        facts_items = ["socket", "type", "dmi", "version"]
+        if self.get_config("hypervisor_type") in ("esx", "rhevm", "ahv"):
+            facts_items.append("cluster")
         facts_dic = data[self.register_owner][self.host_uuid]
         for item in facts_items:
-            assert (item in facts_dic.keys())
-            assert (facts_dic[item] is not None)
+            assert item in facts_dic.keys()
+            assert facts_dic[item] is not None
 
     def test_vw_host_to_guest_association(self):
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert (self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid))
-        assert (self.vw_web_associate(self.host_name, self.host_uuid, self.guest_name, self.guest_uuid))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid)
+        assert self.vw_web_associate(
+            self.host_name, self.host_uuid, self.guest_name, self.guest_uuid
+        )
 
     def test_guest_entilement_with_sca_enabled(self):
-        ret, output = self.runcmd(cmd='subscription-manager status', ssh=self.ssh_guest())
-        assert ('Content Access Mode is set to Simple Content Access' in output)
+        ret, output = self.runcmd(
+            cmd="subscription-manager status", ssh=self.ssh_guest()
+        )
+        assert "Content Access Mode is set to Simple Content Access" in output
 
     def test_hypervisor_in_web(self):
         pass
would reformat /tmp/lint/tests/sca/test_virtwho_sca.py
--- /tmp/lint/scripts/polarion_caseid_mapping.py	2023-03-03 05:26:23.342065 +0000
+++ /tmp/lint/scripts/polarion_caseid_mapping.py	2023-03-06 06:24:55.639504 +0000
@@ -1,181 +1,181 @@
 mapping = {
-        "tc_1001"   :"RHSS-133652",
-        "tc_1002"   :"RHSS-133654",
-        "tc_1003"   :"RHSS-133656",
-        "tc_1004"   :"RHSS-133657",
-        "tc_1005"   :"RHSS-133659",
-        "tc_1006"   :"RHSS-133660",
-        "tc_1007"   :"RHSS-133789",
-        "tc_1008"   :"RHSS-134107",
-        "tc_1009"   :"RHSS-134108",
-        "tc_1010"   :"RHSS-133661",
-        "tc_1011"   :"RHSS-133662",
-        "tc_1012"   :"RHSS-133649",
-        "tc_1013"   :"RHSS-133651",
-        "tc_1014"   :"RHSS-133650",
-        "tc_1015"   :"RHSS-133655",
-        "tc_1016"   :"RHSS-133653",
-        "tc_1017"   :"RHSS-133658",
-        "tc_1018"   :"RHSS-133696",
-        "tc_1019"   :"RHSS-134124",
-        "tc_1020"   :"RHSS-134122",
-        "tc_1021"   :"RHSS-134123",
-        "tc_1022"   :"RHSS-133732",
-        "tc_1023"   :"RHSS-133734",
-        "tc_1024"   :"RHSS-133736",
-        "tc_1025"   :"RHSS-133738",
-        "tc_1026"   :"RHSS-133741",
-        "tc_1027"   :"RHSS-133743",
-        "tc_1028"   :"RHSS-133745",
-        "tc_1029"   :"RHSS-133746",
-        "tc_1030"   :"RHSS-133730",
-        "tc_1031"   :"RHSS-133733",
-        "tc_1032"   :"RHSS-133731",
-        "tc_1033"   :"RHSS-133737",
-        "tc_1034"   :"RHSS-133735",
-        "tc_1035"   :"RHSS-133740",
-        "tc_1036"   :"RHSS-133739",
-        "tc_1037"   :"RHSS-133748",
-        "tc_1038"   :"RHSS-133701",
-        "tc_1039"   :"RHSS-133704",
-        "tc_1040"   :"RHSS-133706",
-        "tc_1041"   :"RHSS-133708",
-        "tc_1042"   :"RHSS-133710",
-        "tc_1043"   :"RHSS-133712",
-        "tc_1044"   :"RHSS-133713",
-        "tc_1045"   :"RHSS-133691",
-        "tc_1046"   :"RHSS-133697",
-        "tc_1047"   :"RHSS-133694",
-        "tc_1048"   :"RHSS-133702",
-        "tc_1049"   :"RHSS-133700",
-        "tc_1050"   :"RHSS-133707",
-        "tc_1051"   :"RHSS-133705",
-        "tc_1052"   :"RHSS-133711",
-        "tc_1053"   :"RHSS-133709",
-        "tc_1054"   :"RHSS-133714",
-        "tc_1055"   :"RHSS-133682",
-        "tc_1056"   :"RHSS-133685",
-        "tc_1057"   :"RHSS-133684",
-        "tc_1058"   :"RHSS-133687",
-        "tc_1059"   :"RHSS-133686",
-        "tc_1060"   :"RHSS-133689",
-        "tc_1061"   :"RHSS-133688",
-        "tc_1062"   :"RHSS-133690",
-        "tc_1063"   :"RHSS-133693",
-        "tc_1064"   :"RHSS-133692",
-        "tc_1065"   :"RHSS-133698",
-        "tc_1066"   :"RHSS-133695",
-        "tc_1067"   :"RHSS-133703",
-        "tc_1068"   :"RHSS-133681",
-        "tc_1069"   :"RHSS-133680",
-        "tc_1070"   :"RHSS-133744",
-        "tc_1071"   :"RHSS-133742",
-        "tc_1072"   :"RHSS-133747",
-        "tc_1073"   :"RHSS-133683",
-        "tc_1074"   :"RHSS-134056",
-        "tc_1075"   :"RHSS-134059",
-        "tc_1076"   :"RHSS-134061",
-        "tc_1077"   :"RHSS-134063",
-        "tc_1078"   :"RHSS-134083",
-        "tc_1079"   :"RHSS-134065",
-        "tc_1080"   :"RHSS-134067",
-        "tc_1081"   :"RHSS-134069",
-        "tc_1082"   :"RHSS-134071",
-        "tc_1083"   :"RHSS-134072",
-        "tc_1084"   :"RHSS-134062",
-        "tc_1085"   :"RHSS-134060",
-        "tc_1086"   :"RHSS-134066",
-        "tc_1087"   :"RHSS-134064",
-        "tc_1088"   :"RHSS-134070",
-        "tc_1089"   :"RHSS-134052",
-        "tc_1090"   :"RHSS-134057",
-        "tc_1091"   :"RHSS-134055",
-        "tc_1092"   :"RHSS-134068",
-        "tc_1093"   :"RHSS-134073",
-        "tc_1094"   :"RHSS-134054",
-        "tc_1095"   :"RHSS-134053",
-        "tc_1096"   :"RHSS-134058",
-        "tc_1097"   :"RHSS-134075",
-        "tc_1098"   :"RHSS-134076",
-        "tc_1099"   :"RHSS-134077",
-        "tc_1100"   :"RHSS-134078",
-        "tc_1101"   :"RHSS-134079",
-        "tc_1102"   :"RHSS-134080",
-        "tc_1103"   :"RHSS-134081",
-        "tc_1104"   :"RHSS-134082",
-        "tc_1105"   :"RHSS-170860",
-        "tc_1106"   :"RHSS-171135",
-        "tc_1107"   :"RHSS-171210",
-        "tc_1108"   :"RHSS-174862",
-        "tc_1109"   :"RHSS-183803",
-        "tc_1110"   :"RHSS-195888",
-        "tc_1111"   :"RHSS-195889",
-        "tc_1112"   :"RHSS-196077",
-        "tc_2001"   :"RHSS-136568",
-        "tc_2002"   :"RHSS-136571",
-        "tc_2003"   :"RHSS-136572",
-        "tc_2004"   :"RHSS-136573",
-        "tc_2005"   :"RHSS-136574",
-        "tc_2006"   :"RHSS-136710",
-        "tc_2007"   :"RHSS-136730",
-        "tc_2008"   :"RHSS-136577",
-        "tc_2009"   :"RHSS-136578",
-        "tc_2010"   :"RHSS-136579",
-        "tc_2011"   :"RHSS-136580",
-        "tc_2012"   :"RHSS-136581",
-        "tc_2013"   :"RHSS-136709",
-        "tc_2014"   :"RHSS-136585",
-        "tc_2015"   :"RHSS-136586",
-        "tc_2016"   :"RHSS-136587",
-        "tc_2017"   :"RHSS-136588",
-        "tc_2018"   :"RHSS-136589",
-        "tc_2019"   :"RHSS-136590",
-        "tc_2020"   :"RHSS-136591",
-        "tc_2021"   :"RHSS-136592",
-        "tc_2022"   :"RHSS-136627",
-        "tc_2023"   :"RHSS-136628",
-        "tc_2024"   :"RHSS-137169",
-        "tc_2025"   :"RHSS-136630",
-        "tc_2026"   :"RHSS-136631",
-        "tc_2027"   :"RHSS-136632",
-        "tc_2028"   :"RHSS-136635",
-        "tc_2029"   :"RHSS-136636",
-        "tc_2030"   :"RHSS-136637",
-        "tc_2031"   :"RHSS-136639",
-        "tc_2032"   :"RHSS-136711",
-        "tc_2033"   :"RHSS-136712",
-        "tc_2034"   :"RHSS-136738",
-        "tc_2035"   :"RHSS-136716",
-        "tc_2036"   :"RHSS-136721",
-        "tc_2037"   :"RHSS-136719",
-        "tc_2038"   :"RHSS-137014",
-        "tc_2039"   :"RHSS-136727",
-        "tc_2040"   :"RHSS-136724",
-        "tc_2041"   :"RHSS-136731",
-        "tc_2042"   :"RHSS-137110",
-        "tc_2043"   :"RHSS-137111",
-        "tc_2044"   :"RHSS-137100",
-        "tc_2045"   :"RHSS-137101",
-        "tc_2046"   :"RHSS-137102",
-        "tc_2047"   :"RHSS-137103",
-        "tc_2048"   :"RHSS-137106",
-        "tc_2049"   :"RHSS-136640",
-        "tc_2050"   :"RHSS-136706",
-        "tc_2051"   :"RHSS-136708",
-        "tc_2052"   :"RHSS-136725",
-        "tc_2053"   :"RHSS-136733",
-        "tc_2054"   :"RHSS-136726",
-        "tc_2055"   :"RHSS-136781",
-        "tc_2056"   :"RHSS-136771",
-        "tc_2057"   :"RHSS-136773",
-        "tc_2058"   :"RHSS-171258",
-        "tc_2059"   :"RHSS-175019",
-        "tc_2060"   :"RHSS-175032",
-        "tc_2061"   :"RHSS-175058",
-        "tc_2063"   :"RHSS-188359",
-        "tc_2065"   :"RHSS-195890",
-        "tc_2066"   :"RHSS-196078",
-        "tc_2067"   :"RHSS-198374",
-        "tc_2068"   :"RHSS-198375",
-        "tc_2069"   :"RHSS-198867",
-        }
+    "tc_1001": "RHSS-133652",
+    "tc_1002": "RHSS-133654",
+    "tc_1003": "RHSS-133656",
+    "tc_1004": "RHSS-133657",
+    "tc_1005": "RHSS-133659",
+    "tc_1006": "RHSS-133660",
+    "tc_1007": "RHSS-133789",
+    "tc_1008": "RHSS-134107",
+    "tc_1009": "RHSS-134108",
+    "tc_1010": "RHSS-133661",
+    "tc_1011": "RHSS-133662",
+    "tc_1012": "RHSS-133649",
+    "tc_1013": "RHSS-133651",
+    "tc_1014": "RHSS-133650",
+    "tc_1015": "RHSS-133655",
+    "tc_1016": "RHSS-133653",
+    "tc_1017": "RHSS-133658",
+    "tc_1018": "RHSS-133696",
+    "tc_1019": "RHSS-134124",
+    "tc_1020": "RHSS-134122",
+    "tc_1021": "RHSS-134123",
+    "tc_1022": "RHSS-133732",
+    "tc_1023": "RHSS-133734",
+    "tc_1024": "RHSS-133736",
+    "tc_1025": "RHSS-133738",
+    "tc_1026": "RHSS-133741",
+    "tc_1027": "RHSS-133743",
+    "tc_1028": "RHSS-133745",
+    "tc_1029": "RHSS-133746",
+    "tc_1030": "RHSS-133730",
+    "tc_1031": "RHSS-133733",
+    "tc_1032": "RHSS-133731",
+    "tc_1033": "RHSS-133737",
+    "tc_1034": "RHSS-133735",
+    "tc_1035": "RHSS-133740",
+    "tc_1036": "RHSS-133739",
+    "tc_1037": "RHSS-133748",
+    "tc_1038": "RHSS-133701",
+    "tc_1039": "RHSS-133704",
+    "tc_1040": "RHSS-133706",
+    "tc_1041": "RHSS-133708",
+    "tc_1042": "RHSS-133710",
+    "tc_1043": "RHSS-133712",
+    "tc_1044": "RHSS-133713",
+    "tc_1045": "RHSS-133691",
+    "tc_1046": "RHSS-133697",
+    "tc_1047": "RHSS-133694",
+    "tc_1048": "RHSS-133702",
+    "tc_1049": "RHSS-133700",
+    "tc_1050": "RHSS-133707",
+    "tc_1051": "RHSS-133705",
+    "tc_1052": "RHSS-133711",
+    "tc_1053": "RHSS-133709",
+    "tc_1054": "RHSS-133714",
+    "tc_1055": "RHSS-133682",
+    "tc_1056": "RHSS-133685",
+    "tc_1057": "RHSS-133684",
+    "tc_1058": "RHSS-133687",
+    "tc_1059": "RHSS-133686",
+    "tc_1060": "RHSS-133689",
+    "tc_1061": "RHSS-133688",
+    "tc_1062": "RHSS-133690",
+    "tc_1063": "RHSS-133693",
+    "tc_1064": "RHSS-133692",
+    "tc_1065": "RHSS-133698",
+    "tc_1066": "RHSS-133695",
+    "tc_1067": "RHSS-133703",
+    "tc_1068": "RHSS-133681",
+    "tc_1069": "RHSS-133680",
+    "tc_1070": "RHSS-133744",
+    "tc_1071": "RHSS-133742",
+    "tc_1072": "RHSS-133747",
+    "tc_1073": "RHSS-133683",
+    "tc_1074": "RHSS-134056",
+    "tc_1075": "RHSS-134059",
+    "tc_1076": "RHSS-134061",
+    "tc_1077": "RHSS-134063",
+    "tc_1078": "RHSS-134083",
+    "tc_1079": "RHSS-134065",
+    "tc_1080": "RHSS-134067",
+    "tc_1081": "RHSS-134069",
+    "tc_1082": "RHSS-134071",
+    "tc_1083": "RHSS-134072",
+    "tc_1084": "RHSS-134062",
+    "tc_1085": "RHSS-134060",
+    "tc_1086": "RHSS-134066",
+    "tc_1087": "RHSS-134064",
+    "tc_1088": "RHSS-134070",
+    "tc_1089": "RHSS-134052",
+    "tc_1090": "RHSS-134057",
+    "tc_1091": "RHSS-134055",
+    "tc_1092": "RHSS-134068",
+    "tc_1093": "RHSS-134073",
+    "tc_1094": "RHSS-134054",
+    "tc_1095": "RHSS-134053",
+    "tc_1096": "RHSS-134058",
+    "tc_1097": "RHSS-134075",
+    "tc_1098": "RHSS-134076",
+    "tc_1099": "RHSS-134077",
+    "tc_1100": "RHSS-134078",
+    "tc_1101": "RHSS-134079",
+    "tc_1102": "RHSS-134080",
+    "tc_1103": "RHSS-134081",
+    "tc_1104": "RHSS-134082",
+    "tc_1105": "RHSS-170860",
+    "tc_1106": "RHSS-171135",
+    "tc_1107": "RHSS-171210",
+    "tc_1108": "RHSS-174862",
+    "tc_1109": "RHSS-183803",
+    "tc_1110": "RHSS-195888",
+    "tc_1111": "RHSS-195889",
+    "tc_1112": "RHSS-196077",
+    "tc_2001": "RHSS-136568",
+    "tc_2002": "RHSS-136571",
+    "tc_2003": "RHSS-136572",
+    "tc_2004": "RHSS-136573",
+    "tc_2005": "RHSS-136574",
+    "tc_2006": "RHSS-136710",
+    "tc_2007": "RHSS-136730",
+    "tc_2008": "RHSS-136577",
+    "tc_2009": "RHSS-136578",
+    "tc_2010": "RHSS-136579",
+    "tc_2011": "RHSS-136580",
+    "tc_2012": "RHSS-136581",
+    "tc_2013": "RHSS-136709",
+    "tc_2014": "RHSS-136585",
+    "tc_2015": "RHSS-136586",
+    "tc_2016": "RHSS-136587",
+    "tc_2017": "RHSS-136588",
+    "tc_2018": "RHSS-136589",
+    "tc_2019": "RHSS-136590",
+    "tc_2020": "RHSS-136591",
+    "tc_2021": "RHSS-136592",
+    "tc_2022": "RHSS-136627",
+    "tc_2023": "RHSS-136628",
+    "tc_2024": "RHSS-137169",
+    "tc_2025": "RHSS-136630",
+    "tc_2026": "RHSS-136631",
+    "tc_2027": "RHSS-136632",
+    "tc_2028": "RHSS-136635",
+    "tc_2029": "RHSS-136636",
+    "tc_2030": "RHSS-136637",
+    "tc_2031": "RHSS-136639",
+    "tc_2032": "RHSS-136711",
+    "tc_2033": "RHSS-136712",
+    "tc_2034": "RHSS-136738",
+    "tc_2035": "RHSS-136716",
+    "tc_2036": "RHSS-136721",
+    "tc_2037": "RHSS-136719",
+    "tc_2038": "RHSS-137014",
+    "tc_2039": "RHSS-136727",
+    "tc_2040": "RHSS-136724",
+    "tc_2041": "RHSS-136731",
+    "tc_2042": "RHSS-137110",
+    "tc_2043": "RHSS-137111",
+    "tc_2044": "RHSS-137100",
+    "tc_2045": "RHSS-137101",
+    "tc_2046": "RHSS-137102",
+    "tc_2047": "RHSS-137103",
+    "tc_2048": "RHSS-137106",
+    "tc_2049": "RHSS-136640",
+    "tc_2050": "RHSS-136706",
+    "tc_2051": "RHSS-136708",
+    "tc_2052": "RHSS-136725",
+    "tc_2053": "RHSS-136733",
+    "tc_2054": "RHSS-136726",
+    "tc_2055": "RHSS-136781",
+    "tc_2056": "RHSS-136771",
+    "tc_2057": "RHSS-136773",
+    "tc_2058": "RHSS-171258",
+    "tc_2059": "RHSS-175019",
+    "tc_2060": "RHSS-175032",
+    "tc_2061": "RHSS-175058",
+    "tc_2063": "RHSS-188359",
+    "tc_2065": "RHSS-195890",
+    "tc_2066": "RHSS-196078",
+    "tc_2067": "RHSS-198374",
+    "tc_2068": "RHSS-198375",
+    "tc_2069": "RHSS-198867",
+}
would reformat /tmp/lint/scripts/polarion_caseid_mapping.py
--- /tmp/lint/tests/tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py	2023-03-06 05:02:18.572378 +0000
+++ /tmp/lint/tests/tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py	2023-03-06 06:24:55.701801 +0000
@@ -2,50 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133652')
-        trigger_type = self.get_config('trigger_type')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133652")
+        trigger_type = self.get_config("trigger_type")
+        compose_id = self.get_config("rhel_compose")
         if "trigger-rhel" not in trigger_type:
             self.vw_case_skip(trigger_type)
 
         # case config
         results = dict()
-        pkg = self.pkg_check(self.ssh_host(), 'virt-who')
+        pkg = self.pkg_check(self.ssh_host(), "virt-who")
         if pkg is False:
             raise FailException("virt-who pkg is not found")
         if compose_id is None or compose_id == "":
             raise FailException("compose_id is not defined")
         repo_base, repo_extra = self.rhel_compose_url(compose_id)
 
         baseurl = repo_extra.split("/x86_64/")[0]
-        arch_list = [
-                'x86_64',
-                'ppc64le',
-                'aarch64',
-                's390x']
+        arch_list = ["x86_64", "ppc64le", "aarch64", "s390x"]
         if "RHEL-7" in compose_id:
             baseurl = repo_base.split("/Server/x86_64/")[0]
             arch_list = [
-                    'Client/x86_64',
-                    'Server/x86_64',
-                    'Server/ppc64',
-                    'Server/ppc64le', 
-                    'Server/s390x', 
-                    'Workstation/x86_64']
+                "Client/x86_64",
+                "Server/x86_64",
+                "Server/ppc64",
+                "Server/ppc64le",
+                "Server/s390x",
+                "Workstation/x86_64",
+            ]
 
         # case steps
         for arch in arch_list:
             pkg_url = f"{baseurl}/{arch}/os/Packages/{pkg}"
             if self.url_validation(pkg_url):
-                results.setdefault('step1', []).append(True)
+                results.setdefault("step1", []).append(True)
                 logger.info("{0} is exist in arch: {1}".format(pkg, arch))
             else:
-                results.setdefault('step1', []).append(False)
+                results.setdefault("step1", []).append(False)
                 logger.info("{0} is not exist in arch: {1}".format(pkg, arch))
 
         # case results
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py
--- /tmp/lint/tests/tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tests/tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py	2023-03-06 06:24:55.713795 +0000
@@ -2,42 +2,51 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133654')
-        trigger_type = self.get_config('trigger_type')
-        if trigger_type in ('trigger-rhev', 'trigger-brew', 'trigger-multiarch'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133654")
+        trigger_type = self.get_config("trigger_type")
+        if trigger_type in ("trigger-rhev", "trigger-brew", "trigger-multiarch"):
             self.vw_case_skip(trigger_type)
 
         # case config
         results = dict()
-        pkg = self.pkg_check(self.ssh_host(), 'virt-who')
+        pkg = self.pkg_check(self.ssh_host(), "virt-who")
 
         # case steps
         # If the virt-who package is installed
         if pkg:
-            logger.info(">>>step1: uninstall virt-who package and verify it was removed")
-            res = self.pkg_uninstall(self.ssh_host(), 'virt-who')
-            results.setdefault('step1', []).append(res)
+            logger.info(
+                ">>>step1: uninstall virt-who package and verify it was removed"
+            )
+            res = self.pkg_uninstall(self.ssh_host(), "virt-who")
+            results.setdefault("step1", []).append(res)
 
-            logger.info(">>>step2: install virt-who package and verify it was installed")
-            res = self.pkg_install(self.ssh_host(), 'virt-who')
-            results.setdefault('step2', []).append(res)
+            logger.info(
+                ">>>step2: install virt-who package and verify it was installed"
+            )
+            res = self.pkg_install(self.ssh_host(), "virt-who")
+            results.setdefault("step2", []).append(res)
         # The virt-who package is not installed
         else:
-            logger.info(">>>step1: install virt-who package and verify it was installed")
-            res = self.pkg_install(self.ssh_host(), 'virt-who')
-            results.setdefault('step1', []).append(res)
-            logger.info(">>>step2: uninstall virt-who package and verify it was removed")
-            res = self.pkg_uninstall(self.ssh_host(), 'virt-who')
-            results.setdefault('step2', []).append(res)
+            logger.info(
+                ">>>step1: install virt-who package and verify it was installed"
+            )
+            res = self.pkg_install(self.ssh_host(), "virt-who")
+            results.setdefault("step1", []).append(res)
+            logger.info(
+                ">>>step2: uninstall virt-who package and verify it was removed"
+            )
+            res = self.pkg_uninstall(self.ssh_host(), "virt-who")
+            results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: at last, make sure virt-who package is installed")
-        if self.pkg_check(self.ssh_host(), 'virt-who') is False:
-            res = self.pkg_install(self.ssh_host(), 'virt-who')
-            results.setdefault('step3', []).append(res)
+        if self.pkg_check(self.ssh_host(), "virt-who") is False:
+            res = self.pkg_install(self.ssh_host(), "virt-who")
+            results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py
--- /tmp/lint/scripts/polarion_importer.py	2023-03-03 05:26:23.342065 +0000
+++ /tmp/lint/scripts/polarion_importer.py	2023-03-06 06:24:55.756985 +0000
@@ -1,30 +1,32 @@
 # coding:utf-8
 import os, sys, getopt, fcntl
 from polarion_caseid_mapping import *
-sys.path.append('../')
+
+sys.path.append("../")
 from virt_who import *
 from datetime import datetime
 from xml.dom import minidom
+
 try:
     import xml.etree.cElementTree as ET
 except ImportError:
     import xml.etree.ElementTree as ET
 
 
 def parser_args(options):
     if len(options) == 0:
-        logger.info('Usage: polarion_impoerter.py 1.xml 2.xml')
+        logger.info("Usage: polarion_impoerter.py 1.xml 2.xml")
         sys.exit()
     files = []
     for arg in options:
         try:
-            '''check arg is a xml file or not'''
+            """check arg is a xml file or not"""
             ET.parse(arg)
             files.append(arg)
         except Exception as e:
-            logger.warning('%s is not a xml file' % arg)
+            logger.warning("%s is not a xml file" % arg)
     if len(files) > 0:
         return files
     raise FailException("no valid xml files provided")
 
 
@@ -35,26 +37,26 @@
     return param_value
 
 
 def write_file(filename, content):
     try:
-        fd = open(filename, 'wb')
+        fd = open(filename, "wb")
         fcntl.flock(fd, fcntl.LOCK_EX)
         fd.write(content.encode("UTF-8"))
         fcntl.flock(fd, fcntl.LOCK_UN)
         fd.close()
     except IOError:
-        logger.error('IOError to write file')
+        logger.error("IOError to write file")
         pass
 
 
 def read_file(filename):
     try:
-        content = open(filename,'r').read()
+        content = open(filename, "r").read()
         return content
     except IOError:
-        logger.error('IOError to read file')
+        logger.error("IOError to read file")
         pass
 
 
 def update_file(filename, location, data):
     content = read_file(filename)
@@ -63,14 +65,18 @@
         content = content[:pos] + data + content[pos:]
         write_file(filename, content)
 
 
 def fomatTree(elem):
-    root_str = ET.tostring(elem, 'UTF-8')
+    root_str = ET.tostring(elem, "UTF-8")
     reparse = minidom.parseString(root_str)
-    return reparse.toprettyxml(
-        ).replace("\t\t\n", "").replace("\t\n", "").replace("\n\n", "\n")
+    return (
+        reparse.toprettyxml()
+        .replace("\t\t\n", "")
+        .replace("\t\n", "")
+        .replace("\n\n", "\n")
+    )
 
 
 def xml_init(xmlFile, root_node):
     if os.path.exists(xmlFile):
         os.remove(xmlFile)
@@ -80,23 +86,23 @@
     return fomatTree(node)
 
 
 def xml_read(xmlFile):
     try:
-        tree=ET.parse(xmlFile)
+        tree = ET.parse(xmlFile)
         return tree
     except:
         logger.error("failed to read xml file")
 
 
 def xml_createNode(parent_node, child_node, attr, text):
     element = ET.Element(child_node)
     if attr:
         for key, value in attr.items():
-            element.attrib[key]=value
+            element.attrib[key] = value
     if text:
-        element.text=text
+        element.text = text
     parent_node.append(element)
     return element
 
 
 # def polarion_testrun_id():
@@ -117,13 +123,13 @@
 
 
 def polarion_testrun_id():
     create_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
     testrun_id = "RHSS_%s" % create_time
-    testrun_url = '{0}/testrun?id={1}'.format(deploy.polarion.testrun_url, testrun_id)
+    testrun_url = "{0}/testrun?id={1}".format(deploy.polarion.testrun_url, testrun_id)
     logger.info(testrun_url)
-    fd = open(runtest_info, 'a')
+    fd = open(runtest_info, "a")
     fd.write("TESTRUN_URL=%s\n" % testrun_url)
     fd.close()
     return testrun_id
 
 
@@ -136,92 +142,94 @@
         register_type = "satellite"
     if "full" in trigger_level:
         trigger_level = "Tier1/Tier2"
     hypervisor_type = hypervisor_type.upper()
     register_type = register_type.title()
-    if 'sca' in trigger_level:
+    if "sca" in trigger_level:
         trigger_level = trigger_level.upper()
     else:
         trigger_level = trigger_level.title()
-    testrun_title = f"VIRT-WHO {hypervisor_type}+{register_type} {trigger_level} {rhel_compose}"
+    testrun_title = (
+        f"VIRT-WHO {hypervisor_type}+{register_type} {trigger_level} {rhel_compose}"
+    )
     return testrun_title
 
 
 def polarion_planned_in():
     keyword = get_exported_param("PLANNED_IN")
     rhel_compose = get_exported_param("RHEL_COMPOSE")
-    plan = ''
+    plan = ""
     plans_dict = {
-        'RHEL-9.1': {
-            'MAIN': 'RHEL_9_1',
-            'CTC1': '9_1_CTC_1',
-            'CTC2': '9_1_CTC_2',
-            'Beta': '9_1_Beta',
-            'RC': '9_1_RC'
+        "RHEL-9.1": {
+            "MAIN": "RHEL_9_1",
+            "CTC1": "9_1_CTC_1",
+            "CTC2": "9_1_CTC_2",
+            "Beta": "9_1_Beta",
+            "RC": "9_1_RC",
         },
-        'RHEL-9.2': {
-            'MAIN': '9_2_0',
-            'CTC1': '9_2_0_CTC_1',
-            'CTC2': '9_2_0_CTC_2',
-            'Beta': '9_2_0_Beta',
-            'RC': '9_2_0_RC'
+        "RHEL-9.2": {
+            "MAIN": "9_2_0",
+            "CTC1": "9_2_0_CTC_1",
+            "CTC2": "9_2_0_CTC_2",
+            "Beta": "9_2_0_Beta",
+            "RC": "9_2_0_RC",
         },
-        'RHEL-8.7': {
-            'MAIN': 'RHEL_8_7',
-            'CTC1': '8_7_CTC_1',
-            'CTC2': '8_7_CTC_2',
-            'Beta': '8_7_Beta',
-            'RC': '8_7_RC'
+        "RHEL-8.7": {
+            "MAIN": "RHEL_8_7",
+            "CTC1": "8_7_CTC_1",
+            "CTC2": "8_7_CTC_2",
+            "Beta": "8_7_Beta",
+            "RC": "8_7_RC",
         },
-        'RHEL-8.8': {
-            'MAIN': '8_8_0',
-            'CTC1': '8_8_0_CTC_1',
-            'CTC2': '8_8_0_CTC_2',
-            'Beta': '8_8_0_Beta',
-            'RC': '8_8_0_RC'
-        }
+        "RHEL-8.8": {
+            "MAIN": "8_8_0",
+            "CTC1": "8_8_0_CTC_1",
+            "CTC2": "8_8_0_CTC_2",
+            "Beta": "8_8_0_Beta",
+            "RC": "8_8_0_RC",
+        },
     }
-    if 'Legacy' in keyword:
-        plan = 'RHEL_Legacy_Release'
+    if "Legacy" in keyword:
+        plan = "RHEL_Legacy_Release"
     else:
-        for (rhel, plans) in plans_dict.items():
+        for rhel, plans in plans_dict.items():
             if rhel in rhel_compose:
                 plan = plans[keyword]
     return plan
 
 
 def polarion_xml_init():
     testrun_id = polarion_testrun_id()
     testrun_title = polarion_testrun_title()
     xml_file = os.path.join(
         os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir)),
-        "polarion.xml"
+        "polarion.xml",
     )
     xml_init(xml_file, "testsuites")
     tree = xml_read(xml_file)
     rootNode = tree.getroot()
-    properties_node = xml_createNode(rootNode, "properties", '', '')
+    properties_node = xml_createNode(rootNode, "properties", "", "")
     attrs = {
-            'polarion-project-id': 'RHELSS',
-            'polarion-testrun-id': testrun_id,
-            'polarion-testrun-title': testrun_title,
-            'polarion-set-testrun-finished': 'true',
-            'polarion-custom-assignee': 'yuefliu',
-            'polarion-custom-isautomated': 'true',
-            'polarion-custom-component': 'virt-who',
-            'polarion-custom-arch': 'x86_64',
-            'polarion-custom-subsystemteam': 'sst_subscription_virtwho',
-            'polarion-custom-composeid': get_exported_param("RHEL_COMPOSE"),
-            'polarion-custom-build': get_exported_param('VIRTWHO_BUILD'),
-            'polarion-custom-jenkinsjobs': get_exported_param("BUILD_URL"),
-            'polarion-custom-plannedin': polarion_planned_in(),
-            'polarion-custom-notes': f"{get_exported_param('TRIGGER_TYPE')}"
+        "polarion-project-id": "RHELSS",
+        "polarion-testrun-id": testrun_id,
+        "polarion-testrun-title": testrun_title,
+        "polarion-set-testrun-finished": "true",
+        "polarion-custom-assignee": "yuefliu",
+        "polarion-custom-isautomated": "true",
+        "polarion-custom-component": "virt-who",
+        "polarion-custom-arch": "x86_64",
+        "polarion-custom-subsystemteam": "sst_subscription_virtwho",
+        "polarion-custom-composeid": get_exported_param("RHEL_COMPOSE"),
+        "polarion-custom-build": get_exported_param("VIRTWHO_BUILD"),
+        "polarion-custom-jenkinsjobs": get_exported_param("BUILD_URL"),
+        "polarion-custom-plannedin": polarion_planned_in(),
+        "polarion-custom-notes": f"{get_exported_param('TRIGGER_TYPE')}",
     }
-    logger.info(f'---{attrs}---')
+    logger.info(f"---{attrs}---")
     for name, value in attrs.items():
-        attrs = {'name': name, 'value': value}
-        propertie_node = xml_createNode(properties_node, "property", attrs, '')
+        attrs = {"name": name, "value": value}
+        propertie_node = xml_createNode(properties_node, "property", attrs, "")
     write_file(xml_file, fomatTree(rootNode))
     return xml_file, testrun_id
 
 
 def polarion_xml_update(xml_file, files):
@@ -237,19 +245,19 @@
         for line in ts_lines:
             ts_tests = ts_tests + int(re.findall(r'tests="(.*?)"', line)[0])
             ts_errors = ts_errors + int(re.findall(r'errors="(.*?)"', line)[0])
             ts_failures = ts_failures + int(re.findall(r'failures="(.*?)"', line)[0])
             ts_skip = ts_skip + int(re.findall(r'skipped="(.*?)"', line)[0])
-        res = r'<testsuite .*?>(.*?)</testsuite>'
-        cs_lines = re.findall(res, data, re.S|re.M)
+        res = r"<testsuite .*?>(.*?)</testsuite>"
+        cs_lines = re.findall(res, data, re.S | re.M)
         for line in cs_lines:
             ts_cases.append(line)
     # write env to runtest_info.txt
-    total_fail = ts_errors+ts_failures
-    total_executed = ts_tests-ts_skip
-    total_passed = total_executed-total_fail
-    fd = open(runtest_info, 'a')
+    total_fail = ts_errors + ts_failures
+    total_executed = ts_tests - ts_skip
+    total_passed = total_executed - total_fail
+    fd = open(runtest_info, "a")
     fd.write("TOTAL_CASE=%s\n" % ts_tests)
     fd.write("TOTAL_EXEC=%s\n" % total_executed)
     fd.write("TOTAL_PASS=%s\n" % total_passed)
     fd.write("TOTAL_FAIL=%s\n" % total_fail)
     fd.write("TOTAL_SKIP=%s\n" % ts_skip)
@@ -259,12 +267,14 @@
     else:
         fd.write("TEST_STATUS=failed\n")
         fd.close()
         logger.warning("failed cases is > 30, cancel to polarion import!")
         sys.exit()
-    data = '<testsuite name="nosetests" tests="%s" errors="%s" failures="0" skip="%s">\n</testsuite>' \
-            %(ts_tests, total_fail, ts_skip)
+    data = (
+        '<testsuite name="nosetests" tests="%s" errors="%s" failures="0" skip="%s">\n</testsuite>'
+        % (ts_tests, total_fail, ts_skip)
+    )
     update_file(xml_file, "</testsuites>", data)
     for case in ts_cases:
         update_file(xml_file, "</testsuite>", case)
     tree = xml_read(xml_file)
     rootNode = tree.getroot()
@@ -275,34 +285,39 @@
     tree = xml_read(xml_file)
     rootNode = tree.getroot()
     ts_nodes = rootNode.find("testsuite")
     cs_nodes = ts_nodes.findall("testcase")
     for node in cs_nodes:
-        classname = node.attrib['classname']
+        classname = node.attrib["classname"]
         req = re.findall(r".tc_(.*?)_", classname)
         if len(req) > 0:
             tc_id = "tc_" + req[0]
             if tc_id in mapping.keys():
                 polarion_case_id = mapping[tc_id]
-                properties_node = xml_createNode(node, "properties", '', '')
-                attrs = {'name': 'polarion-testcase-id', 'value': polarion_case_id}
-                propertie_node = xml_createNode(properties_node, "property", attrs, '')
+                properties_node = xml_createNode(node, "properties", "", "")
+                attrs = {"name": "polarion-testcase-id", "value": polarion_case_id}
+                propertie_node = xml_createNode(properties_node, "property", attrs, "")
     write_file(xml_file, fomatTree(rootNode))
 
 
 def polarion_xml_import(xml_file, testrun_id):
     username = deploy.polarion.username
     password = deploy.polarion.password
     import_url = deploy.polarion.import_url
     testrun_url = deploy.polarion.testrun_url
-    cmd = "curl -k -u %s:%s -X POST -F file=@%s %s" % (username, password, xml_file, import_url) 
+    cmd = "curl -k -u %s:%s -X POST -F file=@%s %s" % (
+        username,
+        password,
+        xml_file,
+        import_url,
+    )
     output = os.popen(cmd).read()
     logger.info(cmd)
     logger.info(output)
     if "error-message" not in output:
-        testrun = '{0}/testrun?id={1}'.format(testrun_url, testrun_id)
-        fd = open(runtest_info, 'a')
+        testrun = "{0}/testrun?id={1}".format(testrun_url, testrun_id)
+        fd = open(runtest_info, "a")
         fd.write("TESTRUN_URL=%s\n" % testrun)
         fd.close()
         logger.info("Successed to import xml to polarion")
         logger.info(testrun)
     else:
would reformat /tmp/lint/scripts/polarion_importer.py
--- /tmp/lint/tests/tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tests/tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py	2023-03-06 06:24:55.772975 +0000
@@ -2,40 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133657')
-        trigger_type = self.get_config('trigger_type')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133657")
+        trigger_type = self.get_config("trigger_type")
+        compose_id = self.get_config("rhel_compose")
         if "trigger-rhev" in trigger_type:
             self.vw_case_skip(trigger_type)
 
         results = dict()
         logger.info(">>>step1: virt-who have correct man page")
         msg = "Agent for reporting virtual guest IDs to Subscription"
         if "RHEL-9" in compose_id:
-            msg = "Agent  for  reporting  virtual guest IDs to an entitlement.*\n.*server"
-        ret, output = self.runcmd("man virt-who", self.ssh_host(), desc="run man virt-who")
-        results.setdefault('step1', []).append(self.vw_msg_search(output, msg))
+            msg = (
+                "Agent  for  reporting  virtual guest IDs to an entitlement.*\n.*server"
+            )
+        ret, output = self.runcmd(
+            "man virt-who", self.ssh_host(), desc="run man virt-who"
+        )
+        results.setdefault("step1", []).append(self.vw_msg_search(output, msg))
 
         logger.info(">>>step2: virt-who-config have correct man page")
         ret, output = self.runcmd("man virt-who-config", self.ssh_host())
-        results.setdefault('step2', []).append("configuration for virt-who" in output)
+        results.setdefault("step2", []).append("configuration for virt-who" in output)
         if "RHEL-8.4" in compose_id:
             msg = "backend names: libvirt, esx, rhevm, hyperv, fake, xen, or kube.*\n.*virt."
         elif "RHEL-9" in compose_id:
             msg = "backend names: ahv, libvirt, esx, hyperv, fake, or kubevirt."
             if "RHEL-9.0" in compose_id or "RHEL-9.1" in compose_id:
                 msg = "backend names: ahv, libvirt, esx, rhevm, hyperv, fake, or kube.*\n.*virt."
         else:
             msg = "backend names: ahv, libvirt, esx, rhevm, hyperv, fake, xen, or.*\n.*kubevirt"
-        results.setdefault('step2', []).append(self.vw_msg_search(output, msg))
+        results.setdefault("step2", []).append(self.vw_msg_search(output, msg))
 
         logger.info(">>>step3: virt-who have correct help page")
         ret, output = self.runcmd("virt-who --help", self.ssh_host())
-        results.setdefault('step3', []).append("optional arguments:" in output)
+        results.setdefault("step3", []).append("optional arguments:" in output)
 
         # case result
         self.vw_case_result(results)
--- /tmp/lint/tests/tier1/tc_1003_check_virtwho_package_info.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tests/tier1/tc_1003_check_virtwho_package_info.py	2023-03-06 06:24:55.782106 +0000
@@ -5,53 +5,61 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133656')
-        pkg_info = self.pkg_info(self.ssh_host(), 'virt-who')
-        compose_id = self.get_config('rhel_compose')
-        trigger_type = self.get_config('trigger_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133656")
+        pkg_info = self.pkg_info(self.ssh_host(), "virt-who")
+        compose_id = self.get_config("rhel_compose")
+        trigger_type = self.get_config("trigger_type")
         results = dict()
 
         logger.info(">>>step1: 'rpm -qi virt-who' contains valid 'Group' info")
-        results.setdefault('step1', []).append(
-            pkg_info.get("Group") == "System Environment/Base")
+        results.setdefault("step1", []).append(
+            pkg_info.get("Group") == "System Environment/Base"
+        )
 
         logger.info(">>>step2: 'rpm -qi virt-who' contains valid 'License' info")
         if "RHEL-9" in compose_id:
-            results.setdefault('step2', []).append(
-                pkg_info.get("License") == "GPLv2+ and LGPLv3+")
+            results.setdefault("step2", []).append(
+                pkg_info.get("License") == "GPLv2+ and LGPLv3+"
+            )
         else:
-            results.setdefault('step2', []).append(
-                pkg_info.get("License") == "GPLv2+")
+            results.setdefault("step2", []).append(pkg_info.get("License") == "GPLv2+")
 
         logger.info(">>>step3: 'rpm -qi virt-who' contains valid 'URL' info")
-        urls = ['https://github.com/virt-who/virt-who',
-                'https://github.com/candlepin/virt-who']
-        results.setdefault('step3', []).append(
-            any(url in pkg_info.get("URL") for url in urls))
+        urls = [
+            "https://github.com/virt-who/virt-who",
+            "https://github.com/candlepin/virt-who",
+        ]
+        results.setdefault("step3", []).append(
+            any(url in pkg_info.get("URL") for url in urls)
+        )
 
         logger.info(">>>step4: 'rpm -qi virt-who' contains valid 'Packager' info")
         msg = "Red Hat, Inc. <http://bugzilla.redhat.com/bugzilla>"
-        results.setdefault('step4', []).append(pkg_info.get("Packager") == msg)
+        results.setdefault("step4", []).append(pkg_info.get("Packager") == msg)
 
         logger.info(">>>step5: 'rpm -qi virt-who' contains valid 'Vendor' info")
-        results.setdefault('step5', []).append(pkg_info.get("Vendor") == "Red Hat, Inc.")
+        results.setdefault("step5", []).append(
+            pkg_info.get("Vendor") == "Red Hat, Inc."
+        )
 
         logger.info(">>>step6: 'rpm -qi virt-who' contains Signature info")
-        if trigger_type in ('trigger-brew'):
-            results.setdefault('step6', []).append("none" in pkg_info.get("Signature"))
+        if trigger_type in ("trigger-brew"):
+            results.setdefault("step6", []).append("none" in pkg_info.get("Signature"))
         else:
-            results.setdefault('step6', []).append("Key ID" in pkg_info.get("Signature"))
+            results.setdefault("step6", []).append(
+                "Key ID" in pkg_info.get("Signature")
+            )
         logger.info(">>>step7: 'virt-who --version' to check version")
-        vw_pkg = self.pkg_check(self.ssh_host(), 'virt-who')[9:15]
+        vw_pkg = self.pkg_check(self.ssh_host(), "virt-who")[9:15]
         logger.info("virt-who version should be {0}".format(vw_pkg))
-        ret, output = self.runcmd('virt-who --version', self.ssh_host())
+        ret, output = self.runcmd("virt-who --version", self.ssh_host())
         logger.info("'virt-who --version' output is {0}".format(output))
         if ret == 0 and vw_pkg in output:
-            results.setdefault('step7', []).append(True)
+            results.setdefault("step7", []).append(True)
         else:
-            results.setdefault('step7', []).append(False)
+            results.setdefault("step7", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py
would reformat /tmp/lint/tests/tier1/tc_1003_check_virtwho_package_info.py
--- /tmp/lint/tests/tier1/tc_1005_check_virtwho_service_function.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tests/tier1/tc_1005_check_virtwho_service_function.py	2023-03-06 06:24:55.816153 +0000
@@ -2,39 +2,44 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133659')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133659")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         steps = {
-                'step1':'restart',
-                'step2':'stop',
-                'step3':'start',
-                'step4':'try-restart',
-                'step5':'force-reload'
-                }
+            "step1": "restart",
+            "step2": "stop",
+            "step3": "start",
+            "step4": "try-restart",
+            "step5": "force-reload",
+        }
         if self.rhel_version(self.ssh_host()) == 6:
-            steps['step6'] = "condrestart"
+            steps["step6"] = "condrestart"
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: {1} virt-who service".format(step, option))
             ret, output = self.run_service(self.ssh_host(), "virt-who", option)
             if ret == 0:
                 if option == "stop":
-                    results.setdefault(step, []).append("running" != self.vw_service_status())
+                    results.setdefault(step, []).append(
+                        "running" != self.vw_service_status()
+                    )
                 else:
-                    results.setdefault(step, []).append("running" == self.vw_service_status())
+                    results.setdefault(step, []).append(
+                        "running" == self.vw_service_status()
+                    )
             else:
                 logger.error("failed to run '{0}' option".format(option))
                 results.setdefault(step, []).append(False)
 
         # case result
would reformat /tmp/lint/tests/tier1/tc_1005_check_virtwho_service_function.py
--- /tmp/lint/tests/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py	2023-03-06 05:02:18.574378 +0000
+++ /tmp/lint/tests/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py	2023-03-06 06:24:55.821812 +0000
@@ -2,33 +2,34 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133789')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133789")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
         config_file = "/etc/sysconfig/virt-who"
         self.vw_etc_sys_mode_enable()
         self.vw_option_enable("VIRTWHO_DEBUG", filename=config_file)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', filename=config_file)
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=config_file)
 
         # case steps
         logger.info(">>>step1: run virt-who by /etc/sysconfig/virt-who")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py
--- /tmp/lint/tests/tier1/tc_1006_run_virtwho_with_default_config.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tests/tier1/tc_1006_run_virtwho_with_default_config.py	2023-03-06 06:24:55.855803 +0000
@@ -2,38 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133660')
-        trigger_type = self.get_config('trigger_type')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if trigger_type in ('trigger-rhev', 'trigger-brew', 'trigger-multiarch'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133660")
+        trigger_type = self.get_config("trigger_type")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if trigger_type in ("trigger-rhev", "trigger-brew", "trigger-multiarch"):
             self.vw_case_skip(trigger_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.pkg_uninstall(self.ssh_host(), 'virt-who')
-        self.pkg_install(self.ssh_host(), 'virt-who')
-        steps = {'step1':'service', 'step2':'cli'}
+        self.pkg_uninstall(self.ssh_host(), "virt-who")
+        self.pkg_install(self.ssh_host(), "virt-who")
+        steps = {"step1": "service", "step2": "cli"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who {1} by default".format(step, option))
             if option == "service":
                 data, tty_output, rhsm_output = self.vw_start()
             else:
                 data, tty_output, rhsm_output = self.vw_start(cli="virt-who")
-            if hypervisor_type in ('libvirt-local', 'vdsm'):
+            if hypervisor_type in ("libvirt-local", "vdsm"):
                 res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                res2 = self.vw_msg_search(rhsm_output, 'Error in libvirt backend', exp_exist=False)
+                res2 = self.vw_msg_search(
+                    rhsm_output, "Error in libvirt backend", exp_exist=False
+                )
             else:
                 res1 = self.op_normal_value(data, exp_error=2, exp_thread=1, exp_send=0)
-                res2 = self.vw_msg_search(rhsm_output, 'Error in libvirt backend', exp_exist=True)
+                res2 = self.vw_msg_search(
+                    rhsm_output, "Error in libvirt backend", exp_exist=True
+                )
             results.setdefault(step, []).append(res1)
             results.setdefault(step, []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1006_run_virtwho_with_default_config.py
--- /tmp/lint/tests/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py	2023-03-06 05:02:18.574378 +0000
+++ /tmp/lint/tests/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py	2023-03-06 06:24:55.858566 +0000
@@ -2,33 +2,34 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134107')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134107")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # case steps
         logger.info(">>>step1: run virt-who for {0}".format(config_file))
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py	2023-03-06 05:02:18.574378 +0000
+++ /tmp/lint/tests/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py	2023-03-06 06:24:55.879949 +0000
@@ -5,33 +5,33 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134108')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134108")
         self.vw_case_init()
 
         # case config
         results = dict()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
-            cmd = self.vw_cli_base() + '-d'
+            cmd = self.vw_cli_base() + "-d"
         else:
             config_name = "virtwho-config"
             config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
             self.vw_etc_d_mode_create(config_name, config_file)
             cmd = "virt-who -d"
 
         # case steps
         logger.info(">>>step1: run virt-who by cli")
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1010_check_virtwho_debug_function_by_cli.py	2023-03-06 05:02:18.574378 +0000
+++ /tmp/lint/tests/tier1/tc_1010_check_virtwho_debug_function_by_cli.py	2023-03-06 06:24:55.921301 +0000
@@ -5,19 +5,19 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133661')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133661")
         self.vw_case_init()
 
         # case config
         results = dict()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
             cmd = self.vw_cli_base()
-            cmd_debug = self.vw_cli_base() + '-d'
+            cmd_debug = self.vw_cli_base() + "-d"
         else:
             config_name = "virtwho-config"
             config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
             self.vw_etc_d_mode_create(config_name, config_file)
             cmd = "virt-who"
@@ -26,22 +26,22 @@
         # case steps
         logger.info(">>>step1: Run virt-who by cli with -d option")
         data, tty_output, rhsm_output = self.vw_start(cmd_debug, exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=tty_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         logger.info(">>>step2: Run virt-who by cli without -d option")
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=tty_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1010_check_virtwho_debug_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py	2023-03-06 06:24:55.938145 +0000
@@ -5,12 +5,12 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133662')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133662")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
@@ -24,26 +24,30 @@
         self.vw_option_enable("VIRTWHO_DEBUG", filename=sysconf_file)
         self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         logger.info('>>>step2: Run virt-who with "VIRTWHO_DEBUG=0"')
         self.vw_option_update_value("VIRTWHO_DEBUG", "0", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        res2 = self.vw_msg_search(
+            output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info('>>>step3: Run virt-who with "VIRTWHO_DEBUG" disabled')
         self.vw_option_disable("VIRTWHO_DEBUG", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(
+            output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py
--- /tmp/lint/tests/tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py	2023-03-06 06:24:55.941946 +0000
@@ -5,16 +5,16 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133649')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133649")
         self.vw_case_init()
 
         # case config
         results = dict()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
             cmd = self.vw_cli_base()
             cmd_oneshot = self.vw_cli_base() + "-o"
         else:
             config_name = "virtwho-config"
@@ -23,22 +23,23 @@
             cmd = "virt-who"
             cmd_oneshot = "virt-who -o"
 
         # case step
         logger.info(">>>step1: Run virt-who by cli with -o option")
-        data, tty_output, rhsm_output = self.vw_start(cmd_oneshot, exp_send=1,
-                                                      oneshot=True)
+        data, tty_output, rhsm_output = self.vw_start(
+            cmd_oneshot, exp_send=1, oneshot=True
+        )
         res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: Run virt-who by cli without -o option")
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py	2023-03-06 06:24:55.999139 +0000
@@ -5,12 +5,12 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133651')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133651")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
@@ -23,21 +23,21 @@
         logger.info('>>>step1: Run virt-who with "VIRTWHO_ONE_SHOT=1"')
         self.vw_option_enable("VIRTWHO_ONE_SHOT", filename=sysconf_file)
         self.vw_option_update_value("VIRTWHO_ONE_SHOT", "1", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=True)
         res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info('>>>step2: Run virt-who with "VIRTWHO_ONE_SHOT=0"')
         self.vw_option_update_value("VIRTWHO_ONE_SHOT", "0", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info('>>>step3: Run virt-who with "VIRTWHO_ONE_SHOT" disabled')
         self.vw_option_disable("VIRTWHO_ONE_SHOT", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py
--- /tmp/lint/tests/smoke/test_virtwho_smoke.py	2023-03-06 05:02:18.572378 +0000
+++ /tmp/lint/tests/smoke/test_virtwho_smoke.py	2023-03-06 06:24:55.999845 +0000
@@ -4,17 +4,16 @@
 from virt_who.register import Register
 from virt_who.testing import Testing
 
 
 class VirtWhoSmokeTestCase(Testing):
-
     @classmethod
     def setUpClass(cls):
         super(VirtWhoSmokeTestCase, cls).setUpClass()
         cls.config_name = "virtwho-config"
         cls.config_file = "/etc/virt-who.d/virtwo_smoke.conf"
-        cls.global_file = '/etc/virt-who.conf'
+        cls.global_file = "/etc/virt-who.conf"
         cls.vw_case_init(cls())
         cls.register_config = cls.get_register_config(cls())
         cls.host_name = cls.get_hypervisor_hostname(cls())
         cls.host_uuid = cls.get_hypervisor_hostuuid(cls())
         cls.host_hwuuid = cls.get_hypervisor_hwuuid(cls())
@@ -24,66 +23,78 @@
     def setUp(self):
         self.vw_etc_conf_disable_all()
         self.vw_etc_sys_disable_all()
         self.vw_etc_d_delete_all()
         self.vw_etc_d_mode_create(self.config_name, self.config_file)
-        self.vw_option_enable('[global]', self.global_file)
-        self.vw_option_enable('debug', self.global_file)
-        self.vw_option_update_value('debug', 'True', self.global_file)
+        self.vw_option_enable("[global]", self.global_file)
+        self.vw_option_enable("debug", self.global_file)
+        self.vw_option_update_value("debug", "True", self.global_file)
 
     def get_guest_name(self):
         return self.get_hostname(self.ssh_guest())
 
     def test_vw_host_to_guest_association(self):
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert (self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid))
-        assert (self.vw_web_associate(self.host_name, self.host_uuid, self.guest_name, self.guest_uuid))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid)
+        assert self.vw_web_associate(
+            self.host_name, self.host_uuid, self.guest_name, self.guest_uuid
+        )
 
     def test_vw_rhsm_options(self):
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.system_unregister(self.ssh_host())
-        register_type = self.register_config['type']
-        self.vw_option_add("rhsm_hostname", self.register_config['server'], self.config_file)
+        register_type = self.register_config["type"]
+        self.vw_option_add(
+            "rhsm_hostname", self.register_config["server"], self.config_file
+        )
         self.vw_option_add("rhsm_port", "443", self.config_file)
-        self.vw_option_add("rhsm_prefix", self.register_config['prefix'], self.config_file)
-        self.vw_option_add("rhsm_username", self.register_config['username'], self.config_file)
-        self.vw_option_add("rhsm_password", self.register_config['password'], self.config_file)
+        self.vw_option_add(
+            "rhsm_prefix", self.register_config["prefix"], self.config_file
+        )
+        self.vw_option_add(
+            "rhsm_username", self.register_config["username"], self.config_file
+        )
+        self.vw_option_add(
+            "rhsm_password", self.register_config["password"], self.config_file
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         self.system_register(self.ssh_host(), register_type, self.register_config)
 
     def test_vw_http_proxy(self):
         proxy_server = "{0}:{1}".format(deploy.proxy.server, deploy.proxy.port)
-        steps = {'step1':'http_proxy', 'step2':'https_proxy'}
+        steps = {"step1": "http_proxy", "step2": "https_proxy"}
         self.vw_option_enable("[system_environment]", self.global_file)
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who to check {1}".format(step, option))
             if option == "http_proxy":
                 value = "http://{0}".format(proxy_server)
             if option == "https_proxy":
                 value = "https://{0}".format(proxy_server)
             self.vw_option_enable(option, self.global_file)
             self.vw_option_update_value(option, value, self.global_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-            assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-            assert (self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server)))
+            assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+            assert self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server)
+            )
             self.vw_option_disable(option, self.global_file)
 
     def test_vw_hypervisor_id(self):
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        register_owner = self.register_config['owner']
-        if hypervisor_type in ('esx', 'rhevm'):
-            hypervisor_ids = ['uuid', 'hostname', 'hwuuid']
+        register_owner = self.register_config["owner"]
+        if hypervisor_type in ("esx", "rhevm"):
+            hypervisor_ids = ["uuid", "hostname", "hwuuid"]
         else:
-            hypervisor_ids = ['uuid', 'hostname']
+            hypervisor_ids = ["uuid", "hostname"]
         for hypervisor_id in hypervisor_ids:
-            if 'hwuuid' in hypervisor_ids:
+            if "hwuuid" in hypervisor_ids:
                 if hypervisor_id == "uuid":
                     ids = [self.host_uuid, self.host_name, self.host_hwuuid]
                 elif hypervisor_id == "hostname":
                     ids = [self.host_name, self.host_uuid, self.host_hwuuid]
                 else:
@@ -94,137 +105,146 @@
                 else:
                     ids = [self.host_name, self.host_uuid]
             logger.info(">>> check hypervisor_id in rhsm.log")
             self.vw_option_add("hypervisor_id", hypervisor_id, self.config_file)
             data, tty_output, rhsm_output = self.vw_start()
-            assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-            assert (ids[0] in data[register_owner].keys())
+            assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+            assert ids[0] in data[register_owner].keys()
             logger.info(">>> check only single hypervisor name on Satellite WebUI")
             ssh_sat = self.register_config["ssh_sat"]
-            admin_user = self.register_config['username']
-            admin_passwd = self.register_config['password']
+            admin_user = self.register_config["username"]
+            admin_passwd = self.register_config["password"]
             cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(
-                admin_user, admin_passwd)
+                admin_user, admin_passwd
+            )
             ret, result = self.runcmd(cmd, ssh_sat)
             assert (self.vw_msg_search(result, "virt-who-" + ids[0]), True)
-            assert (self.vw_msg_search(result, "virt-who-" + ids[1], False))
-            if 'hwuuid' in hypervisor_ids:
-                assert (self.vw_msg_search(result, "virt-who-" + ids[2], False))
+            assert self.vw_msg_search(result, "virt-who-" + ids[1], False)
+            if "hwuuid" in hypervisor_ids:
+                assert self.vw_msg_search(result, "virt-who-" + ids[2], False)
             self.vw_option_del("hypervisor_id", self.config_file)
 
     def test_vw_vdc_subscription(self):
-        vdc_physical_sku = self.register_config['vdc']
-        vdc_virtual_sku = self.register_config['vdc_bonus']
+        vdc_physical_sku = self.register_config["vdc"]
+        vdc_virtual_sku = self.register_config["vdc_bonus"]
         data, tty_output, rhsm_output = self.vw_start()
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         logger.info(">>> attach virtual vdc pool for guest")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert(self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True))
-        ret, output = self.runcmd('subscription-manager repos --list', self.ssh_guest())
-        assert(self.vw_msg_search(output, "no repositories available" , exp_exist=True))
-        ret, output = self.runcmd('subscription-manager status', self.ssh_guest())
-        assert(self.vw_msg_search(output, "Overall Status: Current" , exp_exist=True))
-        assert(self.vw_msg_search(output, "Invalid" , exp_exist=False))
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
+        ret, output = self.runcmd("subscription-manager repos --list", self.ssh_guest())
+        assert self.vw_msg_search(output, "no repositories available", exp_exist=True)
+        ret, output = self.runcmd("subscription-manager status", self.ssh_guest())
+        assert self.vw_msg_search(output, "Overall Status: Current", exp_exist=True)
+        assert self.vw_msg_search(output, "Invalid", exp_exist=False)
         logger.info(">>> virtual vdc pool is revoked after unattach physical sku")
         self.vw_web_unattach(self.host_name, self.host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-        assert (self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False))
+        assert self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False)
 
     def test_virtwho_limited_subscription(self):
-        limited_sku = self.register_config['limit']
+        limited_sku = self.register_config["limit"]
         data, tty_output, rhsm_output = self.vw_start()
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         logger.info(">>> attach virtual limited pool for guest")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_host(), limited_sku, "physical")
-        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limited_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, limited_sku))
-        ret, output = self.runcmd('subscription-manager repos --list', self.ssh_guest())
-        assert (self.vw_msg_search(output, "no repositories available"))
-        ret, output = self.runcmd('subscription-manager status', self.ssh_guest())
-        assert (self.vw_msg_search(output, "Overall Status: Current"))
-        assert (self.vw_msg_search(output, "Invalid", exp_exist=False))
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, limited_sku)
+        ret, output = self.runcmd("subscription-manager repos --list", self.ssh_guest())
+        assert self.vw_msg_search(output, "no repositories available")
+        ret, output = self.runcmd("subscription-manager status", self.ssh_guest())
+        assert self.vw_msg_search(output, "Overall Status: Current")
+        assert self.vw_msg_search(output, "Invalid", exp_exist=False)
         logger.info(">>> no virtual limit pool for guest any more")
-        output = self.system_sku_attr(self.ssh_guest(), limited_sku, "virtual", exp_exist=False)
-        assert (self.vw_msg_search(str(output), limited_sku, exp_exist=False))
+        output = self.system_sku_attr(
+            self.ssh_guest(), limited_sku, "virtual", exp_exist=False
+        )
+        assert self.vw_msg_search(str(output), limited_sku, exp_exist=False)
         logger.info(">>> limit bonus pool is revoked after unattach physical sku")
         self.vw_web_unattach(self.host_name, self.host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-        assert (self.vw_msg_search(output, limited_sku, exp_exist=False))
+        assert self.vw_msg_search(output, limited_sku, exp_exist=False)
 
     def test_virtwho_unlimited_subscription(self):
-        unlimited_sku = self.register_config['unlimit']
+        unlimited_sku = self.register_config["unlimit"]
         data, tty_output, rhsm_output = self.vw_start()
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         logger.info(">>> attach virtual unlimit pool for guest")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, unlimited_sku))
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, unlimited_sku)
         logger.info(">>>  virtual unlimit sku can be listed in guest ")
         output = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        assert (self.vw_msg_search(str(output), unlimited_sku))
+        assert self.vw_msg_search(str(output), unlimited_sku)
         logger.info(">>> virtual unlimit pool is revoked after unattach physical sku")
         self.vw_web_unattach(self.host_name, self.host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-        assert (self.vw_msg_search(output, unlimited_sku, exp_exist=False))
+        assert self.vw_msg_search(output, unlimited_sku, exp_exist=False)
 
     def test_virtwho_instance_subscription(self):
-        instance_sku = self.register_config['instance']
+        instance_sku = self.register_config["instance"]
         logger.info(">>> set cpu.cpu_socket(s) to 8 in guest")
-        assert (self.system_custom_facts_create(self.ssh_guest(), 'cpu.cpu_socket(s)', '8'))
+        assert self.system_custom_facts_create(
+            self.ssh_guest(), "cpu.cpu_socket(s)", "8"
+        )
         logger.info(">>> attach physical instance sku for guest without quantity")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        self.system_sku_attach(self.ssh_guest(), sku_attrs['pool_id'])
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, instance_sku))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*1'))
-        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))
+        self.system_sku_attach(self.ssh_guest(), sku_attrs["pool_id"])
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, instance_sku)
+        assert self.vw_msg_search(output, "Quantity Used:.*1")
+        assert self.vw_msg_search(output, "Status Details:.*Subscription is current")
         logger.info(">>> attach physical instance sku for guest with quantity=1")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        self.system_sku_attach(self.ssh_guest(), sku_attrs['pool_id'], quantity=1)
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, instance_sku))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*1'))
-        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))
+        self.system_sku_attach(self.ssh_guest(), sku_attrs["pool_id"], quantity=1)
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, instance_sku)
+        assert self.vw_msg_search(output, "Quantity Used:.*1")
+        assert self.vw_msg_search(output, "Status Details:.*Subscription is current")
         logger.info(">>> attach physical instance sku for guest with quantity=2")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        self.system_sku_attach(self.ssh_guest(), sku_attrs['pool_id'], quantity=2)
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, instance_sku))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*2'))
-        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))
+        self.system_sku_attach(self.ssh_guest(), sku_attrs["pool_id"], quantity=2)
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, instance_sku)
+        assert self.vw_msg_search(output, "Quantity Used:.*2")
+        assert self.vw_msg_search(output, "Status Details:.*Subscription is current")
         logger.info(">>> attach physical instance sku for guest with quantity=6")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        self.system_sku_attach(self.ssh_guest(), sku_attrs['pool_id'], quantity=6)
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, instance_sku, exp_exist=True))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*2'))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*6'))
-        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))
+        self.system_sku_attach(self.ssh_guest(), sku_attrs["pool_id"], quantity=6)
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, instance_sku, exp_exist=True)
+        assert self.vw_msg_search(output, "Quantity Used:.*2")
+        assert self.vw_msg_search(output, "Quantity Used:.*6")
+        assert self.vw_msg_search(output, "Status Details:.*Subscription is current")
         self.system_custom_facts_remove(self.ssh_guest())
 
     def test_temporary_sku(self):
         logger.info(">>> check virtual temporary sku exist in guest")
         self.system_sku_refresh(self.ssh_guest())
         ret, output = self.runcmd("subscription-manager list --av", self.ssh_guest())
-        assert (self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=True))
+        assert self.vw_msg_search(
+            output, "Subscription Type: .*Temporary", exp_exist=True
+        )
         logger.info(">>> run virt-who service and check temporary sku disappear")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         self.system_sku_refresh(self.ssh_guest())
         ret, output = self.runcmd("subscription-manager list --av", self.ssh_guest())
-        assert (self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=False))
+        assert self.vw_msg_search(
+            output, "Subscription Type: .*Temporary", exp_exist=False
+        )
would reformat /tmp/lint/tests/smoke/test_virtwho_smoke.py
--- /tmp/lint/tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py	2023-03-06 06:24:56.026968 +0000
@@ -5,54 +5,68 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133655')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133655")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         option_tested = "VIRTWHO_INTERVAL"
         sysconf_file = "/etc/sysconfig/virt-who"
         self.vw_option_enable("VIRTWHO_DEBUG", filename=sysconf_file)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', filename=sysconf_file)
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=sysconf_file)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: disable VIRTWHO_INTERVAL option")
         self.vw_option_disable(option_tested, filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)
-        results.setdefault('step1', []).append(res)
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: enable VIRTWHO_INTERVAL and set to 10")
         self.vw_option_enable(option_tested, filename=sysconf_file)
-        self.vw_option_update_value(option_tested, '10', filename=sysconf_file)
+        self.vw_option_update_value(option_tested, "10", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)
-        results.setdefault('step2', []).append(res)
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: enable VIRTWHO_INTERVAL and set to 60")
-        self.vw_option_update_value(option_tested, '60', filename=sysconf_file)
+        self.vw_option_update_value(option_tested, "60", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
         res = self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1,
-            exp_interval=60, exp_loopnum=1, exp_looptime=60)
-        results.setdefault('step3', []).append(res)
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: enable VIRTWHO_INTERVAL and set to 120")
-        self.vw_option_update_value(option_tested, '120', filename=sysconf_file)
+        self.vw_option_update_value(option_tested, "120", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
         res = self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1,
-            exp_interval=120, exp_loopnum=1, exp_looptime=120)
-        results.setdefault('step4', []).append(res)
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=120,
+            exp_loopnum=1,
+            exp_looptime=120,
+        )
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py
--- /tmp/lint/tests/tier1/tc_1014_check_interval_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1014_check_interval_function_by_cli.py	2023-03-06 06:24:56.040696 +0000
@@ -5,16 +5,16 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133650')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133650")
         self.vw_case_init()
 
         # case config
         results = dict()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
             cmd = self.vw_cli_base() + "-d"
             cmd_i_10 = self.vw_cli_base() + "-d -i 10"
             cmd_i_60 = self.vw_cli_base() + "-d -i 60"
             cmd_i_120 = self.vw_cli_base() + "-d -i 120"
@@ -28,39 +28,60 @@
             cmd_i_120 = "virt-who -d -i 120"
 
         # case steps
         logger.info(">>>step1: run virt-who without -i option")
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1,
-                                   exp_send=1, exp_interval=3600)
-        results.setdefault('step1', []).append(res)
+        res = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with -i 10 option")
-        msg = "Interval value can't be lower than 60 seconds. " \
-              "Default value of 3600 seconds will be used"
+        msg = (
+            "Interval value can't be lower than 60 seconds. "
+            "Default value of 3600 seconds will be used"
+        )
         data, tty_output, rhsm_output = self.vw_start(cmd_i_10, exp_send=1)
-        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1,
-                                    exp_send=1, exp_interval=3600)
+        res1 = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
         res2 = self.vw_msg_search(tty_output, msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: run virt-who with -i 60 option")
-        data, tty_output, rhsm_output = self.vw_start(cmd_i_60, exp_send=1, exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1,
-                                   exp_interval=60, exp_loopnum=1, exp_looptime=60)
-        results.setdefault('step3', []).append(res)
+        data, tty_output, rhsm_output = self.vw_start(
+            cmd_i_60, exp_send=1, exp_loopnum=1
+        )
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: run virt-who with -i 120 option")
-        data, tty_output, rhsm_output = self.vw_start(cmd_i_120, exp_send=1,
-                                                      exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1,
-                                   exp_interval=120, exp_loopnum=1, exp_looptime=120)
-        results.setdefault('step4', []).append(res)
+        data, tty_output, rhsm_output = self.vw_start(
+            cmd_i_120, exp_send=1, exp_loopnum=1
+        )
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=120,
+            exp_loopnum=1,
+            exp_looptime=120,
+        )
+        results.setdefault("step4", []).append(res)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2,3,4) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1014_check_interval_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1017_check_config_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1017_check_config_function_by_cli.py	2023-03-06 06:24:56.050875 +0000
@@ -2,14 +2,15 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133658')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133658")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "libvirt-local" in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
@@ -21,15 +22,15 @@
         # case steps
         logger.info(">>>step1: run virt-who with -c option")
         cmd = "virt-who -c {0} -d".format(config_file)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with --config option")
         cmd = "virt-who --config {0} -d".format(config_file)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1017_check_config_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1016_check_print_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1016_check_print_function_by_cli.py	2023-03-06 06:24:56.074494 +0000
@@ -5,51 +5,48 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133653')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133653")
         self.vw_case_init()
 
         # case config
         results = dict()
         json_file = "/tmp/file.json"
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
-        compose_id = self.get_config('rhel_compose')
-        hypervisor_type = self.get_config('hypervisor_type')
+        compose_id = self.get_config("rhel_compose")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "RHEL-7" in compose_id:
             cmd = self.vw_cli_base() + "-p > {0}".format(json_file)
             cmd_debug = self.vw_cli_base() + "-d -p > {0}".format(json_file)
         else:
             config_name = "virtwho-config"
             config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
             self.vw_etc_d_mode_create(config_name, config_file)
             cmd = "virt-who -p > {0}".format(json_file)
             cmd_debug = "virt-who -d -p > {0}".format(json_file)
-        steps = {
-            'step1': cmd,
-            'step2': cmd_debug
-        }
+        steps = {"step1": cmd, "step2": cmd_debug}
 
         # case steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check print option".format(step))
-            data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=0,
-                                                          web_check=False)
+            data, tty_output, rhsm_output = self.vw_start(
+                cmd, exp_send=0, web_check=False
+            )
             res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=0)
             results.setdefault(step, []).append(res)
-            ret, output = self.runcmd("cat {0}".format(json_file),
-                                      self.ssh_host())
+            ret, output = self.runcmd("cat {0}".format(json_file), self.ssh_host())
             res = self.vw_msg_search(output, guest_uuid, exp_exist=True)
             results.setdefault(step, []).append(res)
-            if hypervisor_type not in ('libvirt-local', 'vdsm'):
+            if hypervisor_type not in ("libvirt-local", "vdsm"):
                 res = self.vw_msg_search(output, host_uuid, exp_exist=True)
                 results.setdefault(step, []).append(res)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1016_check_print_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1020_check_log_file_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1020_check_log_file_function_by_cli.py	2023-03-06 06:24:56.124254 +0000
@@ -2,29 +2,32 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134122')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134122")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
         log_dir = "/var/log/rhsm/virtwho"
         log_file = "/var/log/rhsm/virtwho/virtwho.log"
         guest_uuid = self.get_hypervisor_guestuuid()
-        cmd1 = self.vw_cli_base() + "-d -l {0} -f {1}".format(log_dir,log_file)
-        cmd2 = self.vw_cli_base() + "-d --log-dir {0} --log-file {1}".format(log_dir,log_file)
-        steps = {'step1':cmd1, 'step2':cmd2}
+        cmd1 = self.vw_cli_base() + "-d -l {0} -f {1}".format(log_dir, log_file)
+        cmd2 = self.vw_cli_base() + "-d --log-dir {0} --log-file {1}".format(
+            log_dir, log_file
+        )
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # case steps
-        for step, cmd in sorted(steps.items(),key=lambda item:item[0]):
+        for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check log-file".format(step))
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
             ret, output = self.runcmd("ls {0}".format(log_file), self.ssh_host())
@@ -38,10 +41,10 @@
                 logger.error("{0} is not exist".format(log_file))
                 results.setdefault(step, []).append(False)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1020_check_log_file_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1021_check_reporter_id_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1021_check_reporter_id_function_by_cli.py	2023-03-06 06:24:56.140261 +0000
@@ -5,40 +5,44 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134123')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134123")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
         reporter_id = "virtwho_reporter_id_tc1021"
         cmd1 = self.vw_cli_base() + "-d -r {0}".format(reporter_id)
         cmd2 = self.vw_cli_base() + "-d --reporter-id {0}".format(reporter_id)
-        steps = {'step1': cmd1, 'step2': cmd2}
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # case steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check reporter_id".format(step))
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
-            if data['reporter_id'] == reporter_id:
-                logger.info("Succeeded to find the expected reporter_id: {0}"
-                            .format(reporter_id))
+            if data["reporter_id"] == reporter_id:
+                logger.info(
+                    "Succeeded to find the expected reporter_id: {0}".format(
+                        reporter_id
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.error("Failed to find the expected reporter_id: {0}"
-                             .format(reporter_id))
+                logger.error(
+                    "Failed to find the expected reporter_id: {0}".format(reporter_id)
+                )
                 results.setdefault(step, []).append(False)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
--- /tmp/lint/tests/tier1/tc_1018_check_log_per_config_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1018_check_log_per_config_function_by_cli.py	2023-03-06 06:24:56.141581 +0000
@@ -5,51 +5,51 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133696')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133696")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         guest_uuid = self.get_hypervisor_guestuuid()
         cmd1 = self.vw_cli_base() + "-d -m"
         cmd2 = self.vw_cli_base() + "-d --log-per-config"
-        steps = {'step1': cmd1, 'step2': cmd2}
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # Case Steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check log-per-config".format(step))
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
-            ret, output = self.runcmd('ls /var/log/rhsm/virtwho*', self.ssh_host())
+            ret, output = self.runcmd("ls /var/log/rhsm/virtwho*", self.ssh_host())
             if ret != 0 or output is None:
                 logger.error("Failed to find /var/log/rhsm/virtwho* files")
                 results.setdefault(step, []).append(False)
-            files = output.split('\n') 
-            ''' check files exist or not'''
+            files = output.split("\n")
+            """ check files exist or not"""
             if any("destination" in fd for fd in files):
                 logger.info("Succeeded to find virtwho.destination file")
-            else: 
+            else:
                 logger.error("Failed to find virtwho.destination file")
                 results.setdefault(step, []).append(False)
             if any("main" in fd for fd in files):
                 logger.info("Succeeded to find virtwho.main file")
-            else: 
+            else:
                 logger.error("Failed to find virtwho.main file")
                 results.setdefault(step, []).append(False)
             if any("rhsm_log" in fd for fd in files):
                 logger.info("Succeeded to find virtwho.rhsm_log file")
             else:
                 logger.error("Failed to find virtwho.rhsm_log file")
                 results.setdefault(step, []).append(False)
-            ''' check message is expected or not'''
+            """ check message is expected or not"""
             for fd in files:
                 fd = fd.strip()
                 ret, output = self.runcmd("cat {0}".format(fd), self.ssh_host())
                 if "destination" in fd:
                     d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)
@@ -62,17 +62,19 @@
                     m2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                     if m1 is False or m2 is False:
                         logger.error("Failed to validate virtwho.main file")
                         results.setdefault(step, []).append(False)
                 if "rhsm_log" in fd:
-                    r1 = self.vw_msg_search(output, "Using reporter_id=", exp_exist=True)
+                    r1 = self.vw_msg_search(
+                        output, "Using reporter_id=", exp_exist=True
+                    )
                     r2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                     if r1 is False or r2 is False:
                         logger.error("Failed to validate virtwho.rhsm_log file")
                         results.setdefault(step, []).append(False)
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1021_check_reporter_id_function_by_cli.py
would reformat /tmp/lint/tests/tier1/tc_1018_check_log_per_config_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1019_check_log_dir_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1019_check_log_dir_function_by_cli.py	2023-03-06 06:24:56.142086 +0000
@@ -5,12 +5,12 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134121')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134121")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
@@ -18,11 +18,11 @@
         log_dir = "/var/log/rhsm/virtwho/"
         log_file = "/var/log/rhsm/virtwho/rhsm.log"
         guest_uuid = self.get_hypervisor_guestuuid()
         cmd1 = self.vw_cli_base() + "-d -l {0}".format(log_dir)
         cmd2 = self.vw_cli_base() + "-d --log-dir {0}".format(log_dir)
-        steps = {'step1': cmd1, 'step2': cmd2}
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # case steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check log-dir".format(step))
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
@@ -39,10 +39,10 @@
                 logger.error("{0} is not exist".format(log_file))
                 results.setdefault(step, []).append(False)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1019_check_log_dir_function_by_cli.py
--- /tmp/lint/tests/tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py	2023-03-06 06:24:56.182525 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133734')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133734")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
@@ -17,22 +18,22 @@
 
         # case steps
         logger.info(">>>step1: restart virt-who service to keep it running")
         self.run_service(self.ssh_host(), "virt-who", "restart")
         if self.vw_service_status() == "running":
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             logger.error("Failed to start virt-who")
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: run virt-who by cli, will failed as 'already running'")
         cmd = "virt-who"
         ret, output = self.runcmd(cmd, self.ssh_host())
         if "already running" in output:
             logger.info("Succeeded to check, return 'already running' as expected")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.error("Failed to check, not return 'already running'")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py
--- /tmp/lint/tests/tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tests/tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py	2023-03-06 06:24:56.191269 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133732')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133732")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
@@ -22,14 +23,14 @@
         t1 = threading.Thread(target=self.runcmd, args=(cmd, self.ssh_host()))
         t1.start()
         time.sleep(15)
         if self.vw_callback_thread_num() == 1:
             logger.info("Succeeded to start virt-who by cli")
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             logger.error("Failed to start virt-who by cli")
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: kill virt-who by 'kill -2'")
         for i in range(5):
             cmd = "ps -ef | grep virt-who -i | grep -v grep | awk '{print $2}' | xargs -I {} kill -2 {}"
             ret, output = self.runcmd(cmd, self.ssh_host())
@@ -40,12 +41,12 @@
             else:
                 is_killed = "No"
                 logger.warning("Failed to kill virt-who, try again ...")
         if is_killed == "Yes":
             logger.info("Succeeded to kill virt-who")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.info("Failed to kill virt-who")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py
--- /tmp/lint/tests/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py	2023-03-06 06:24:56.193453 +0000
@@ -2,43 +2,44 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133736')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133736")
         self.vw_case_init()
 
         # case config
         results = dict()
 
         # case steps
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '1.31.0':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "1.31.0":
             logger.info(">>>step1: stop virt-who to check virt-who file permission")
             config_file = "/etc/sysconfig/virt-who"
             self.run_service(self.ssh_host(), "virt-who", "stop")
             cmd = "ls -l {0}".format(config_file)
             ret, output = self.runcmd(cmd, self.ssh_host())
             logger.info(output)
             if ret == 0 and output is not None and output != "":
                 res = self.vw_msg_search(output, "-rw-------")
-                results.setdefault('step1', []).append(res)
+                results.setdefault("step1", []).append(res)
             else:
                 logger.error("Failed to get virt-who file properties")
-                results.setdefault('step1', []).append(False)
+                results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: start virt-who to check virt-who.pid file permission")
         pid_file = "/var/run/virt-who.pid"
         self.run_service(self.ssh_host(), "virt-who", "start")
         cmd = "ls -l {0}".format(pid_file)
         ret, output = self.runcmd(cmd, self.ssh_host())
         logger.info(output)
         if ret == 0 and output is not None and output != "":
             res = self.vw_msg_search(output, "-rw-------")
-            results.setdefault('step2', []).append(res)
+            results.setdefault("step2", []).append(res)
         else:
             logger.error("Failed to get virt-who.pid properties")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py
--- /tmp/lint/tests/tier1/tc_1025_start_virtwho_service_by_ssh.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1025_start_virtwho_service_by_ssh.py	2023-03-06 06:24:56.237905 +0000
@@ -2,46 +2,47 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133738')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133738")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.ssh_no_passwd_access(self.ssh_guest(), self.ssh_host())
-        host = self.ssh_host()['host']
+        host = self.ssh_host()["host"]
         port = 22
         if ":" in host:
-            var = host.split(':')
+            var = host.split(":")
             host = var[0]
             port = int(var[1])
 
         # case steps
         logger.info(">>>step1: ssh restart virt-who and check status")
         cmd = "ssh {0} -p {1} 'service virt-who restart'".format(host, port)
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if self.vw_service_status() == "running":
             logger.info("Succeeded to restart virt-who by ssh")
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             logger.error("Failed to restart virt-who by ssh")
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: ssh stop virt-who and check status")
         cmd = "ssh {0} -p {1} 'service virt-who stop'".format(host, port)
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if self.vw_service_status() != "running":
             logger.info("Succeeded to stop virt-who by ssh")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.error("Failed to stop virt-who by ssh")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1025_start_virtwho_service_by_ssh.py
--- /tmp/lint/tests/tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py	2023-03-06 06:24:56.263109 +0000
@@ -2,43 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133741')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133741")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         keywords = "test virt-who instead or not"
-        steps = {'step1':'/root/virt-who.py', 'step2':'/root/virt-who'}
+        steps = {"step1": "/root/virt-who.py", "step2": "/root/virt-who"}
         self.vw_thread_clean()
 
         # Case Steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to check {1} instead or not".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to check {1} instead or not".format(step, option)
+            )
             if "RHEL-7" in compose_id:
-                cmd = ('cat <<EOF > %s\n'
-                        '#!/usr/bin/python\n'
-                        'print "%s"\n'
-                        'EOF'
-                      ) % (option, keywords)
+                cmd = (
+                    "cat <<EOF > %s\n" "#!/usr/bin/python\n" 'print "%s"\n' "EOF"
+                ) % (option, keywords)
                 ret, output = self.runcmd(cmd, self.ssh_host())
                 cmd = "python {0}".format(option)
                 ret, output = self.runcmd(cmd, self.ssh_host())
             else:
-                cmd = ('cat <<EOF > %s\n'
-                        '#!/usr/libexec/platform-python\n'
-                        'print("%s")\n'
-                        'EOF'
-                      ) % (option, keywords)
+                cmd = (
+                    "cat <<EOF > %s\n"
+                    "#!/usr/libexec/platform-python\n"
+                    'print("%s")\n'
+                    "EOF"
+                ) % (option, keywords)
                 ret, output = self.runcmd(cmd, self.ssh_host())
                 cmd = "/usr/libexec/platform-python {0}".format(option)
                 ret, output = self.runcmd(cmd, self.ssh_host())
             if ret == 0 and keywords in output:
                 logger.info("Succeeded to run {0}".format(option))
--- /tmp/lint/tests/tier1/tc_1028_check_guest_attr_by_curl.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1028_check_guest_attr_by_curl.py	2023-03-06 06:24:56.270961 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133745')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133745")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
@@ -21,40 +22,46 @@
         # case steps
         logger.info(">>>step1: config mode, check report send and no error msg ")
         self.vw_etc_d_mode_create(config_name, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check guest attributes by curl")
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        username = register_config['username']
-        password = register_config['password']
-        owner = register_config['owner']
-        api = register_config['api']
+        register_type = register_config["type"]
+        username = register_config["username"]
+        password = register_config["password"]
+        owner = register_config["owner"]
+        api = register_config["api"]
         if "stage" in register_type:
-            registered_id = self.stage_consumer_uuid(self.ssh_host(), register_config, host_name, host_uuid)
+            registered_id = self.stage_consumer_uuid(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
             cmd = "curl -s -k -u {0}:{1} {2}/consumers/{3}/guestids/{4}".format(
-                    username, password, api, registered_id, guest_uuid)
+                username, password, api, registered_id, guest_uuid
+            )
             ret, output = self.runcmd(cmd, self.ssh_host())
             if guest_uuid in output and "guestId" in output and "attributes" in output:
                 logger.info("Succeeded to check the guest attributes by curl")
-                results.setdefault('step2', []).append(True)
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("Failed to check the guest attributes by curl")
-                results.setdefault('step2', []).append(False)
+                results.setdefault("step2", []).append(False)
         if "satellite" in register_type:
-            guest_registered_id = self.satellite_host_id(self.ssh_host(), register_config, guest_name, guest_uuid)
+            guest_registered_id = self.satellite_host_id(
+                self.ssh_host(), register_config, guest_name, guest_uuid
+            )
             cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(
-                    username, password, api, guest_registered_id)
+                username, password, api, guest_registered_id
+            )
             ret, output = self.runcmd(cmd, self.ssh_host())
             attr1 = '"id":{0}'.format(guest_registered_id)
             if attr1 in output and guest_name in output:
                 logger.info("Succeeded to check the guest attributes by curl")
-                results.setdefault('step2', []).append(True)
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("Failed to check the guest attributes by curl")
-                results.setdefault('step2', []).append(False)
+                results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py
would reformat /tmp/lint/tests/tier1/tc_1028_check_guest_attr_by_curl.py
--- /tmp/lint/tests/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py	2023-03-06 06:24:56.272381 +0000
@@ -2,42 +2,47 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133746')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133746")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: restart virt-who service, check status and thread")
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "start")
         thread_num = self.vw_callback_thread_num()
-        results.setdefault('step1', []).append(thread_num == 1)
-        results.setdefault('step1', []).append(self.vw_service_status() == "running")
+        results.setdefault("step1", []).append(thread_num == 1)
+        results.setdefault("step1", []).append(self.vw_service_status() == "running")
         logger.info("virt-who thread number is: {0}".format(thread_num))
 
-        logger.info(">>>step2: restart rhsmcertd service , check virt-who status and thread")
+        logger.info(
+            ">>>step2: restart rhsmcertd service , check virt-who status and thread"
+        )
         ret, output = self.run_service(self.ssh_host(), "rhsmcertd", "restart")
         thread_num = self.vw_callback_thread_num()
-        results.setdefault('step2', []).append(thread_num == 1)
-        results.setdefault('step2', []).append(self.vw_service_status() == "running")
+        results.setdefault("step2", []).append(thread_num == 1)
+        results.setdefault("step2", []).append(self.vw_service_status() == "running")
         logger.info("virt-who thread number is: {0}".format(thread_num))
 
-        logger.info(">>>step3: restart virt-who service again , check virt-who status and thread")
+        logger.info(
+            ">>>step3: restart virt-who service again , check virt-who status and thread"
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py
--- /tmp/lint/tests/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py	2023-03-06 06:24:56.287144 +0000
@@ -2,30 +2,33 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133730')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133730")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "libvirt-local" in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
-        logger.info(">>>step1: run virt-who service with one config file in /etc/virt-who.d/")
+        logger.info(
+            ">>>step1: run virt-who service with one config file in /etc/virt-who.d/"
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1037_check_sam_satellite_options_by_cli.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1037_check_sam_satellite_options_by_cli.py	2023-03-06 06:24:56.315930 +0000
@@ -5,34 +5,35 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133748')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133748")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
         cmd1 = self.vw_cli_base() + "--sam -d"
         cmd2 = self.vw_cli_base() + "--satellite6 -d"
-        steps = {'step1': cmd1, 'step2': cmd2}
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # case steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
-            logger.info(">>>{0}: run virt-who cli to check sam/satellite options"
-                        .format(step))
+            logger.info(
+                ">>>{0}: run virt-who cli to check sam/satellite options".format(step)
+            )
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s1)
 
         # case result
         notes = list()
         notes.append("Bug 1760175 - Remove --sam/--satellite6 or repair them?")
         notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1760175")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1037_check_sam_satellite_options_by_cli.py
--- /tmp/lint/tests/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py	2023-03-06 06:24:56.322602 +0000
@@ -2,43 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133739')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133739")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         swap_file = "/etc/virt-who.d/.test.conf.swp"
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_etc_d_mode_create(config_name, swap_file)
 
         # case steps
         logger.info(">>>step1: check the swp file is ignored or not ")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, "test.conf.swp", exp_exist=False)
-        results.setdefault('step1', []).append(s2)
+        results.setdefault("step1", []).append(s2)
 
         logger.info(">>>step2: check how many modes in rhsm.log")
         modes = re.findall(r'Using configuration.*\("(.*?)" mode\)', rhsm_output)
         if len(modes) == 1:
-            logger.info("Succeeded to check, only one mode in rhsm.log: {0}".format(modes))
-            results.setdefault('step2', []).append(True)
+            logger.info(
+                "Succeeded to check, only one mode in rhsm.log: {0}".format(modes)
+            )
+            results.setdefault("step2", []).append(True)
         else:
-            logger.error("Failed to check, the modes number is not matched: {0}".format(modes))
-            results.setdefault('step2', []).append(False)
+            logger.error(
+                "Failed to check, the modes number is not matched: {0}".format(modes)
+            )
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py	2023-03-06 06:24:56.330841 +0000
@@ -2,46 +2,49 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133735')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133735")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # case steps
-        logger.info(">>>step1: enable mode in /etc/sysconfig/virt-who and config same mode in /etc/virt-who.d/")
+        logger.info(
+            ">>>step1: enable mode in /etc/sysconfig/virt-who and config same mode in /etc/virt-who.d/"
+        )
         self.vw_etc_sys_mode_enable()
         self.vw_etc_d_mode_create(config_name, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info duplicated or not")
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
         if "satellite62" in register_type:
             logger.info("Expected mapping info num: 1 for sat62")
-            results.setdefault('step2', []).append(num == 1)
+            results.setdefault("step2", []).append(num == 1)
         else:
             logger.info("Expected mapping info num: 2 for sat63 above and stage")
-            results.setdefault('step2', []).append(num == 2)
+            results.setdefault("step2", []).append(num == 2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py
--- /tmp/lint/tests/tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py	2023-03-06 06:24:56.340241 +0000
@@ -2,34 +2,37 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133701')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133701")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_file = "/etc/sysconfig/virt-who"
         self.vw_etc_sys_mode_enable()
         self.vw_option_enable("VIRTWHO_DEBUG", filename=config_file)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', filename=config_file)
-        steps = {'step1':'VIRTWHO_SAM', 'step2':'VIRTWHO_SATELLITE6'}
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=config_file)
+        steps = {"step1": "VIRTWHO_SAM", "step2": "VIRTWHO_SATELLITE6"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who to check {1}".format(step, option))
             self.vw_option_enable(option, filename=config_file)
-            self.vw_option_update_value(option, '1', filename=config_file)
+            self.vw_option_update_value(option, "1", filename=config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s1)
             self.vw_option_disable(option, filename=config_file)
 
         # case result
         notes = list()
-        notes.append("This case will be deprecated as bug https://bugzilla.redhat.com/show_bug.cgi?id=1368341")
+        notes.append(
+            "This case will be deprecated as bug https://bugzilla.redhat.com/show_bug.cgi?id=1368341"
+        )
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py
--- /tmp/lint/tests/tier1/tc_1040_check_virt_who_password_function.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1040_check_virt_who_password_function.py	2023-03-06 06:24:56.355226 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133706')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133706")
         self.vw_case_init()
 
         # case config
         results = dict()
         password = "redhat"
would reformat /tmp/lint/tests/tier1/tc_1040_check_virt_who_password_function.py
--- /tmp/lint/tests/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.393792 +0000
@@ -1,41 +1,42 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133708')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133708")
         config = self.get_hypervisor_config()
-        hypervisor_type = config['type']
-        hypervisor_password = config['password']
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        hypervisor_type = config["type"]
+        hypervisor_password = config["password"]
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        
+
         # case steps
         logger.info(">>>step1: run virt-who without encrypted_password")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with encrypted_password")
         encrypted_value = self.vw_encrypted(hypervisor_password)
         self.vw_option_disable("password", config_file)
         self.vw_option_add("encrypted_password", encrypted_value, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
         self.vw_option_del("encrypted_password", config_file)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tests/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py	2023-03-06 06:24:56.440116 +0000
@@ -2,32 +2,37 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133704')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133704")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_file = "/etc/sysconfig/virt-who"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
-        self.vw_etc_d_mode_create('virtwho-config', '/etc/virt-who.d/virtwho-config.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
+        self.vw_etc_d_mode_create(
+            "virtwho-config", "/etc/virt-who.d/virtwho-config.conf"
+        )
 
         proxy_server = "{0}:{1}".format(deploy.proxy.server, deploy.proxy.port)
         bad_proxy_server = "10.73.3.24:9999"
-        steps = {'step1':'http_proxy', 'step2':'https_proxy'}
-        error_msg = ["Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"]
+        steps = {"step1": "http_proxy", "step2": "https_proxy"}
+        error_msg = [
+            "Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"
+        ]
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who to check {1}".format(step, option))
             if option == "http_proxy":
                 value = "http://{0}".format(proxy_server)
                 bad_value = "http://{0}".format(bad_proxy_server)
             if option == "https_proxy":
@@ -35,12 +40,18 @@
                 bad_value = "https://{0}".format(bad_proxy_server)
             logger.info("> run virt-who with good {0}".format(option))
             self.vw_option_add(option, value, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            s2 = self.vw_msg_search(rhsm_output, "Connection built.*{0}".format(proxy_server), exp_exist=True)
-            s3 = self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True)
+            s2 = self.vw_msg_search(
+                rhsm_output,
+                "Connection built.*{0}".format(proxy_server),
+                exp_exist=True,
+            )
+            s3 = self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True
+            )
             results.setdefault(step, []).append(s1)
             results.setdefault(step, []).append(s2)
             results.setdefault(step, []).append(s3)
 
             logger.info("> run virt-who with bad {0}".format(option))
would reformat /tmp/lint/tests/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py
--- /tmp/lint/tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.462805 +0000
@@ -2,60 +2,67 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133710')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133710")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_type = register_config["type"]
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
 
         # case steps
         logger.info(">>>step1: run virt-who without rhsm_username and rhsm_password")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: run virt-who with rhsm_username and rhsm_password good value")
+        logger.info(
+            ">>>step2: run virt-who with rhsm_username and rhsm_password good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
-        logger.info(">>>step3: run virt-who with rhsm_username and rhsm_password null value")
+        logger.info(
+            ">>>step3: run virt-who with rhsm_username and rhsm_password null value"
+        )
         self.vw_option_update_value("rhsm_username", "", config_file)
         self.vw_option_update_value("rhsm_password", "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: run virt-who with rhsm_username and rhsm_password disable")
+        logger.info(
+            ">>>step4: run virt-who with rhsm_username and rhsm_password disable"
+        )
         self.vw_option_disable("rhsm_username", config_file)
         self.vw_option_disable("rhsm_password", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.471788 +0000
@@ -2,49 +2,54 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133712')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133712")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_type = register_config["type"]
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
 
         # case steps
-        logger.info(">>>step1: run virt-who with rhsm_username and rhsm_password good value")
+        logger.info(
+            ">>>step1: run virt-who with rhsm_username and rhsm_password good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: run virt-who with rhsm_username and rhsm_encrypted_password good value")
+        logger.info(
+            ">>>step2: run virt-who with rhsm_username and rhsm_encrypted_password good value"
+        )
         encrypted_value = self.vw_encrypted(register_password)
         self.vw_option_disable("rhsm_password", config_file)
         self.vw_option_add("rhsm_encrypted_password", encrypted_value, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py	2023-03-06 06:24:56.502661 +0000
@@ -2,62 +2,65 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133713')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133713")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_type = register_config["type"]
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
 
         # case steps
-        logger.info(">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value")
+        logger.info(
+            ">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with rhsm_hostname disable")
         self.vw_option_disable("rhsm_hostname", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
         self.vw_option_enable("rhsm_hostname", config_file)
 
         logger.info(">>>step3: run virt-who with rhsm_port disable")
         self.vw_option_disable("rhsm_port", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
         self.vw_option_enable("rhsm_port", config_file)
 
         logger.info(">>>step4: run virt-who with rhsm_prefix disable")
         self.vw_option_disable("rhsm_prefix", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
         self.vw_option_enable("rhsm_prefix", config_file)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.538598 +0000
@@ -2,56 +2,57 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133697')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133697")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_str = '"hypervisorId": "{0}"'.format(host_uuid)
 
         # case steps
         logger.info(">>>step1: run virt-who without filter_hosts")
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
 
         logger.info(">>>step2: run virt-who with filter_hosts=[host_uuid]")
         self.vw_option_add("filter_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=True)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with filter_hosts=*")
         self.vw_option_update_value("filter_hosts", "*", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=True)
-        results.setdefault('step3', []).append(s2)
+        results.setdefault("step3", []).append(s2)
 
         logger.info(">>>step4: run virt-who with filter_hosts=")
         self.vw_option_update_value("filter_hosts", "", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=False)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.542922 +0000
@@ -2,56 +2,57 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133694')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133694")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_str = '"hypervisorId": "{0}"'.format(host_uuid)
 
         # case steps
         logger.info(">>>step1: run virt-who without exclude_hosts")
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
 
         logger.info(">>>step2: run virt-who with exclude_hosts=[host_uuid]")
         self.vw_option_add("exclude_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=False)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with exclude_hosts=*")
         self.vw_option_update_value("exclude_hosts", "*", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=False)
-        results.setdefault('step3', []).append(s2)
+        results.setdefault("step3", []).append(s2)
 
         logger.info(">>>step4: run virt-who with exclude_hosts=")
         self.vw_option_update_value("exclude_hosts", "", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=True)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py	2023-03-06 06:24:56.601339 +0000
@@ -5,109 +5,134 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133691')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133691")
+        hypervisor_type = self.get_config("hypervisor_type")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
+        register_server = register_config["server"]
         if "libvirt-local" in hypervisor_type:
-            owner = register_config['owner']
+            owner = register_config["owner"]
             cmd = "echo -e '[{0}]\ntype=libvirt\nowner={1}' > {2}".format(
-                config_name, owner, config_file)
+                config_name, owner, config_file
+            )
             ret, output = self.runcmd(cmd, self.ssh_host())
         proxy_server = deploy.proxy.server
         proxy_port = deploy.proxy.port
         bad_proxy_server = "10.73.3.24"
         bad_proxy_port = "9999"
-        error_msg = ["Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"]
+        error_msg = [
+            "Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"
+        ]
 
         # Case Steps
         try:
-            logger.info(">>>step1: set /etc/rhsm/rhsm.conf with good proxy_hostname and proxy_port")
-            self.vw_option_update_value("proxy_hostname", proxy_server, '/etc/rhsm/rhsm.conf')
-            self.vw_option_update_value("proxy_port", proxy_port, '/etc/rhsm/rhsm.conf')
+            logger.info(
+                ">>>step1: set /etc/rhsm/rhsm.conf with good proxy_hostname and proxy_port"
+            )
+            self.vw_option_update_value(
+                "proxy_hostname", proxy_server, "/etc/rhsm/rhsm.conf"
+            )
+            self.vw_option_update_value("proxy_port", proxy_port, "/etc/rhsm/rhsm.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(s1)
-            s2 = self.vw_msg_search(rhsm_output, "Connection built.*{0}".format(proxy_server))
-            results.setdefault('step1', []).append(s2)
-            s3 = self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server))
-            results.setdefault('step1', []).append(s3)
+            results.setdefault("step1", []).append(s1)
+            s2 = self.vw_msg_search(
+                rhsm_output, "Connection built.*{0}".format(proxy_server)
+            )
+            results.setdefault("step1", []).append(s2)
+            s3 = self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server)
+            )
+            results.setdefault("step1", []).append(s3)
 
             logger.info(">>>step2: set wrong proxy in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("proxy_hostname", bad_proxy_server, '/etc/rhsm/rhsm.conf')
-            self.vw_option_update_value("proxy_port", bad_proxy_port, '/etc/rhsm/rhsm.conf')
+            self.vw_option_update_value(
+                "proxy_hostname", bad_proxy_server, "/etc/rhsm/rhsm.conf"
+            )
+            self.vw_option_update_value(
+                "proxy_port", bad_proxy_port, "/etc/rhsm/rhsm.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
-            s1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
+            s1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             s2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step2', []).append(s1)
-            results.setdefault('step2', []).append(s2)
+            results.setdefault("step2", []).append(s1)
+            results.setdefault("step2", []).append(s2)
 
-            logger.info(">>>step3: set no_proxy=[register_server] in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("no_proxy", register_server, '/etc/rhsm/rhsm.conf')
+            logger.info(
+                ">>>step3: set no_proxy=[register_server] in /etc/rhsm/rhsm.conf"
+            )
+            self.vw_option_update_value(
+                "no_proxy", register_server, "/etc/rhsm/rhsm.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(s1)
+            results.setdefault("step3", []).append(s1)
 
             logger.info(">>>step4: set no_proxy=* in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("no_proxy", '*', '/etc/rhsm/rhsm.conf')
+            self.vw_option_update_value("no_proxy", "*", "/etc/rhsm/rhsm.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(s1)
-            self.vw_option_update_value("no_proxy", '', '/etc/rhsm/rhsm.conf')
+            results.setdefault("step4", []).append(s1)
+            self.vw_option_update_value("no_proxy", "", "/etc/rhsm/rhsm.conf")
 
-            logger.info(">>>step5: set rhsm_no_proxy=[register_server] in /etc/virt-who.conf")
-            self.vw_option_enable('[defaults]', '/etc/virt-who.conf')
-            self.vw_option_enable('rhsm_no_proxy', '/etc/virt-who.conf')
-            self.vw_option_update_value('rhsm_no_proxy', register_server, '/etc/virt-who.conf')
+            logger.info(
+                ">>>step5: set rhsm_no_proxy=[register_server] in /etc/virt-who.conf"
+            )
+            self.vw_option_enable("[defaults]", "/etc/virt-who.conf")
+            self.vw_option_enable("rhsm_no_proxy", "/etc/virt-who.conf")
+            self.vw_option_update_value(
+                "rhsm_no_proxy", register_server, "/etc/virt-who.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(s1)
+            results.setdefault("step5", []).append(s1)
 
             logger.info(">>>step6: set rhsm_no_proxy=* in /etc/virt-who.conf")
-            self.vw_option_update_value('rhsm_no_proxy', '*', '/etc/virt-who.conf')
+            self.vw_option_update_value("rhsm_no_proxy", "*", "/etc/virt-who.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(s1)
-            self.vw_option_disable('rhsm_no_proxy', '/etc/virt-who.conf')
+            results.setdefault("step6", []).append(s1)
+            self.vw_option_disable("rhsm_no_proxy", "/etc/virt-who.conf")
 
-            if hypervisor_type not in ('libvirt-local', 'vdsm'):
+            if hypervisor_type not in ("libvirt-local", "vdsm"):
                 # frequently start virt-who will get 429 error, sleep 15s to fix
                 time.sleep(15)
-                logger.info(">>>step7: set rhsm_no_proxy=[register_server] in /etc/virt-who.d/x.conf")
-                self.vw_option_add('rhsm_no_proxy', register_server, config_file)
+                logger.info(
+                    ">>>step7: set rhsm_no_proxy=[register_server] in /etc/virt-who.d/x.conf"
+                )
+                self.vw_option_add("rhsm_no_proxy", register_server, config_file)
                 data, tty_output, rhsm_output = self.vw_start()
                 s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step7', []).append(s1)
+                results.setdefault("step7", []).append(s1)
 
                 time.sleep(15)
                 logger.info(">>>step8: set rhsm_no_proxy=* in /etc/virt-who.d/x.conf")
-                self.vw_option_update_value('rhsm_no_proxy', '*', config_file)
+                self.vw_option_update_value("rhsm_no_proxy", "*", config_file)
                 data, tty_output, rhsm_output = self.vw_start()
                 s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step8', []).append(s1)
-                self.vw_option_del('rhsm_no_proxy', config_file)
+                results.setdefault("step8", []).append(s1)
+                self.vw_option_del("rhsm_no_proxy", config_file)
             else:
-                logger.info('Skip step7 and step8 for {0}'.format(hypervisor_type))
+                logger.info("Skip step7 and step8 for {0}".format(hypervisor_type))
         except:
-            results.setdefault('step except', []).append(False)
+            results.setdefault("step except", []).append(False)
             pass
 
         finally:
-            self.vw_option_update_value('proxy_hostname', '', '/etc/rhsm/rhsm.conf')
-            self.vw_option_update_value('proxy_port', '', '/etc/rhsm/rhsm.conf')
-            self.vw_option_update_value('no_proxy', '', "/etc/rhsm/rhsm.conf")
+            self.vw_option_update_value("proxy_hostname", "", "/etc/rhsm/rhsm.conf")
+            self.vw_option_update_value("proxy_port", "", "/etc/rhsm/rhsm.conf")
+            self.vw_option_update_value("no_proxy", "", "/etc/rhsm/rhsm.conf")
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py
--- /tmp/lint/tests/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.610393 +0000
@@ -2,53 +2,63 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133702')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133702")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "esx" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
 
         # case steps
-        logger.info(">>>step1: run virt-who with filter_host_parents='' to get domain_id")
+        logger.info(
+            ">>>step1: run virt-who with filter_host_parents='' to get domain_id"
+        )
         self.vw_option_add("filter_host_parents", "", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step1', []).append(s2)
-        domain_id = re.findall(r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid), rhsm_output)[-1]
-        logger.info("Succeeded to find: {0}:{1}:{2}".format(host_hwuuid, domain_id, host_uuid))
+        results.setdefault("step1", []).append(s2)
+        domain_id = re.findall(
+            r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid),
+            rhsm_output,
+        )[-1]
+        logger.info(
+            "Succeeded to find: {0}:{1}:{2}".format(host_hwuuid, domain_id, host_uuid)
+        )
 
         logger.info(">>>step2: run virt-who with filter_host_parents=[domain_id]")
-        self.vw_option_update_value("filter_host_parents", domain_id, filename=config_file)
+        self.vw_option_update_value(
+            "filter_host_parents", domain_id, filename=config_file
+        )
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with filter_host_parents=*")
         self.vw_option_update_value("filter_host_parents", "*", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step3', []).append(s2)
+        results.setdefault("step3", []).append(s2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.621769 +0000
@@ -2,54 +2,62 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133700')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133700")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "esx" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
 
         # case steps
-        logger.info(">>>step1: run virt-who with exlude_host_parents=* to get domain_id")
+        logger.info(
+            ">>>step1: run virt-who with exlude_host_parents=* to get domain_id"
+        )
         self.vw_option_add("exclude_host_parents", "*", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step1', []).append(s2)
-        domain_id = re.findall(r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid), rhsm_output)[-1]
-        logger.info("Succeeded to find: {0}:{1}:{2}".format(host_hwuuid, domain_id, host_uuid))
+        results.setdefault("step1", []).append(s2)
+        domain_id = re.findall(
+            r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid),
+            rhsm_output,
+        )[-1]
+        logger.info(
+            "Succeeded to find: {0}:{1}:{2}".format(host_hwuuid, domain_id, host_uuid)
+        )
         self.vw_option_del("filter_host_parents", filename=config_file)
 
         logger.info(">>>step2: run virt-who with exclude_host_parents=[domain_id]")
         self.vw_option_add("exclude_host_parents", domain_id, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with exclude_host_parents=")
         self.vw_option_update_value("exclude_host_parents", "", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py	2023-03-06 06:24:56.637594 +0000
@@ -2,64 +2,71 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133707')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133707")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
 
         # case steps
         logger.info(">>>step1: run virt-who without filter_hosts and exclude_hosts")
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
 
-        logger.info(">>>step2: run virt-who with filter_hosts=[host_uuid] and exclude_hosts=[host_uuid]")
+        logger.info(
+            ">>>step2: run virt-who with filter_hosts=[host_uuid] and exclude_hosts=[host_uuid]"
+        )
         self.vw_option_add("filter_hosts", host_uuid, filename=config_file)
         self.vw_option_add("exclude_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
         self.vw_option_del("filter_hosts", filename=config_file)
         self.vw_option_del("exclude_hosts", filename=config_file)
 
-        logger.info(">>>step3: run virt-who with filter_hosts=* and exclude_hosts=[host_uuid]")
+        logger.info(
+            ">>>step3: run virt-who with filter_hosts=* and exclude_hosts=[host_uuid]"
+        )
         self.vw_option_add("filter_hosts", "*", filename=config_file)
         self.vw_option_add("exclude_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step3', []).append(s2)
+        results.setdefault("step3", []).append(s2)
         self.vw_option_del("filter_hosts", filename=config_file)
         self.vw_option_del("exclude_hosts", filename=config_file)
 
-        logger.info(">>>step4: run virt-who with exclude_hosts= and filter_hosts=[host_uuid]")
+        logger.info(
+            ">>>step4: run virt-who with exclude_hosts= and filter_hosts=[host_uuid]"
+        )
         self.vw_option_add("exclude_hosts", "", filename=config_file)
         self.vw_option_add("filter_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
         self.vw_option_del("exclude_hosts", filename=config_file)
         self.vw_option_del("filter_hosts", filename=config_file)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.683688 +0000
@@ -2,44 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133705')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133705")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "esx" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
 
         # case steps
         logger.info(">>>step1: run virt-who with without simplified_vim option")
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
 
         logger.info(">>>step2: run virt-who with simplified_vim=true")
         self.vw_option_add("simplified_vim", "true", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
 
         logger.info(">>>step3: run virt-who with simplified_vim=false")
         self.vw_option_update_value("simplified_vim", "false", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.711305 +0000
@@ -2,40 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133709')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133709")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts".format(
+                    step, option
+                )
+            )
             self.vw_option_add("hypervisor_id", option, filename=config_file)
             if option == "hwuuid":
                 hypervisorId = host_hwuuid
             elif option == "hostname":
                 hypervisorId = host_name
@@ -43,16 +48,24 @@
                 hypervisorId = host_uuid
             self.vw_option_add("filter_hosts", hypervisorId, filename=config_file)
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s1)
-            hypervisor_num = data[register_owner]['hypervisor_num']
+            hypervisor_num = data[register_owner]["hypervisor_num"]
             if hypervisorId in data[register_owner].keys() and hypervisor_num == 1:
-                logger.info("Succeeded to search, {0} hypervisorId({1}) found".format(hypervisor_num, hypervisorId))
+                logger.info(
+                    "Succeeded to search, {0} hypervisorId({1}) found".format(
+                        hypervisor_num, hypervisorId
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.error("Failed to search, {0} hypervisorId({1}) found".format(hypervisor_num, hypervisorId))
+                logger.error(
+                    "Failed to search, {0} hypervisorId({1}) found".format(
+                        hypervisor_num, hypervisorId
+                    )
+                )
                 results.setdefault(step, []).append(False)
             self.vw_option_del("hypervisor_id", filename=config_file)
             self.vw_option_del("filter_hosts", filename=config_file)
             self.vw_web_host_delete(host_name, hypervisorId)
         if "stage" in register_type:
--- /tmp/lint/tests/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tests/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.712512 +0000
@@ -2,40 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133705')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133705")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who with hypervisor_id={1}".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who with hypervisor_id={1}".format(step, option)
+            )
             self.vw_option_add("hypervisor_id", option, filename=config_file)
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s1)
             if option == "hwuuid":
@@ -51,24 +54,37 @@
                 logger.info("Succeeded to search hypervisorId:{0}".format(hypervisorId))
                 results.setdefault(step, []).append(True)
             else:
                 logger.error("Failed to search hypervisorId:{0}".format(hypervisorId))
                 results.setdefault(step, []).append(False)
-            if 'satellite' in register_type:
-                host_display = self.satellite_hosts_get(self.ssh_host(), register_config,
-                                        host_name, host_uuid, host_hwuuid, desc="get host display name")
-                host_display_name = host_display['name']
+            if "satellite" in register_type:
+                host_display = self.satellite_hosts_get(
+                    self.ssh_host(),
+                    register_config,
+                    host_name,
+                    host_uuid,
+                    host_hwuuid,
+                    desc="get host display name",
+                )
+                host_display_name = host_display["name"]
             else:
                 hypervisor_display = host_name
-                host_display = self.stage_consumer_get(self.ssh_host(), register_config,
-                                        host_name, host_uuid)
-                host_display_name = host_display['name']
+                host_display = self.stage_consumer_get(
+                    self.ssh_host(), register_config, host_name, host_uuid
+                )
+                host_display_name = host_display["name"]
             if hypervisor_display or hypervisor_display.lower() in host_display_name:
-                logger.info("Succeeded to search hypervisorDisplay:{0}".format(hypervisor_display))
+                logger.info(
+                    "Succeeded to search hypervisorDisplay:{0}".format(
+                        hypervisor_display
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.error("Failed to search hypervisorDisplay:{0}".format(hypervisor_display))
+                logger.error(
+                    "Failed to search hypervisorDisplay:{0}".format(hypervisor_display)
+                )
                 results.setdefault(step, []).append(False)
             self.vw_option_del("hypervisor_id", filename=config_file)
             self.vw_web_host_delete(host_name, hypervisorId)
         if "stage" in register_type:
             self.stage_consumer_clean(self.ssh_host(), register_config)
would reformat /tmp/lint/tests/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:24:56.714641 +0000
@@ -2,40 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133714')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133714")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to with hypervisor_id={1} and set exclude_hosts".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to with hypervisor_id={1} and set exclude_hosts".format(
+                    step, option
+                )
+            )
             self.vw_option_add("hypervisor_id", option, filename=config_file)
             if option == "hwuuid":
                 hypervisorId = host_hwuuid
             elif option == "hostname":
                 hypervisorId = host_name
would reformat /tmp/lint/tests/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py
would reformat /tmp/lint/tests/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py	2023-03-06 06:24:56.727631 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133682')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133682")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
@@ -18,14 +19,14 @@
 
         # case steps
         logger.info(">>>step1: enable global header in /etc/virt-who.conf")
         self.vw_option_enable("[global]", filename=virtwho_conf)
         self.vw_option_enable("debug", filename=virtwho_conf)
-        self.vw_option_update_value("debug", 'True', filename=virtwho_conf)
+        self.vw_option_update_value("debug", "True", filename=virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.773930 +0000
@@ -2,41 +2,52 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133684')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133684")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         default_reporter_id = self.get_hostname(self.ssh_host())
         expected_reporter_id = "virtwho_reporter_id_tc1057"
-        steps = {'step1':default_reporter_id, 'step2':expected_reporter_id}
+        steps = {"step1": default_reporter_id, "step2": expected_reporter_id}
 
         # case steps
-        for step, value in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to check reporter_id({1})".format(step, value))
+        for step, value in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to check reporter_id({1})".format(step, value)
+            )
             if step == "step2":
                 self.vw_option_enable("reporter_id", virtwho_conf)
                 self.vw_option_update_value("reporter_id", value, virtwho_conf)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
-            if value in data['reporter_id']:
-                logger.info("Succeeded to check, reporter_id({0}) is expected".format(data['reporter_id']))
+            if value in data["reporter_id"]:
+                logger.info(
+                    "Succeeded to check, reporter_id({0}) is expected".format(
+                        data["reporter_id"]
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.info("Failed to check, reporter_id({0}) is not expected".format(data['reporter_id']))
+                logger.info(
+                    "Failed to check, reporter_id({0}) is not expected".format(
+                        data["reporter_id"]
+                    )
+                )
                 results.setdefault(step, []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.778712 +0000
@@ -2,42 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133686')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133686")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info('>>>step1: Run virt-who with "onestho=True"')
         self.vw_option_enable("oneshot", virtwho_conf)
-        self.vw_option_update_value("oneshot", 'True', virtwho_conf)
+        self.vw_option_update_value("oneshot", "True", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=True)
         res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info('>>>step2: Run virt-who with "oneshot=False"')
-        self.vw_option_update_value("oneshot", 'False', virtwho_conf)
+        self.vw_option_update_value("oneshot", "False", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info('>>>step3: Run virt-who with "oneshot" disabled')
         self.vw_option_disable("oneshot", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.781011 +0000
@@ -2,42 +2,61 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133685')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133685")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: enable interval and set to 10 in /etc/virt-who.conf")
         self.vw_option_enable("interval", virtwho_conf)
-        self.vw_option_update_value("interval", '10', virtwho_conf)
+        self.vw_option_update_value("interval", "10", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)
-        results.setdefault('step1', []).append(res)
+        res = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: enable interval and set to 60 in /etc/virt-who.conf")
-        self.vw_option_update_value("interval", '60', virtwho_conf)
+        self.vw_option_update_value("interval", "60", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_loopnum=1, exp_looptime=60)
-        results.setdefault('step2', []).append(res)
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: enable interval and set to 120 in /etc/virt-who.conf")
-        self.vw_option_update_value("interval", '120', virtwho_conf)
+        self.vw_option_update_value("interval", "120", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120, exp_loopnum=1, exp_looptime=120)
-        results.setdefault('step3', []).append(res)
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=120,
+            exp_loopnum=1,
+            exp_looptime=120,
+        )
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.787663 +0000
@@ -2,46 +2,51 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133687')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133687")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info('>>>step1: Run virt-who with "debug=True"')
         self.vw_option_enable("debug", virtwho_conf)
-        self.vw_option_update_value("debug", 'True', virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         logger.info('>>>step2: Run virt-who with "debug=False"')
-        self.vw_option_update_value("debug", 'False', virtwho_conf)
+        self.vw_option_update_value("debug", "False", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        res2 = self.vw_msg_search(
+            output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
-        logger.info('>>>step3: Run virt-who with debug option disabled')
+        logger.info(">>>step3: Run virt-who with debug option disabled")
         self.vw_option_disable("debug", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(
+            output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.832386 +0000
@@ -2,24 +2,25 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133690')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133690")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/tmp/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
 
@@ -28,10 +29,10 @@
         self.vw_option_enable("configs", virtwho_conf)
         self.vw_option_update_value("configs", config_file, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.836418 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133688')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133688")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         log_dir = "/var/log/rhsm/virtwho/"
@@ -26,20 +27,20 @@
         logger.info(">>>step1: Run virt-who with log-dir setting in /etc/virt-who.conf")
         self.vw_option_enable("log_dir", virtwho_conf)
         self.vw_option_update_value("log_dir", log_dir, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
         ret, output = self.runcmd("ls {0}".format(log_file), self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to find file: {0}".format(log_file))
             ret, output = self.runcmd("cat {0}".format(log_file), self.ssh_host())
             d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)
             d2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
             if d1 is False or d2 is False:
-                results.setdefault('step1', []).append(False)
+                results.setdefault("step1", []).append(False)
         else:
             logger.error("{0} is not exist".format(log_file))
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.847922 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133693')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133693")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         log_dir = "/var/log/rhsm/virtwho/"
@@ -28,20 +29,20 @@
         self.vw_option_enable("log_file", virtwho_conf)
         self.vw_option_update_value("log_dir", log_dir, virtwho_conf)
         self.vw_option_update_value("log_file", log_file, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
         ret, output = self.runcmd("ls {0}".format(log_file), self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to find file: {0}".format(log_file))
             ret, output = self.runcmd("cat {0}".format(log_file), self.ssh_host())
             d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)
             d2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
             if d1 is False or d2 is False:
-                results.setdefault('step1', []).append(False)
+                results.setdefault("step1", []).append(False)
         else:
             logger.error("{0} is not exist".format(log_file))
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py	2023-03-06 06:24:56.875116 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133692')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133692")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
 
@@ -24,10 +25,10 @@
         logger.info(">>>step1: Enable [defaults] header in /etc/virt-who.conf")
         self.vw_option_enable("[defaults]", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.887908 +0000
@@ -2,36 +2,37 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133698')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133698")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
+        register_owner = register_config["owner"]
 
         # case steps
         logger.info(">>>step1: Run virt-who with owner setting in /etc/virt-who.conf")
         self.vw_option_enable("[defaults]", virtwho_conf)
         self.vw_option_enable("owner", virtwho_conf)
         self.vw_option_update_value("owner", register_owner, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.893590 +0000
@@ -2,85 +2,94 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133689')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133689")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # case steps
-        logger.info(">>>step1: Run virt-who with log-per-config=False in /etc/virt-who.conf")
+        logger.info(
+            ">>>step1: Run virt-who with log-per-config=False in /etc/virt-who.conf"
+        )
         self.vw_option_enable("log_per_config", virtwho_conf)
-        self.vw_option_update_value("log_per_config", 'False', virtwho_conf)
+        self.vw_option_update_value("log_per_config", "False", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
-        ret, output = self.runcmd('ls /var/log/rhsm/virtwho*', self.ssh_host())
+        results.setdefault("step1", []).append(res)
+        ret, output = self.runcmd("ls /var/log/rhsm/virtwho*", self.ssh_host())
         if ret == 0:
-            logger.error("Failed to search, unexpected /var/log/rhsm/virtwho* files exist")
-            results.setdefault('step1', []).append(False)
+            logger.error(
+                "Failed to search, unexpected /var/log/rhsm/virtwho* files exist"
+            )
+            results.setdefault("step1", []).append(False)
         else:
-            logger.info("Succeeded to search, unexpected /var/log/rhsm/virtwho* files not exist")
-            results.setdefault('step1', []).append(True)
+            logger.info(
+                "Succeeded to search, unexpected /var/log/rhsm/virtwho* files not exist"
+            )
+            results.setdefault("step1", []).append(True)
 
-        logger.info(">>>step2: Run virt-who with log-per-config=True in /etc/virt-who.conf")
-        self.vw_option_update_value("log_per_config", 'True', virtwho_conf)
+        logger.info(
+            ">>>step2: Run virt-who with log-per-config=True in /etc/virt-who.conf"
+        )
+        self.vw_option_update_value("log_per_config", "True", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
-        ret, output = self.runcmd('ls /var/log/rhsm/virtwho*', self.ssh_host())
+        results.setdefault("step2", []).append(res)
+        ret, output = self.runcmd("ls /var/log/rhsm/virtwho*", self.ssh_host())
         if ret != 0 or output is None:
             logger.error("Failed to find /var/log/rhsm/virtwho* files")
-            results.setdefault('step2', []).append(False)
-        files = output.split('\n')
+            results.setdefault("step2", []).append(False)
+        files = output.split("\n")
         if any("destination" in fd for fd in files):
             logger.info("Succeeded to find virtwho.destination file")
         else:
             logger.error("Failed to find virtwho.destination file")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
         if any("main" in fd for fd in files):
             logger.info("Succeeded to find virtwho.main file")
         else:
             logger.error("Failed to find virtwho.main file")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
         if any("rhsm_log" in fd for fd in files):
             logger.info("Succeeded to find virtwho.rhsm_log file")
         else:
             logger.error("Failed to find virtwho.rhsm_log file")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
         for fd in files:
             fd = fd.strip()
             ret, output = self.runcmd("cat {0}".format(fd), self.ssh_host())
             if "destination" in fd:
                 d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)
                 d2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                 if d1 is False or d2 is False:
                     logger.error("Failed to validate virtwho.destination file")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
             if "main" in fd:
                 m1 = self.vw_msg_search(output, "Report for config", exp_exist=True)
                 m2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                 if m1 is False or m2 is False:
                     logger.error("Failed to validate virtwho.main file")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
             if "rhsm_log" in fd:
                 r1 = self.vw_msg_search(output, "Using reporter_id=", exp_exist=True)
                 r2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                 if r1 is False or r2 is False:
                     logger.error("Failed to validate virtwho.rhsm_log file")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py	2023-03-06 06:24:56.931711 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133681')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133681")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
         json_file = "/tmp/fake.json"
         conf_file = "/etc/virt-who.d/fake.conf"
 
@@ -32,10 +33,10 @@
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start(cli="virt-who -d")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.937524 +0000
@@ -2,49 +2,52 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133695')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133695")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
-        register_env = register_config['env']
+        register_owner = register_config["owner"]
+        register_env = register_config["env"]
 
         # case steps
         logger.info(">>>step1: Run virt-who with env setting in /etc/virt-who.conf")
         self.vw_option_enable("[defaults]", virtwho_conf)
         self.vw_option_enable("env", virtwho_conf)
         self.vw_option_update_value("env", register_env, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
-        logger.info(">>>step2: Run virt-who with owner and env setting in /etc/virt-who.conf")
+        logger.info(
+            ">>>step2: Run virt-who with owner and env setting in /etc/virt-who.conf"
+        )
         self.vw_option_enable("owner", virtwho_conf)
         self.vw_option_update_value("owner", register_owner, virtwho_conf)
         self.vw_option_update_value("env", register_env, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py	2023-03-06 06:24:56.958979 +0000
@@ -2,43 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133703')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133703")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
         self.vw_option_enable("[defaults]", virtwho_conf)
         self.vw_option_enable("hypervisor_id", virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # Case Steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: Run virt-who with hypervisor_id={1} in /etc/virt-who.conf".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: Run virt-who with hypervisor_id={1} in /etc/virt-who.conf".format(
+                    step, option
+                )
+            )
             self.vw_option_update_value("hypervisor_id", option, virtwho_conf)
             data, tty_output, rhsm_output = self.vw_start()
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
             if option == "hwuuid":
would reformat /tmp/lint/tests/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py	2023-03-06 06:24:56.969632 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133680')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133680")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_name = self.get_hostname(self.ssh_guest())
         guest_uuid = self.get_hypervisor_guestuuid()
         json_file = "/tmp/fake.json"
@@ -34,23 +35,23 @@
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start(cli="virt-who -d")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), "RH00002", "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step4: attach bonus sku for guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), "RH00050", "virtual")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
-        res = self.vw_msg_search(output, 'RH00050', exp_exist=True)
-        results.setdefault('step4', []).append(res)
+        res = self.vw_msg_search(output, "RH00050", exp_exist=True)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py	2023-03-06 06:24:57.018436 +0000
@@ -5,40 +5,46 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133683')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133683")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
+        register_owner = register_config["owner"]
 
         # case steps
         logger.info(">>>step1: Run virt-who service to check the rhsm.log")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
         if register_owner in data.keys() and guest_uuid in data[register_owner].keys():
-            logger.info("Succeeded to check, mapping info is specified to {0}".format(
-                register_owner))
-            results.setdefault('step1', []).append(True)
+            logger.info(
+                "Succeeded to check, mapping info is specified to {0}".format(
+                    register_owner
+                )
+            )
+            results.setdefault("step1", []).append(True)
         else:
-            logger.error("Failed to check, mapping info is not specified to {0}".format(
-                register_owner))
-            results.setdefault('step1', []).append(False)
+            logger.error(
+                "Failed to check, mapping info is not specified to {0}".format(
+                    register_owner
+                )
+            )
+            results.setdefault("step1", []).append(False)
 
         # case result
         self.vw_case_result(results)
--- /tmp/lint/tests/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py	2023-03-06 06:24:57.016474 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133744')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133744")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_name = self.get_hostname(self.ssh_guest())
         guest_uuid = self.get_hypervisor_guestuuid()
         json_file = "/tmp/fake.json"
@@ -34,29 +35,31 @@
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start(cli="virt-who -d")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), "RH00002", "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step4: attach bonus sku for guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), "RH00050", "virtual")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
-        res = self.vw_msg_search(output, 'RH00050', exp_exist=True)
-        results.setdefault('step4', []).append(res)
+        res = self.vw_msg_search(output, "RH00050", exp_exist=True)
+        results.setdefault("step4", []).append(res)
 
-        logger.info(">>>step5: unregister host/hypervisor, check consumed bonus is removed")
+        logger.info(
+            ">>>step5: unregister host/hypervisor, check consumed bonus is removed"
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-        res = self.vw_msg_search(output, 'RH00050', exp_exist=False)
-        results.setdefault('step5', []).append(res)
+        res = self.vw_msg_search(output, "RH00050", exp_exist=False)
+        results.setdefault("step5", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py
would reformat /tmp/lint/tests/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py	2023-03-06 06:24:57.041270 +0000
@@ -5,43 +5,43 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134056')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134056")
+        hypervisor_type = self.get_config("hypervisor_type")
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "satellite62" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
 
         # case steps
         logger.info(">>>step1: Run virt-who servie to check hypervisor's facts")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         facts = data[register_owner][host_uuid]
-        results.setdefault('step1', []).append(res)
-        results.setdefault('step1', []).append(data['is_async'] == "hypervisors_async")
-        results.setdefault('step1', []).append('type' in facts.keys())
-        results.setdefault('step1', []).append('version' in facts.keys())
-        results.setdefault('step1', []).append('socket' in facts.keys())
-        logger.info("hypervisor.type: {0} ".format(facts['type']))
-        logger.info("cpu.cpu_socket(s): {0}".format(facts['socket']))
-        logger.info("hypervisor.version: {0}".format(facts['version']))
+        results.setdefault("step1", []).append(res)
+        results.setdefault("step1", []).append(data["is_async"] == "hypervisors_async")
+        results.setdefault("step1", []).append("type" in facts.keys())
+        results.setdefault("step1", []).append("version" in facts.keys())
+        results.setdefault("step1", []).append("socket" in facts.keys())
+        logger.info("hypervisor.type: {0} ".format(facts["type"]))
+        logger.info("cpu.cpu_socket(s): {0}".format(facts["socket"]))
+        logger.info("hypervisor.version: {0}".format(facts["version"]))
 
         # case result
         self.vw_case_result(results)
--- /tmp/lint/tests/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py	2023-03-06 06:24:57.042755 +0000
@@ -2,59 +2,73 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133747')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133747")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
 
         # case steps
         logger.info(">>>step1: Run virt-who servie when virt-who host is registered")
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "start")
         time.sleep(30)
         status = self.vw_service_status()
         thread_num = self.vw_callback_thread_num()
         error_num, error_list = self.vw_callback_error_num()
-        results.setdefault('step1', []).append(error_num == 0)
-        results.setdefault('step1', []).append(thread_num == 1)
-        results.setdefault('step1', []).append(status == "running")
-        logger.info("error_num: {0}, thread_num: {1}, status: {2}".format(error_num, thread_num, status))
+        results.setdefault("step1", []).append(error_num == 0)
+        results.setdefault("step1", []).append(thread_num == 1)
+        results.setdefault("step1", []).append(status == "running")
+        logger.info(
+            "error_num: {0}, thread_num: {1}, status: {2}".format(
+                error_num, thread_num, status
+            )
+        )
 
         logger.info(">>>step2: Run virt-who servie when virt-who host is un_registered")
-        ret, output = self.runcmd('subscription-manager unregister', self.ssh_host())
+        ret, output = self.runcmd("subscription-manager unregister", self.ssh_host())
         logger.info("Succeeded to unregister host")
         time.sleep(15)
         status = self.vw_service_status()
         thread_num = self.vw_callback_thread_num()
         error_num, error_list = self.vw_callback_error_num()
-        results.setdefault('step2', []).append(error_num != 0)
-        results.setdefault('step2', []).append(thread_num == 1)
-        results.setdefault('step2', []).append(status == "running")
-        logger.info("error_num: {0}, thread_num: {1}, status: {2}".format(error_num, thread_num, status))
-        ret, rhsm_output = self.runcmd('cat /var/log/rhsm/rhsm.log', self.ssh_host())
-        res = self.vw_msg_search(rhsm_output, 'system is not registered', exp_exist=True)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(error_num != 0)
+        results.setdefault("step2", []).append(thread_num == 1)
+        results.setdefault("step2", []).append(status == "running")
+        logger.info(
+            "error_num: {0}, thread_num: {1}, status: {2}".format(
+                error_num, thread_num, status
+            )
+        )
+        ret, rhsm_output = self.runcmd("cat /var/log/rhsm/rhsm.log", self.ssh_host())
+        res = self.vw_msg_search(
+            rhsm_output, "system is not registered", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: Run virt-who servie when virt-who host is re_registered")
-        if self.system_isregister(self.ssh_host(), register_type, register_config) is False:
+        if (
+            self.system_isregister(self.ssh_host(), register_type, register_config)
+            is False
+        ):
             self.system_register(self.ssh_host(), register_type, register_config)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py
would reformat /tmp/lint/tests/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py
--- /tmp/lint/tests/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py	2023-03-06 06:24:57.094476 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134063')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134063")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
@@ -25,19 +26,19 @@
 
         # case steps
         logger.info(">>>step1: run virt-who service")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: check host-to-guest association in webui")
         res = self.vw_web_associate(host_name, host_uuid, guest_name, guest_uuid)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         notes = list()
         notes.append("Bug(Step3):  Missing h/g association in satellite webUI")
         notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1644969")
would reformat /tmp/lint/tests/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py
--- /tmp/lint/tests/tier1/tc_1076_check_guest_facts_by_subscription_manager.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1076_check_guest_facts_by_subscription_manager.py	2023-03-06 06:24:57.100023 +0000
@@ -2,61 +2,65 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134061')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134061")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         virt_type = {
-                'libvirt-local'     :'kvm',
-                'libvirt-remote'    :'kvm',
-                'rhevm'             :'kvm',
-                'esx'               :'vmware',
-                'hyperv'            :'hyperv',
-                'xen'               :'xen',
-                'kubevirt'          :'kvm',
-                'ahv'               :'nutanix_ahv'
-                }
+            "libvirt-local": "kvm",
+            "libvirt-remote": "kvm",
+            "rhevm": "kvm",
+            "esx": "vmware",
+            "hyperv": "hyperv",
+            "xen": "xen",
+            "kubevirt": "kvm",
+            "ahv": "nutanix_ahv",
+        }
 
         # case steps
         logger.info(">>>step1: check virt.uuid fact by subscription-manager in guest")
         cmd = "subscription-manager facts --list | grep virt.uuid"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         logger.info(output)
-        virt_uuid = output.split(':')[1].strip()
-        results.setdefault('step1', []).append(virt_uuid.lower() == guest_uuid.lower())
+        virt_uuid = output.split(":")[1].strip()
+        results.setdefault("step1", []).append(virt_uuid.lower() == guest_uuid.lower())
 
-        logger.info(">>>step2: check virt.host_type fact by subscription-manager in guest")
-        hypervisor_type = self.get_config('hypervisor_type')
-        _, output1 = self.runcmd("virt-what",
-                                 self.ssh_guest())
-        _, output2 = self.runcmd("subscription-manager facts --list | grep virt.host_type",
-                                 self.ssh_guest())
+        logger.info(
+            ">>>step2: check virt.host_type fact by subscription-manager in guest"
+        )
+        hypervisor_type = self.get_config("hypervisor_type")
+        _, output1 = self.runcmd("virt-what", self.ssh_guest())
+        _, output2 = self.runcmd(
+            "subscription-manager facts --list | grep virt.host_type", self.ssh_guest()
+        )
         logger.info(output2)
-        results.setdefault('step2', []).append(
+        results.setdefault("step2", []).append(
             virt_type[hypervisor_type.lower()] in output1
-            and
-            virt_type[hypervisor_type.lower()] in output2
+            and virt_type[hypervisor_type.lower()] in output2
         )
 
-        logger.info(">>>step3: check virt.is_guest fact by subscription-manager in guest")
+        logger.info(
+            ">>>step3: check virt.is_guest fact by subscription-manager in guest"
+        )
         cmd = "subscription-manager facts --list | grep virt.is_guest"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         logger.info(output)
-        virt_is_guest = output.split(':')[1].strip()
-        results.setdefault('step3', []).append(virt_is_guest == "True")
+        virt_is_guest = output.split(":")[1].strip()
+        results.setdefault("step3", []).append(virt_is_guest == "True")
 
         # case result
         self.vw_case_result(results)
--- /tmp/lint/tests/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py	2023-03-06 06:24:57.099464 +0000
@@ -2,30 +2,31 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134059')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134059")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: Run virt-who to check 'rhsm.connection' info")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(rhsm_output, '[rhsm.connection INFO]', exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        res2 = self.vw_msg_search(rhsm_output, "[rhsm.connection INFO]", exp_exist=True)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1076_check_guest_facts_by_subscription_manager.py
would reformat /tmp/lint/tests/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py
--- /tmp/lint/tests/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tests/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py	2023-03-06 06:24:57.111826 +0000
@@ -2,55 +2,60 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134083')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134083")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
 
         # case steps
-        logger.info(">>>step1: stop virt-who, re-register guest again to create temporary bonus")
+        logger.info(
+            ">>>step1: stop virt-who, re-register guest again to create temporary bonus"
+        )
         self.vw_thread_clean()
         self.vw_web_host_delete(host_name, host_uuid)
         self.system_unregister(self.ssh_guest())
         self.system_register(self.ssh_guest(), register_type, register_config)
 
         logger.info(">>>step2: check temporary bonus pool exist in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        sub_type = sku_attrs['sub_type']
+        sub_type = sku_attrs["sub_type"]
         if "Temporary" in sub_type:
             logger.info("{0}, Temporary pool is exist in guest".format(sub_type))
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.error("{0}, Temporary pool is not exist in guest".format(sub_type))
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         logger.info(">>>step3: attach temporary bonus pool in guest")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, "using a temporary unmapped guest subscription", exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(
+            output, "using a temporary unmapped guest subscription", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py
--- /tmp/lint/tests/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 06:24:57.172436 +0000
@@ -2,51 +2,52 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134069')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134069")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        unlimited_sku = register_config['unlimit']
+        register_type = register_config["type"]
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         try:
             logger.info(">>>step3: attach virtual sku by auto in guest")
             sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-            results.setdefault('step3', []).append(sku_attrs['sku_id'] == unlimited_sku)
+            results.setdefault("step3", []).append(sku_attrs["sku_id"] == unlimited_sku)
             self.system_sku_attach(self.ssh_guest())
             ins_attrs = self.system_sku_installed(self.ssh_guest())
-            results.setdefault('step3', []).append(ins_attrs['status'] == 'Subscribed')
+            results.setdefault("step3", []).append(ins_attrs["status"] == "Subscribed")
         except:
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
             pass
 
         # case result
         notes = list()
         if "satellite" in register_type:
would reformat /tmp/lint/tests/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py
--- /tmp/lint/tests/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py	2023-03-06 06:24:57.190297 +0000
@@ -2,42 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134065')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134065")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        unlimited_sku = register_config['unlimit']
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku is created or not in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        results.setdefault('step3', []).append(sku_attrs['sku_id'] == unlimited_sku)
+        results.setdefault("step3", []).append(sku_attrs["sku_id"] == unlimited_sku)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py
--- /tmp/lint/tests/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 06:24:57.221334 +0000
@@ -2,68 +2,75 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134067')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134067")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        unlimited_sku = register_config['unlimit']
+        register_type = register_config["type"]
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: check repo status in guest")
         cmd = "subscription-manager repos --list"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if "stage" in register_type:
-            res = self.vw_msg_search(output, "Available Repositories" , exp_exist=True)
+            res = self.vw_msg_search(output, "Available Repositories", exp_exist=True)
         else:
-            res = self.vw_msg_search(output, "no repositories available" , exp_exist=True)
-        results.setdefault('step4', []).append(res)
+            res = self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+        results.setdefault("step4", []).append(res)
 
         logger.info(">>>step5: check subscription status in guest")
         cmd = "subscription-manager status"
         ret, output = self.runcmd(cmd, self.ssh_guest())
-        res1 = self.vw_msg_search(output, "Invalid" , exp_exist=True)
-        logger.warning("{0} is not available for: Red Hat Enterprise Linux Server".format(unlimited_sku))
-        results.setdefault('step5', []).append(res1)
+        res1 = self.vw_msg_search(output, "Invalid", exp_exist=True)
+        logger.warning(
+            "{0} is not available for: Red Hat Enterprise Linux Server".format(
+                unlimited_sku
+            )
+        )
+        results.setdefault("step5", []).append(res1)
 
         logger.info(">>>step6: available virtual unlimit sku can be listed in guest ")
         output = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
         res = self.vw_msg_search(str(output), unlimited_sku, exp_exist=True)
-        results.setdefault('step6', []).append(res)
+        results.setdefault("step6", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py
--- /tmp/lint/tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 06:24:57.260822 +0000
@@ -2,52 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134072')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134072")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        unlimited_sku = register_config['unlimit']
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: unregister host/hypervisor and check virtual pool revoked or not")
+        logger.info(
+            ">>>step4: unregister host/hypervisor and check virtual pool revoked or not"
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py
--- /tmp/lint/tests/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py	2023-03-06 06:24:57.272282 +0000
@@ -2,42 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134062')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134062")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus'] 
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku is created or not in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        results.setdefault('step3', []).append(sku_attrs['sku_id'] == vdc_virtual_sku)
+        results.setdefault("step3", []).append(sku_attrs["sku_id"] == vdc_virtual_sku)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py
--- /tmp/lint/tests/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 06:24:57.296222 +0000
@@ -2,52 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134071')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134071")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        unlimited_sku = register_config['unlimit']
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: unattach physical sku from host/hypervisor and check virtual pool")
+        logger.info(
+            ">>>step4: unattach physical sku from host/hypervisor and check virtual pool"
+        )
         self.vw_web_unattach(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py
--- /tmp/lint/tests/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 06:24:57.339960 +0000
@@ -2,52 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134064')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134064")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: unattach physical sku from host/hypervisor and check virtual pool")
+        logger.info(
+            ">>>step4: unattach physical sku from host/hypervisor and check virtual pool"
+        )
         self.vw_web_unattach(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
--- /tmp/lint/tests/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 06:24:57.342671 +0000
@@ -2,51 +2,56 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134066')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134066")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        register_type = register_config["type"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         try:
             logger.info(">>>step3: attach virtual sku by auto in guest")
-            sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-            results.setdefault('step3', []).append(sku_attrs['sku_id'] == vdc_virtual_sku)
+            sku_attrs = self.system_sku_attr(
+                self.ssh_guest(), vdc_virtual_sku, "virtual"
+            )
+            results.setdefault("step3", []).append(
+                sku_attrs["sku_id"] == vdc_virtual_sku
+            )
             self.system_sku_attach(self.ssh_guest())
             ins_attrs = self.system_sku_installed(self.ssh_guest())
-            results.setdefault('step3', []).append(ins_attrs['status'] == 'Subscribed')
+            results.setdefault("step3", []).append(ins_attrs["status"] == "Subscribed")
         except:
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
             pass
 
         # case result
         notes = list()
         if "satellite" in register_type:
would reformat /tmp/lint/tests/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py
would reformat /tmp/lint/tests/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py
--- /tmp/lint/tests/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tests/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 06:24:57.335646 +0000
@@ -2,56 +2,61 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134060')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134060")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        pool_id = sku_attrs['pool_id'] 
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: no available virtual vdc sku listed in guest ")
-        output = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual", exp_exist=False)
+        output = self.system_sku_attr(
+            self.ssh_guest(), vdc_virtual_sku, "virtual", exp_exist=False
+        )
         res = self.vw_msg_search(str(output), vdc_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         notes = list()
-        server_type = self.get_config('register_type')
-        if 'stage' in server_type:
-            notes.append("Bug(Step*): Failed to synchronize cache for repo 'rhel-8-for-x86_64-baseos-rpms'")
+        server_type = self.get_config("register_type")
+        if "stage" in server_type:
+            notes.append(
+                "Bug(Step*): Failed to synchronize cache for repo 'rhel-8-for-x86_64-baseos-rpms'"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1719177")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py
--- /tmp/lint/tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 06:24:57.400278 +0000
@@ -2,52 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134070')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134070")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: unregister host/hypervisor and check virtual pool revoked or not")
+        logger.info(
+            ">>>step4: unregister host/hypervisor and check virtual pool revoked or not"
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py
--- /tmp/lint/tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py	2023-03-06 06:24:57.469765 +0000
@@ -2,74 +2,83 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134055')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134055")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        register_type = register_config["type"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: check repo status in host")
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         if "libvirt-local" in hypervisor_type or "vdsm" in hypervisor_type:
             cmd = "subscription-manager repos --list"
             ret, output = self.runcmd(cmd, self.ssh_host())
-            res = self.vw_msg_search(output, "no repositories available" , exp_exist=True)
-            results.setdefault('step4', []).append(res)
+            res = self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+            results.setdefault("step4", []).append(res)
         else:
-            logger.warning("skip this step, it's not available for mode {0}".format(hypervisor_type))
+            logger.warning(
+                "skip this step, it's not available for mode {0}".format(
+                    hypervisor_type
+                )
+            )
 
         logger.info(">>>step5: check repo status in guest")
         cmd = "subscription-manager repos --list"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if "stage" in register_type:
-            res = self.vw_msg_search(output, "Available Repositories" , exp_exist=True)
+            res = self.vw_msg_search(output, "Available Repositories", exp_exist=True)
         else:
-            res = self.vw_msg_search(output, "no repositories available" , exp_exist=True)
-        results.setdefault('step5', []).append(res)
+            res = self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+        results.setdefault("step5", []).append(res)
 
         logger.info(">>>step6: check subscription status in guest")
         cmd = "subscription-manager status"
         ret, output = self.runcmd(cmd, self.ssh_guest())
-        res1 = self.vw_msg_search(output, "Overall Status: Current" , exp_exist=True)
-        res2 = self.vw_msg_search(output, "Invalid" , exp_exist=False)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        res1 = self.vw_msg_search(output, "Overall Status: Current", exp_exist=True)
+        res2 = self.vw_msg_search(output, "Invalid", exp_exist=False)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py
--- /tmp/lint/tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py	2023-03-06 06:24:57.521528 +0000
@@ -2,64 +2,73 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134057')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134057")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 4 in guest")
-        res = self.system_custom_facts_create(self.ssh_guest(), 'cpu.cpu_socket(s)', '4')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(
+            self.ssh_guest(), "cpu.cpu_socket(s)", "4"
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step4: attach virtual sku for guest without quantity")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
-        results.setdefault('step4', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
+        results.setdefault("step4", []).append(res3)
 
         logger.info(">>>step5: attach virtual sku for guest with quantity=2")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
-        output = self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id, quantity=2)
-        res1 = self.vw_msg_search(output, 'Multi-entitlement not supported for pool', exp_exist=True)
-        results.setdefault('step5', []).append(res1)
+        virtual_pool_id = sku_attrs["pool_id"]
+        output = self.system_sku_attach(
+            self.ssh_guest(), pool_id=virtual_pool_id, quantity=2
+        )
+        res1 = self.vw_msg_search(
+            output, "Multi-entitlement not supported for pool", exp_exist=True
+        )
+        results.setdefault("step5", []).append(res1)
         self.system_custom_facts_remove(self.ssh_guest())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py
--- /tmp/lint/tests/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py	2023-03-06 06:24:57.526929 +0000
@@ -2,44 +2,47 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134068')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134068")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku is created or not in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        results.setdefault('step3', []).append(sku_attrs['sku_id'] == limit_virtual_sku)
+        results.setdefault("step3", []).append(sku_attrs["sku_id"] == limit_virtual_sku)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py
--- /tmp/lint/tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py	2023-03-06 06:24:57.563481 +0000
@@ -2,65 +2,72 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134052')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134052")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 4 in host")
-        res = self.system_custom_facts_create(self.ssh_host(), 'cpu.cpu_socket(s)', '4')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(self.ssh_host(), "cpu.cpu_socket(s)", "4")
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
-        logger.info(">>>step3: attach physical sku for host/hypervisor without quantity")
+        logger.info(
+            ">>>step3: attach physical sku for host/hypervisor without quantity"
+        )
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, vdc_physical_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for host/hypervisor with quantity=1")
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=1)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, vdc_physical_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Only supports 2 of 4 sockets', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
-        results.setdefault('step4', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Only supports 2 of 4 sockets", exp_exist=True
+        )
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
+        results.setdefault("step4", []).append(res3)
         self.system_custom_facts_remove(self.ssh_host())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py
--- /tmp/lint/tests/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 06:24:57.614344 +0000
@@ -2,65 +2,76 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134054')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134054")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        register_type = register_config["type"]
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku attrs in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        available = sku_attrs['available']
+        available = sku_attrs["available"]
         if available == "1":
-            logger.info("Succeeded to check, vitual sku({0}) Available({1})".format(limit_virtual_sku, available))
-            results.setdefault('step3', []).append(True)
+            logger.info(
+                "Succeeded to check, vitual sku({0}) Available({1})".format(
+                    limit_virtual_sku, available
+                )
+            )
+            results.setdefault("step3", []).append(True)
         else:
-            logger.error("Failed to check, vitual sku({0}) Available({1})".format(limit_virtual_sku, available))
-            results.setdefault('step3', []).append(False)
+            logger.error(
+                "Failed to check, vitual sku({0}) Available({1})".format(
+                    limit_virtual_sku, available
+                )
+            )
+            results.setdefault("step3", []).append(False)
 
         try:
             logger.info(">>>step4: attach virtual sku by auto in guest")
-            pool_id = sku_attrs['pool_id']
+            pool_id = sku_attrs["pool_id"]
             self.system_sku_attach(self.ssh_guest())
             output = self.system_sku_consumed(self.ssh_guest())
             res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
         except:
-            results.setdefault('step4', []).append(False)
+            results.setdefault("step4", []).append(False)
             pass
 
         # case result
         notes = list()
         if "satellite" in register_type:
would reformat /tmp/lint/tests/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py
--- /tmp/lint/tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 06:24:57.626241 +0000
@@ -2,82 +2,97 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134073')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134073")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        register_type = register_config["type"]
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku attrs in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        available = sku_attrs['available']
+        available = sku_attrs["available"]
         if available == "1":
-            logger.info("Succeeded to check, vitual sku({0}) Available({1})".format(limit_virtual_sku, available))
-            results.setdefault('step3', []).append(True)
+            logger.info(
+                "Succeeded to check, vitual sku({0}) Available({1})".format(
+                    limit_virtual_sku, available
+                )
+            )
+            results.setdefault("step3", []).append(True)
         else:
-            logger.error("Failed to check, vitual sku({0}) Available({1})".format(limit_virtual_sku, available))
-            results.setdefault('step3', []).append(False)
+            logger.error(
+                "Failed to check, vitual sku({0}) Available({1})".format(
+                    limit_virtual_sku, available
+                )
+            )
+            results.setdefault("step3", []).append(False)
 
         logger.info(">>>step4: attach virtual sku by pool_id in guest")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: check repo status in guest")
         cmd = "subscription-manager repos --list"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if "stage" in register_type:
-            res = self.vw_msg_search(output, "Available Repositories" , exp_exist=True)
+            res = self.vw_msg_search(output, "Available Repositories", exp_exist=True)
         else:
-            res = self.vw_msg_search(output, "no repositories available" , exp_exist=True)
-        results.setdefault('step5', []).append(res)
+            res = self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+        results.setdefault("step5", []).append(res)
 
         logger.info(">>>step6: check subscription status in guest")
         cmd = "subscription-manager status"
         ret, output = self.runcmd(cmd, self.ssh_guest())
-        res1 = self.vw_msg_search(output, "Overall Status: Current" , exp_exist=True)
-        res2 = self.vw_msg_search(output, "Invalid" , exp_exist=False)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        res1 = self.vw_msg_search(output, "Overall Status: Current", exp_exist=True)
+        res2 = self.vw_msg_search(output, "Invalid", exp_exist=False)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: no available virtual limit sku listed in guest ")
-        output = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual", exp_exist=False)
+        output = self.system_sku_attr(
+            self.ssh_guest(), limit_virtual_sku, "virtual", exp_exist=False
+        )
         res = self.vw_msg_search(str(output), limit_virtual_sku, exp_exist=False)
-        results.setdefault('step7', []).append(res)
+        results.setdefault("step7", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py
--- /tmp/lint/tests/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 06:24:57.657043 +0000
@@ -2,56 +2,61 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134053')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134053")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # Case Steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
-        logger.info(">>>step4: unattach physical sku from host/hypervisor and check virtual pool")
+        logger.info(
+            ">>>step4: unattach physical sku from host/hypervisor and check virtual pool"
+        )
         self.vw_web_unattach(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, limit_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py
--- /tmp/lint/tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 06:24:57.693563 +0000
@@ -2,56 +2,61 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134058')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134058")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
-        logger.info(">>>step4: unregister host/hypervisor and check virtual pool revoked or not")
+        logger.info(
+            ">>>step4: unregister host/hypervisor and check virtual pool revoked or not"
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, limit_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py
--- /tmp/lint/tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py	2023-03-06 06:24:57.702888 +0000
@@ -2,47 +2,50 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134075')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134075")
         self.vw_case_skip("instance sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id, quantity=2)
 
         logger.info(">>>step3: check no virtual sku is created or not in guest")
-        sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "virtual", exp_exist=False)
+        sku_attrs = self.system_sku_attr(
+            self.ssh_guest(), instance_sku, "virtual", exp_exist=False
+        )
         if sku_attrs:
             logger.error("failed to check, virtual instance sku is exist")
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
         else:
             logger.info("succeeded to check, virtual instance sku is not exist")
-            results.setdefault('step3', []).append(True)
+            results.setdefault("step3", []).append(True)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py
--- /tmp/lint/tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py	2023-03-06 06:24:57.763738 +0000
@@ -2,76 +2,81 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134076')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134076")
         self.vw_case_skip("instance sku")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 1 in host")
-        res = self.system_custom_facts_create(self.ssh_host(), 'cpu.cpu_socket(s)', '1')
-        results.setdefault('step1', []).append(res)
- 
+        res = self.system_custom_facts_create(self.ssh_host(), "cpu.cpu_socket(s)", "1")
+        results.setdefault("step1", []).append(res)
+
         logger.info(">>>step2: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
- 
+        results.setdefault("step2", []).append(res)
+
         logger.info(">>>step3: attach physical sku for host without quantity")
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for host with quantity=1")
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         cmd = "subscription-manager attach --pool=%s --quantity=1" % (physical_pool_id)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="subscription attach")
-        error_msg = 'must be attached using a quantity evenly divisible by 2'
+        error_msg = "must be attached using a quantity evenly divisible by 2"
         res = self.vw_msg_search(output, error_msg, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
         self.system_custom_facts_remove(self.ssh_host())
 
         logger.info(">>>step5: attach physical sku for host/hypervisor with quantity=2")
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
-        results.setdefault('step5', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
+        results.setdefault("step5", []).append(res3)
         self.system_custom_facts_remove(self.ssh_host())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py
--- /tmp/lint/tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py	2023-03-06 06:24:57.826810 +0000
@@ -5,87 +5,94 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134077')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134077")
         self.vw_case_skip("instance sku")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
 
         # case steps
         try:
             logger.info(">>>step1: set cpu.cpu_socket(s) to 8 in host")
-            cpu_socket = 'cpu.cpu_socket(s)'
-            res = self.system_custom_facts_create(self.ssh_host(), cpu_socket, '8')
-            results.setdefault('step1', []).append(res)
+            cpu_socket = "cpu.cpu_socket(s)"
+            res = self.system_custom_facts_create(self.ssh_host(), cpu_socket, "8")
+            results.setdefault("step1", []).append(res)
 
             logger.info(">>>step2: run virt-who to report mapping")
             data, tty_output, rhsm_output = self.vw_start()
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res)
+            results.setdefault("step2", []).append(res)
 
             logger.info(">>>step3: attach physical sku for host without quantity")
             self.system_sku_unattach(self.ssh_host())
             self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)
             output = self.system_sku_consumed(self.ssh_host())
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*8', exp_exist=True)
-            res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current')
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
-            results.setdefault('step3', []).append(res3)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*8", exp_exist=True)
+            res3 = self.vw_msg_search(
+                output, "Status Details:.*Subscription is current"
+            )
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
+            results.setdefault("step3", []).append(res3)
 
             logger.info(">>>step4: attach physical sku for host with quantity=1")
             self.system_sku_unattach(self.ssh_host())
-            cmd = ("subscription-manager attach --pool={0} --quantity=1"
-                   .format(physical_pool_id))
+            cmd = "subscription-manager attach --pool={0} --quantity=1".format(
+                physical_pool_id
+            )
             ret, output = self.runcmd(cmd, self.ssh_host(), desc="subscription attach")
-            error_msg = 'must be attached using a quantity evenly divisible by 2'
+            error_msg = "must be attached using a quantity evenly divisible by 2"
             res = self.vw_msg_search(output, error_msg, exp_exist=True)
-            results.setdefault('step4', []).append(res)
+            results.setdefault("step4", []).append(res)
 
             logger.info(">>>step5: attach physical sku for host with quantity=2")
             self.system_sku_unattach(self.ssh_host())
-            self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)
+            self.system_sku_attach(
+                self.ssh_host(), pool_id=physical_pool_id, quantity=2
+            )
             output = self.system_sku_consumed(self.ssh_host())
-            msg = 'Status Details:.*Only supports 2 of 8 sockets'
+            msg = "Status Details:.*Only supports 2 of 8 sockets"
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
             res3 = self.vw_msg_search(output, msg, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
-            results.setdefault('step5', []).append(res3)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
+            results.setdefault("step5", []).append(res3)
 
             logger.info(">>>step6: attach physical sku for host with quantity=6")
-            self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=6)
+            self.system_sku_attach(
+                self.ssh_host(), pool_id=physical_pool_id, quantity=6
+            )
             output = self.system_sku_consumed(self.ssh_host())
-            msg = 'Status Details:.*Subscription is current'
+            msg = "Status Details:.*Subscription is current"
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-            res3 = self.vw_msg_search(output, 'Quantity Used:.*6', exp_exist=True)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+            res3 = self.vw_msg_search(output, "Quantity Used:.*6", exp_exist=True)
             res4 = self.vw_msg_search(output, msg, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
-            results.setdefault('step6', []).append(res3)
-            results.setdefault('step6', []).append(res4)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
+            results.setdefault("step6", []).append(res3)
+            results.setdefault("step6", []).append(res4)
 
         finally:
             self.system_custom_facts_remove(self.ssh_host())
 
         # case result
would reformat /tmp/lint/tests/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py
--- /tmp/lint/tests/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py	2023-03-06 06:24:57.837854 +0000
@@ -2,70 +2,79 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134079')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134079")
         self.vw_case_skip("instance sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 1 in guest")
-        res = self.system_custom_facts_create(self.ssh_guest(), 'cpu.cpu_socket(s)', '1')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(
+            self.ssh_guest(), "cpu.cpu_socket(s)", "1"
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for guest without quantity")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
-        results.setdefault('step2', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
+        results.setdefault("step2", []).append(res3)
 
         logger.info(">>>step3: attach physical sku for guest with quantity=1")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=1)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for guest with quantity=2")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=2)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
-        results.setdefault('step4', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
+        results.setdefault("step4", []).append(res3)
         self.system_custom_facts_remove(self.ssh_guest())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py
--- /tmp/lint/tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py	2023-03-06 06:24:57.873177 +0000
@@ -5,102 +5,108 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134078')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134078")
         self.vw_case_skip("instance sku")
-        hypervisor_type = self.get_config('hypervisor_type')
-        trigger_type = self.get_config('trigger_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        trigger_type = self.get_config("trigger_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "trigger-rhev" in trigger_type:
             self.vw_case_skip(trigger_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        instance_sku = register_config['instance']
+        register_type = register_config["type"]
+        instance_sku = register_config["instance"]
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 8 in host")
-        res = self.system_custom_facts_create(self.ssh_host(), 'cpu.cpu_socket(s)', '8')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(self.ssh_host(), "cpu.cpu_socket(s)", "8")
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: attach physical sku for host without quantity")
         self.system_sku_unattach(self.ssh_host())
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*8', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current')
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*8", exp_exist=True)
+        res3 = self.vw_msg_search(output, "Status Details:.*Subscription is current")
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for host with quantity=1")
         self.system_sku_unattach(self.ssh_host())
-        cmd = ("subscription-manager attach --pool={0} --quantity=1"
-               .format(physical_pool_id))
+        cmd = "subscription-manager attach --pool={0} --quantity=1".format(
+            physical_pool_id
+        )
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="subscription attach")
-        error_msg = 'must be attached using a quantity evenly divisible by 2'
+        error_msg = "must be attached using a quantity evenly divisible by 2"
         res = self.vw_msg_search(output, error_msg, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step5: attach physical sku for host with quantity=2")
         # Sometimes, Status Details is not Only supports 2 of 8 sockets, try it 5 loops
         res1 = res2 = res3 = False
         for i in range(5):
             self.system_sku_unattach(self.ssh_host())
             sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-            physical_pool_id = sku_attrs['pool_id']
-            self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)
+            physical_pool_id = sku_attrs["pool_id"]
+            self.system_sku_attach(
+                self.ssh_host(), pool_id=physical_pool_id, quantity=2
+            )
             output = self.system_sku_consumed(self.ssh_host())
-            msg = 'Status Details:.*Only supports 2 of 8 sockets'
+            msg = "Status Details:.*Only supports 2 of 8 sockets"
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
             res3 = self.vw_msg_search(output, msg, exp_exist=True)
             if res1 and res2 and res3:
                 break
-            wait_time = 60*(i+3)
-            logger.warning("attach result is not expected, try again after {0}"
-                           .format(wait_time))
+            wait_time = 60 * (i + 3)
+            logger.warning(
+                "attach result is not expected, try again after {0}".format(wait_time)
+            )
             time.sleep(wait_time)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
-        results.setdefault('step5', []).append(res3)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
+        results.setdefault("step5", []).append(res3)
 
         try:
             logger.info(">>>step6: attach sku for host by auto")
             self.system_sku_attach(self.ssh_host())
             output = self.system_sku_consumed(self.ssh_host())
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*6', exp_exist=True)
-            res4 = self.vw_msg_search(output, 'Status Details:.*Subscription is current')
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
-            results.setdefault('step6', []).append(res3)
-            results.setdefault('step6', []).append(res4)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*6", exp_exist=True)
+            res4 = self.vw_msg_search(
+                output, "Status Details:.*Subscription is current"
+            )
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
+            results.setdefault("step6", []).append(res3)
+            results.setdefault("step6", []).append(res4)
         except:
-            results.setdefault('step6', []).append(False)
+            results.setdefault("step6", []).append(False)
             pass
         finally:
             self.system_custom_facts_remove(self.ssh_host())
 
         # case result
would reformat /tmp/lint/tests/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py
--- /tmp/lint/tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py	2023-03-06 06:24:57.927684 +0000
@@ -2,84 +2,95 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134080')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134080")
         self.vw_case_skip("instance sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 8 in guest")
-        res = self.system_custom_facts_create(self.ssh_guest(), 'cpu.cpu_socket(s)', '8')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(
+            self.ssh_guest(), "cpu.cpu_socket(s)", "8"
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for guest without quantity")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
-        results.setdefault('step2', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
+        results.setdefault("step2", []).append(res3)
 
         logger.info(">>>step3: attach physical sku for guest with quantity=1")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=1)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for guest with quantity=2")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=2)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
-        results.setdefault('step4', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
+        results.setdefault("step4", []).append(res3)
 
         logger.info(">>>step5: attach physical sku for guest with quantity=6")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=6)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Quantity Used:.*6', exp_exist=True)
-        res4 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
-        results.setdefault('step5', []).append(res3)
-        results.setdefault('step5', []).append(res4)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(output, "Quantity Used:.*6", exp_exist=True)
+        res4 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
+        results.setdefault("step5", []).append(res3)
+        results.setdefault("step5", []).append(res4)
         self.system_custom_facts_remove(self.ssh_guest())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py
--- /tmp/lint/tests/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py	2023-03-06 06:24:57.932744 +0000
@@ -2,66 +2,79 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134081')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134081")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "libvirt-local" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         libvirt_conf = "/etc/libvirt/libvirtd.conf"
 
         # case steps
         logger.info(">>>step1: run virt-who service to check the thread number")
         ret, output = self.run_service(self.ssh_host(), "virt-who", "restart")
         thread_before = self.vw_callback_thread_num()
-        logger.info("Succeeded to start virt-who service and the thread_num is {0}".format(thread_before))
+        logger.info(
+            "Succeeded to start virt-who service and the thread_num is {0}".format(
+                thread_before
+            )
+        )
 
         logger.info(">>>step2: update libvirt config, and restart libvirtd service")
         self.vw_option_enable("listen_tls", filename=libvirt_conf)
         self.vw_option_enable("listen_tcp", filename=libvirt_conf)
         self.vw_option_enable("auth_tcp", filename=libvirt_conf)
         self.vw_option_enable("tcp_port", filename=libvirt_conf)
         ret, output = self.run_service(self.ssh_host(), "libvirtd", "restart")
         ret, output = self.run_service(self.ssh_host(), "libvirtd", "status")
         if "is running" in output or "Active: active (running)" in output:
             logger.info("Succeeded to restart libvirt service")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.error("Failed to restart libvirt service")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         logger.info(">>>step3: check virt-who thread_num is changed or not")
         thread_after = self.vw_callback_thread_num()
         if thread_before == thread_after:
-            logger.info("Succeeded to check, thread_num({0}) is not changed".format(thread_after))
-            results.setdefault('step3', []).append(True)
+            logger.info(
+                "Succeeded to check, thread_num({0}) is not changed".format(
+                    thread_after
+                )
+            )
+            results.setdefault("step3", []).append(True)
         else:
-            logger.error("Failed to check, thread_num({0}) is changed to {1}".format(thread_before, thread_after))
-            results.setdefault('step3', []).append(False)
+            logger.error(
+                "Failed to check, thread_num({0}) is changed to {1}".format(
+                    thread_before, thread_after
+                )
+            )
+            results.setdefault("step3", []).append(False)
 
         logger.info(">>>step4: recovery libvirt config")
         self.vw_option_disable("listen_tls", filename=libvirt_conf)
         self.vw_option_disable("listen_tcp", filename=libvirt_conf)
         self.vw_option_disable("auth_tcp", filename=libvirt_conf)
         self.vw_option_disable("tcp_port", filename=libvirt_conf)
         ret, output = self.run_service(self.ssh_host(), "libvirtd", "restart")
         ret, output = self.run_service(self.ssh_host(), "libvirtd", "status")
         if "is running" in output or "Active: active (running)" in output:
             logger.info("Succeeded to restart libvirt service")
-            results.setdefault('step4', []).append(True)
+            results.setdefault("step4", []).append(True)
         else:
             logger.error("Failed to restart libvirt service")
-            results.setdefault('step4', []).append(False)
+            results.setdefault("step4", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py
--- /tmp/lint/tests/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py	2023-03-06 06:24:57.984742 +0000
@@ -2,16 +2,17 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134082')
-        hypervisor_type = self.get_config('hypervisor_type')
-        trigger_type = self.get_config('trigger_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134082")
+        hypervisor_type = self.get_config("hypervisor_type")
+        trigger_type = self.get_config("trigger_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "trigger-rhel" not in trigger_type:
             self.vw_case_skip(trigger_type)
         self.vw_case_init()
 
@@ -21,34 +22,47 @@
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
 
         # case steps
         logger.info(">>>step1: create virt-who config")
-        self.vw_option_enable('[global]', conf_etc)
-        self.vw_option_enable('debug', conf_etc)
-        self.vw_option_update_value('debug', 'True', conf_etc)
+        self.vw_option_enable("[global]", conf_etc)
+        self.vw_option_enable("debug", conf_etc)
+        self.vw_option_update_value("debug", "True", conf_etc)
         self.vw_option_enable("interval", filename=conf_etc)
-        self.vw_option_update_value("interval", '60', filename=conf_etc)
+        self.vw_option_update_value("interval", "60", filename=conf_etc)
 
         logger.info("setting options in /etc/virt-who.d/")
         self.vw_etc_d_mode_create(config_name, config_file)
-        
+
         logger.info(">>>step2: start virt-who service to check")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_looptime=60)
+        res1 = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_looptime=60,
+        )
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: start to reboot virt-who host")
         self.system_reboot(self.ssh_host())
 
         logger.info(">>>step4: start virt-who service to check again")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_looptime=60)
+        res1 = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_looptime=60,
+        )
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         # case result
         self.vw_case_result(results)
-
would reformat /tmp/lint/tests/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py
--- /tmp/lint/tests/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py	2023-03-06 06:24:58.030317 +0000
@@ -2,52 +2,73 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-171210')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-171210")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: check virtual temporary sku exist in guest")
         self.vw_thread_clean()
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        sku_type = sku_attrs['sub_type']
-        sku_id = sku_attrs['sku_id']
-        pool_id = sku_attrs['pool_id']
-        results.setdefault('step1', []).append('Temporary' in sku_type)
-        results.setdefault('step1', []).append(vdc_virtual_sku in sku_id)
+        sku_type = sku_attrs["sub_type"]
+        sku_id = sku_attrs["sku_id"]
+        pool_id = sku_attrs["pool_id"]
+        results.setdefault("step1", []).append("Temporary" in sku_type)
+        results.setdefault("step1", []).append(vdc_virtual_sku in sku_id)
 
         logger.info(">>>step2: attach virtual temporary sku in guest")
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
-        results.setdefault('step2', []).append(self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True))
-        results.setdefault('step2', []).append(self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=True))
-        results.setdefault('step2', []).append(self.vw_msg_search(output, "Status Details: .*temporary unmapped guest subscription", exp_exist=True))
+        results.setdefault("step2", []).append(
+            self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
+        )
+        results.setdefault("step2", []).append(
+            self.vw_msg_search(output, "Subscription Type: .*Temporary", exp_exist=True)
+        )
+        results.setdefault("step2", []).append(
+            self.vw_msg_search(
+                output,
+                "Status Details: .*temporary unmapped guest subscription",
+                exp_exist=True,
+            )
+        )
 
         logger.info(">>>step3: start virt-who service")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: check temporary sku is changed to stable in guest")
         output = self.system_sku_consumed(self.ssh_guest())
         virtual_sku = ["RH00049|RH00050"]
-        results.setdefault('step4', []).append(self.msg_validation(output, virtual_sku, exp_exist=True))
-        results.setdefault('step4', []).append(self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=False))
-        results.setdefault('step4', []).append(self.vw_msg_search(output, "Status Details: .*Subscription is current", exp_exist=True))
+        results.setdefault("step4", []).append(
+            self.msg_validation(output, virtual_sku, exp_exist=True)
+        )
+        results.setdefault("step4", []).append(
+            self.vw_msg_search(
+                output, "Subscription Type: .*Temporary", exp_exist=False
+            )
+        )
+        results.setdefault("step4", []).append(
+            self.vw_msg_search(
+                output, "Status Details: .*Subscription is current", exp_exist=True
+            )
+        )
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py
--- /tmp/lint/tests/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py	2023-03-06 06:24:58.061139 +0000
@@ -2,14 +2,15 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-171135')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.24.6':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-171135")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.24.6":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
@@ -21,58 +22,58 @@
 
         # case steps
         logger.info('>>>step1: Run virt-who without debug"')
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
         logger.info('>>>step2: Configure "print_=false" then run virt-who by cli')
         self.vw_option_enable("[global]", virtwho_conf)
         self.vw_option_enable("print_", virtwho_conf)
-        self.vw_option_update_value("print_", 'false', virtwho_conf)
+        self.vw_option_update_value("print_", "false", virtwho_conf)
         self.vw_stop()
         cmd = "virt-who"
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=False)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info('>>>step3: Configure "print_=false" then start virt-who service')
         self.vw_stop()
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=False)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info('>>>step4: Configure "print_=true" then run virt-who by cli')
-        self.vw_option_update_value("print_", 'true', virtwho_conf)
+        self.vw_option_update_value("print_", "true", virtwho_conf)
         self.vw_stop()
         cmd = "virt-who"
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=0)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(tty_output, guest_uuid, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info('>>>step5: Configure "print_=true" then start virt-who service')
         self.vw_stop()
         data, tty_output, rhsm_output = self.vw_start("virt-who")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=False)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info('>>>step6: Configure "print_=xxx" then start virt-who service')
         msg = "print_ must be a valid boolean"
-        self.vw_option_update_value("print_", 'xxx', virtwho_conf)
+        self.vw_option_update_value("print_", "xxx", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=False)
         res3 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
-        results.setdefault('step6', []).append(res3)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
+        results.setdefault("step6", []).append(res3)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py
--- /tmp/lint/tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py	2023-03-06 06:24:58.092881 +0000
@@ -2,108 +2,129 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-170860')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-170860")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.24.5':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.24.5":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_type = register_config['type']
+        register_server = register_config["server"]
+        register_type = register_config["type"]
         if "satellite" in register_type:
-            ssh_sat = register_config['ssh_sat']
+            ssh_sat = register_config["ssh_sat"]
             register_server = self.get_hostname(ssh_sat)
         proxy_server = deploy.proxy.server
         proxy_port = deploy.proxy.port
         bad_proxy_server = "xxx.eng.pek2.redhat.com"
         bad_proxy_port = "0000"
-        error_msg = "Connection refused|Unable to connect to: .*{0}|Proxy error at .*{0}".format(bad_proxy_server)
+        error_msg = "Connection refused|Unable to connect to: .*{0}|Proxy error at .*{0}".format(
+            bad_proxy_server
+        )
 
         # Case Steps
         try:
             logger.info(">>>step1: set /etc/virt-who.d/x.conf with good proxy")
             self.vw_option_add("rhsm_proxy_hostname", proxy_server, config_file)
             self.vw_option_add("rhsm_proxy_port", proxy_port, config_file)
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(s1)
-            s2 = self.vw_msg_search(rhsm_output, "Connection built.*{0}".format(proxy_server), exp_exist=True)
-            results.setdefault('step1', []).append(s2)
-            s3 = self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True)
-            results.setdefault('step1', []).append(s3)
+            results.setdefault("step1", []).append(s1)
+            s2 = self.vw_msg_search(
+                rhsm_output,
+                "Connection built.*{0}".format(proxy_server),
+                exp_exist=True,
+            )
+            results.setdefault("step1", []).append(s2)
+            s3 = self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True
+            )
+            results.setdefault("step1", []).append(s3)
 
             logger.info(">>>step2: set wrong proxy in /etc/virt-who.d/x.conf")
-            self.vw_option_update_value("rhsm_proxy_hostname", bad_proxy_server, config_file)
+            self.vw_option_update_value(
+                "rhsm_proxy_hostname", bad_proxy_server, config_file
+            )
             self.vw_option_update_value("rhsm_proxy_port", bad_proxy_port, config_file)
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
             s2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step2', []).append(s1)
-            results.setdefault('step2', []).append(s2)
+            results.setdefault("step2", []).append(s1)
+            results.setdefault("step2", []).append(s2)
 
-            logger.info(">>>step3: set no_proxy=[server_hostname] in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("no_proxy", register_server, '/etc/rhsm/rhsm.conf')
+            logger.info(
+                ">>>step3: set no_proxy=[server_hostname] in /etc/rhsm/rhsm.conf"
+            )
+            self.vw_option_update_value(
+                "no_proxy", register_server, "/etc/rhsm/rhsm.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(s1)
+            results.setdefault("step3", []).append(s1)
 
             logger.info(">>>step4: set no_proxy=* in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("no_proxy", '*', '/etc/rhsm/rhsm.conf')
+            self.vw_option_update_value("no_proxy", "*", "/etc/rhsm/rhsm.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(s1)
-            self.vw_option_update_value("no_proxy", '', '/etc/rhsm/rhsm.conf')
+            results.setdefault("step4", []).append(s1)
+            self.vw_option_update_value("no_proxy", "", "/etc/rhsm/rhsm.conf")
 
-            logger.info(">>>step5: set rhsm_no_proxy=[server_hostname] in /etc/virt-who.conf")
-            self.vw_option_enable('[defaults]', '/etc/virt-who.conf')
-            self.vw_option_enable('rhsm_no_proxy', '/etc/virt-who.conf')
-            self.vw_option_update_value('rhsm_no_proxy', register_server, '/etc/virt-who.conf')
+            logger.info(
+                ">>>step5: set rhsm_no_proxy=[server_hostname] in /etc/virt-who.conf"
+            )
+            self.vw_option_enable("[defaults]", "/etc/virt-who.conf")
+            self.vw_option_enable("rhsm_no_proxy", "/etc/virt-who.conf")
+            self.vw_option_update_value(
+                "rhsm_no_proxy", register_server, "/etc/virt-who.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(s1)
+            results.setdefault("step5", []).append(s1)
 
             logger.info(">>>step6: set rhsm_no_proxy=* in /etc/virt-who.conf")
-            self.vw_option_update_value('rhsm_no_proxy', '*', '/etc/virt-who.conf')
+            self.vw_option_update_value("rhsm_no_proxy", "*", "/etc/virt-who.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(s1)
-            self.vw_option_disable('rhsm_no_proxy', '/etc/virt-who.conf')
+            results.setdefault("step6", []).append(s1)
+            self.vw_option_disable("rhsm_no_proxy", "/etc/virt-who.conf")
 
-            if hypervisor_type not in ('libvirt-local', 'vdsm'):
-                logger.info(">>>step7: set rhsm_no_proxy=[server_hostname] in /etc/virt-who.d/x.conf")
-                self.vw_option_add('rhsm_no_proxy', register_server, config_file)
+            if hypervisor_type not in ("libvirt-local", "vdsm"):
+                logger.info(
+                    ">>>step7: set rhsm_no_proxy=[server_hostname] in /etc/virt-who.d/x.conf"
+                )
+                self.vw_option_add("rhsm_no_proxy", register_server, config_file)
                 data, tty_output, rhsm_output = self.vw_start()
                 s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step7', []).append(s1)
+                results.setdefault("step7", []).append(s1)
 
                 logger.info(">>>step8: set rhsm_no_proxy=* in /etc/virt-who.d/x.conf")
-                self.vw_option_update_value('rhsm_no_proxy', '*', config_file)
+                self.vw_option_update_value("rhsm_no_proxy", "*", config_file)
                 data, tty_output, rhsm_output = self.vw_start()
                 s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step8', []).append(s1)
-                self.vw_option_del('rhsm_no_proxy', config_file)
+                results.setdefault("step8", []).append(s1)
+                self.vw_option_del("rhsm_no_proxy", config_file)
             else:
-                logger.info('Skip step7 and step8 for {0}'.format(hypervisor_type))
+                logger.info("Skip step7 and step8 for {0}".format(hypervisor_type))
         except:
-            results.setdefault('step except', []).append(False)
+            results.setdefault("step except", []).append(False)
             pass
 
         finally:
             self.vw_option_update_value("no_proxy", "", "/etc/rhsm/rhsm.conf")
 
--- /tmp/lint/tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py	2023-03-06 06:24:58.095623 +0000
@@ -2,38 +2,39 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-183803')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-183803")
         configs = self.get_hypervisor_config()
-        hypervisor_type = configs['type']
-        if hypervisor_type != 'esx':
+        hypervisor_type = configs["type"]
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        self.vw_option_update_value('username', 'tester@vsphere.local', config_file)
+        self.vw_option_update_value("username", "tester@vsphere.local", config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # case steps
         logger.info(">>>step1: run virt-who for {0}".format(config_file))
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py
would reformat /tmp/lint/tests/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py
--- /tmp/lint/tests/tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py	2023-03-06 06:24:58.120911 +0000
@@ -5,33 +5,37 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195888')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.30.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-195888")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.30.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
-        logger.info('>>>step1: set the environment in the virt-who host and run virt-who service')
-        cmd = ('export SUBMAN_DEBUG_PRINT_REQUEST=1;'
-               'export SUBMAN_DEBUG_PRINT_REQUEST_HEADER=1')
+        logger.info(
+            ">>>step1: set the environment in the virt-who host and run virt-who service"
+        )
+        cmd = (
+            "export SUBMAN_DEBUG_PRINT_REQUEST=1;"
+            "export SUBMAN_DEBUG_PRINT_REQUEST_HEADER=1"
+        )
         cmd = "{0}; virt-who -o".format(cmd)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
-        logger.info('>>>step2: check the message from console')
-        pkg = self.pkg_check(self.ssh_host(), 'virt-who')[9:17]
-        msg = 'virt-who/{}'.format(pkg)
+        logger.info(">>>step2: check the message from console")
+        pkg = self.pkg_check(self.ssh_host(), "virt-who")[9:17]
+        msg = "virt-who/{}".format(pkg)
         res2 = self.vw_msg_search(output=tty_output, msg=msg, exp_exist=True)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res2)
 
         # case results
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py
--- /tmp/lint/tests/tier1/tc_1111_template_conf_validation.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1111_template_conf_validation.py	2023-03-06 06:24:58.161322 +0000
@@ -5,42 +5,43 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195889')
-        trigger_type = self.get_config('trigger_type')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if trigger_type != 'trigger-rhel':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-195889")
+        trigger_type = self.get_config("trigger_type")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if trigger_type != "trigger-rhel":
             self.vw_case_skip(trigger_type)
-        if hypervisor_type != 'esx':
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
 
         results = dict()
         options = [
-                '#[config name]',
-                '#type=',
-                '#server=',
-                '#username=',
-                '#password=',
-                '#encrypted_password=',
-                '#owner=',
-                '#hypervisor_id=',
-                '#rhsm_hostname=',
-                '#rhsm_port=',
-                '#rhsm_username=',
-                '#rhsm_password=',
-                '#rhsm_encrypted_password=',
-                '#rhsm_prefix=/rhsm',
-                '#kubeconfig=',
-                '#kubeversion=',]    
-        self.pkg_uninstall(self.ssh_host(), 'virt-who')
-        self.pkg_install(self.ssh_host(), 'virt-who')
-        _, output = self.runcmd('cat /etc/virt-who.d/template.conf', self.ssh_host())
+            "#[config name]",
+            "#type=",
+            "#server=",
+            "#username=",
+            "#password=",
+            "#encrypted_password=",
+            "#owner=",
+            "#hypervisor_id=",
+            "#rhsm_hostname=",
+            "#rhsm_port=",
+            "#rhsm_username=",
+            "#rhsm_password=",
+            "#rhsm_encrypted_password=",
+            "#rhsm_prefix=/rhsm",
+            "#kubeconfig=",
+            "#kubeversion=",
+        ]
+        self.pkg_uninstall(self.ssh_host(), "virt-who")
+        self.pkg_install(self.ssh_host(), "virt-who")
+        _, output = self.runcmd("cat /etc/virt-who.d/template.conf", self.ssh_host())
         for option in options:
             if len(re.findall(option, output)) < 0:
-                logger.warning('{0} is not defined in the template.conf'.format(option))
+                logger.warning("{0} is not defined in the template.conf".format(option))
                 results.setdefault(option, []).append(False)
             else:
-                logger.info('{0} is defined'.format(option))
+                logger.info("{0} is defined".format(option))
                 results.setdefault(option, []).append(True)
         self.vw_case_result(results)
--- /tmp/lint/tests/tier1/tc_1108_check_hypervisor_facts.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1108_check_hypervisor_facts.py	2023-03-06 06:24:58.160982 +0000
@@ -5,104 +5,108 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-174862')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-174862")
         configs = self.get_hypervisor_config()
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.24.6':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.24.6":
             self.vw_case_skip("virt-who version")
-        hypervisor_type = configs['type']
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        hypervisor_type = configs["type"]
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        self.vw_option_add('hypervisor_id', 'uuid', config_file)
+        self.vw_option_add("hypervisor_id", "uuid", config_file)
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
+        register_owner = register_config["owner"]
         host_uuid = self.get_hypervisor_hostuuid()
-        facts_items = ['socket', 'type', 'dmi', 'version']
-        if hypervisor_type in ('esx', 'rhevm', 'ahv'):
-            facts_items.append('cluster')
+        facts_items = ["socket", "type", "dmi", "version"]
+        if hypervisor_type in ("esx", "rhevm", "ahv"):
+            facts_items.append("cluster")
         type_values = {
-            'kubevirt': 'qemu',
-            'xen': 'XenServer',
-            'hyperv': 'hyperv',
-            'esx': 'VMware ESXi',
-            'libvirt-remote': 'QEMU',
-            'rhevm': 'qemu',
-            'ahv': 'AHV'
+            "kubevirt": "qemu",
+            "xen": "XenServer",
+            "hyperv": "hyperv",
+            "esx": "VMware ESXi",
+            "libvirt-remote": "QEMU",
+            "rhevm": "qemu",
+            "ahv": "AHV",
         }
-        if hypervisor_type == 'ahv' and deploy.ahv.api_version == 'v2':
-            type_values['ahv'] = 'kKvm'
+        if hypervisor_type == "ahv" and deploy.ahv.api_version == "v2":
+            type_values["ahv"] = "kKvm"
 
         cluster_values = {
-            'esx': deploy.vcenter.cluster,
-            'rhevm': deploy.rhevm.cluster,
-            'ahv': deploy.ahv.cluster
+            "esx": deploy.vcenter.cluster,
+            "rhevm": deploy.rhevm.cluster,
+            "ahv": deploy.ahv.cluster,
         }
 
         # Case Steps
         logger.info(">>>step1: run virt-who to get facts from mapping")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
         if host_uuid in data[register_owner].keys():
             facts_dic = data[register_owner][host_uuid]
             logger.info("succeeded to get hypervisor facts dict: {0}".format(facts_dic))
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             raise FailException("failed to get hypervisor facts")
 
         logger.info(">>>step2: check all facts item exiting")
         for item in facts_items:
             if item in facts_dic.keys() and facts_dic[item] is not None:
-                logger.info("succeeded to check {0}={1} in {2} facts"
-                            .format(item, facts_dic[item], hypervisor_type))
-                results.setdefault('step2', []).append(True)
+                logger.info(
+                    "succeeded to check {0}={1} in {2} facts".format(
+                        item, facts_dic[item], hypervisor_type
+                    )
+                )
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("no '{0}' in {1} facts".format(item, hypervisor_type))
-                results.setdefault('step2', []).append(False)
+                results.setdefault("step2", []).append(False)
 
         logger.info(">>>step3: check hypervisor.type value")
         type_value = type_values[hypervisor_type]
-        if facts_dic['type'] == type_value:
+        if facts_dic["type"] == type_value:
             logger.info("succeeded to check hypervisor.type={0}".format(type_value))
-            results.setdefault('step3', []).append(True)
+            results.setdefault("step3", []).append(True)
         else:
             logger.error("hypervisor.type is not {0}".format(type_value))
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
 
         logger.info(">>>step4: check dmi.system.uuid value")
         if hypervisor_type == "rhevm":
             host_hwuuid = self.get_hypervisor_hwuuid()
             dmi = host_hwuuid
         else:
             dmi = host_uuid
-        if facts_dic['dmi'] == dmi:
+        if facts_dic["dmi"] == dmi:
             logger.info("succeeded to check dmi.system.uuid={0}".format(host_uuid))
-            results.setdefault('step4', []).append(True)
+            results.setdefault("step4", []).append(True)
         else:
             logger.error("dmi.system.uuid is not {0}".format(host_uuid))
-            results.setdefault('step4', []).append(False)
+            results.setdefault("step4", []).append(False)
 
-        if hypervisor_type in ('esx', 'rhevm', 'ahv'):
+        if hypervisor_type in ("esx", "rhevm", "ahv"):
             logger.info(">>>step5: check hypervisor.cluster value")
             cluster_value = cluster_values[hypervisor_type]
-            if facts_dic['cluster'] == cluster_value:
-                logger.info("succeeded to check hypervisor.cluster={0}"
-                            .format(cluster_value))
-                results.setdefault('step5', []).append(True)
+            if facts_dic["cluster"] == cluster_value:
+                logger.info(
+                    "succeeded to check hypervisor.cluster={0}".format(cluster_value)
+                )
+                results.setdefault("step5", []).append(True)
             else:
                 logger.error("hypervisor.cluster is not {0}".format(cluster_value))
-                results.setdefault('step5', []).append(False)
+                results.setdefault("step5", []).append(False)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1111_template_conf_validation.py
would reformat /tmp/lint/tests/tier1/tc_1108_check_hypervisor_facts.py
--- /tmp/lint/tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py	2023-03-06 06:24:58.233897 +0000
@@ -2,35 +2,40 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196077')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-196077")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_file = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', config_file)
-        self.vw_option_enable('debug', config_file)
-        self.vw_option_update_value('debug', 'True', config_file)
-        self.vw_etc_d_mode_create('virtwho-config', '/etc/virt-who.d/virtwho-config.conf')
+        self.vw_option_enable("[global]", config_file)
+        self.vw_option_enable("debug", config_file)
+        self.vw_option_update_value("debug", "True", config_file)
+        self.vw_etc_d_mode_create(
+            "virtwho-config", "/etc/virt-who.d/virtwho-config.conf"
+        )
         proxy_server = "{0}:{1}".format(deploy.proxy.server, deploy.proxy.port)
         bad_proxy_server = "10.73.3.24:9999"
-        steps = {'step2':'http_proxy', 'step3':'https_proxy'}
-        error_msg = ["Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"]
+        steps = {"step2": "http_proxy", "step3": "https_proxy"}
+        error_msg = [
+            "Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"
+        ]
 
         # case steps
         logger.info(">>>step1: enable [system_environment] in /etc/virt-who.conf")
         self.vw_option_enable("[system_environment]", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who to check {1}".format(step, option))
             if option == "http_proxy":
                 value = "http://{0}".format(proxy_server)
                 bad_value = "http://{0}".format(bad_proxy_server)
             if option == "https_proxy":
@@ -39,12 +44,18 @@
             logger.info("> run virt-who with good {0}".format(option))
             self.vw_option_enable(option, config_file)
             self.vw_option_update_value(option, value, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            s2 = self.vw_msg_search(rhsm_output, "Connection built.*{0}".format(proxy_server), exp_exist=True)
-            s3 = self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True)
+            s2 = self.vw_msg_search(
+                rhsm_output,
+                "Connection built.*{0}".format(proxy_server),
+                exp_exist=True,
+            )
+            s3 = self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True
+            )
             results.setdefault(step, []).append(s1)
             results.setdefault(step, []).append(s2)
             results.setdefault(step, []).append(s3)
 
             logger.info("> run virt-who with bad {0}".format(option))
@@ -54,12 +65,12 @@
             s5 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
             results.setdefault(step, []).append(s4)
             results.setdefault(step, []).append(s5)
 
             logger.info(">>> run virt-who with bad proxy, but no_proxy=*")
-            self.vw_option_enable('no_proxy', config_file)
-            self.vw_option_update_value('no_proxy', '*', config_file)
+            self.vw_option_enable("no_proxy", config_file)
+            self.vw_option_update_value("no_proxy", "*", config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             s6 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s6)
             self.vw_option_disable(option, config_file)
             self.vw_option_disable("no_proxy", config_file)
would reformat /tmp/lint/tests/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py
--- /tmp/lint/tests/tier1/tc_1113_check_virtwho_status.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier1/tc_1113_check_virtwho_status.py	2023-03-06 06:24:58.275945 +0000
@@ -5,95 +5,96 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196077')
-        compose_id = self.get_config('rhel_compose')
-        if 'RHEL-9' not in compose_id:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-196077")
+        compose_id = self.get_config("rhel_compose")
+        if "RHEL-9" not in compose_id:
             self.vw_case_skip(compose_id)
         configs = self.get_hypervisor_config()
-        hypervisor_type = configs['type']
-        if 'libvirt-local' in hypervisor_type:
+        hypervisor_type = configs["type"]
+        if "libvirt-local" in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
-        hypervisor_server = configs['server']
+        hypervisor_server = configs["server"]
         register = self.get_register_config()
-        register_server = register['server']
+        register_server = register["server"]
         self.vw_case_init()
 
         # case config
         results = dict()
-        config_name = 'virtwho-config'
-        config_file = f'/etc/virt-who.d/{config_name}.conf'
+        config_name = "virtwho-config"
+        config_file = f"/etc/virt-who.d/{config_name}.conf"
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: Run virt-who to report the mapping")
-        data, tty_output, rhsm_output = self.vw_start(cli='virt-who -do')
+        data, tty_output, rhsm_output = self.vw_start(cli="virt-who -do")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
         logger.info(">>>step2: Check '#virt-who --status' with good configuration")
         status = self.vw_status()
-        results.setdefault('step2', []).append(
-            'success' in status[config_name]['source_status'] and
-            'success' in status[config_name]['destination_status']
+        results.setdefault("step2", []).append(
+            "success" in status[config_name]["source_status"]
+            and "success" in status[config_name]["destination_status"]
         )
 
         logger.info(">>>step3: Check '#virt-who -s' with good configuration")
-        status = self.vw_status(cmd='virt-who -s')
-        results.setdefault('step3', []).append(
-            'success' in status[config_name]['source_status'] and
-            'success' in status[config_name]['destination_status']
+        status = self.vw_status(cmd="virt-who -s")
+        results.setdefault("step3", []).append(
+            "success" in status[config_name]["source_status"]
+            and "success" in status[config_name]["destination_status"]
         )
 
         logger.info(">>>step4: Check #virt-who --status --json")
         json = self.vw_status(if_json=True)
-        source = json[config_name]['source']
-        destination = json[config_name]['destination']
-        if 'libvirt' in hypervisor_type:
-            source_conn = f'qemu+ssh://root@{hypervisor_server}/system?no_tty=1'
-        elif 'esx' in hypervisor_type:
-            source_conn = f'https://{hypervisor_server}'
-        elif 'rhevm' in hypervisor_type:
-            source_conn = hypervisor_server.split('ovirt-engine')[0].strip()
-        elif 'kubevirt' in hypervisor_type:
+        source = json[config_name]["source"]
+        destination = json[config_name]["destination"]
+        if "libvirt" in hypervisor_type:
+            source_conn = f"qemu+ssh://root@{hypervisor_server}/system?no_tty=1"
+        elif "esx" in hypervisor_type:
+            source_conn = f"https://{hypervisor_server}"
+        elif "rhevm" in hypervisor_type:
+            source_conn = hypervisor_server.split("ovirt-engine")[0].strip()
+        elif "kubevirt" in hypervisor_type:
             source_conn = deploy.kubevirt.endpoint
         else:
             source_conn = hypervisor_server
-        results.setdefault('step4', []).append(
-            source['connection'] == source_conn and
-            source['status'] == 'success' and
-            source['last_successful_retrieve'].split(' ')[2] == 'UTC' and
-            source['hypervisors'] >= 1 and
-            source['guests'] >= 1 and
-            destination['connection'] == register_server and
-            destination['status'] == 'success' and
-            destination['last_successful_send'].split(' ')[2] == 'UTC' and
-            destination['last_successful_send_job_status'] == 'FINISHED'
+        results.setdefault("step4", []).append(
+            source["connection"] == source_conn
+            and source["status"] == "success"
+            and source["last_successful_retrieve"].split(" ")[2] == "UTC"
+            and source["hypervisors"] >= 1
+            and source["guests"] >= 1
+            and destination["connection"] == register_server
+            and destination["status"] == "success"
+            and destination["last_successful_send"].split(" ")[2] == "UTC"
+            and destination["last_successful_send_job_status"] == "FINISHED"
         )
 
         logger.info(">>>step5: Check '#virt-who -s' with bad configuration")
-        option = 'password'
-        if 'kubevirt' in hypervisor_type:
-            option = 'kubeconfig'
-        if 'libvirt-remote' in hypervisor_type:
-            option = 'server'
-        self.vw_option_update_value(f'{option}', 'xxx', config_file)
-        self.vw_option_update_value('owner', 'xxx', config_file)
-        status = self.vw_status(cmd='virt-who -s')
-        results.setdefault('step5', []).append(
-            'failure' in status[config_name]['source_status'] and
-            'failure' in status[config_name]['destination_status']
+        option = "password"
+        if "kubevirt" in hypervisor_type:
+            option = "kubeconfig"
+        if "libvirt-remote" in hypervisor_type:
+            option = "server"
+        self.vw_option_update_value(f"{option}", "xxx", config_file)
+        self.vw_option_update_value("owner", "xxx", config_file)
+        status = self.vw_status(cmd="virt-who -s")
+        results.setdefault("step5", []).append(
+            "failure" in status[config_name]["source_status"]
+            and "failure" in status[config_name]["destination_status"]
         )
 
-        logger.info(">>>step6: Check '#virt-who --status --json' with bad configuration")
+        logger.info(
+            ">>>step6: Check '#virt-who --status --json' with bad configuration"
+        )
         json = self.vw_status(if_json=True)
-        source = json[config_name]['source']
-        destination = json[config_name]['destination']
-        results.setdefault('step6', []).append(
-            source['status'] == 'failure' and
-            destination['status'] == 'failure'
+        source = json[config_name]["source"]
+        destination = json[config_name]["destination"]
+        results.setdefault("step6", []).append(
+            source["status"] == "failure" and destination["status"] == "failure"
         )
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier1/tc_1113_check_virtwho_status.py
--- /tmp/lint/tests/tier2/tc_2001_validate_owner_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2001_validate_owner_option_by_cli.py	2023-03-06 06:24:58.288708 +0000
@@ -5,45 +5,46 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136568')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136568")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
-        msg_list = ["owner not in|"
-                      "owner.* not set|"
-                      "virt-who can't be started"]
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
+        msg_list = ["owner not in|" "owner.* not set|" "virt-who can't be started"]
 
         # Case Steps
         logger.info(">>>step1: owner option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
- 
+        results.setdefault("step1", []).append(res)
+
         logger.info(">>>step2: owner option is wrong value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      '--{0}-owner=.*'.format(hypervisor_type),
-                                      '--{0}-owner=xxxxx'.format(hypervisor_type))
-        msg_list_2 = ["owner.* is different|"
-                      "Communication with subscription manager failed"]
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-owner=.*".format(hypervisor_type),
+            "--{0}-owner=xxxxx".format(hypervisor_type),
+        )
+        msg_list_2 = [
+            "owner.* is different|" "Communication with subscription manager failed"
+        ]
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list_2, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: skip this step because owner cannot be set to no-ascci")
         # cli = self.vw_cli_base_update(base_cli,
         #                               '--{0}-owner=.*'.format(hypervisor_type),
         #                               '--{0}-owner=Á∫¢Â∏Ω‚Ç¨467aa'.format(hypervisor_type))
@@ -56,30 +57,32 @@
         # res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         # results.setdefault('step3', []).append(res1)
         # results.setdefault('step3', []).append(res2)
 
         logger.info(">>>step4: owner option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      '--{0}-owner=.*'.format(hypervisor_type),
-                                      '--{0}-owner= '.format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-owner=.*".format(hypervisor_type),
+            "--{0}-owner= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: owner option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      '--{0}-owner=.*'.format(hypervisor_type),
-                                      ' ')
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-owner=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         notes = list()
-        if hypervisor_type == 'kubevirt':
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2001_validate_owner_option_by_cli.py
--- /tmp/lint/tests/tier2/tc_2002_validate_env_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2002_validate_env_option_by_cli.py	2023-03-06 06:24:58.379566 +0000
@@ -5,84 +5,96 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136571')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136571")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
 
         # Case Steps
         logger.info(">>>step1: env option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: env option is wrong value")
-        cli = self.vw_cli_base_update(base_cli, "--{0}-env=.*".format(hypervisor_type),
-                                      "--{0}-env=xxxxx".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-env=.*".format(hypervisor_type),
+            "--{0}-env=xxxxx".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        msg_list = ["env.*differs|"
-                    "env.* is different|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|"
+            "env.* is different|"
+            "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: env option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-env=.*".format(hypervisor_type),
-                                      "--{0}-env=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-env=.*".format(hypervisor_type),
+            "--{0}-env=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        msg_list = ["codec can't decode|"
-                    "Communication with subscription manager failed|"
-                    "env.*differs"]
+        msg_list = [
+            "codec can't decode|"
+            "Communication with subscription manager failed|"
+            "env.*differs"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: env option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-env=.*".format(hypervisor_type),
-                                      "--{0}-env= ".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-env=.*".format(hypervisor_type),
+            "--{0}-env= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        msg_list = ["env not in|env.* not set|"
-                    "virt-who can't be started"]
+        msg_list = ["env not in|env.* not set|" "virt-who can't be started"]
         res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: env option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-env=.*".format(hypervisor_type),
-                                      " ")
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-env=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         msg_list = ["env not in|env.* not set|virt-who can't be started"]
         res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         notes = list()
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         if "stage" in register_type:
-            notes.append("Bug(Step2,Step3): Set env to wrong or special value,"
-                         " still can sent report normally for stage")
+            notes.append(
+                "Bug(Step2,Step3): Set env to wrong or special value,"
+                " still can sent report normally for stage"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530426")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2002_validate_env_option_by_cli.py
--- /tmp/lint/tests/tier2/tc_2003_validate_server_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2003_validate_server_option_by_cli.py	2023-03-06 06:24:58.441973 +0000
@@ -5,92 +5,110 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136572')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136572")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
-        msg_list = ["Name or service not known|"
-                    "Connection timed out|"
-                    "Failed to connect|"
-                    "Error in .* backend"]
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
+        msg_list = [
+            "Name or service not known|"
+            "Connection timed out|"
+            "Failed to connect|"
+            "Error in .* backend"
+        ]
 
         # Case Steps
         logger.info(">>>step1: server option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: server option is wrong value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-server=.*".format(hypervisor_type),
-                                      "--{0}-server=xxxxx".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-server=.*".format(hypervisor_type),
+            "--{0}-server=xxxxx".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: server option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-server=.*".format(hypervisor_type),
-                                      "--{0}-server=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-server=.*".format(hypervisor_type),
+            "--{0}-server=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        msg_list_3 = ["Name or service not known|"
-                      "Connection timed out|"
-                      "Failed to connect|"
-                      "Error in .* backend|"
-                      "Unable to connect|"
-                      "codec can't encode"]
+        msg_list_3 = [
+            "Name or service not known|"
+            "Connection timed out|"
+            "Failed to connect|"
+            "Error in .* backend|"
+            "Unable to connect|"
+            "codec can't encode"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list_3, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: server option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-server=.*".format(hypervisor_type),
-                                      "--{0}-server= ".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-server=.*".format(hypervisor_type),
+            "--{0}-server= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead "
-                           "when server option is null for libvirt-remote")
+            logger.warning(
+                "libvirt-local mode will be used to instead "
+                "when server option is null for libvirt-remote"
+            )
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
         else:
             msg_list = ["server.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: server option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-server=.*".format(hypervisor_type),
-                                      " ")
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-server=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead "
-                           "when server option is disabled for libvirt-remote")
+            logger.warning(
+                "libvirt-local mode will be used to instead "
+                "when server option is disabled for libvirt-remote"
+            )
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
         else:
             msg_list = ["server.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2003_validate_server_option_by_cli.py
--- /tmp/lint/tests/tier2/tc_2004_validate_username_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2004_validate_username_option_by_cli.py	2023-03-06 06:24:58.491142 +0000
@@ -5,95 +5,113 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136573')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136573")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
-        msg_list = ["Unable to login|"
-                    "incorrect user.*|"
-                    "Authentication failure|"
-                    "Incorrect.*username|"
-                    "Unauthorized|"
-                    "Error.* backend|"
-                    "Permission denied"]
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
+        msg_list = [
+            "Unable to login|"
+            "incorrect user.*|"
+            "Authentication failure|"
+            "Incorrect.*username|"
+            "Unauthorized|"
+            "Error.* backend|"
+            "Permission denied"
+        ]
 
         # Case Steps
         logger.info(">>>step1: username option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: username option is wrong value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-username=.*".format(hypervisor_type),
-                                      "--{0}-username=xxxxx".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-username=.*".format(hypervisor_type),
+            "--{0}-username=xxxxx".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: username option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        pkg = self.pkg_check(self.ssh_host(), 'python-requests').split('-')[2]
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-username=.*".format(hypervisor_type),
-                                      "--{0}-username=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type))
+        pkg = self.pkg_check(self.ssh_host(), "python-requests").split("-")[2]
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-username=.*".format(hypervisor_type),
+            "--{0}-username=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        if pkg[16:21] >= '2.20':
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+        if pkg[16:21] >= "2.20":
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg = "not in latin1 encoding"
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=0, exp_send=0
+            )
             res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: username option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-username=.*".format(hypervisor_type),
-                                      "--{0}-username= ".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-username=.*".format(hypervisor_type),
+            "--{0}-username= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, " "username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: username option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-username=.*".format(hypervisor_type),
-                                      " ")
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-username=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, " "username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2004_validate_username_option_by_cli.py
--- /tmp/lint/tests/tier2/tc_2005_validate_password_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2005_validate_password_option_by_cli.py	2023-03-06 06:24:58.505037 +0000
@@ -5,103 +5,124 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136574')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136574")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
-        msg_list = ["Unable to login|"
-                    "incorrect user.*|"
-                    "Authentication failure|"
-                    "Incorrect.*username|"
-                    "Unauthorized|"
-                    "Error.* backend|"
-                    "Permission denied"]
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
+        msg_list = [
+            "Unable to login|"
+            "incorrect user.*|"
+            "Authentication failure|"
+            "Incorrect.*username|"
+            "Unauthorized|"
+            "Error.* backend|"
+            "Permission denied"
+        ]
 
         # Case Steps
         logger.info(">>>step1: password option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: password option is wrong value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-password=.*".format(hypervisor_type),
-                                      "--{0}-password=xxxxx".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-password=.*".format(hypervisor_type),
+            "--{0}-password=xxxxx".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, "
+                "password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: password option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-password=.*".format(hypervisor_type),
-                                      "--{0}-password=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-password=.*".format(hypervisor_type),
+            "--{0}-password=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type),
+        )
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, "
+                "password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res1)
+            results.setdefault("step3", []).append(res1)
         else:
             msg = "'password': is not in latin1 encoding"
             data, tty_output, rhsm_output = self.vw_start(cli)
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=0, exp_send=0
+            )
             res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: password option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-password=.*".format(hypervisor_type),
-                                      "--{0}-password= ".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-password=.*".format(hypervisor_type),
+            "--{0}-password= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, " "username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: password option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-password=.*".format(hypervisor_type),
-                                      " ")
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-password=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, " "username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
-
would reformat /tmp/lint/tests/tier2/tc_2005_validate_password_option_by_cli.py
--- /tmp/lint/tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py	2023-03-06 06:24:58.564570 +0000
@@ -5,46 +5,48 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136710')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136710")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-            wrong_mode = 'xen'
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+            wrong_mode = "xen"
         else:
-            wrong_mode = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
+            wrong_mode = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
 
         # Case Steps
         logger.info(">>>step1: run virt-who by cli with all valid parameters")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who by cli with unconsistent parameters")
-        cli = re.sub("--{0}-owner=".format(hypervisor_type),
-                     "--{0}-owner=".format(wrong_mode),
-                     base_cli)
+        cli = re.sub(
+            "--{0}-owner=".format(hypervisor_type),
+            "--{0}-owner=".format(wrong_mode),
+            base_cli,
+        )
         data, tty_output, rhsm_output = self.vw_start(cli, exp_send=1)
         msg = "does not match virtualization backend"
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(tty_output, msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # Case Result
         notes = list()
-        if hypervisor_type == 'kubevirt':
+        if hypervisor_type == "kubevirt":
             notes.append("(step1) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2007_validate_parameters_consistency_by_cli.py
--- /tmp/lint/tests/tier2/tc_2006_validate_config_function_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2006_validate_config_function_by_cli.py	2023-03-06 06:24:58.587171 +0000
@@ -2,81 +2,87 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136710')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136710")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         guest_uuid = self.get_hypervisor_guestuuid()
         self.vw_option_enable("[global]", filename="/etc/virt-who.conf")
         self.vw_option_enable("interval", filename="/etc/virt-who.conf")
-        self.vw_option_update_value("interval", '120', filename="/etc/virt-who.conf")
+        self.vw_option_update_value("interval", "120", filename="/etc/virt-who.conf")
         self.vw_option_enable("debug", filename="/etc/virt-who.conf")
-        self.vw_option_update_value("debug", 'True', filename="/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", filename="/etc/virt-who.conf")
         self.vw_option_enable("[defaults]", filename="/etc/virt-who.conf")
         self.vw_option_enable("owner", filename="/etc/virt-who.conf")
-        self.vw_option_update_value("owner", 'xxx', filename="/etc/virt-who.conf")
+        self.vw_option_update_value("owner", "xxx", filename="/etc/virt-who.conf")
         self.vw_option_enable("env", filename="/etc/virt-who.conf")
-        self.vw_option_update_value("env", 'xxx', filename="/etc/virt-who.conf")
+        self.vw_option_update_value("env", "xxx", filename="/etc/virt-who.conf")
 
         # Case Steps
-        logger.info(">>>step1: configure two same mode in different path then run virt-who -c")
+        logger.info(
+            ">>>step1: configure two same mode in different path then run virt-who -c"
+        )
         config_name_1 = "virtwho-config-1"
         config_name_2 = "virtwho-config-2"
         config_file_1 = "/etc/virt-who.d/{0}.conf".format(config_name_1)
         config_file_2 = "/root/{0}.conf".format(config_name_2)
         self.vw_etc_d_mode_create(config_name_1, config_file_1)
         self.vw_etc_d_mode_create(config_name_2, config_file_2)
         cmd = "virt-who -c {0} -i 60".format(config_file_2)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
-        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60)
+        res1 = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60
+        )
         res2 = self.vw_msg_search(output=tty_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         logger.info(">>>step2: check virt-who didn't run config_file_1")
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
         logger.info("Expected mapping info num: 1 for sat63 above and stage")
-        results.setdefault('step2', []).append(num == 1)
+        results.setdefault("step2", []).append(num == 1)
 
         logger.info(">>>step3: check '#virt-who -o -c' with wrong config file")
         wrong_file = "xxx"
         error_msg = "No valid configuration file provided using -c/--config"
         cmd = "virt-who -d -o -c {0}".format(wrong_file)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=0)
         res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(tty_output, error_msg, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: run virt-who with -c option multiple times")
         self.vw_etc_d_delete_all()
         config_file_1 = "/root/{0}.conf".format(config_name_1)
         self.vw_etc_d_mode_create(config_name_1, config_file_1)
         cmd = "virt-who -c {0} -c {1}".format(config_file_1, config_file_2)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120)
-        results.setdefault('step4', []).append(res)
+        res = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120
+        )
+        results.setdefault("step4", []).append(res)
 
         logger.info(">>>step5: check virt-who has run both config")
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
-        register_type = self.get_config('hypervisor_type')
+        register_type = self.get_config("hypervisor_type")
         if "satellite62" in register_type:
             logger.info("Expected mapping info num: 1 for sat62")
-            results.setdefault('step5', []).append(num == 1)
+            results.setdefault("step5", []).append(num == 1)
         else:
             logger.info("Expected mapping info num: 2 for sat63 above and stage")
-            results.setdefault('step5', []).append(num == 2)
-
+            results.setdefault("step5", []).append(num == 2)
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2006_validate_config_function_by_cli.py
--- /tmp/lint/tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py	2023-03-06 06:24:58.674537 +0000
@@ -2,97 +2,112 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136577')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136577")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_OWNER".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: owner option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: owner option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "owner.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: owner option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["codec can't decode|codec can't encode|Communication with subscription manager failed|owner.* is different"]
+        msg_list = [
+            "codec can't decode|codec can't encode|Communication with subscription manager failed|owner.* is different"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: owner option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: owner option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: owner option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["owner not in|owner.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|owner.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: owner option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["owner not in|owner.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|owner.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "libvirt" not in hypervisor_type:
-            notes.append("Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log")
+            notes.append(
+                "Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530254")
-        self.vw_case_result(results, notes)
\ No newline at end of file
+        self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py
--- /tmp/lint/tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py	2023-03-06 06:24:58.752291 +0000
@@ -2,101 +2,118 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136578')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136578")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_ENV".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: env option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
- 
+        results.setdefault("step1", []).append(res)
+
         logger.info(">>>step2: env option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env.*differs|env.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|env.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: env option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["codec can't decode|Communication with subscription manager failed|env.*differs"]
+        msg_list = [
+            "codec can't decode|Communication with subscription manager failed|env.*differs"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: env option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: env option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: env option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["env not in|env.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: env option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["env not in|env.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         if "stage" in register_type:
-            notes.append("Bug(Step2, Step3): Set env to wrong or special value, still can sent report normally for stage")
+            notes.append(
+                "Bug(Step2, Step3): Set env to wrong or special value, still can sent report normally for stage"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530426")
         if "libvirt" not in hypervisor_type:
-            notes.append("Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log")
+            notes.append(
+                "Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530254")
-        self.vw_case_result(results, notes)
\ No newline at end of file
+        self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py
--- /tmp/lint/tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py	2023-03-06 06:24:58.806943 +0000
@@ -2,109 +2,128 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136579')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136579")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_SERVER".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: server option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: server option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Name or service not known|Connection timed out|Failed to connect|Error in .* backend"]
+        msg_list = [
+            "Name or service not known|Connection timed out|Failed to connect|Error in .* backend"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: server option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Name or service not known|Connection timed out|Failed to connect|Error in .* backend|Unable to connect"]
+        msg_list = [
+            "Name or service not known|Connection timed out|Failed to connect|Error in .* backend|Unable to connect"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: server option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead when server option is null for libvirt-remote")
-            msg_list = ["Name or service not known|Connection timed out|Failed to connect|Error in .* backend"]
+            logger.warning(
+                "libvirt-local mode will be used to instead when server option is null for libvirt-remote"
+            )
+            msg_list = [
+                "Name or service not known|Connection timed out|Failed to connect|Error in .* backend"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg_list = ["SERVER.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: server option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead when server option is disabled for libvirt-remote")
-            msg_list = ["Name or service not known|Connection timed out|Failed to connect|Error in .* backend"]
+            logger.warning(
+                "libvirt-local mode will be used to instead when server option is disabled for libvirt-remote"
+            )
+            msg_list = [
+                "Name or service not known|Connection timed out|Failed to connect|Error in .* backend"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg_list = ["SERVER.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: server option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["SERVER.* not set|Error in .* backend|No host supplied"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: server option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["SERVER.* not set|Error in .* backend|No host supplied"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "libvirt" not in hypervisor_type:
-            notes.append("Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log")
+            notes.append(
+                "Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530557")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py
--- /tmp/lint/tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py	2023-03-06 06:24:58.839468 +0000
@@ -2,117 +2,140 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136580')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136580")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_USERNAME".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: username option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: username option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"]
+        msg_list = [
+            "Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: username option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"]
+        msg_list = [
+            "Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: username option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: username option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: username option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(res1)
+            results.setdefault("step6", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: username option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step7', []).append(res1)
+            results.setdefault("step7", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step7', []).append(res1)
-            results.setdefault('step7', []).append(res2)
+            results.setdefault("step7", []).append(res1)
+            results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "libvirt" not in hypervisor_type:
-            notes.append("Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log")
+            notes.append(
+                "Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530841")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py
--- /tmp/lint/tests/tier2/tc_2013_validate_unreachable_proxy_by_config.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2013_validate_unreachable_proxy_by_config.py	2023-03-06 06:24:58.919843 +0000
@@ -5,40 +5,39 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136709')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.25.7':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136709")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.25.7":
             self.vw_case_skip("virt-who version")
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        '''http_proxy, no_proxy are moved to /etc/virt-who.conf, will not test this exception for rhel9'''
+        """http_proxy, no_proxy are moved to /etc/virt-who.conf, will not test this exception for rhel9"""
         if "RHEL-9" in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         sysconfig_file = "/etc/sysconfig/virt-who"
         vw_conf = "/etc/virt-who.conf"
         conf_file = "/etc/virt-who.d/virtwho-config.conf"
-        self.vw_option_enable('[global]', vw_conf)
-        self.vw_option_enable('debug', vw_conf)
-        self.vw_option_update_value('debug', 'True', vw_conf)
-        self.vw_option_enable('[defaults]', vw_conf)
-        self.vw_etc_d_mode_create('virtwho-config', conf_file)
+        self.vw_option_enable("[global]", vw_conf)
+        self.vw_option_enable("debug", vw_conf)
+        self.vw_option_update_value("debug", "True", vw_conf)
+        self.vw_option_enable("[defaults]", vw_conf)
+        self.vw_etc_d_mode_create("virtwho-config", conf_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
+        register_server = register_config["server"]
         hypervisor_config = self.get_hypervisor_config()
-        hypervisor_server = hypervisor_config['server']
+        hypervisor_server = hypervisor_config["server"]
         good_squid_server = "{0}:{1}".format(deploy.proxy.server, deploy.proxy.port)
         wrong_squid_server = "10.73.3.24:9999"
-        types = {'type1': 'http_proxy',
-                 'type2': 'https_proxy'}
+        types = {"type1": "http_proxy", "type2": "https_proxy"}
 
         # Case Steps
         logger.info(">>>step1: run with good proxy server")
         for name, option in sorted(types.items(), key=lambda item: item[0]):
             logger.info("+++ {0}: run virt-who to check {1} +++".format(name, option))
@@ -48,16 +47,18 @@
                 value = "https://{0}".format(good_squid_server)
             self.vw_option_add(option, value, filename=sysconfig_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             res2 = self.vw_msg_search(
-                rhsm_output, "Connection built.*{0}".format(good_squid_server))
+                rhsm_output, "Connection built.*{0}".format(good_squid_server)
+            )
             res3 = self.vw_msg_search(
-                rhsm_output, "Using proxy.*{0}".format(good_squid_server))
-            results.setdefault('step1', []).append(res1)
-            results.setdefault('step1', []).append(res2)
-            results.setdefault('step1', []).append(res3)
+                rhsm_output, "Using proxy.*{0}".format(good_squid_server)
+            )
+            results.setdefault("step1", []).append(res1)
+            results.setdefault("step1", []).append(res2)
+            results.setdefault("step1", []).append(res3)
             self.vw_option_del(option, filename=sysconfig_file)
 
         logger.info(">>>step2: run with bad proxy server and no_proxy")
         for name, option in sorted(types.items(), key=lambda item: item[0]):
             logger.info("=== {0}: bad {1} test ===".format(name, option))
@@ -66,43 +67,45 @@
                 value = "http://{0}".format(wrong_squid_server)
             if option == "https_proxy":
                 value = "https://{0}".format(wrong_squid_server)
             self.vw_option_add(option, value, filename=sysconfig_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=0, exp_error=True)
-            error_msg = ["Connection refused|"
-                         "Cannot connect to proxy|"
-                         "Connection timed out"]
-            res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
+            error_msg = [
+                "Connection refused|" "Cannot connect to proxy|" "Connection timed out"
+            ]
+            res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, error_msg)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
-            logger.info("+++ Configure no_proxy=[hypervisor_server] "
-                        "and rhsm_no_proxy=[register_server] +++")
+            logger.info(
+                "+++ Configure no_proxy=[hypervisor_server] "
+                "and rhsm_no_proxy=[register_server] +++"
+            )
             self.vw_option_add("no_proxy", register_server, sysconfig_file)
             self.vw_option_update_value("no_proxy", hypervisor_server, sysconfig_file)
             self.vw_option_enable("rhsm_no_proxy", vw_conf)
             self.vw_option_update_value("rhsm_no_proxy", register_server, vw_conf)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-            if hypervisor_type == 'xen':
+            if hypervisor_type == "xen":
                 res3 = self.op_normal_value(data, exp_error=2, exp_thread=1, exp_send=1)
             else:
                 res3 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res3)
-            self.vw_option_del('no_proxy', sysconfig_file)
+            results.setdefault("step2", []).append(res3)
+            self.vw_option_del("no_proxy", sysconfig_file)
             self.vw_option_del(option, sysconfig_file)
-            self.vw_option_disable('rhsm_no_proxy', vw_conf)
+            self.vw_option_disable("rhsm_no_proxy", vw_conf)
 
         # Case Result
         self.vw_case_result(results)
 
-        '''WONTFIX bz1739358 - [XEN] virt-who can send mapping to server but always print 
-        errors when bad http(s)_proxy and good no_proxy values are configured'''
+        """WONTFIX bz1739358 - [XEN] virt-who can send mapping to server but always print 
+        errors when bad http(s)_proxy and good no_proxy values are configured"""
 
-        '''WONTFIX bz1716337 - virt-who doesn't connect all hypervisors by proxy'''
+        """WONTFIX bz1716337 - virt-who doesn't connect all hypervisors by proxy"""
 
-        '''
+        """
         For below scenarios, virt-who connect hypervisor not by proxy.
         "RHEL-8" + ('libvirt-remote', 'hyperv', 'kubevirt')
         "RHEL-7" + "http_proxy" + ('esx', 'libvirt-remote', 'xen', 'rhevm', 'kubevirt')
         "RHEL-7" + "http_proxy" + ('libvirt-remote', 'hyperv', 'kubevirt')
-        '''
+        """
would reformat /tmp/lint/tests/tier2/tc_2013_validate_unreachable_proxy_by_config.py
--- /tmp/lint/tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py	2023-03-06 06:24:58.935811 +0000
@@ -2,127 +2,158 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136581')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136581")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_PASSWORD".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: password option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: password option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
         else:
-            msg_list = ["Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            msg_list = [
+                "Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"
+            ]
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: password option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
         else:
-            msg_list = ["Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            msg_list = [
+                "Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"
+            ]
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: password option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: password option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: password option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(res1)
+            results.setdefault("step6", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: password option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step7', []).append(res1)
+            results.setdefault("step7", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step7', []).append(res1)
-            results.setdefault('step7', []).append(res2)
+            results.setdefault("step7", []).append(res1)
+            results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "rhevm" in hypervisor_type or "hyperv" in hypervisor_type:
-            notes.append("Bug(Step3): password unsupport unicode characters for rhevm and hyperv")
+            notes.append(
+                "Bug(Step3): password unsupport unicode characters for rhevm and hyperv"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1581022")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py
--- /tmp/lint/tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py	2023-03-06 06:24:58.988423 +0000
@@ -5,101 +5,109 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136585')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136585")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "[.*]"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        vw_pkg = self.pkg_check(self.ssh_host(), 'virt-who')
-        msg_list = ["no section headers|"
-                    "Error in .* backend|"
-                    "do not have any valid section headers"]
+        vw_pkg = self.pkg_check(self.ssh_host(), "virt-who")
+        msg_list = [
+            "no section headers|"
+            "Error in .* backend|"
+            "do not have any valid section headers"
+        ]
 
         # Case Steps
         logger.info(">>>step1: header option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: header option is space value")
         self.vw_option_update_name(option_tested, "[ ]", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        if vw_pkg[9:15] >= '0.25.7':
+        if vw_pkg[9:15] >= "0.25.7":
             res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
         else:
             logger.warning("Sapce value[ ] is acceptable for header option")
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
 
         logger.info(">>>step3: header option is Á∫¢Â∏Ω‚Ç¨467aa value")
         logger.info("Special value is acceptable for header option")
-        self.vw_option_update_name(option_tested, '[Á∫¢Â∏Ω‚Ç¨467aa]', config_file)
+        self.vw_option_update_name(option_tested, "[Á∫¢Â∏Ω‚Ç¨467aa]", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res1)
+        results.setdefault("step3", []).append(res1)
 
         logger.info(">>>step4: header option is null value")
-        self.vw_option_update_name(option_tested, '[]', config_file)
+        self.vw_option_update_name(option_tested, "[]", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        if vw_pkg[9:15] >= '0.25.7':
+        if vw_pkg[9:15] >= "0.25.7":
             res1 = self.op_normal_value(data, exp_error=3, exp_thread=0, exp_send=0)
         else:
             logger.warning(
-                "libvirt-local mode will be used to instead when header option is null")
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                "libvirt-local mode will be used to instead when header option is null"
+            )
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
         res2 = self.msg_validation(rhsm_output, msg_list)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: header option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        if vw_pkg[9:15] >= '0.25.7':
+        if vw_pkg[9:15] >= "0.25.7":
             res1 = self.op_normal_value(data, exp_error=3, exp_thread=0, exp_send=0)
         else:
             logger.warning(
-                "libvirt-local mode will be used when run without header option")
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                "libvirt-local mode will be used when run without header option"
+            )
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
         res2 = self.msg_validation(rhsm_output, msg_list)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: owner option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["no section headers"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: owner option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_name(option_tested, '[]', config_file)
+        self.vw_option_update_name(option_tested, "[]", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["no section headers"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py	2023-03-06 06:24:58.995130 +0000
@@ -2,80 +2,88 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136586')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136586")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "type"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: type option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        steps = {'step2': 'xxx', 'step3': 'Á∫¢Â∏Ω‚Ç¨467aa', 'step4': ''}
+        steps = {"step2": "xxx", "step3": "Á∫¢Â∏Ω‚Ç¨467aa", "step4": ""}
         for step, value in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(f">>>{step}: type option is wrong '{value}'")
             self.vw_option_update_value(option_tested, f"{value}", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=0, exp_send=0)
             res2 = self.msg_validation(rhsm_output, ["virt-who can't be started"])
-            results.setdefault(f'{step}', []).append(res1)
-            results.setdefault(f'{step}', []).append(res2)
+            results.setdefault(f"{step}", []).append(res1)
+            results.setdefault(f"{step}", []).append(res2)
             if "RHEL-9" in compose_id:
-                res3 = self.msg_validation(rhsm_output,
-                                           [f"Unsupported virtual type '{value}' is set"])
-                results.setdefault(f'{step}', []).append(res3)
+                res3 = self.msg_validation(
+                    rhsm_output, [f"Unsupported virtual type '{value}' is set"]
+                )
+                results.setdefault(f"{step}", []).append(res3)
 
         logger.info(">>>step5: type option is disable")
-        logger.warning("libvirt-local mode will be used to instead when type option is disabled")
+        logger.warning(
+            "libvirt-local mode will be used to instead when type option is disabled"
+        )
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         msg_list = ["Error in .* backend"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: type option is disable but another config is ok")
-        logger.warning("libvirt-local mode will be used to instead when type option is disabled")
+        logger.warning(
+            "libvirt-local mode will be used to instead when type option is disabled"
+        )
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["Error in .* backend"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: type option is null but another config is ok")
-        logger.warning("invalid config will be ignored, and run the valid config normally")
+        logger.warning(
+            "invalid config will be ignored, and run the valid config normally"
+        )
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         error_num = 0
         if "RHEL-9" in compose_id:
             error_num = 1
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=1)
-        results.setdefault('step7', []).append(res1)
+        results.setdefault("step7", []).append(res1)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.084440 +0000
@@ -5,91 +5,97 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136587')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136587")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "owner"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: owner option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: owner option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner.* is different|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner.* is different|" "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: skip this step because owner cannot be set to no-ascci")
         # logger.info(">>>step3: owner option is Á∫¢Â∏Ω‚Ç¨467aa value")
         # self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
         # data, tty_output, rhsm_output = self.vw_start()
         # res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
         # results.setdefault('step3', []).append(res1)
 
         logger.info(">>>step4: owner option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner not in|"
-                    "owner.* not set|"
-                    "virt-who can't be started|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|"
+            "owner.* not set|"
+            "virt-who can't be started|"
+            "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: owner option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: owner option is disable but another config is ok")
         logger.warning(
-            "libvirt-local mode will be used to instead when type option is disabled")
+            "libvirt-local mode will be used to instead when type option is disabled"
+        )
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["owner not in|"
-                    "owner.* not set|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|"
+            "owner.* not set|"
+            "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: owner option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.130780 +0000
@@ -2,103 +2,120 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136588')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136588")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
             self.vw_case_skip("virt-who version")
-        '''env was not supported by rhel8 and rhel9 any more'''
+        """env was not supported by rhel8 and rhel9 any more"""
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "env"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: env option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: env option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env.*differs|env.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|env.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: env option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["codec can't decode|Communication with subscription manager failed|env.*differs"]
+        msg_list = [
+            "codec can't decode|Communication with subscription manager failed|env.*differs"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: env option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: env option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: env option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["env not in|env.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: env option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["env not in|env.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         if "stage" in register_type:
-            notes.append("Bug(Step2,Step3,Step4,Step7): Set env to wrong or special or null value, still can sent report normally for stage")
+            notes.append(
+                "Bug(Step2,Step3,Step4,Step7): Set env to wrong or special or null value, still can sent report normally for stage"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530426")
         else:
-            notes.append("Bug(Step4,Step7): Set env to null value, still can sent report normally for sat62/sat63")
+            notes.append(
+                "Bug(Step4,Step7): Set env to null value, still can sent report normally for sat62/sat63"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530290")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.227866 +0000
@@ -2,137 +2,166 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136589')
-        compose_id = self.get_config('rhel_compose')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136589")
+        compose_id = self.get_config("rhel_compose")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "server"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: server option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
- 
+        results.setdefault("step1", []).append(res)
+
         logger.info(">>>step2: server option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Name or service not known|"
-                    "Connection timed out|"
-                    "Failed to connect|"
-                    "Error in .* backend|"
-                    "Invalid server IP address"]
+        msg_list = [
+            "Name or service not known|"
+            "Connection timed out|"
+            "Failed to connect|"
+            "Error in .* backend|"
+            "Invalid server IP address"
+        ]
         if "ahv" in hypervisor_type:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=0, exp_send=0
+            )
         else:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: server option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        if hypervisor_type in ['esx', 'ahv']:
+        if hypervisor_type in ["esx", "ahv"]:
             msg = "Option server needs to be ASCII characters only"
             if "ahv" in hypervisor_type:
                 msg = "Invalid server IP address provided"
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=0, exp_send=0
+            )
             res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
         else:
-            msg_list = ["Name or service not known|"
-                        "Connection timed out|"
-                        "Failed to connect|"
-                        "Error in .* backend|"
-                        "Unable to connect|"
-                        "Unable to login"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            msg_list = [
+                "Name or service not known|"
+                "Connection timed out|"
+                "Failed to connect|"
+                "Error in .* backend|"
+                "Unable to connect|"
+                "Unable to login"
+            ]
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
- 
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+
         logger.info(">>>step4: server option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead when server option is null for libvirt-remote")
-            msg_list = ["Name or service not known|"
-                        "Connection timed out|"
-                        "Failed to connect|"
-                        "Error in .* backend"]
+            logger.warning(
+                "libvirt-local mode will be used to instead when server option is null for libvirt-remote"
+            )
+            msg_list = [
+                "Name or service not known|"
+                "Connection timed out|"
+                "Failed to connect|"
+                "Error in .* backend"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg_list = ["SERVER.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: server option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead when server option is disabled for libvirt-remote")
-            msg_list = ["Name or service not known|"
-                        "Connection timed out|"
-                        "Failed to connect|"
-                        "Error in .* backend"]
+            logger.warning(
+                "libvirt-local mode will be used to instead when server option is disabled for libvirt-remote"
+            )
+            msg_list = [
+                "Name or service not known|"
+                "Connection timed out|"
+                "Failed to connect|"
+                "Error in .* backend"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg_list = ["SERVER.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
- 
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
+
         logger.info(">>>step6: server option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["SERVER.* not set|Error in .* backend|No host supplied"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
- 
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
+
         logger.info(">>>step7: server option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["SERVER.* not set|"
-                    "Error in .* backend|"
-                    "No host supplied|"
-                    "server needs to be set"]
+        msg_list = [
+            "SERVER.* not set|"
+            "Error in .* backend|"
+            "No host supplied|"
+            "server needs to be set"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "esx" in hypervisor_type:
             notes.append("Bug(Step3): server not support non-ascii character")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1727203")
         if hypervisor_type in ("rhevm", "xen", "hyperv"):
-            notes.append("Bug(Step4): Set server to null value, virt-who still can be started")
+            notes.append(
+                "Bug(Step4): Set server to null value, virt-who still can be started"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1516209")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py	2023-03-06 06:24:59.267364 +0000
@@ -2,68 +2,77 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136592')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136592")
         config = self.get_hypervisor_config()
-        hypervisor_type = config['type']
-        hypervisor_password = config['password']
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        hypervisor_type = config["type"]
+        hypervisor_password = config["password"]
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         msg_list = '"encrypted_password" cannot be decrypted|'
-        encrypted_pwd_null = ''
-        encrypted_pwd_wrong = 'xxxxxx'
-        steps = {'step2': encrypted_pwd_null, 'step3': encrypted_pwd_wrong}
+        encrypted_pwd_null = ""
+        encrypted_pwd_wrong = "xxxxxx"
+        steps = {"step2": encrypted_pwd_null, "step3": encrypted_pwd_wrong}
 
         # Case Steps
         logger.info(">>>step1: encrypted_password is good value")
         encrypted_pwd = self.vw_encrypted(hypervisor_password, "-p")
         self.vw_option_disable("password", filename=config_file)
         self.vw_option_add("encrypted_password", encrypted_pwd, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
-        
-        for step, value in sorted(steps.items(), key=lambda item:item[0]):
-            logger.info(">>>%s: run virt-who with encrypted_password='%s'" % (step, value))
-            self.vw_option_update_value("encrypted_password", '%s' % value, config_file)
-            if 'libvirt-remote' in hypervisor_type:
+        results.setdefault("step1", []).append(res)
+
+        for step, value in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>%s: run virt-who with encrypted_password='%s'" % (step, value)
+            )
+            self.vw_option_update_value("encrypted_password", "%s" % value, config_file)
+            if "libvirt-remote" in hypervisor_type:
                 data, tty_output, rhsm_output = self.vw_start(exp_send=1)
                 res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                res2 = 'True'
+                res2 = "True"
             else:
-                data, tty_output, rhsm_output = self.vw_start(exp_send=0, exp_error=True)
-                res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=0, exp_send=0)
+                data, tty_output, rhsm_output = self.vw_start(
+                    exp_send=0, exp_error=True
+                )
+                res1 = self.op_normal_value(
+                    data, exp_error="1|2", exp_thread=0, exp_send=0
+                )
                 res2 = self.vw_msg_search(rhsm_output, msg_list, exp_exist=True)
             logger.info(">>>add another valid extra config")
             config_name_ok = "virtwho-config-ok"
             config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
             self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
-            if 'libvirt-remote' in hypervisor_type:
+            if "libvirt-remote" in hypervisor_type:
                 data, tty_output, rhsm_output = self.vw_start(exp_send=1)
                 res3 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                res4 = 'True'
+                res4 = "True"
             else:
-                data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_error=True)
+                data, tty_output, rhsm_output = self.vw_start(
+                    exp_send=1, exp_error=True
+                )
                 res3 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=1)
                 res4 = self.vw_msg_search(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('{0}'.format(step), []).append(res1)
-            results.setdefault('{0}'.format(step), []).append(res2)
-            results.setdefault('{0}'.format(step), []).append(res3)
-            results.setdefault('{0}'.format(step), []).append(res4)
+            results.setdefault("{0}".format(step), []).append(res1)
+            results.setdefault("{0}".format(step), []).append(res2)
+            results.setdefault("{0}".format(step), []).append(res3)
+            results.setdefault("{0}".format(step), []).append(res4)
             self.fd_delete(self.ssh_host(), config_file_ok)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.308190 +0000
@@ -5,130 +5,143 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136590')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136590")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "username"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        error_msg = ["Unable to login|"
-                     "incorrect user.*|"
-                     "Authentication failure|"
-                     "Authentication failed|"
-                     "Incorrect.*username|"
-                     "Unauthorized|"
-                     "Error.* backend|"
-                     "Permission denied|"
-                     "HTTP Auth Failed"]
+        error_msg = [
+            "Unable to login|"
+            "incorrect user.*|"
+            "Authentication failure|"
+            "Authentication failed|"
+            "Incorrect.*username|"
+            "Unauthorized|"
+            "Error.* backend|"
+            "Permission denied|"
+            "HTTP Auth Failed"
+        ]
 
         # Case Steps
         logger.info(">>>step1: username option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: username option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: username option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
-            pkg = self.pkg_check(self.ssh_host(), 'python-requests').split('-')[2]
-            if pkg[16:21] >= '2.20':
+            pkg = self.pkg_check(self.ssh_host(), "python-requests").split("-")[2]
+            if pkg[16:21] >= "2.20":
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                    data, exp_error="1|2|3", exp_thread=1, exp_send=0
+                )
                 res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
             else:
                 msg = "not in latin1 encoding"
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+                    data, exp_error="1|2|3", exp_thread=0, exp_send=0
+                )
                 res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
         else:
             res1 = self.op_normal_value(
-                data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: username option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
             logger.warning(
-                "libvirt-remote can use sshkey to connect, username is not necessary")
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: username option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
             logger.warning(
-                "libvirt-remote can use sshkey to connect, username is not necessary")
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: username option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt-remote" in hypervisor_type:
             logger.warning(
-                "libvirt-remote can use sshkey to connect, username is not necessary")
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(res1)
+            results.setdefault("step6", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set"]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=1)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: username option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt-remote" in hypervisor_type:
             logger.warning(
-                "libvirt-remote can use sshkey to connect, username is not necessary")
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step7', []).append(res1)
+            results.setdefault("step7", []).append(res1)
         else:
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=1)
             res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step7', []).append(res1)
-            results.setdefault('step7', []).append(res2)
+            results.setdefault("step7", []).append(res1)
+            results.setdefault("step7", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.352163 +0000
@@ -2,131 +2,160 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136591')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136591")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "password"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        msg_list = ["Unable to login|"
-                    "incorrect user.*|"
-                    "Authentication failure|"
-                    "Authentication failed|"
-                    "Incorrect.*username|"
-                    "Unauthorized|"
-                    "Error.* backend|"
-                    "Permission denied|"
-                    "HTTP Auth Failed"]
+        msg_list = [
+            "Unable to login|"
+            "incorrect user.*|"
+            "Authentication failure|"
+            "Authentication failed|"
+            "Incorrect.*username|"
+            "Unauthorized|"
+            "Error.* backend|"
+            "Permission denied|"
+            "HTTP Auth Failed"
+        ]
 
         # Case Steps
         logger.info(">>>step1: password option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: password option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: password option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, "
+                "password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res1)
+            results.setdefault("step3", []).append(res1)
         else:
             if "RHEL-7" in compose_id:
                 msg = "'password': is not in latin1 encoding"
-                res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+                res1 = self.op_normal_value(
+                    data, exp_error="1|2|3", exp_thread=0, exp_send=0
+                )
                 res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
             else:
-                res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                res1 = self.op_normal_value(
+                    data, exp_error="1|2|3", exp_thread=1, exp_send=0
+                )
                 res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: password option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: password option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list_s5 = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list_s5, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: password option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(res1)
+            results.setdefault("step6", []).append(res1)
         else:
             msg_list_s6 = ["PASSWORD.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list_s6, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: password option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step7', []).append(res1)
+            results.setdefault("step7", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step7', []).append(res1)
-            results.setdefault('step7', []).append(res2)
+            results.setdefault("step7", []).append(res1)
+            results.setdefault("step7", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.406757 +0000
@@ -5,79 +5,85 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136627')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136627")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
         self.vw_option_disable("hostname", "/etc/rhsm/rhsm.conf")
 
         # Case Steps
         try:
-            logger.info(">>>step1: run virt-who with rhsm_hostname, rhsm_port, "
-                        "rhsm_prefix good value")
+            logger.info(
+                ">>>step1: run virt-who with rhsm_hostname, rhsm_port, "
+                "rhsm_prefix good value"
+            )
             self.vw_option_add("rhsm_hostname", register_server, config_file)
             self.vw_option_add("rhsm_port", "443", config_file)
             self.vw_option_add("rhsm_prefix", register_prefix, config_file)
             self.vw_option_add("rhsm_username", register_username, config_file)
             self.vw_option_add("rhsm_password", register_password, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(res)
+            results.setdefault("step1", []).append(res)
 
             logger.info(">>>step2: run virt-who with rhsm_hostname=xxxxxx")
             self.vw_option_update_value("rhsm_hostname", "xxxxxx", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             error_num = 1
-            if 'RHEL-9' in compose_id:
+            if "RHEL-9" in compose_id:
                 error_num = 2
-            res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error=error_num, exp_thread=1, exp_send=0
+            )
             res2 = self.vw_msg_search(rhsm_output, "Name or service not known")
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
             logger.info(">>>step3: run virt-who with rhsm_hostname null value")
-            msg_list = ["Server error attempting a GET to /rhsm/status/|"
-                        "Communication with subscription manager failed"]
+            msg_list = [
+                "Server error attempting a GET to /rhsm/status/|"
+                "Communication with subscription manager failed"
+            ]
             self.vw_option_update_value("rhsm_hostname", " ", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
             logger.info(">>>step4: run virt-who with rhsm_hostname disable")
             self.vw_option_disable("rhsm_hostname", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         except:
-            results.setdefault('step', []).append(False)
+            results.setdefault("step", []).append(False)
             pass
 
         finally:
             self.vw_option_enable("hostname", "/etc/rhsm/rhsm.conf")
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.434889 +0000
@@ -2,71 +2,73 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136628')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136628")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
         self.vw_option_disable("port", "/etc/rhsm/rhsm.conf")
 
         # Case Steps
         try:
-            logger.info(">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value")
+            logger.info(
+                ">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value"
+            )
             self.vw_option_add("rhsm_hostname", register_server, config_file)
             self.vw_option_add("rhsm_port", "443", config_file)
             self.vw_option_add("rhsm_prefix", register_prefix, config_file)
             self.vw_option_add("rhsm_username", register_username, config_file)
             self.vw_option_add("rhsm_password", register_password, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(res)
+            results.setdefault("step1", []).append(res)
 
             logger.info(">>>step2: run virt-who with rhsm_port=123")
             self.vw_option_update_value("rhsm_port", "123", config_file)
             data, tty_output, rhsm_output = self.vw_start()
-            res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
-            error_msg = ["Connection refused|"
-                         "Connection timed out"]
+            res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
+            error_msg = ["Connection refused|" "Connection timed out"]
             res2 = self.msg_validation(rhsm_output, error_msg)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
             logger.info(">>>step3: run virt-who with rhsm_port null value")
             self.vw_option_update_value("rhsm_port", " ", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res1)
+            results.setdefault("step3", []).append(res1)
 
             logger.info(">>>step4: run virt-who with rhsm_port disable")
             self.vw_option_disable("rhsm_port", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
 
         except:
-            results.setdefault('step', []).append(False)
+            results.setdefault("step", []).append(False)
             pass
 
         finally:
             self.vw_option_enable("port", "/etc/rhsm/rhsm.conf")
 
would reformat /tmp/lint/tests/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.540257 +0000
@@ -5,77 +5,81 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137169')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137169")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
         self.vw_option_disable("prefix", "/etc/rhsm/rhsm.conf")
-        server_type = self.get_config('register_type')
+        server_type = self.get_config("register_type")
 
         # Case Steps
         try:
-            logger.info(">>>step1: run virt-who with rhsm_hostname, "
-                        "rhsm_port, rhsm_prefix good value")
+            logger.info(
+                ">>>step1: run virt-who with rhsm_hostname, "
+                "rhsm_port, rhsm_prefix good value"
+            )
             self.vw_option_add("rhsm_hostname", register_server, config_file)
             self.vw_option_add("rhsm_port", "443", config_file)
             self.vw_option_add("rhsm_prefix", register_prefix, config_file)
             self.vw_option_add("rhsm_username", register_username, config_file)
             self.vw_option_add("rhsm_password", register_password, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(res)
+            results.setdefault("step1", []).append(res)
 
             logger.info(">>>step2: run virt-who with rhsm_prefix=/xxx")
             self.vw_option_update_value("rhsm_prefix", "/xxx", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
 
             logger.info(">>>step3: run virt-who with rhsm_prefix null value")
             self.vw_option_update_value("rhsm_prefix", " ", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             if "stage" in server_type:
                 res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step3', []).append(res1)
+                results.setdefault("step3", []).append(res1)
             else:
                 res1 = self.op_normal_value(
-                        data, exp_error="1|2", exp_thread=1, exp_send=0)
-                res2 = self.vw_msg_search(rhsm_output, 'HTTP error', exp_exist=True)
-                results.setdefault('step3', []).append(res1)
-                results.setdefault('step3', []).append(res2)
+                    data, exp_error="1|2", exp_thread=1, exp_send=0
+                )
+                res2 = self.vw_msg_search(rhsm_output, "HTTP error", exp_exist=True)
+                results.setdefault("step3", []).append(res1)
+                results.setdefault("step3", []).append(res2)
 
             logger.info(">>>step4: run virt-who with rhsm_prefix disable")
             self.vw_option_disable("rhsm_prefix", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             if "stage" in server_type:
                 res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step3', []).append(res1)
+                results.setdefault("step3", []).append(res1)
             else:
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2", exp_thread=1, exp_send=0)
-                res2 = self.vw_msg_search(rhsm_output, 'HTTP error', exp_exist=True)
-                results.setdefault('step3', []).append(res1)
-                results.setdefault('step3', []).append(res2)
+                    data, exp_error="1|2", exp_thread=1, exp_send=0
+                )
+                res2 = self.vw_msg_search(rhsm_output, "HTTP error", exp_exist=True)
+                results.setdefault("step3", []).append(res1)
+                results.setdefault("step3", []).append(res2)
 
         finally:
             self.vw_option_enable("prefix", "/etc/rhsm/rhsm.conf")
 
         # Case Result
would reformat /tmp/lint/tests/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.605548 +0000
@@ -5,29 +5,29 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136632')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136632")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
 
         # Case Steps
         logger.info(">>>step1: run virt-who with rhsm_encrypted_password good value")
         encrypted_value = self.vw_encrypted(register_password)
@@ -36,20 +36,20 @@
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_encrypted_password", encrypted_value, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with rhsm_encrypted_password=xxxxxx")
         error_msg = "Communication with subscription manager failed"
         self.vw_option_update_value("rhsm_encrypted_password", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
+        res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: skip this step")
         # logger.info(">>>step3: run virt-who with rhsm_encrypted_password=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ")
         # self.vw_option_update_value("rhsm_encrypted_password", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", config_file)
         # data, tty_output, rhsm_output = self.vw_start()
@@ -60,12 +60,12 @@
 
         logger.info(">>>step4: run virt-who with rhsm_encrypted_password null value")
         error_msg = 'Option "rhsm_encrypted_password" cannot be decrypted'
         self.vw_option_update_value("rhsm_encrypted_password", " ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
+        res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.633526 +0000
@@ -5,86 +5,89 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136631')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136631")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
 
         # Case Steps
-        logger.info(">>>step1: run virt-who with rhsm_hostname, "
-                    "rhsm_port, rhsm_prefix good value")
+        logger.info(
+            ">>>step1: run virt-who with rhsm_hostname, "
+            "rhsm_port, rhsm_prefix good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with rhsm_password=xxxxxx")
         error_msg = "Communication with subscription manager failed"
         self.vw_option_update_value("rhsm_password", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: run virt-who with rhsm_password=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ")
-        '''Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ password is supported by candlepin'''
+        """Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ password is supported by candlepin"""
         self.vw_option_update_value("rhsm_password", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "RHEL-7" in compose_id:
             msg = "not in latin1 encoding"
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=0, exp_send=0)
             res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
         else:
-            msg_list = ["codec can't decode|"
-                        "Communication with subscription manager failed"]
+            msg_list = [
+                "codec can't decode|" "Communication with subscription manager failed"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: run virt-who with rhsm_password null value")
         error_msg = "system is not registered or you are not root"
         self.vw_option_update_value("rhsm_password", " ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         error_num = 1
-        if 'RHEL-9' in compose_id:
+        if "RHEL-9" in compose_id:
             error_num = 2
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: run virt-who with rhsm_password disable")
         self.vw_option_disable("rhsm_password", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.654263 +0000
@@ -5,94 +5,98 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136630')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136630")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
 
         # Case Steps
-        logger.info(">>>step1: run virt-who with rhsm_hostname, rhsm_port, "
-                    "rhsm_prefix good value")
+        logger.info(
+            ">>>step1: run virt-who with rhsm_hostname, rhsm_port, "
+            "rhsm_prefix good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with rhsm_username=xxxxxx")
         error_msg = "Communication with subscription manager failed"
         self.vw_option_update_value("rhsm_username", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: run virt-who with rhsm_username=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ")
-        '''Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ username is not supported by candlepin'''
-        msg_list = ["codec can't decode|"
-                    "Communication with subscription manager failed"]
+        """Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ username is not supported by candlepin"""
+        msg_list = [
+            "codec can't decode|" "Communication with subscription manager failed"
+        ]
         self.vw_option_update_value("rhsm_username", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "RHEL-7" in compose_id:
-            pkg = self.pkg_check(self.ssh_host(), 'python-requests').split('-')[2]
-            if pkg[16:21] >= '2.20':
+            pkg = self.pkg_check(self.ssh_host(), "python-requests").split("-")[2]
+            if pkg[16:21] >= "2.20":
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2", exp_thread=1, exp_send=0)
+                    data, exp_error="1|2", exp_thread=1, exp_send=0
+                )
                 res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
             else:
                 msg = "not in latin1 encoding"
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2", exp_thread=0, exp_send=0)
+                    data, exp_error="1|2", exp_thread=0, exp_send=0
+                )
                 res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
         else:
-            res1 = self.op_normal_value(
-                data, exp_error="1|2", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: run virt-who with rhsm_username null value")
         error_msg = "system is not registered or you are not root"
         self.vw_option_update_value("rhsm_username", " ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         error_num = 1
-        if 'RHEL-9' in compose_id:
+        if "RHEL-9" in compose_id:
             error_num = 2
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: run virt-who with rhsm_username disable")
         self.vw_option_disable("rhsm_username", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py	2023-03-06 06:24:59.690213 +0000
@@ -2,51 +2,63 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136635')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136635")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # Case Steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts".format(
+                    step, option
+                )
+            )
             self.vw_option_add("hypervisor_id", option, config_file)
             if option == "hwuuid":
                 hypervisorId = host_hwuuid
             elif option == "hostname":
                 hypervisorId = host_name
             else:
                 hypervisorId = host_uuid
-            wildcard = hypervisorId[:3] + '*' + hypervisorId[4:]
-            sub_steps = {'step1':hypervisorId, 'step2': "*", 'step3': wildcard, 'step4': wildcard}
-            for key, value in sorted(sub_steps.items(),key=lambda item:item[0]):
+            wildcard = hypervisorId[:3] + "*" + hypervisorId[4:]
+            sub_steps = {
+                "step1": hypervisorId,
+                "step2": "*",
+                "step3": wildcard,
+                "step4": wildcard,
+            }
+            for key, value in sorted(sub_steps.items(), key=lambda item: item[0]):
                 if key == "step4":
-                    logger.info("++++ Set filter_hosts=* and exclude_hosts=%s ++++" % value)
+                    logger.info(
+                        "++++ Set filter_hosts=* and exclude_hosts=%s ++++" % value
+                    )
                     self.vw_option_add("filter_hosts", "*", config_file)
                     self.vw_option_add("exclude_hosts", value, config_file)
                 else:
                     logger.info("++++ Set filter_hosts={0} ++++".format(value))
                     self.vw_option_add("filter_hosts", value, config_file)
would reformat /tmp/lint/tests/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py	2023-03-06 06:24:59.715247 +0000
@@ -2,33 +2,38 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136639')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136639")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: add xxxxxx=aaa to config file")
         self.vw_option_add("xxxxxx", "aaa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(rhsm_output, 'Ignoring unknown configuration option "xxxxxx"', exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        res2 = self.vw_msg_search(
+            rhsm_output,
+            'Ignoring unknown configuration option "xxxxxx"',
+            exp_exist=True,
+        )
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py	2023-03-06 06:24:59.766524 +0000
@@ -2,43 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136711')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136711")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         invalid_file = "/etc/virt-who.d/{0}.conf.txt".format(config_name)
 
         # Case Steps
         logger.info(">>>step1: run virt-who with the expected config file name")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with the unexpected config file name")
-        logger.warning("libvirt-local mode will be used to instead when no valid config")
+        logger.warning(
+            "libvirt-local mode will be used to instead when no valid config"
+        )
         cmd = "mv {0} {1}".format(config_file, invalid_file)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="rename file")
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, ["Error in .* backend"], exp_exist=True)
-        res3 = self.vw_msg_search(rhsm_output, "not have any .*conf.* files but is not empty", exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
-        results.setdefault('step2', []).append(res3)
+        res3 = self.vw_msg_search(
+            rhsm_output, "not have any .*conf.* files but is not empty", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
+        results.setdefault("step2", []).append(res3)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py	2023-03-06 06:24:59.816999 +0000
@@ -2,50 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136712')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136712")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_port = '443'
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_port = "443"
+        register_prefix = register_config["prefix"]
 
         # Case Steps
-        logger.info(">>>step1: run virt-who when all the options enabled with single quotes")
+        logger.info(
+            ">>>step1: run virt-who when all the options enabled with single quotes"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", register_port, config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
-        cmd =  r'''sed -i "s|=\(.*\)|='\1'|g" {0}'''.format(config_file)
+        cmd = r"""sed -i "s|=\(.*\)|='\1'|g" {0}""".format(config_file)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="update file")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: run virt-who when all the options enabled with double quotes")
-        cmd =  r'''sed -i "s|'|\"|g" {0}'''.format(config_file)
+        logger.info(
+            ">>>step2: run virt-who when all the options enabled with double quotes"
+        )
+        cmd = r"""sed -i "s|'|\"|g" {0}""".format(config_file)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="update file")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py	2023-03-06 06:24:59.855935 +0000
@@ -2,61 +2,80 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136636')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('esx'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136636")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("esx"):
             self.vw_case_skip(hypervisor_type)
         # Bug 1461272 only be fixed in rhel8, so rhel7 doesn't support this function
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
 
         # Case Steps
-        logger.info(">>>step1: run virt-who with filter_host_parents= to check the domain_id")
+        logger.info(
+            ">>>step1: run virt-who with filter_host_parents= to check the domain_id"
+        )
         self.vw_option_add("filter_host_parents", "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
-        domain_id = re.findall(r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid), rhsm_output)[-1]
+        results.setdefault("step1", []).append(res)
+        domain_id = re.findall(
+            r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid),
+            rhsm_output,
+        )[-1]
         logger.info("Succeeded to find: {0}:{1}:{0}".format(host_hwuuid, domain_id))
         self.vw_option_del("filter_host_parents", config_file)
 
-        steps = {'step2':'uuid', 'step3':'hostname', 'step4':'hwuuid'}
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to with hypervisor_id={1} and set filter_host_parents".format(step, option))
+        steps = {"step2": "uuid", "step3": "hostname", "step4": "hwuuid"}
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to with hypervisor_id={1} and set filter_host_parents".format(
+                    step, option
+                )
+            )
             self.vw_option_add("hypervisor_id", option, config_file)
             if option == "hwuuid":
                 hypervisorId = host_hwuuid
             elif option == "hostname":
                 hypervisorId = host_name
             else:
                 hypervisorId = host_uuid
-            wildcard = domain_id[:3] + '*' + domain_id[4:]
-            sub_steps = {'step1':domain_id, 'step2': "*", 'step3': wildcard, 'step4': wildcard}
-            for key, value in sorted(sub_steps.items(),key=lambda item:item[0]):
+            wildcard = domain_id[:3] + "*" + domain_id[4:]
+            sub_steps = {
+                "step1": domain_id,
+                "step2": "*",
+                "step3": wildcard,
+                "step4": wildcard,
+            }
+            for key, value in sorted(sub_steps.items(), key=lambda item: item[0]):
                 if key == "step4":
-                    logger.info("++++ Set filter_host_parents={0} and exclude_host_parents=* ++++".format(value))
+                    logger.info(
+                        "++++ Set filter_host_parents={0} and exclude_host_parents=* ++++".format(
+                            value
+                        )
+                    )
                     self.vw_option_add("exclude_host_parents", "*", config_file)
                     self.vw_option_add("filter_host_parents", value, config_file)
                 else:
                     logger.info("++++ Set filter_host_parents={0} ++++".format(value))
                     self.vw_option_add("filter_host_parents", value, config_file)
would reformat /tmp/lint/tests/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py	2023-03-06 06:24:59.870388 +0000
@@ -2,43 +2,58 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136731')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136731")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: interval is null value in /etc/virt-who.conf")
         self.vw_option_enable("interval", virtwho_conf)
-        self.vw_option_update_value("interval", '', virtwho_conf)
+        self.vw_option_update_value("interval", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)
-        results.setdefault('step1', []).append(res)
+        res = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: check virt-who firstly run interval in /etc/sysconfig/virt-who")
-        self.vw_option_update_value("interval", '120', virtwho_conf)
-        self.vw_option_enable("VIRTWHO_INTERVAL", '/etc/sysconfig/virt-who')
-        self.vw_option_update_value("VIRTWHO_INTERVAL", '60', '/etc/sysconfig/virt-who')
+        logger.info(
+            ">>>step2: check virt-who firstly run interval in /etc/sysconfig/virt-who"
+        )
+        self.vw_option_update_value("interval", "120", virtwho_conf)
+        self.vw_option_enable("VIRTWHO_INTERVAL", "/etc/sysconfig/virt-who")
+        self.vw_option_update_value("VIRTWHO_INTERVAL", "60", "/etc/sysconfig/virt-who")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_loopnum=1, exp_looptime=60)
-        results.setdefault('step2', []).append(res)
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
+        results.setdefault("step2", []).append(res)
 
         # Case Result
         notes = list()
-        notes.append("Bug(Step1): failed to report mappings if configure 'interval=' value to null")
+        notes.append(
+            "Bug(Step1): failed to report mappings if configure 'interval=' value to null"
+        )
         notes.append("BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1523482")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py
--- /tmp/lint/tests/tier2/tc_2036_validate_global_debug_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2036_validate_global_debug_by_virtwho_conf.py	2023-03-06 06:24:59.917008 +0000
@@ -2,30 +2,31 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136721')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136721")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step: run with debug value is null in /etc/virt-who.conf")
         self.vw_option_enable("debug", virtwho_conf)
-        self.vw_option_update_value("debug", '', virtwho_conf)
+        self.vw_option_update_value("debug", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step', []).append(res1)
-        results.setdefault('step', []).append(res2)
+        results.setdefault("step", []).append(res1)
+        results.setdefault("step", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2036_validate_global_debug_by_virtwho_conf.py
--- /tmp/lint/tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:24:59.931764 +0000
@@ -2,92 +2,93 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136637')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136637")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
 
         # Case Steps
         logger.info(">>>step1: run virt-who with filter_hosts=''")
         self.vw_option_add("filter_hosts", r"''", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step1', []).append(s2)
+        results.setdefault("step1", []).append(s2)
 
         logger.info('>>>step2: run virt-who with filter_hosts=""')
-        self.vw_option_update_value("filter_hosts", r'\"\"', config_file)
+        self.vw_option_update_value("filter_hosts", r"\"\"", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with filter_hosts='host_uuid'")
         self.vw_option_update_value("filter_hosts", r"'%s'" % host_uuid, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(s2)
+        results.setdefault("step1", []).append(s2)
 
         logger.info('>>>step4: run virt-who with filter_hosts="host_uuid"')
-        self.vw_option_update_value("filter_hosts", r'\"%s\"' % host_uuid, config_file)
+        self.vw_option_update_value("filter_hosts", r"\"%s\"" % host_uuid, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
         self.vw_option_del("filter_hosts", config_file)
 
         logger.info(">>>step5: run virt-who with exclude_hosts=''")
         self.vw_option_add("exclude_hosts", r"''", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step5', []).append(s1)
+        results.setdefault("step5", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step5', []).append(s2)
+        results.setdefault("step5", []).append(s2)
 
         logger.info('>>>step6: run virt-who with exclude_hosts=""')
-        self.vw_option_update_value("exclude_hosts", r'\"\"', config_file)
+        self.vw_option_update_value("exclude_hosts", r"\"\"", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step6', []).append(s1)
+        results.setdefault("step6", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step6', []).append(s2)
+        results.setdefault("step6", []).append(s2)
 
         logger.info(">>>step7: run virt-who with exclude_hosts='host_uuid'")
         self.vw_option_update_value("exclude_hosts", r"'%s'" % host_uuid, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step7', []).append(s1)
+        results.setdefault("step7", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step7', []).append(s2)
+        results.setdefault("step7", []).append(s2)
 
         logger.info('>>>step8: run virt-who with exclude_hosts="host_uuid"')
-        self.vw_option_update_value("exclude_hosts", r'\"%s\"' % host_uuid, config_file)
+        self.vw_option_update_value("exclude_hosts", r"\"%s\"" % host_uuid, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step8', []).append(s1)
+        results.setdefault("step8", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step8', []).append(s2)
+        results.setdefault("step8", []).append(s2)
         self.vw_option_del("exclude_hosts", config_file)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py	2023-03-06 06:24:59.952766 +0000
@@ -2,30 +2,31 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136719')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136719")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step: run with oneshot value is null")
         self.vw_option_enable("oneshot", virtwho_conf)
-        self.vw_option_update_value("oneshot", '', virtwho_conf)
+        self.vw_option_update_value("oneshot", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step', []).append(res)
+        results.setdefault("step", []).append(res)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py
--- /tmp/lint/tests/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py	2023-03-06 06:24:59.964592 +0000
@@ -5,57 +5,63 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136716')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136716")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        register_type = register_config["type"]
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        reporter_id_null = ''
+        reporter_id_null = ""
         reporter_id_non_ascii = "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ"
-        steps = {'step2': reporter_id_null,
-                 'step3': reporter_id_non_ascii}
+        steps = {"step2": reporter_id_null, "step3": reporter_id_non_ascii}
         if "satellite" in register_type:
-            del steps['step3']
+            del steps["step3"]
 
         # Case Steps
         logger.info(">>>step1: get default reporter_id")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        default_reporter_id = data['reporter_id']
+        default_reporter_id = data["reporter_id"]
         logger.info("default reporter_id is {0}".format(default_reporter_id))
         results.setdefault("step1", []).append(res)
 
         for step, value in sorted(steps.items(), key=lambda item: item[0]):
-            logger.info(">>>{0}: run virt-who to check reporter_id({1})".format(
-                step, value))
+            logger.info(
+                ">>>{0}: run virt-who to check reporter_id({1})".format(step, value)
+            )
             self.vw_option_enable("reporter_id", virtwho_conf)
             self.vw_option_update_value("reporter_id", value, virtwho_conf)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
-            data['reporter_id'] = data['reporter_id']
+            data["reporter_id"] = data["reporter_id"]
             if value == reporter_id_null:
                 value = default_reporter_id
-            if value == data['reporter_id']:
-                logger.info("Succeeded to check, reporter_id({0}) is expected".format(
-                    data['reporter_id']))
+            if value == data["reporter_id"]:
+                logger.info(
+                    "Succeeded to check, reporter_id({0}) is expected".format(
+                        data["reporter_id"]
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.error("Failed to check, reporter_id({0}) is not expected".format(
-                    data['reporter_id']))
+                logger.error(
+                    "Failed to check, reporter_id({0}) is not expected".format(
+                        data["reporter_id"]
+                    )
+                )
                 results.setdefault(step, []).append(False)
 
         # Case Result
         notes = list()
         notes.append("Bug(step2): virt-who still uses null value for reporter_id")
would reformat /tmp/lint/tests/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py
--- /tmp/lint/tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py	2023-03-06 06:25:00.045013 +0000
@@ -2,50 +2,53 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136731')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136731")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
         self.vw_option_enable("[defaults]", virtwho_conf)
         self.vw_option_enable("hypervisor_id", virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
 
         # Case Steps
-        logger.info(">>>step: hypervisor_id in /etc/virt-who.d/x.conf has high priority")
-        self.vw_option_update_value('hypervisor_id', 'uuid', virtwho_conf)
-        self.vw_option_add('hypervisor_id', 'hostname', config_file)
+        logger.info(
+            ">>>step: hypervisor_id in /etc/virt-who.d/x.conf has high priority"
+        )
+        self.vw_option_update_value("hypervisor_id", "uuid", virtwho_conf)
+        self.vw_option_add("hypervisor_id", "hostname", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step', []).append(res)
+        results.setdefault("step", []).append(res)
         if host_name in data[register_owner].keys():
             logger.info("Succeeded to search hypervisorId:{0}".format(host_name))
-            results.setdefault('step', []).append(True)
+            results.setdefault("step", []).append(True)
         else:
             logger.error("Failed to search hypervisorId:{0}".format(host_name))
-            results.setdefault('step', []).append(False)
+            results.setdefault("step", []).append(False)
         if "satellite" in register_type:
             self.vw_web_host_delete(host_name, host_uuid)
         if "stage" in register_type:
             self.stage_consumer_clean(self.ssh_host(), register_config)
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py
--- /tmp/lint/tests/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py	2023-03-06 06:25:00.078779 +0000
@@ -2,65 +2,66 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137014')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137014")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name_1 = "virtwho-config-1"
         config_file_1 = "/root/{0}.conf".format(config_name_1)
         self.vw_etc_d_mode_create(config_name_1, config_file_1)
         config_name_2 = "virtwho-config-2"
         config_file_2 = "/etc/virt-who.d/{0}.conf".format(config_name_2)
         self.vw_etc_d_mode_create(config_name_2, config_file_2)
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # Case Steps
         logger.info(">>>step1: 'configs' is valid file")
-        self.vw_option_enable('configs', virtwho_conf)
-        self.vw_option_update_value('configs', config_file_1, virtwho_conf)
+        self.vw_option_enable("configs", virtwho_conf)
+        self.vw_option_update_value("configs", config_file_1, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
         # check virt-who didn't run config_file_2
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
         logger.info("Expected mapping info num: 1 for sat63 above and stage")
-        results.setdefault('step1', []).append(num == 1)
+        results.setdefault("step1", []).append(num == 1)
 
         logger.info(">>>step2: 'configs' is null value")
-        self.vw_option_update_value('configs', '', virtwho_conf)
+        self.vw_option_update_value("configs", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res1)
+        results.setdefault("step2", []).append(res1)
         # check virt-who has run config_file_2
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
         logger.info("Expected mapping info num: 1 for sat63 above and stage")
-        results.setdefault('step2', []).append(num == 1)
+        results.setdefault("step2", []).append(num == 1)
 
         logger.info(">>>step3: 'configs' is wrong value")
-        self.vw_option_update_value('configs', 'xxxxxx', virtwho_conf)
-        error_msg_1 = 'Unable to read configuration file'
-        error_msg_2 = 'No valid configuration file provided using -c/--config'
+        self.vw_option_update_value("configs", "xxxxxx", virtwho_conf)
+        error_msg_1 = "Unable to read configuration file"
+        error_msg_2 = "No valid configuration file provided using -c/--config"
         data, tty_output, rhsm_output = self.vw_start(exp_send=0, exp_error=True)
         res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg_1, exp_exist=True)
         res3 = self.vw_msg_search(rhsm_output, error_msg_2, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         # Case Result
         self.vw_case_result(results)
--- /tmp/lint/tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py	2023-03-06 06:25:00.079132 +0000
@@ -5,86 +5,98 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136727')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136727")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         self.vw_option_enable("[defaults]", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
+        register_owner = register_config["owner"]
 
         # Case Steps
-        logger.info(">>>step1: disable owner option in /etc/virt-who.d/, "
-                    "set correct owner in /etc/virt-who.conf")
+        logger.info(
+            ">>>step1: disable owner option in /etc/virt-who.d/, "
+            "set correct owner in /etc/virt-who.conf"
+        )
         self.vw_option_disable("owner", config_file)
         self.vw_option_enable("owner", virtwho_conf)
         self.vw_option_update_value("owner", register_owner, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
-        logger.info(">>>step2: disable owner option in /etc/virt-who.d/, "
-                    "set owner=xxxxxx in /etc/virt-who.conf")
+        logger.info(
+            ">>>step2: disable owner option in /etc/virt-who.d/, "
+            "set owner=xxxxxx in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("owner", "xxxxxx", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner.* is different|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner.* is different|" "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: skip this step because owner cannot be set to no-ascci")
         # logger.info(">>>step3: disable owner option in /etc/virt-who.d/, "
         #             "set owner=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ in /etc/virt-who.conf")
         # self.vw_option_update_value("owner", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", virtwho_conf)
         # data, tty_output, rhsm_output = self.vw_start()
         # res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
         # results.setdefault('step3', []).append(res1)
 
-        logger.info(">>>step4: disable owner option in /etc/virt-who.d/, "
-                    "set owner= in /etc/virt-who.conf")
+        logger.info(
+            ">>>step4: disable owner option in /etc/virt-who.d/, "
+            "set owner= in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("owner", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner not in|"
-                    "owner.* not set|"
-                    "virt-who can't be started|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|"
+            "owner.* not set|"
+            "virt-who can't be started|"
+            "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
-        logger.info(">>>step5: correct owner in /etc/virt-who.conf, "
-                    "but wrong owner in /etc/virt-who.d/ config file")
+        logger.info(
+            ">>>step5: correct owner in /etc/virt-who.conf, "
+            "but wrong owner in /etc/virt-who.d/ config file"
+        )
         self.vw_option_update_value("owner", register_owner, virtwho_conf)
         self.vw_option_enable("owner", config_file)
         self.vw_option_update_value("owner", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner.* is different|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner.* is different|" "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
 
 
would reformat /tmp/lint/tests/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py
would reformat /tmp/lint/tests/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py
--- /tmp/lint/tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py	2023-03-06 06:25:00.213187 +0000
@@ -2,88 +2,111 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136724')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136724")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         self.vw_option_enable("[defaults]", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_env = register_config['env']
+        register_env = register_config["env"]
 
         # Case Steps
-        logger.info(">>>step1: disable env option in /etc/virt-who.d/, set correct env in /etc/virt-who.conf")
+        logger.info(
+            ">>>step1: disable env option in /etc/virt-who.d/, set correct env in /etc/virt-who.conf"
+        )
         self.vw_option_disable("env", config_file)
         self.vw_option_enable("env", virtwho_conf)
         self.vw_option_update_value("env", register_env, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
-        logger.info(">>>step2: disable env option in /etc/virt-who.d/, set env=xxxxxx in /etc/virt-who.conf")
+        logger.info(
+            ">>>step2: disable env option in /etc/virt-who.d/, set env=xxxxxx in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("env", "xxxxxx", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env.*differs|env.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|env.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
-        logger.info(">>>step3: disable env option in /etc/virt-who.d/, set env=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ in /etc/virt-who.conf")
+        logger.info(
+            ">>>step3: disable env option in /etc/virt-who.d/, set env=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("env", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["codec can't decode|Communication with subscription manager failed|env.*differs"]
+        msg_list = [
+            "codec can't decode|Communication with subscription manager failed|env.*differs"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
-        logger.info(">>>step4: disable env option in /etc/virt-who.d/, set env= in /etc/virt-who.conf")
+        logger.info(
+            ">>>step4: disable env option in /etc/virt-who.d/, set env= in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("env", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
-        logger.info(">>>step5: correct env in /etc/virt-who.conf, but wrong env in /etc/virt-who.d/ config file")
+        logger.info(
+            ">>>step5: correct env in /etc/virt-who.conf, but wrong env in /etc/virt-who.d/ config file"
+        )
         self.vw_option_update_value("env", register_env, virtwho_conf)
         self.vw_option_enable("env", config_file)
         self.vw_option_update_value("env", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env.*differs|env.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|env.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         notes = list()
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         if "stage" in register_type:
-            notes.append("Bug(Step2,Step3,Step4,Step5): Set env to wrong or special or null value, still can sent report normally for stage")
+            notes.append(
+                "Bug(Step2,Step3,Step4,Step5): Set env to wrong or special or null value, still can sent report normally for stage"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530426")
         else:
-            notes.append("Bug(Step4): Set env to null value, still can sent report normally for sat62/sat63")
+            notes.append(
+                "Bug(Step4): Set env to null value, still can sent report normally for sat62/sat63"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530290")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tests/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py
--- /tmp/lint/tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py	2023-03-06 06:25:00.259510 +0000
@@ -2,61 +2,94 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137110')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137110")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        ssh_sat = register_config['ssh_sat']
-        default_org = 'Default_Organization'
-        extra_org = 'Virtwho_Org'
-        org_list = {'step1':default_org, 'step2':extra_org}
+        ssh_sat = register_config["ssh_sat"]
+        default_org = "Default_Organization"
+        extra_org = "Virtwho_Org"
+        org_list = {"step1": default_org, "step2": extra_org}
 
-        for step, org in sorted(org_list.items(), key=lambda item:item[0]):
+        for step, org in sorted(org_list.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run with owner={1}".format(step, org))
-            host_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
-            if 'libvirt-local' not in hypervisor_type and 'vdsm' not in hypervisor_type:
-                self.vw_option_update_value('owner', org, config_file)
+            host_id = self.satellite_host_id(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
+            if "libvirt-local" not in hypervisor_type and "vdsm" not in hypervisor_type:
+                self.vw_option_update_value("owner", org, config_file)
             if host_id is not None and host_id != "":
                 self.vw_web_host_delete(host_name, host_uuid)
             if org == extra_org:
-                register_config['owner'] = extra_org
+                register_config["owner"] = extra_org
             self.system_unregister(self.ssh_host())
             self.system_register(self.ssh_host(), register_type, register_config)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             if org == default_org:
-                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True)
-                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=False)
+                res2 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    default_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=True,
+                )
+                res3 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    extra_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=False,
+                )
             else:
-                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=False)
-                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True)
+                res2 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    default_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=False,
+                )
+                res3 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    extra_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=True,
+                )
             results.setdefault(step, []).append(res1)
             results.setdefault(step, []).append(res2)
             results.setdefault(step, []).append(res3)
 
         logger.info(">>>step finally: delete host and hypervisor from extra_org")
-        host_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
+        host_id = self.satellite_host_id(
+            self.ssh_host(), register_config, host_name, host_uuid
+        )
         if host_id is not None and host_id != "":
             self.vw_web_host_delete(host_name, host_uuid)
         self.system_unregister(self.ssh_host())
 
         # Case Result
would reformat /tmp/lint/tests/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py
--- /tmp/lint/tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py	2023-03-06 06:25:00.405795 +0000
@@ -2,35 +2,36 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137111')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137111")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if 'stage' in register_type:
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         self.system_unregister(self.ssh_host())
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
-        ssh_sat = register_config['ssh_sat']
-        default_org = 'Default_Organization'
-        extra_org = 'Virtwho_Org'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
+        ssh_sat = register_config["ssh_sat"]
+        default_org = "Default_Organization"
+        extra_org = "Virtwho_Org"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
@@ -38,48 +39,86 @@
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
 
-        org_list = {'step1':default_org, 'step2':extra_org}
-        for step, org in sorted(org_list.items(), key=lambda item:item[0]):
+        org_list = {"step1": default_org, "step2": extra_org}
+        for step, org in sorted(org_list.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run with owner={1}".format(step, org))
-            self.vw_option_update_value('owner', '{0}'.format(org), config_file)
-            host_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
+            self.vw_option_update_value("owner", "{0}".format(org), config_file)
+            host_id = self.satellite_host_id(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
             if host_id is not None and host_id != "":
                 self.vw_web_host_delete(host_name, host_uuid)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             if org == default_org:
-                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True)
-                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=False)
+                res2 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    default_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=True,
+                )
+                res3 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    extra_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=False,
+                )
             else:
-                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=False)
-                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True)
+                res2 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    default_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=False,
+                )
+                res3 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    extra_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=True,
+                )
             results.setdefault(step, []).append(res1)
             results.setdefault(step, []).append(res2)
             results.setdefault(step, []).append(res3)
 
-        logger.info(">>>step3: run with owner=%s and owner=%s" % (default_org, extra_org))
+        logger.info(
+            ">>>step3: run with owner=%s and owner=%s" % (default_org, extra_org)
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         config_name_2 = "virtwho-config-2"
         config_file_2 = "/etc/virt-who.d/{0}.conf".format(config_name_2)
         cmd = "cp {0} {1}".format(config_file, config_file_2)
-        ret, output = self.runcmd(cmd, self.ssh_host(), desc='create config_file_2')
-        self.vw_option_update_value('[.*]', '[config_2]', config_file_2)
-        self.vw_option_update_value('owner', '{0}'.format(default_org), config_file)
-        self.vw_option_update_value('owner', '{0}'.format(extra_org), config_file_2)
+        ret, output = self.runcmd(cmd, self.ssh_host(), desc="create config_file_2")
+        self.vw_option_update_value("[.*]", "[config_2]", config_file_2)
+        self.vw_option_update_value("owner", "{0}".format(default_org), config_file)
+        self.vw_option_update_value("owner", "{0}".format(extra_org), config_file_2)
         data, tty_output, rhsm_output = self.vw_start(exp_send=2)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=2)
-        res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True)
-        res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.satellite_hosts_search(
+            ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True
+        )
+        res3 = self.satellite_hosts_search(
+            ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step finally: delete host/hypervisor from webui")
-        host_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
+        host_id = self.satellite_host_id(
+            self.ssh_host(), register_config, host_name, host_uuid
+        )
         if host_id is not None and host_id != "":
             self.vw_web_host_delete(host_name, host_uuid)
         self.vw_web_host_delete(host_name, host_uuid)
         self.system_unregister(self.ssh_host())
 
would reformat /tmp/lint/tests/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py
--- /tmp/lint/tests/tier2/tc_2044_subscribe_guest_with_activation_key.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2044_subscribe_guest_with_activation_key.py	2023-03-06 06:25:00.429303 +0000
@@ -5,129 +5,152 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137100')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137100")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         register_config = self.get_register_config()
-        ssh_sat = register_config['ssh_sat']
-        default_org = register_config['owner']
-        vdc_phys = register_config['vdc']
-        vdc_virt = register_config['vdc_bonus']
-        limit_sku = register_config['limit']
+        ssh_sat = register_config["ssh_sat"]
+        default_org = register_config["owner"]
+        vdc_phys = register_config["vdc"]
+        vdc_virt = register_config["vdc_bonus"]
+        limit_sku = register_config["limit"]
         phys_vdc_sku = self.system_sku_attr(self.ssh_host(), vdc_phys, "physical")
         phys_limit_sku = self.system_sku_attr(self.ssh_host(), limit_sku, "physical")
-        phys_vdc_pool_id = phys_vdc_sku['pool_id']
-        phys_limit_pool_id = phys_limit_sku['pool_id']
-        default_org_id = self.satellite_org_id_get(ssh_sat, register_config, default_org)
+        phys_vdc_pool_id = phys_vdc_sku["pool_id"]
+        phys_limit_pool_id = phys_limit_sku["pool_id"]
+        default_org_id = self.satellite_org_id_get(
+            ssh_sat, register_config, default_org
+        )
         ak_list = {
-            'libvirt-local':    'libvirt-local_ak',
-            'libvirt-remote':   'libvirt-remote_ak',
-            'esx':              'esx_ak',
-            'hyperv':           'hyperv_ak',
-            'xen':              'xen_ak',
-            'vdsm':             'vdsm_ak',
-            'rhevm':            'rhevm_ak',
-            'kubevirt':         'kubevirt_ak',
-            'ahv':              'ahv_ak'
-            }
+            "libvirt-local": "libvirt-local_ak",
+            "libvirt-remote": "libvirt-remote_ak",
+            "esx": "esx_ak",
+            "hyperv": "hyperv_ak",
+            "xen": "xen_ak",
+            "vdsm": "vdsm_ak",
+            "rhevm": "rhevm_ak",
+            "kubevirt": "kubevirt_ak",
+            "ahv": "ahv_ak",
+        }
         ak_name = ak_list[hypervisor_type]
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
         guest_name = self.get_hostname(self.ssh_guest())
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # Case Steps
         try:
-            logger.info(">>>step1: create activation key and "
-                        "register virt-who host with activation key")
+            logger.info(
+                ">>>step1: create activation key and "
+                "register virt-who host with activation key"
+            )
             self.satellite_active_key_create(
-                ssh_sat, register_config, ak_name, default_org_id)
+                ssh_sat, register_config, ak_name, default_org_id
+            )
             self.system_register_with_ak(self.ssh_host(), register_config, ak_name)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(res)
+            results.setdefault("step1", []).append(res)
 
-            logger.info(">>>step2: Register guest with auto-attach enabled "
-                        "withou sku in the key, "
-                        "but virt_vdc_sku is available out of the key")
+            logger.info(
+                ">>>step2: Register guest with auto-attach enabled "
+                "withou sku in the key, "
+                "but virt_vdc_sku is available out of the key"
+            )
             # guest will be auto-attached the best matched pool from all available skus
             self.system_sku_unattach(self.ssh_host())
             self.vw_web_attach(host_name, host_uuid, phys_vdc_pool_id)
             virt_vdc_sku = self.system_sku_attr(self.ssh_guest(), vdc_virt, "virtual")
-            virt_vdc_pool_id = virt_vdc_sku['pool_id']
+            virt_vdc_pool_id = virt_vdc_sku["pool_id"]
             self.system_register_with_ak(self.ssh_guest(), register_config, ak_name)
             output = self.system_sku_consumed(self.ssh_guest())
             res1 = self.vw_msg_search(output, virt_vdc_pool_id, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
 
-            logger.info(">>>step3: Register guest with auto-attach enabled "
-                        "with only virtual_limit_sku in the key "
-                        "and virt_vdc_sku out of the key")
+            logger.info(
+                ">>>step3: Register guest with auto-attach enabled "
+                "with only virtual_limit_sku in the key "
+                "and virt_vdc_sku out of the key"
+            )
             # guest will be auto-attached with the best matched pool in key
             self.vw_web_attach(host_name, host_uuid, phys_limit_pool_id)
-            virt_limit_sku = self.system_sku_attr(self.ssh_guest(), limit_sku, "virtual")
-            virt_limit_pool_id = virt_limit_sku['pool_id']
+            virt_limit_sku = self.system_sku_attr(
+                self.ssh_guest(), limit_sku, "virtual"
+            )
+            virt_limit_pool_id = virt_limit_sku["pool_id"]
             limit_katello_id = self.satellite_katello_id(
-                ssh_sat, register_config, virt_limit_pool_id)
+                ssh_sat, register_config, virt_limit_pool_id
+            )
             self.satellite_active_key_attach_sku(
-                ssh_sat, register_config, ak_name, limit_katello_id, default_org_id)
+                ssh_sat, register_config, ak_name, limit_katello_id, default_org_id
+            )
             self.system_register_with_ak(self.ssh_guest(), register_config, ak_name)
             output = self.system_sku_consumed(self.ssh_guest())
             res1 = self.vw_msg_search(output, virt_limit_pool_id, exp_exist=True)
             res2 = self.vw_msg_search(output, virt_vdc_pool_id, exp_exist=False)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
-            logger.info(">>>step4: Register guest with auto-attach disabled "
-                        "with both virt_vdc_sku and virt_limit_sku in the key")
+            logger.info(
+                ">>>step4: Register guest with auto-attach disabled "
+                "with both virt_vdc_sku and virt_limit_sku in the key"
+            )
             # guest will be auto-attached with both two skus
             vdc_katello_id = self.satellite_katello_id(
-                ssh_sat, register_config, virt_vdc_pool_id)
+                ssh_sat, register_config, virt_vdc_pool_id
+            )
             self.satellite_active_key_attach_sku(
-                ssh_sat, register_config, ak_name, vdc_katello_id, default_org_id)
+                ssh_sat, register_config, ak_name, vdc_katello_id, default_org_id
+            )
             self.satellite_active_key_auto_attach_enable(
-                ssh_sat, register_config, ak_name, default_org_id, auto_attach='false')
+                ssh_sat, register_config, ak_name, default_org_id, auto_attach="false"
+            )
             self.system_register_with_ak(self.ssh_guest(), register_config, ak_name)
             output = self.system_sku_consumed(self.ssh_guest())
             res1 = self.vw_msg_search(output, virt_limit_pool_id, exp_exist=True)
             res2 = self.vw_msg_search(output, virt_vdc_pool_id, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
-            logger.info(">>>step5: Register guest with auto-attach disabled "
-                        "without sku in the key, "
-                        "but both virt_vdc_sku and virt_limit_sku out of key")
+            logger.info(
+                ">>>step5: Register guest with auto-attach disabled "
+                "without sku in the key, "
+                "but both virt_vdc_sku and virt_limit_sku out of key"
+            )
             # guest will not be auto-attached to any sku
             self.satellite_active_key_unattach_sku(
-                ssh_sat, register_config, ak_name, limit_katello_id, default_org_id)
+                ssh_sat, register_config, ak_name, limit_katello_id, default_org_id
+            )
             self.satellite_active_key_unattach_sku(
-                ssh_sat, register_config, ak_name, vdc_katello_id, default_org_id)
+                ssh_sat, register_config, ak_name, vdc_katello_id, default_org_id
+            )
             self.system_register_with_ak(self.ssh_guest(), register_config, ak_name)
             output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-            res1 = self.vw_msg_search(output, 'No consumed subscription pools')
-            results.setdefault('step5', []).append(res1)
+            res1 = self.vw_msg_search(output, "No consumed subscription pools")
+            results.setdefault("step5", []).append(res1)
 
         finally:
             logger.info(">>>Finally step: Clear environment")
             self.vw_web_host_delete(host_name, host_uuid)
             self.vw_web_host_delete(guest_name, guest_uuid)
             self.satellite_active_key_delete(
-                ssh_sat, register_config, ak_name, default_org_id)
+                ssh_sat, register_config, ak_name, default_org_id
+            )
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2044_subscribe_guest_with_activation_key.py
--- /tmp/lint/tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py	2023-03-06 06:25:00.487629 +0000
@@ -2,24 +2,25 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137102')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137102")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         host_uuid = self.get_hypervisor_hostuuid()
@@ -30,54 +31,70 @@
 
         # Case Steps
         logger.info(">>>step1: run virt-who to send mappings")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: get guest_id and vw_host_uuid")
-        if 'libvirt-local' in hypervisor_type or 'vdsm' in hypervisor_type:
-            exp_list = {'hypervisor':'admin', 'guest':'admin'}
+        if "libvirt-local" in hypervisor_type or "vdsm" in hypervisor_type:
+            exp_list = {"hypervisor": "admin", "guest": "admin"}
         else:
             # vw_host_name = self.get_hostname(self.ssh_host())
             # out = self.satellite_hosts_get(self.ssh_host(), register_config, vw_host_name, "xxx")
             # vw_host_uuid = out['subscription_facet_attributes']['uuid']
             # hypervisor should be vw_host_uuid, but due to Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1455041
-            exp_list = {'hypervisor':'null', 'guest':'admin'}
+            exp_list = {"hypervisor": "null", "guest": "admin"}
 
         logger.info(">>>step3: check registered_by info for hypervisor and guest")
-        for check_type, exp in sorted(exp_list.items(), key=lambda item:item[0]):
+        for check_type, exp in sorted(exp_list.items(), key=lambda item: item[0]):
             logger.info(">>>check {0}".format(check_type))
             logger.info(">>>exp:{0}".format(exp))
             if check_type == "hypervisor":
-                output = self.satellite_hosts_get(self.ssh_host(), register_config,
-                                                  host_name, host_uuid, desc="get hypervisor info")
+                output = self.satellite_hosts_get(
+                    self.ssh_host(),
+                    register_config,
+                    host_name,
+                    host_uuid,
+                    desc="get hypervisor info",
+                )
             else:
-                output = self.satellite_hosts_get(self.ssh_host(), register_config,
-                                                  guest_name, guest_uuid, desc="get guest info")
+                output = self.satellite_hosts_get(
+                    self.ssh_host(),
+                    register_config,
+                    guest_name,
+                    guest_uuid,
+                    desc="get guest info",
+                )
             if output is not None:
                 user = output["subscription_facet_attributes"]["user"]
-                if user is not False and user is not None and 'login' in user.keys():
-                    registered_by = user['login']
+                if user is not False and user is not None and "login" in user.keys():
+                    registered_by = user["login"]
                     if registered_by == exp:
-                        logger.info("succeded to check registered_by is '{}'".format(exp))
-                        results.setdefault('step3', []).append(True)
+                        logger.info(
+                            "succeded to check registered_by is '{}'".format(exp)
+                        )
+                        results.setdefault("step3", []).append(True)
                     else:
-                        logger.error("failed to check registered_by is {0}, actually it's '{1}'" \
-                                .format(exp, registered_by))
-                        results.setdefault('step3', []).append(False)
+                        logger.error(
+                            "failed to check registered_by is {0}, actually it's '{1}'".format(
+                                exp, registered_by
+                            )
+                        )
+                        results.setdefault("step3", []).append(False)
                 else:
                     if output == exp:
-                        logger.info("succeded to check registered_by is '{}'".format(exp))
-                        results.setdefault('step3', []).append(True)
+                        logger.info(
+                            "succeded to check registered_by is '{}'".format(exp)
+                        )
+                        results.setdefault("step3", []).append(True)
             else:
                 logger.error("failed to get satellite {} info".format(check_type))
-                results.setdefault('step3', []).append(False)
+                results.setdefault("step3", []).append(False)
 
         # Case Result
         # notes = list()
         # if "libvirt-local" not in hypervisor_type and "vdsm" not in hypervisor_type:
         #     notes.append("Bug(step3): should show virt-who UUID under 'registered by' for hypervisor")
         #     notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1455041")
         # self.vw_case_result(results, notes)
         self.vw_case_result(results)
-
would reformat /tmp/lint/tests/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py
--- /tmp/lint/tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py	2023-03-06 06:25:00.532673 +0000
@@ -5,61 +5,60 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137103')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137103")
+        hypervisor_type = self.get_config("hypervisor_type")
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: run virt-who to send mappings")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: delete virt-who host from webui")
         try:
             vw_host_name = self.get_hostname(self.ssh_host())
-            vw_host_uuid='xxx'
+            vw_host_uuid = "xxx"
             res1 = self.vw_web_host_delete(vw_host_name, vw_host_uuid)
             data, tty_output, rhsm_output = self.vw_start(exp_send=0, exp_error=True)
             res2 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
-            error_msg = ["consumer no longer exists|"
-                         ".*has been deleted"]
+            error_msg = ["consumer no longer exists|" ".*has been deleted"]
             res3 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
-            results.setdefault('step2', []).append(res3)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
+            results.setdefault("step2", []).append(res3)
         except:
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
             pass
         finally:
             logger.info(">>>step3: re-register host and run virt-who")
             self.system_unregister(self.ssh_host())
             self.system_register(self.ssh_host(), register_type, register_config)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res)
+            results.setdefault("step3", []).append(res)
 
         if "libvirt-local" not in hypervisor_type and "vdsm" not in hypervisor_type:
             logger.info(">>>step4: delete hypervisor from webui")
             host_uuid = self.get_hypervisor_hostuuid()
             host_name = self.get_hypervisor_hostname()
             self.vw_web_host_delete(host_name, host_uuid)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res)
+            results.setdefault("step3", []).append(res)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py
--- /tmp/lint/tests/tier2/tc_2051_validate_virt_who_password_commandline.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2051_validate_virt_who_password_commandline.py	2023-03-06 06:25:00.574466 +0000
@@ -2,23 +2,26 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136708')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136708")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         # Case Steps
         logger.info(">>>step1: run virt-who-password")
-        value1 = self.vw_encrypted(r'ad\"min')
-        value2 = self.vw_encrypted(r'ad\"min', "-p")
+        value1 = self.vw_encrypted(r"ad\"min")
+        value2 = self.vw_encrypted(r"ad\"min", "-p")
         value3 = self.vw_encrypted(r'"ad\"min"', "-p")
-        value4 = self.vw_encrypted(r'ad\"min', "--password")
+        value4 = self.vw_encrypted(r"ad\"min", "--password")
         value5 = self.vw_encrypted(r'"ad\"min"', "--password")
-        results.setdefault('step1', []).append(value1==value2==value3==value4==value5)
+        results.setdefault("step1", []).append(
+            value1 == value2 == value3 == value4 == value5
+        )
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2051_validate_virt_who_password_commandline.py
--- /tmp/lint/tests/tier2/tc_2048_register_system_with_activaiton_key.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2048_register_system_with_activaiton_key.py	2023-03-06 06:25:00.568468 +0000
@@ -2,71 +2,81 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137101')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137101")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
-        register_owner = register_config['owner']
-        active_key = 'Virtwho_AK'
+        register_owner = register_config["owner"]
+        active_key = "Virtwho_AK"
         cmd = 'subscription-manager register  --org="{0}" --activationkey="{1}"'.format(
-            register_owner, active_key)
-        msg = 'System has been registered with ID.*'
+            register_owner, active_key
+        )
+        msg = "System has been registered with ID.*"
 
         # Case Steps
         logger.info(">>>step1: register host and guest using activation key")
         for system in [self.ssh_host(), self.ssh_guest()]:
             self.system_unregister(system)
             ret, output = self.runcmd(cmd, system)
             res1 = self.vw_msg_search(output, msg, exp_exist=True)
-            results.setdefault('step1', []).append(res1)
+            results.setdefault("step1", []).append(res1)
 
         logger.info(">>>step2: check temporary sku is attached by auto in guest")
         output = self.system_sku_consumed(self.ssh_guest())
-        res1 = self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=True)
-        results.setdefault('step2', []).append(res1)
+        res1 = self.vw_msg_search(
+            output, "Subscription Type: .*Temporary", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res1)
 
-        logger.info(">>>step3: start virt-who service to check temporary sku disappeared")
+        logger.info(
+            ">>>step3: start virt-who service to check temporary sku disappeared"
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         output = self.system_sku_consumed(self.ssh_guest())
-        res2 = self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=False)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(
+            output, "Subscription Type: .*Temporary", exp_exist=False
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
-        logger.info(">>>step4: attach physical sku for host/hypervisor  \
-                    then register guest using activation key again")
+        logger.info(
+            ">>>step4: attach physical sku for host/hypervisor  \
+                    then register guest using activation key again"
+        )
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_unattach(host_name, host_uuid)
         self.vw_web_attach(host_name, host_uuid, pool_id)
         self.system_unregister(self.ssh_guest())
         ret, output = self.runcmd(cmd, self.ssh_guest())
         res = self.vw_msg_search(output, msg, exp_exist=True)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         logger.info(">>>step5: check stable virtual sku is attached by auto in guest")
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step5', []).append(res)
+        results.setdefault("step5", []).append(res)
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2048_register_system_with_activaiton_key.py
--- /tmp/lint/tests/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py	2023-03-06 06:25:00.619280 +0000
@@ -2,96 +2,124 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137101')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137101")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        admin_user = register_config['username']
-        admin_passwd = register_config['password']
-        server = register_config['server']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
-        default_org = register_config['owner']
-        api = register_config['api']
+        admin_user = register_config["username"]
+        admin_passwd = register_config["password"]
+        server = register_config["server"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
+        default_org = register_config["owner"]
+        api = register_config["api"]
 
         # Case Steps
         logger.info(">>>step1: run virt-who to send mappings")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: attach physical vdc for hypervisor, then check subscriptions")
-        physical_sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = physical_sku_attrs['pool_id']
+        logger.info(
+            ">>>step2: attach physical vdc for hypervisor, then check subscriptions"
+        )
+        physical_sku_attrs = self.system_sku_attr(
+            self.ssh_host(), vdc_physical_sku, "physical"
+        )
+        physical_pool_id = physical_sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
-        virtual_sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = virtual_sku_attrs['pool_id']
-        katello_id = self.satellite_katello_id(self.ssh_host(), register_config, virtual_pool_id)
-        default_org_id = self.satellite_org_id_get(self.ssh_host(), register_config, default_org)
+        virtual_sku_attrs = self.system_sku_attr(
+            self.ssh_guest(), vdc_virtual_sku, "virtual"
+        )
+        virtual_pool_id = virtual_sku_attrs["pool_id"]
+        katello_id = self.satellite_katello_id(
+            self.ssh_host(), register_config, virtual_pool_id
+        )
+        default_org_id = self.satellite_org_id_get(
+            self.ssh_host(), register_config, default_org
+        )
 
         name_list = []
-        if 'libvirt-local' in hypervisor_type or 'vdsm' in hypervisor_type:
-            name_list = ['{0}'.format(host_name)]
+        if "libvirt-local" in hypervisor_type or "vdsm" in hypervisor_type:
+            name_list = ["{0}".format(host_name)]
         else:
-            key1 = 'virt-who-{0}'.format(host_name)
-            key2 = 'virt-who-{0}'.format(host_uuid)
+            key1 = "virt-who-{0}".format(host_name)
+            key2 = "virt-who-{0}".format(host_uuid)
             name_list = [key1, key2, key1.lower(), key2.lower()]
-        cmd = "curl -X GET -s -k -u {0}:{1} {2}/katello/api/organizations/{3}/subscriptions/{4}" \
-                .format(admin_user, admin_passwd, api ,default_org_id, katello_id)
+        cmd = "curl -X GET -s -k -u {0}:{1} {2}/katello/api/organizations/{3}/subscriptions/{4}".format(
+            admin_user, admin_passwd, api, default_org_id, katello_id
+        )
         ret, output = self.runcmd(cmd, self.ssh_host())
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None:
-            if output["type"] == "STACK_DERIVED" and output["virt_only"] is True and \
-                    any(key in output["hypervisor"]["name"] for key in name_list):
+            if (
+                output["type"] == "STACK_DERIVED"
+                and output["virt_only"] is True
+                and any(key in output["hypervisor"]["name"] for key in name_list)
+            ):
                 logger.info("succeeded to check bonus pool coming from %s" % name_list)
-                results.setdefault('step2', []).append(True)
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("failed to check bonus pool coming from %s" % name_list)
-                results.setdefault('step2', []).append(False)
-            if output["available"] == -1 and output["quantity"] == -1 and output["consumed"] == 0:
-                logger.info("succeeded to check consumed status is '0 out of Unlimitted'")
-                results.setdefault('step2', []).append(True)
+                results.setdefault("step2", []).append(False)
+            if (
+                output["available"] == -1
+                and output["quantity"] == -1
+                and output["consumed"] == 0
+            ):
+                logger.info(
+                    "succeeded to check consumed status is '0 out of Unlimitted'"
+                )
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("failed to check consumed status is '0 out of Unlimitted'")
-                results.setdefault('step2', []).append(False)
+                results.setdefault("step2", []).append(False)
         else:
             logger.error("failed to get subscritons info")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         logger.info(">>>step3: attach bonus vdc for guest, then check subscriptions")
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         time.sleep(60)
         for i in range(3):
             ret, output = self.runcmd(cmd, self.ssh_host())
             output = self.is_json(output.strip())
             if ret == 0 and output is not False and output is not None:
-                if output["available"] == -2 or output["available"] == -1 and output["quantity"] == -1 and output["consumed"] == 1:
-                    logger.info("succeeded to check consumed status is '1 out of Unlimitted'")
-                    results.setdefault('step3', []).append(True)
+                if (
+                    output["available"] == -2
+                    or output["available"] == -1
+                    and output["quantity"] == -1
+                    and output["consumed"] == 1
+                ):
+                    logger.info(
+                        "succeeded to check consumed status is '1 out of Unlimitted'"
+                    )
+                    results.setdefault("step3", []).append(True)
                     break
                 logger.warning("webui has not been refreshed, try again after 60s...")
                 time.sleep(60)
-        if 'step3' not in results.keys():
+        if "step3" not in results.keys():
             logger.error("failed to check consumed status")
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py
--- /tmp/lint/tests/tier2/tc_2049_validate_hostname_without_domain.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2049_validate_hostname_without_domain.py	2023-03-06 06:25:00.718317 +0000
@@ -2,65 +2,70 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136708')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type != 'esx':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136708")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config = self.get_hypervisor_config()
-        ssh_hypervisor = config['ssh_hypervisor']
+        ssh_hypervisor = config["ssh_hypervisor"]
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        guest_name = config['guest_name']
+        register_type = register_config["type"]
+        guest_name = config["guest_name"]
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
-        hostname_non_domain = host_name.split('.')[0]
+        hostname_non_domain = host_name.split(".")[0]
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        self.vw_option_add('hypervisor_id', 'hostname', config_file)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_add("hypervisor_id", "hostname", config_file)
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
 
         # case steps
         try:
             logger.info(">>>step1: run virt-who for hostname without domain name")
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             esx_host = self.vcenter_host_get(cert, ssh_hypervisor, guest_name)
             self.vcenter_fqdn_set(cert, ssh_hypervisor, esx_host, hostname_non_domain)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             res2 = self.vw_msg_search(str(data), hostname_non_domain, exp_exist=True)
             res3 = self.vw_msg_search(str(data), host_name, exp_exist=False)
-            results.setdefault('step1', []).append(res1)
-            results.setdefault('step1', []).append(res2)
-            results.setdefault('step1', []).append(res3)
+            results.setdefault("step1", []).append(res1)
+            results.setdefault("step1", []).append(res2)
+            results.setdefault("step1", []).append(res3)
         except:
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
             pass
         finally:
             logger.info(">>>step2: start to recovery hostname")
             if "satellite" in register_type:
                 self.vw_web_host_delete(hostname_non_domain, host_uuid)
             if "stage" in register_type:
                 self.stage_consumer_clean(self.ssh_host(), register_config)
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             esx_host = self.vcenter_host_get(cert, ssh_hypervisor, guest_name)
             self.vcenter_fqdn_set(cert, ssh_hypervisor, esx_host, host_name)
             if self.get_hypervisor_hostname() == host_name:
-                logger.info('Succeeded to change back hostname')
-                results.setdefault('step2', []).append(True)
+                logger.info("Succeeded to change back hostname")
+                results.setdefault("step2", []).append(True)
             else:
-                logger.error('Failed to change back hostname')
-                results.setdefault('step2', []).append(False)
+                logger.error("Failed to change back hostname")
+                results.setdefault("step2", []).append(False)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2049_validate_hostname_without_domain.py
--- /tmp/lint/tests/tier2/tc_2054_validate_trigger_event_with_different_interval.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2054_validate_trigger_event_with_different_interval.py	2023-03-06 06:25:00.732733 +0000
@@ -2,44 +2,59 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136726")
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type != 'esx':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virt_config = "/etc/sysconfig/virt-who"
-        self.vw_option_enable("VIRTWHO_DEBUG",virt_config)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', virt_config)
+        self.vw_option_enable("VIRTWHO_DEBUG", virt_config)
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", virt_config)
         self.vw_option_enable("VIRTWHO_INTERVAL", virt_config)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         try:
-            logger.info(">>>step1: run virt-who with event(guest_suspend) for interval 60")
-            self.vw_option_update_value("VIRTWHO_INTERVAL", '60', virt_config)
-            data, tty_output, rhsm_output = self.vw_start(exp_send=2, event="guest_suspend")
-            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=2, exp_interval=60)
-            results.setdefault('step1', []).append(res1)
+            logger.info(
+                ">>>step1: run virt-who with event(guest_suspend) for interval 60"
+            )
+            self.vw_option_update_value("VIRTWHO_INTERVAL", "60", virt_config)
+            data, tty_output, rhsm_output = self.vw_start(
+                exp_send=2, event="guest_suspend"
+            )
+            res1 = self.op_normal_value(
+                data, exp_error=0, exp_thread=1, exp_send=2, exp_interval=60
+            )
+            results.setdefault("step1", []).append(res1)
         except:
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
             pass
         finally:
-            logger.info(">>>step2: run virt-who with event(guest_resume) for interval 120")
-            self.vw_option_update_value("VIRTWHO_INTERVAL", '120', filename="/etc/sysconfig/virt-who")
-            data, tty_output, rhsm_output = self.vw_start(exp_send=2, event="guest_resume")
-            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=2, exp_interval=120)
-            results.setdefault('step2', []).append(res1)
+            logger.info(
+                ">>>step2: run virt-who with event(guest_resume) for interval 120"
+            )
+            self.vw_option_update_value(
+                "VIRTWHO_INTERVAL", "120", filename="/etc/sysconfig/virt-who"
+            )
+            data, tty_output, rhsm_output = self.vw_start(
+                exp_send=2, event="guest_resume"
+            )
+            res1 = self.op_normal_value(
+                data, exp_error=0, exp_thread=1, exp_send=2, exp_interval=120
+            )
+            results.setdefault("step2", []).append(res1)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2054_validate_trigger_event_with_different_interval.py
--- /tmp/lint/tests/tier2/tc_2056_validate_non_root_to_run_virtwho.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2056_validate_non_root_to_run_virtwho.py	2023-03-06 06:25:00.819859 +0000
@@ -2,55 +2,60 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136771")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
-        new_user ="tester"
+        new_user = "tester"
         new_passwd = "redhat"
 
         # case steps
         logger.info(">>>step1: create tester account")
-        cmd = "useradd {}" .format(new_user)
+        cmd = "useradd {}".format(new_user)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="useradd account")
-        cmd = r'echo -e "{0}:{1}" | chpasswd' .format(new_user, new_passwd)
+        cmd = r'echo -e "{0}:{1}" | chpasswd'.format(new_user, new_passwd)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="change password")
-        host_ip = self.ssh_host()['host']
+        host_ip = self.ssh_host()["host"]
         new_ssh = {"host": host_ip, "username": new_user, "password": new_passwd}
         ret, output = self.runcmd("rpm -qa kernel", new_ssh, desc="ssh connect check")
         if ret == 0 and "kernel" in output:
             logger.info("Succeeded to create tester account")
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             logger.error("Failed to create tester account")
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: run virt-who service by tester account")
         self.vw_thread_clean()
         attrs = ["Password:|redhat"]
         ret, output = self.run_expect(new_ssh, "/sbin/service virt-who restart", attrs)
         time.sleep(60)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
         send_num = self.vw_callback_send_num()
-        logger.info("error_num: {0}, thread_num: {1}, send_num: {2}" .format(error_num, thread_num, send_num))
-        results.setdefault('step2', []).append(error_num==0)
-        results.setdefault('step2', []).append(thread_num==1)
-        results.setdefault('step2', []).append(send_num==1)
+        logger.info(
+            "error_num: {0}, thread_num: {1}, send_num: {2}".format(
+                error_num, thread_num, send_num
+            )
+        )
+        results.setdefault("step2", []).append(error_num == 0)
+        results.setdefault("step2", []).append(thread_num == 1)
+        results.setdefault("step2", []).append(send_num == 1)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2056_validate_non_root_to_run_virtwho.py
--- /tmp/lint/tests/tier2/tc_2052_validate_hypervisors_connection.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2052_validate_hypervisors_connection.py	2023-03-06 06:25:00.839425 +0000
@@ -2,41 +2,46 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136725")
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         if hypervisor_type in ("libvirt-local", "vdsm", "xen"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
         # self.vw_option_enable('debug', '/etc/virt-who.conf')
         # self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
-        self.vw_option_enable('interval', '/etc/virt-who.conf')
-        self.vw_option_update_value('interval', '60', '/etc/virt-who.conf')
+        self.vw_option_enable("interval", "/etc/virt-who.conf")
+        self.vw_option_update_value("interval", "60", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: virt-who host can access hyperivosr by default")
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "restart")
         time.sleep(60)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
         send_num = self.vw_callback_send_num()
-        logger.info("error_num: {0}, thread_num: {1}, send_num: {2}".format(error_num, thread_num, send_num))
-        results.setdefault('step1', []).append(error_num == 0)
-        results.setdefault('step1', []).append(thread_num == 1)
-        results.setdefault('step1', []).append(send_num == 1)
+        logger.info(
+            "error_num: {0}, thread_num: {1}, send_num: {2}".format(
+                error_num, thread_num, send_num
+            )
+        )
+        results.setdefault("step1", []).append(error_num == 0)
+        results.setdefault("step1", []).append(thread_num == 1)
+        results.setdefault("step1", []).append(send_num == 1)
 
         try:
             logger.info(">>>step2: disconnect virt-who host from hyperivosr")
             self.hypervisor_firewall_setup("off")
             start = time.time()
@@ -44,44 +49,62 @@
                 time.sleep(30)
                 end = time.time()
                 spend_time = int(end - start)
                 error_num, error_list = self.vw_callback_error_num()
                 thread_num = self.vw_callback_thread_num()
-                logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
-                ret, rhsm_output = self.runcmd("cat /var/log/rhsm/rhsm.log", self.ssh_host(), desc="check rhsm.log")
+                logger.info(
+                    "error_num: {0}, thread_num: {1}".format(error_num, thread_num)
+                )
+                ret, rhsm_output = self.runcmd(
+                    "cat /var/log/rhsm/rhsm.log", self.ssh_host(), desc="check rhsm.log"
+                )
                 if thread_num == 0:
                     logger.info("virt-who is terminated by no thread")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
                     break
-                if error_num != 0 or "timed out" in rhsm_output or "timeout" in rhsm_output:
+                if (
+                    error_num != 0
+                    or "timed out" in rhsm_output
+                    or "timeout" in rhsm_output
+                ):
                     logger.info("virt-who is disconnected from hyperivosr by timeout")
-                    results.setdefault('step2', []).append(True)
+                    results.setdefault("step2", []).append(True)
                     break
                 if spend_time >= 900:
                     logger.info("virt-who is timeout(900s)")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
                     break
         except:
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
             pass
         finally:
             logger.info(">>>step3: connect virt-who host from hyperivosr again")
             self.hypervisor_firewall_setup("on")
             time.sleep(60)
-            ret, output = self.runcmd("rm -rf /var/log/rhsm/*", self.ssh_host(), desc="rhsm.log clean")
+            ret, output = self.runcmd(
+                "rm -rf /var/log/rhsm/*", self.ssh_host(), desc="rhsm.log clean"
+            )
             time.sleep(60)
-            ret, rhsm_output = self.runcmd("cat /var/log/rhsm/rhsm.log", self.ssh_host(), desc="check rhsm.log")
+            ret, rhsm_output = self.runcmd(
+                "cat /var/log/rhsm/rhsm.log", self.ssh_host(), desc="check rhsm.log"
+            )
             error_num, error_list = self.vw_callback_error_num()
             thread_num = self.vw_callback_thread_num()
             logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
-            if thread_num == 1 and error_num == 0 and "timed out" not in rhsm_output and "timeout" not in rhsm_output:
+            if (
+                thread_num == 1
+                and error_num == 0
+                and "timed out" not in rhsm_output
+                and "timeout" not in rhsm_output
+            ):
                 logger.info("virt-who is connected to hyperivosr normally")
-                results.setdefault('step3', []).append(True)
+                results.setdefault("step3", []).append(True)
             else:
-                results.setdefault('step3', []).append(False)
+                results.setdefault("step3", []).append(False)
 
         # case result
         notes = list()
-        notes.append("(step2) No any response after xen hypervisor lost its connection with virt-who host")
+        notes.append(
+            "(step2) No any response after xen hypervisor lost its connection with virt-who host"
+        )
         notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=2065097")
         self.vw_case_result(results, notes)
-
would reformat /tmp/lint/tests/tier2/tc_2052_validate_hypervisors_connection.py
--- /tmp/lint/tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py	2023-03-06 06:25:00.857585 +0000
@@ -2,119 +2,136 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136733")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('kubevirt', 'ahv'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("kubevirt", "ahv"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
-        owner = register_config['owner']
+        owner = register_config["owner"]
 
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
-        self.vw_option_enable('interval', '/etc/virt-who.conf')
-        self.vw_option_update_value('interval', '60', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
+        self.vw_option_enable("interval", "/etc/virt-who.conf")
+        self.vw_option_update_value("interval", "60", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: run virt-who and attach VDC for host/guest")
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        self.vw_web_attach(host_name, host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(host_name, host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
         output = self.system_sku_consumed(self.ssh_guest())
         res2 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         try:
             logger.info(">>>step2: suspend guest, and then restart virt-who")
             self.hypervisor_guest_suspend()
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             if hypervisor_type in ("libvirt-remote", "libvirt-local", "hyperv", "esx"):
                 res2 = self.validate_guest_state(data, owner, guest_uuid, exp_state=3)
             else:
-                res2 = self.validate_guest_state(data, owner, guest_uuid, exp_state=False)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+                res2 = self.validate_guest_state(
+                    data, owner, guest_uuid, exp_state=False
+                )
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
         except:
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
             pass
         finally:
             logger.info(">>>step3: resume guest, and then restart virt-who")
             self.hypervisor_guest_resume()
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             output = self.system_sku_consumed(self.ssh_guest())
             res2 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
             res3 = self.validate_guest_state(data, owner, guest_uuid, exp_state=1)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
-            results.setdefault('step3', []).append(res3)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
+            results.setdefault("step3", []).append(res3)
 
         try:
             logger.info(">>>step4: stop guest, and then restart virt-who")
-            ret, output = self.runcmd("sync;sync;sync", self.ssh_guest(), desc="sync data")
+            ret, output = self.runcmd(
+                "sync;sync;sync", self.ssh_guest(), desc="sync data"
+            )
             self.hypervisor_guest_stop()
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            if hypervisor_type in ("libvirt-remote", "libvirt-local",  "hyperv", "esx"):
-                res2 = self.validate_guest_state(data, owner, guest_uuid, exp_state="3|4|5")
+            if hypervisor_type in ("libvirt-remote", "libvirt-local", "hyperv", "esx"):
+                res2 = self.validate_guest_state(
+                    data, owner, guest_uuid, exp_state="3|4|5"
+                )
             else:
-                res2 = self.validate_guest_state(data, owner, guest_uuid, exp_state=False)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+                res2 = self.validate_guest_state(
+                    data, owner, guest_uuid, exp_state=False
+                )
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
         except:
-            results.setdefault('step4', []).append(False)
+            results.setdefault("step4", []).append(False)
             pass
         finally:
             logger.info(">>>step5: start guest, and then restart virt-who")
             self.hypervisor_guest_start()
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             output = self.system_sku_consumed(self.ssh_guest())
             res2 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
             res3 = self.validate_guest_state(data, owner, guest_uuid, exp_state=1)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
-            results.setdefault('step5', []).append(res3)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
+            results.setdefault("step5", []).append(res3)
 
         # case result
         self.vw_case_result(results)
 
     def validate_guest_state(self, data, owner, guest_uuid, exp_state):
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         if exp_state is False:
-            if hypervisor_type in ('libvirt-local', 'vdsm'):
+            if hypervisor_type in ("libvirt-local", "vdsm"):
                 state = guest_uuid in data.keys()
             else:
                 state = guest_uuid in data[owner].keys()
         else:
-            if hypervisor_type in ('libvirt-local', 'vdsm'):
-                state = data[guest_uuid]['state']
+            if hypervisor_type in ("libvirt-local", "vdsm"):
+                state = data[guest_uuid]["state"]
             else:
-                state = data[owner][guest_uuid]['state']
+                state = data[owner][guest_uuid]["state"]
         if str(state) in str(exp_state):
-            logger.info("Expected guest state({0}) is matched({1}) for {2}".format(exp_state, state, hypervisor_type))
+            logger.info(
+                "Expected guest state({0}) is matched({1}) for {2}".format(
+                    exp_state, state, hypervisor_type
+                )
+            )
             return True
         else:
-            logger.error("Expected guest state({0}) is not matched({1}) for {2}".format(exp_state, state, hypervisor_type))
+            logger.error(
+                "Expected guest state({0}) is not matched({1}) for {2}".format(
+                    exp_state, state, hypervisor_type
+                )
+            )
             return False
--- /tmp/lint/tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py	2023-03-06 06:25:00.863368 +0000
@@ -2,44 +2,47 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136781")
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         if "rhevm" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
         config = self.get_hypervisor_config()
-        hypervisor_server = config['server']
+        hypervisor_server = config["server"]
 
         # case steps
         logger.info(">>>step1: run virt-who for rhevm with ovirt-engine")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who for rhevm with ovirt-engine/")
-        self.vw_option_update_value("server", hypervisor_server+'/', config_file)
+        self.vw_option_update_value("server", hypervisor_server + "/", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: run virt-who for rhevm without /ovirt-engine")
-        self.vw_option_update_value("server", hypervisor_server.rstrip('/ovirt-engine'), config_file)
+        self.vw_option_update_value(
+            "server", hypervisor_server.rstrip("/ovirt-engine"), config_file
+        )
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py
would reformat /tmp/lint/tests/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py
--- /tmp/lint/tests/tier2/tc_2057_validate_subscription_register_clean_together.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2057_validate_subscription_register_clean_together.py	2023-03-06 06:25:00.940228 +0000
@@ -1,67 +1,68 @@
 # coding:utf-8
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
+
 
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136773")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
 
         # case steps
         logger.info(">>>step1: start virt-who by run_service")
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "restart")
         time.sleep(30)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
-        logger.info("error_num: {0}, thread_num: {1}" .format(error_num, thread_num))
-        results.setdefault('step1', []).append(error_num == 0)
-        results.setdefault('step1', []).append(thread_num == 1)
+        logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
+        results.setdefault("step1", []).append(error_num == 0)
+        results.setdefault("step1", []).append(thread_num == 1)
 
         logger.info(">>>step2: unregister, and the clean")
         cmd1 = "subscription-manager unregister"
         cmd2 = "subscription-manager clean"
         ret, output = self.runcmd(cmd1, self.ssh_host(), desc="unregister")
         time.sleep(15)
         ret, output = self.runcmd(cmd2, self.ssh_host(), desc="clean")
         time.sleep(30)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
-        logger.info("error_num: {0}, thread_num: {1}" .format(error_num, thread_num))
-        results.setdefault('step2', []).append(thread_num == 1)
+        logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
+        results.setdefault("step2", []).append(thread_num == 1)
 
         logger.info(">>>step3: register, start virt-who")
         self.system_register(self.ssh_host(), register_type, register_config)
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "restart")
         time.sleep(30)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
-        logger.info("error_num: {0}, thread_num: {1}" .format(error_num, thread_num))
-        results.setdefault('step3', []).append(error_num == 0)
-        results.setdefault('step3', []).append(thread_num == 1)
+        logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
+        results.setdefault("step3", []).append(error_num == 0)
+        results.setdefault("step3", []).append(thread_num == 1)
 
         logger.info(">>>step4: unregister and clean together")
         cmd1 = "subscription-manager unregister; subscription-manager clean"
         ret, output = self.runcmd(cmd1, self.ssh_host(), desc="unregister and clean")
         time.sleep(30)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
-        logger.info("error_num: {0}, thread_num: {1}" .format(error_num, thread_num))
-        results.setdefault('step4', []).append(thread_num == 1)
+        logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
+        results.setdefault("step4", []).append(thread_num == 1)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2057_validate_subscription_register_clean_together.py
--- /tmp/lint/tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py	2023-03-06 06:25:00.965974 +0000
@@ -5,54 +5,56 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175032')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.25.7':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-175032")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.25.7":
             self.vw_case_skip("virt-who version")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
 
         # Case Steps
         logger.info(">>>step1: run virt-who with all good configurations")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
         logger.info(">>>step2: add useless line with tab spaces after type=")
         cmd = "sed -i '/^type=/a \\\txxx=xxx' {0}".format(config_file)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="add new line with tab")
         data, tty_output, rhsm_output = self.vw_start(exp_send=0)
         msg = "virt-who can't be started"
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, msg)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: comment out the useless line")
         cmd = 'sed -i "s/xxx/#xxx/" {0}'.format(config_file)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if "RHEL-7" in compose_id:
-            war_msg = "A line continuation (line starts with space) that is commented " \
-                      "out was detected in file"
+            war_msg = (
+                "A line continuation (line starts with space) that is commented "
+                "out was detected in file"
+            )
             data, tty_output, rhsm_output = self.vw_start(exp_send=0)
             res1 = self.op_normal_value(data, exp_error=1, exp_thread=0, exp_send=0)
         else:
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res1)
+        results.setdefault("step3", []).append(res1)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2060_check_commented_out_line_with_tab_space.py
--- /tmp/lint/tests/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py	2023-03-06 06:25:00.988653 +0000
@@ -5,48 +5,50 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175019')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-175019")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         option = "hypervisor_id"
         # bz1751603, only print war_msg for rhel8 using python3
         war_msg = "option '{0}' in section .* already exists".format(option)
 
         # Case Steps
-        logger.info(">>>step1: run virt-who with hypervisor_id=uuid "
-                    "and hypervisor_id=hostname together")
-        self.vw_option_add(option, 'uuid', config_file)
-        self.vw_option_add(option, 'hostname', config_file)
+        logger.info(
+            ">>>step1: run virt-who with hypervisor_id=uuid "
+            "and hypervisor_id=hostname together"
+        )
+        self.vw_option_add(option, "uuid", config_file)
+        self.vw_option_add(option, "hostname", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
         if "RHEL-8" in compose_id:
             res2 = self.vw_msg_search(rhsm_output, war_msg)
-            results.setdefault('step1', []).append(res2)
+            results.setdefault("step1", []).append(res2)
 
         logger.info(">>>step2: add another hypervisor_id=xxx")
         # if redundant options are configured, virt-who uses the last one
-        self.vw_option_add(option, 'xxx', config_file)
+        self.vw_option_add(option, "xxx", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        res1 = self.op_normal_value(data, exp_error='nz', exp_thread=0, exp_send=0)
-        results.setdefault('step2', []).append(res1)
+        res1 = self.op_normal_value(data, exp_error="nz", exp_thread=0, exp_send=0)
+        results.setdefault("step2", []).append(res1)
         if "RHEL-8" in compose_id:
             res2 = self.vw_msg_search(rhsm_output, war_msg)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier2/tc_2058_post_large_json_to_rhsm.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2058_post_large_json_to_rhsm.py	2023-03-06 06:25:01.020325 +0000
@@ -2,73 +2,83 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-171258")
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if 'esx' not in hypervisor_type:
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if "esx" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
-        if 'satellite' not in register_type:
+        if "satellite" not in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
 
         # case steps
         logger.info(">>>step1: create json data")
         json_file = "/root/test.json"
         json_data = self.vw_gen_json(hypervisors=100, guests=30)
-        with open(json_file, 'w') as f:
+        with open(json_file, "w") as f:
             json.dump(json_data, f)
         self.paramiko_putfile(self.ssh_host(), json_file, json_file)
 
         logger.info(">>>step2: post json data")
-        curl_header = '-H "accept:application/json,version=2" -H "content-type:application/json"'
-        curl_cert = '--cert /etc/pki/consumer/cert.pem --key /etc/pki/consumer/key.pem'
+        curl_header = (
+            '-H "accept:application/json,version=2" -H "content-type:application/json"'
+        )
+        curl_cert = "--cert /etc/pki/consumer/cert.pem --key /etc/pki/consumer/key.pem"
         curl_json = '-d @"{0}"'.format(json_file)
-        curl_host = 'https://{0}/rhsm/hypervisors'.format(register_server)
-        cmd = "curl -X POST -s -k {0} {1} {2} {3}".format(curl_header, curl_cert, curl_json, curl_host)
+        curl_host = "https://{0}/rhsm/hypervisors".format(register_server)
+        cmd = "curl -X POST -s -k {0} {1} {2} {3}".format(
+            curl_header, curl_cert, curl_json, curl_host
+        )
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret == 0 and "error" not in output:
             logger.info("Succeeded to 600 hypervisors and 18000 guests to satellite")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         elif "foreman_tasks_sync_task_timeout" in output:
-            task_id = re.findall(r'waiting for task (.*?) to finish exceeded', output)[-1]
-            logger.info('task id: {}'.format(task_id))
+            task_id = re.findall(r"waiting for task (.*?) to finish exceeded", output)[
+                -1
+            ]
+            logger.info("task id: {}".format(task_id))
             if task_id:
                 cmd = "curl -X GET -s -k -u {0}:{1} https://{2}/foreman_tasks/api/tasks/{3}".format(
-                        register_username, register_password, register_server, task_id) 
-                start=time.time()
+                    register_username, register_password, register_server, task_id
+                )
+                start = time.time()
                 while True:
                     ret, output = self.runcmd(cmd, self.ssh_host())
                     time.sleep(30)
-                    end=time.time()
-                    spend_time = int(end-start)
+                    end = time.time()
+                    spend_time = int(end - start)
                     data = self.is_json(output.strip())
-                    logger.info('task state: {}'.format(data['state']))
-                    logger.info('task result: {}'.format(data['result']))
+                    logger.info("task state: {}".format(data["state"]))
+                    logger.info("task result: {}".format(data["result"]))
                     if spend_time >= 900:
-                        results.setdefault('step2', []).append(False)
+                        results.setdefault("step2", []).append(False)
                         logger.info("Post timeout(900s)")
                         break
-                    if data['state'] == 'stopped':
-                        logger.info('task started_at: {}'.format(data['started_at']))
-                        logger.info('task ended_at: {}'.format(data['ended_at']))
-                        logger.info("Succeeded to 600 hypervisors and 18000 guests to satellite")
-                        results.setdefault('step2', []).append(True)
+                    if data["state"] == "stopped":
+                        logger.info("task started_at: {}".format(data["started_at"]))
+                        logger.info("task ended_at: {}".format(data["ended_at"]))
+                        logger.info(
+                            "Succeeded to 600 hypervisors and 18000 guests to satellite"
+                        )
+                        results.setdefault("step2", []).append(True)
                         break
         else:
             logger.warning("Failed to post json to satellite")
             logger.warning(output)
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2058_post_large_json_to_rhsm.py
--- /tmp/lint/tests/tier2/tc_2061_check_fake_mode_is_hypervisor_option.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2061_check_fake_mode_is_hypervisor_option.py	2023-03-06 06:25:01.068868 +0000
@@ -5,19 +5,19 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175058')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-175058")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         json_file = "/tmp/fake.json"
         conf_file = "/etc/virt-who.d/fake.conf"
 
         # case steps
         logger.info(">>>step1: create json file with bad is_hypervisor")
@@ -32,29 +32,31 @@
         logger.info(">>>step2: run virt-who with fake conf")
         error_msg = "Fake virt file.*is not properly formed"
         data, tty_output, rhsm_output = self.vw_start(exp_send=0)
         res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: disabel is_hypervisor option")
-        war_msg = 'Required option: "is_hypervisor" is missing in: ' \
-                  '"fake" using default "True"'
-        self.vw_option_disable('is_hypervisor', conf_file)
+        war_msg = (
+            'Required option: "is_hypervisor" is missing in: '
+            '"fake" using default "True"'
+        )
+        self.vw_option_disable("is_hypervisor", conf_file)
         if hypervisor_type in ("libvirt-local", "vdsm"):
             data, tty_output, rhsm_output = self.vw_start(exp_send=0)
             res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
             res2 = self.vw_msg_search(rhsm_output, error_msg)
             res3 = self.vw_msg_search(rhsm_output, war_msg)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
-            results.setdefault('step3', []).append(res3)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
+            results.setdefault("step3", []).append(res3)
         else:
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             res2 = self.vw_msg_search(rhsm_output, war_msg)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2061_check_fake_mode_is_hypervisor_option.py
--- /tmp/lint/tests/tier2/tc_2063_check_hypervisors_fqdn.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2063_check_hypervisors_fqdn.py	2023-03-06 06:25:01.103030 +0000
@@ -5,28 +5,28 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-188359')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-188359")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         register_config = self.get_register_config()
-        server = register_config['server']
-        ssh_user = register_config['ssh_user']
-        ssh_passwd = register_config['ssh_passwd']
+        server = register_config["server"]
+        ssh_user = register_config["ssh_user"]
+        ssh_passwd = register_config["ssh_passwd"]
         ssh_register = {"host": server, "username": ssh_user, "password": ssh_passwd}
-        admin_user = register_config['username']
-        admin_passwd = register_config['password']
+        admin_user = register_config["username"]
+        admin_passwd = register_config["password"]
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_add("hypervisor_id", "hostname", config_file)
         json_file = "/tmp/fake.json"
@@ -41,32 +41,36 @@
         self.vw_fake_conf_create(conf_file, json_file, True)
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res1)
+        results.setdefault("step2", []).append(res1)
 
         logger.info(">>>step3: use hammer command to check hypervisor's fqdn")
-        cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(admin_user, admin_passwd)
+        cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(
+            admin_user, admin_passwd
+        )
         _, result = self.runcmd(cmd, ssh_register)
         logger.info(result)
-        res2 = self.vw_msg_search(result, "virt-who-"+host_name)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(result, "virt-who-" + host_name)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: run virt-who with the new hypervisor's fqdn")
         new_name = "new" + str(random.randint(1, 10000)) + ".rhts.eng.pek2.redhat.com"
         self.vw_fake_json_update(host_name, new_name, json_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res3 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(res3)
+        results.setdefault("step4", []).append(res3)
 
         logger.info(">>>step5: use hammer command to check the new hypervisor's fqdn")
-        cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(admin_user, admin_passwd)
+        cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(
+            admin_user, admin_passwd
+        )
         _, result = self.runcmd(cmd, ssh_register)
         logger.info(result)
-        res4 = self.vw_msg_search(result, "virt-who-"+new_name)
-        res5 = self.vw_msg_search(result, "virt-who-"+host_name, False)
-        results.setdefault('step5', []).append(res4)
-        results.setdefault('step5', []).append(res5)
+        res4 = self.vw_msg_search(result, "virt-who-" + new_name)
+        res5 = self.vw_msg_search(result, "virt-who-" + host_name, False)
+        results.setdefault("step5", []).append(res4)
+        results.setdefault("step5", []).append(res5)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2063_check_hypervisors_fqdn.py
--- /tmp/lint/tests/tier2/tc_2066_validate_cluster_name_with_special_char.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2066_validate_cluster_name_with_special_char.py	2023-03-06 06:25:01.136480 +0000
@@ -5,67 +5,85 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196078')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if hypervisor_type != 'esx':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-196078")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         config = self.get_hypervisor_config()
-        ssh_hypervisor = config['ssh_hypervisor']
+        ssh_hypervisor = config["ssh_hypervisor"]
         register_config = self.get_register_config()
-        server = register_config['server']
-        ssh_user = register_config['ssh_user']
-        ssh_passwd = register_config['ssh_passwd']
+        server = register_config["server"]
+        ssh_user = register_config["ssh_user"]
+        ssh_passwd = register_config["ssh_passwd"]
         ssh_register = {"host": server, "username": ssh_user, "password": ssh_passwd}
 
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
 
-        cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+        cert = self.vcenter_cert(
+            config["server"], config["username"], config["password"]
+        )
         cluster_name = deploy.vcenter.cluster
-        new_cluster_name = "virtwho/test-" + ''.join(random.sample(string.digits, 6))
+        new_cluster_name = "virtwho/test-" + "".join(random.sample(string.digits, 6))
 
         # Case Steps
         try:
             logger.info(">>>step1: change the vcenter cluster name to: virtwho/test")
-            self.vcenter_cluster_name_set(cert, ssh_hypervisor, cluster_name, new_cluster_name)
+            self.vcenter_cluster_name_set(
+                cert, ssh_hypervisor, cluster_name, new_cluster_name
+            )
 
             logger.info(">>>step2: run virt-who service with the new cluster name")
             data, tty_output, rhsm_output = self.vw_start(exp_error=0, exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            res2 = self.vw_msg_search(rhsm_output, '"hypervisor.cluster": "{0}"'.format(new_cluster_name))
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            res2 = self.vw_msg_search(
+                rhsm_output, '"hypervisor.cluster": "{0}"'.format(new_cluster_name)
+            )
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
             logger.info(">>>step3: check the hyperivsor facts")
             if "satellite" in register_type:
-                output = self.satellite_hosts_get(self.ssh_host(), register_config,
-                                                  host_name, host_uuid, desc="get hypervisor info")
-                cmd = "hammer host facts --name {}".format(output['name'])
+                output = self.satellite_hosts_get(
+                    self.ssh_host(),
+                    register_config,
+                    host_name,
+                    host_uuid,
+                    desc="get hypervisor info",
+                )
+                cmd = "hammer host facts --name {}".format(output["name"])
                 _, result = self.runcmd(cmd, ssh_register)
             else:
-                output = self.stage_consumer_get(self.ssh_host(), register_config,
-                                                 host_name, host_uuid, desc="get hypervisor info")
-                result = output['facts']['hypervisor.cluster']
+                output = self.stage_consumer_get(
+                    self.ssh_host(),
+                    register_config,
+                    host_name,
+                    host_uuid,
+                    desc="get hypervisor info",
+                )
+                result = output["facts"]["hypervisor.cluster"]
             res = self.vw_msg_search(result, new_cluster_name)
-            results.setdefault('step3', []).append(res)
+            results.setdefault("step3", []).append(res)
 
         finally:
             logger.info(">>>step finally: change back the vcenter cluster name")
-            self.vcenter_cluster_name_set(cert, ssh_hypervisor, new_cluster_name, cluster_name)
+            self.vcenter_cluster_name_set(
+                cert, ssh_hypervisor, new_cluster_name, cluster_name
+            )
 
         # Case Result
         self.vw_case_result(results)
--- /tmp/lint/tests/tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py	2023-03-06 06:25:01.135321 +0000
@@ -2,51 +2,58 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195890')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-195890")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-9" in compose_id:
             self.vw_case_skip("RHEL-9")
         self.vw_case_init()
 
         # case config
         results = dict()
         sysconf_file = "/etc/sysconfig/virt-who"
         config_file = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', config_file)
-        self.vw_option_enable('debug', config_file)
-        self.vw_option_update_value('debug', 'True', config_file)
-        self.vw_etc_d_mode_create('virtwho-config', '/etc/virt-who.d/virtwho-config.conf')
+        self.vw_option_enable("[global]", config_file)
+        self.vw_option_enable("debug", config_file)
+        self.vw_option_update_value("debug", "True", config_file)
+        self.vw_etc_d_mode_create(
+            "virtwho-config", "/etc/virt-who.d/virtwho-config.conf"
+        )
 
         # case steps
         logger.info(">>>step1: check the prompt in /etc/sysconfig/virt-who")
-        cmd = 'cat {}'.format(sysconf_file)
-        ret, output = self.runcmd(cmd,self.ssh_host())
-        msg = 'The use of this file is deprecated and will be ignored in the next major'
+        cmd = "cat {}".format(sysconf_file)
+        ret, output = self.runcmd(cmd, self.ssh_host())
+        msg = "The use of this file is deprecated and will be ignored in the next major"
         res1 = self.vw_msg_search(output, msg)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
         logger.info(">>>step2: check the prompt in /var/log/rhsm.log")
         data, tty_output, rhsm_output = self.vw_start()
         res2 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res2)
-        msg2 ='The use of environment variables and the use of the sysconfig file ' \
-              'to configure virt-who are deprecated. ' \
-              'Their use will be ignored in the next major release'
+        results.setdefault("step1", []).append(res2)
+        msg2 = (
+            "The use of environment variables and the use of the sysconfig file "
+            "to configure virt-who are deprecated. "
+            "Their use will be ignored in the next major release"
+        )
         res3 = self.vw_msg_search(rhsm_output, msg2)
-        results.setdefault('step2', []).append(res3)
+        results.setdefault("step2", []).append(res3)
 
         logger.info(">>>step3: check the prompt in man virt-who")
-        ret, output = self.runcmd("man virt-who", self.ssh_host(), desc="run man virt-who")
-        msg3 = 'Their use is deprecated'
-        msg4 = 'and will be ignored in the next major release'
+        ret, output = self.runcmd(
+            "man virt-who", self.ssh_host(), desc="run man virt-who"
+        )
+        msg3 = "Their use is deprecated"
+        msg4 = "and will be ignored in the next major release"
         res4 = self.vw_msg_search(output, msg3)
         res5 = self.vw_msg_search(output, msg4)
-        results.setdefault('step3', []).append(res4)
-        results.setdefault('step3', []).append(res5)
+        results.setdefault("step3", []).append(res4)
+        results.setdefault("step3", []).append(res5)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2066_validate_cluster_name_with_special_char.py
would reformat /tmp/lint/tests/tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py
--- /tmp/lint/tests/tier2/tc_2067_validate_uniform_mapping_format.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2067_validate_uniform_mapping_format.py	2023-03-06 06:25:01.162647 +0000
@@ -5,38 +5,40 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198374')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-198374")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-9" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         json_file = "/tmp/fake.json"
         fake_config_file = "/etc/virt-who.d/fake.conf"
 
         # case steps
         logger.info(">>>step1: create json file")
         self.vw_fake_json_create("virt-who -d -p", json_file)
         self.vw_etc_d_delete_all()
 
-        logger.info(">>>step2: check the mapping in json file is same with debug output")
+        logger.info(
+            ">>>step2: check the mapping in json file is same with debug output"
+        )
         if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_fake_conf_create(fake_config_file, json_file, is_hypervisor=False)
         else:
             self.vw_fake_conf_create(fake_config_file, json_file, is_hypervisor=True)
-        data, tty_output, rhsm_output = self.vw_start(cli='virt-who -do', exp_send=1)
+        data, tty_output, rhsm_output = self.vw_start(cli="virt-who -do", exp_send=1)
         ret, fake_json = self.runcmd("cat {0}".format(json_file), self.ssh_host())
-        fake_json_lines = fake_json.split('\n')
+        fake_json_lines = fake_json.split("\n")
         for line in fake_json_lines:
-            results.setdefault('step2', []).append(line in tty_output)
+            results.setdefault("step2", []).append(line in tty_output)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2067_validate_uniform_mapping_format.py
--- /tmp/lint/tests/tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tests/tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py	2023-03-06 06:25:01.205229 +0000
@@ -5,13 +5,13 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198375')
-        compose_id = self.get_config('rhel_compose')
-        if 'RHEL-9' not in compose_id:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-198375")
+        compose_id = self.get_config("rhel_compose")
+        if "RHEL-9" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
@@ -24,57 +24,76 @@
 
         # Case Steps
         try:
             logger.info(">>>step1: configure and backup /etc/virt-who.conf")
             self.vw_etc_conf_disable_all()
-            self.runcmd('cp {0} {1}'.format(conf_file, conf_file_backup), self.ssh_host())
+            self.runcmd(
+                "cp {0} {1}".format(conf_file, conf_file_backup), self.ssh_host()
+            )
 
             logger.info(">>>step2: create /etc/sysconfig/virt-who file")
-            cmd = ('cat <<EOF > {0}\n'
-                   'VIRTWHO_DEBUG = 1\n'
-                   'VIRTWHO_ONE_SHOT = 0\n'
-                   'VIRTWHO_INTERVAL = 120\n'
-                   'http_proxy = {1}:{2}\n'
-                   'no_proxy = *\n'
-                   'EOF'
-                   ).format(sysconfig_file, deploy.proxy.server, deploy.proxy.port)
+            cmd = (
+                "cat <<EOF > {0}\n"
+                "VIRTWHO_DEBUG = 1\n"
+                "VIRTWHO_ONE_SHOT = 0\n"
+                "VIRTWHO_INTERVAL = 120\n"
+                "http_proxy = {1}:{2}\n"
+                "no_proxy = *\n"
+                "EOF"
+            ).format(sysconfig_file, deploy.proxy.server, deploy.proxy.port)
             self.runcmd(cmd, self.ssh_host())
 
             logger.info(">>>step3: run migrateconfiguration.py script")
             cmd = "/usr/bin/python3 /usr/lib/python3.9/site-packages/virtwho/migrate/migrateconfiguration.py"
             self.runcmd(cmd, self.ssh_host())
 
-            logger.info(">>>step4: check the configurations in {0} are migrated to {1}"
-                        .format(sysconfig_file, conf_file))
+            logger.info(
+                ">>>step4: check the configurations in {0} are migrated to {1}".format(
+                    sysconfig_file, conf_file
+                )
+            )
             ret, output = self.runcmd("cat {0}".format(conf_file), self.ssh_host())
-            msg1 = "[global]\n" \
-                   "#migrated\n" \
-                   "interval=120\n" \
-                   "#migrated\n" \
-                   "debug=True\n" \
-                   "#migrated\n" \
-                   "oneshot=False"
-            msg2 = "[system_environment]\n" \
-                   "#migrated\n" \
-                   "http_proxy=squid.corp.redhat.com:3128\n" \
-                   "#migrated\n" \
-                   "no_proxy=*"
-            results.setdefault('step4', []).append(msg1 in output)
-            results.setdefault('step4', []).append(msg2 in output)
+            msg1 = (
+                "[global]\n"
+                "#migrated\n"
+                "interval=120\n"
+                "#migrated\n"
+                "debug=True\n"
+                "#migrated\n"
+                "oneshot=False"
+            )
+            msg2 = (
+                "[system_environment]\n"
+                "#migrated\n"
+                "http_proxy=squid.corp.redhat.com:3128\n"
+                "#migrated\n"
+                "no_proxy=*"
+            )
+            results.setdefault("step4", []).append(msg1 in output)
+            results.setdefault("step4", []).append(msg2 in output)
 
-            logger.info(">>>step5: run virt-who to test the migrated options working well")
+            logger.info(
+                ">>>step5: run virt-who to test the migrated options working well"
+            )
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120)
+            res1 = self.op_normal_value(
+                data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120
+            )
             res2 = self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]")
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
-
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         finally:
             logger.info(">>>step6: recover environments")
-            self.runcmd('cp {0} {1} ; rm -f {0}'.format(conf_file_backup, conf_file),
-                        self.ssh_host(), desc="recover the /etc/virt-who.conf file")
-            self.runcmd('rm -f {0}'.format(sysconfig_file),
-                        self.ssh_host(), desc="remove the /etc/sysconfig/virt-who file")
+            self.runcmd(
+                "cp {0} {1} ; rm -f {0}".format(conf_file_backup, conf_file),
+                self.ssh_host(),
+                desc="recover the /etc/virt-who.conf file",
+            )
+            self.runcmd(
+                "rm -f {0}".format(sysconfig_file),
+                self.ssh_host(),
+                desc="remove the /etc/sysconfig/virt-who file",
+            )
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py
--- /tmp/lint/tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py	2023-03-06 06:25:01.230148 +0000
@@ -5,33 +5,35 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198867')
-        compose_id = self.get_config('rhel_compose')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-198867")
+        compose_id = self.get_config("rhel_compose")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "kubevirt" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         if "RHEL-9" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', "/etc/virt-who.conf")
-        self.vw_option_enable('debug', "/etc/virt-who.conf")
-        self.vw_option_update_value('debug', 'True', "/etc/virt-who.conf")
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: configure kubeconfig without cert and run virt-who")
         kube_config_file = "/root/kube.conf_no_cert"
         kube_config_url = deploy.kubevirt.kube_config_url_no_cert
-        cmd = "rm -f {1}; curl -L {0} -o {1}; sync".format(kube_config_url, kube_config_file)
+        cmd = "rm -f {1}; curl -L {0} -o {1}; sync".format(
+            kube_config_url, kube_config_file
+        )
         self.runcmd(cmd, self.ssh_host())
         self.vw_option_update_value("kubeconfig", kube_config_file, config_file)
 
         for option in ("none", "", "0", "False"):
             if option == "none":
@@ -41,21 +43,21 @@
                 logger.info("> configure virt-who run with insecure={0}".format(option))
             data, tty_output, rhsm_output = self.vw_start(exp_error=True, exp_send=0)
             error_msg = "certificate verify failed"
             res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
             res2 = self.vw_msg_search(rhsm_output, error_msg)
-            results.setdefault('step1', []).append(res1)
-            results.setdefault('step1', []).append(res2)
+            results.setdefault("step1", []).append(res1)
+            results.setdefault("step1", []).append(res2)
             self.vw_option_del("insecure", config_file)
 
         logger.info(">>>step2: test insecure=1/True can ignore checking cert")
         for option in ("1", "True"):
             logger.info("> configure virt-who run with insecure={0}".format(option))
             self.vw_option_add("insecure", option, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_error=False, exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res)
+            results.setdefault("step2", []).append(res)
             self.vw_option_del("insecure", config_file)
 
         self.runcmd("rm -rf {0}".format(kube_config_file), self.ssh_host())
 
         # case result
would reformat /tmp/lint/tests/tier2/tc_2069_valide_insecure_option_for_kubevirt.py
--- /tmp/lint/tests/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tests/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py	2023-03-06 06:25:01.258856 +0000
@@ -2,43 +2,51 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133743')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133743")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
         config_file = "/etc/sysconfig/virt-who"
         self.vw_option_enable("VIRTWHO_DEBUG", filename=config_file)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', filename=config_file)
-        self.vw_etc_sys_mode_enable(uid='01')
-        self.vw_etc_sys_mode_enable(uid='02')
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=config_file)
+        self.vw_etc_sys_mode_enable(uid="01")
+        self.vw_etc_sys_mode_enable(uid="02")
 
         # case steps
         logger.info(">>>step1: check reporter sent and no error msg")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check how many modes in rhsm.log")
         modes = re.findall(r'Using configuration.*\("(.*?)" mode\)', rhsm_output)
         if len(modes) == 1:
-            logger.info("Succeeded to check, only one mode in rhsm.log: {0}".format(modes))
-            results.setdefault('step2', []).append(True)
+            logger.info(
+                "Succeeded to check, only one mode in rhsm.log: {0}".format(modes)
+            )
+            results.setdefault("step2", []).append(True)
         else:
-            logger.error("Failed to check, the modes number is not matched: {0}".format(modes))
-            results.setdefault('step2', []).append(False)
+            logger.error(
+                "Failed to check, the modes number is not matched: {0}".format(modes)
+            )
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py
--- /tmp/lint/tests/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tests/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py	2023-03-06 06:25:01.288199 +0000
@@ -2,44 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133731')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133731")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
         config_02_name = "virtwho-config-{0}".format(hypervisor2_type)
         config_02_file = "/etc/virt-who.d/{0}.conf".format(config_02_name)
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
 
         # case steps
         logger.info(">>>step1: create two config files for two different hypervisors")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid='02')
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid="02")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info included two hypervisors")
         res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)
         res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tests/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py	2023-03-06 06:25:01.301161 +0000
@@ -2,46 +2,50 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133733')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133733")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
         config_02_name = "virtwho-config-{0}".format(hypervisor2_type)
         config_02_file = "/etc/virt-who.d/{0}.conf".format(config_02_name)
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
-        
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
+
         # case steps
         logger.info(">>>step1: create config file include two different hypervisors")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid='02')
-        cmd = 'cat {0} >> {1} && rm -rf {0}'.format(config_02_file, config_01_file)
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid="02")
+        cmd = "cat {0} >> {1} && rm -rf {0}".format(config_02_file, config_01_file)
         ret, output = self.runcmd(cmd, self.ssh_host())
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info included two hypervisors")
         res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)
         res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py
--- /tmp/lint/tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py	2023-03-06 06:25:01.330297 +0000
@@ -2,44 +2,50 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133737')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133737")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
 
         # case steps
-        logger.info(">>>step1: enable mode in /etc/sysconfig/virt-who and config another mode in /etc/virt-who.d/")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        self.vw_etc_sys_mode_enable(uid='02')
+        logger.info(
+            ">>>step1: enable mode in /etc/sysconfig/virt-who and config another mode in /etc/virt-who.d/"
+        )
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        self.vw_etc_sys_mode_enable(uid="02")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info included two hypervisors")
         res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)
         res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py
--- /tmp/lint/tests/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tests/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py	2023-03-06 06:25:01.338321 +0000
@@ -2,41 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133740')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133740")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
 
         # case Steps
         logger.info(">>>step1: create a extra hypervisors in virt-who.d and run cli -d")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        cmd = self.vw_cli_base(uid='02') + "-d"
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        cmd = self.vw_cli_base(uid="02") + "-d"
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info included two hypervisors")
         res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)
         res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py
--- /tmp/lint/tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py	2023-03-06 06:25:01.370553 +0000
@@ -2,51 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133742')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133742")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
         config_02_name = "virtwho-config-{0}".format(hypervisor2_type)
         config_02_file = "/etc/virt-who.d/{0}.conf".format(config_02_name)
-        host_01_uuid = self.get_hypervisor_hostuuid(uid='01')
-        host_02_uuid = self.get_hypervisor_hostuuid(uid='02')
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
+        host_01_uuid = self.get_hypervisor_hostuuid(uid="01")
+        host_02_uuid = self.get_hypervisor_hostuuid(uid="02")
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
         json_file = "/tmp/fake.json"
         fake_conf_file = "/etc/virt-who.d/fake.conf"
 
         # case steps
         logger.info(">>>step1: create json file and fake config file")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid='02')
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid="02")
         self.vw_fake_json_create("virt-who", json_file)
         self.vw_etc_d_delete_all()
         self.vw_fake_conf_create(fake_conf_file, json_file, is_hypervisor=True)
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_rhsm_associate(data, host_01_uuid, guest_01_uuid, uid='01')
-        res3 = self.vw_rhsm_associate(data, host_02_uuid, guest_02_uuid, uid='02')
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
-        results.setdefault('step2', []).append(res3)
+        res2 = self.vw_rhsm_associate(data, host_01_uuid, guest_01_uuid, uid="01")
+        res3 = self.vw_rhsm_associate(data, host_02_uuid, guest_02_uuid, uid="02")
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
+        results.setdefault("step2", []).append(res3)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tests/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py
--- /tmp/lint/utils/merge-xunit.py	2023-03-03 05:26:23.349065 +0000
+++ /tmp/lint/utils/merge-xunit.py	2023-03-06 06:25:01.410815 +0000
@@ -6,19 +6,21 @@
 """
 example usage:
     $ python merge-xunit.py results1.xml results2.xml > results.xml
 """
 
+
 def main():
     args = sys.argv[1:]
     if not args:
         usage()
         sys.exit(2)
-    if '-h' in args or '--help' in args:
+    if "-h" in args or "--help" in args:
         usage()
         sys.exit(2)
     merge_results(args[:])
+
 
 def merge_results(xml_files):
     failures = 0
     tests = 0
     errors = 0
@@ -26,31 +28,33 @@
     cases = []
 
     for file_name in xml_files:
         tree = ET.parse(file_name)
         test_suite = tree.getroot()
-        failures += int(test_suite.attrib['failures'])
-        tests += int(test_suite.attrib['tests'])
-        errors += int(test_suite.attrib['errors'])
-        time += float(test_suite.attrib['time'])
+        failures += int(test_suite.attrib["failures"])
+        tests += int(test_suite.attrib["tests"])
+        errors += int(test_suite.attrib["errors"])
+        time += float(test_suite.attrib["time"])
         cases.append(list(test_suite))
 
-    new_root = ET.Element('testsuite')
-    new_root.attrib['failures'] = '%s' % failures
-    new_root.attrib['tests'] = '%s' % tests
-    new_root.attrib['errors'] = '%s' % errors
-    new_root.attrib['time'] = '%s' % time
+    new_root = ET.Element("testsuite")
+    new_root.attrib["failures"] = "%s" % failures
+    new_root.attrib["tests"] = "%s" % tests
+    new_root.attrib["errors"] = "%s" % errors
+    new_root.attrib["time"] = "%s" % time
     for case in cases:
         new_root.extend(case)
     properties = new_root.findall("properties")
     for index, item in enumerate(properties, start=0):
         if index != 0:
             new_root.remove(item)
     new_tree = ET.ElementTree(new_root)
     ET.dump(new_tree)
 
+
 def usage():
     this_file = os.path.basename(__file__)
     print("Usage: python merge-xunit.py results1.xml results2.xml > results.xml")
 
-if __name__ == '__main__':
+
+if __name__ == "__main__":
     main()
would reformat /tmp/lint/utils/merge-xunit.py
--- /tmp/lint/virt_who/__init__.py	2023-03-03 05:26:23.349065 +0000
+++ /tmp/lint/virt_who/__init__.py	2023-03-06 06:25:01.475976 +0000
@@ -13,16 +13,17 @@
 import threading
 import paramiko
 import urllib3
 from six import PY3
 from urllib3.util.timeout import Timeout
+
 urllib3.disable_warnings()
 
 try:
-   import queue
+    import queue
 except ImportError:
-   import Queue as queue
+    import Queue as queue
 
 from six import StringIO
 from six import BytesIO
 
 if sys.version_info < (2, 7):
@@ -30,37 +31,32 @@
 else:
     import unittest
 
 from virt_who.settings import DeploySettings
 from virt_who.settings import ConfigSettings
+
 # configuration for provisioning environment
 deploy = DeploySettings()
 deploy.configure("provision.ini")
 # configuration for debugging testcases
 config = ConfigSettings()
 config.configure("config.ini")
 
 # result data for polarion importer
-runtest_info = os.path.join(os.path.realpath(os.path.join(
-    os.path.dirname(__file__),
-    os.pardir)),
-    "runtest.txt"
-    )
+runtest_info = os.path.join(
+    os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir)), "runtest.txt"
+)
 
 # debug log file
-DEBUG_FILE = os.path.join(os.path.realpath(os.path.join(
-    os.path.dirname(__file__),
-    os.pardir)),
-    "debug.log"
-    )
+DEBUG_FILE = os.path.join(
+    os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir)), "debug.log"
+)
 
 # console output
-LOGGER_FILE = os.path.join(os.path.realpath(os.path.join(
-    os.path.dirname(__file__),
-    os.pardir)),
-    "console.log"
-    )
+LOGGER_FILE = os.path.join(
+    os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir)), "console.log"
+)
 
 # create a logger
 logger = logging.getLogger("vw")
 logger.setLevel(logging.DEBUG)
 
@@ -72,21 +68,21 @@
 ch = logging.StreamHandler()
 ch.setLevel(logging.DEBUG)
 
 # logging format
 formatter = logging.Formatter(
-        fmt='%(asctime)s [%(levelname)s] %(message)s',
-        datefmt='%Y-%m-%d %H:%M:%S'
-        )
+    fmt="%(asctime)s [%(levelname)s] %(message)s", datefmt="%Y-%m-%d %H:%M:%S"
+)
 fh.setFormatter(formatter)
 ch.setFormatter(formatter)
 
 logger.addHandler(fh)
 logger.addHandler(ch)
 
 # turn off paramiko log off
 paramiko_logger = logging.getLogger("paramiko.transport")
 paramiko_logger.disabled = True
 
+
 class FailException(BaseException):
     def __init__(self, error_message):
         logger.error(error_message)
would reformat /tmp/lint/virt_who/__init__.py
--- /tmp/lint/utils/installer.py	2023-03-03 05:26:23.349065 +0000
+++ /tmp/lint/utils/installer.py	2023-03-06 06:25:01.841799 +0000
@@ -1,74 +1,79 @@
 #!/usr/bin/python
 
 import os
 import sys
 import argparse
+
 curPath = os.path.abspath(os.path.dirname(__file__))
 rootPath = os.path.split(curPath)[0]
 sys.path.append(rootPath)
 from virt_who import *
 from virt_who.provision import Provision
 
+
 def update_section(section, option=None, value=None):
     if not os.path.exists(json_file):
-        with open(json_file, 'w') as fd:
-            fd.write('{}')
+        with open(json_file, "w") as fd:
+            fd.write("{}")
     with open(json_file) as fd:
         data = json.load(fd)
     if section in data:
         data[section][option] = value
     else:
-        data[section]={option:value}
-    with open(json_file, 'w') as fd:
+        data[section] = {option: value}
+    with open(json_file, "w") as fd:
         json.dump(data, fd, indent=4, sort_keys=True)
+
 
 def install_rhel_by_beaker(args):
     ssh_username = deploy.beaker.default_user
     ssh_password = deploy.beaker.default_passwd
-    job_name = 'virtwho-ci-{}'.format(args.rhel_compose)
+    job_name = "virtwho-ci-{}".format(args.rhel_compose)
     job_id = provision.beaker_Jsubmit(
         args.os_type,
         args.variant,
         args.arch,
         args.rhel_compose,
         job_name,
     )
-    while(provision.beaker_Jstatus({job_name:job_id})):
+    while provision.beaker_Jstatus({job_name: job_id}):
         time.sleep(60)
-    results = provision.beaker_Jresult({job_name:job_id})
+    results = provision.beaker_Jresult({job_name: job_id})
     if results[job_name]:
-        update_section('host', 'hostname', results[job_name])
-        update_section('host', 'ssh_username', ssh_username)
-        update_section('host', 'ssh_password', ssh_password)
+        update_section("host", "hostname", results[job_name])
+        update_section("host", "ssh_username", ssh_username)
+        update_section("host", "ssh_password", ssh_password)
+
 
 def install_rhel_by_grub(args):
     host = args.host
     username = args.username
     password = args.password
-    ssh_host = {'host':host, 'username':username, 'password':password}
+    ssh_host = {"host": host, "username": username, "password": password}
     provision.rhel_install_by_grub(ssh_host, args.rhel_compose)
-    update_section('host', 'hostname', host)
-    update_section('host', 'ssh_username', username)
-    update_section('host', 'ssh_password', password)
+    update_section("host", "hostname", host)
+    update_section("host", "ssh_username", username)
+    update_section("host", "ssh_password", password)
+
 
 def install_satellite(args):
     host = args.host
     username = args.username
     password = args.password
     sat_type = "satellite{}-{}-{}".format(
         args.sat_release,
         args.sat_repo,
         args.sat_os,
-        ).lower()
+    ).lower()
     admin_username = deploy.satellite.admin_user
     admin_password = deploy.satellite.admin_passwd
     manifest_url = deploy.satellite.manifest
-    ssh_sat = {'host':host, 'username':username, 'password':password}
+    ssh_sat = {"host": host, "username": username, "password": password}
     provision.system_init("satellite-host-virtwho", ssh_sat)
     sat_ver, rhel_ver = provision.satellite_version(sat_type)
-    logger.info('satellite version: {0}, RHEL version: {1}'.format(sat_ver, rhel_ver))
+    logger.info("satellite version: {0}, RHEL version: {1}".format(sat_ver, rhel_ver))
     if "dogfood" in sat_type:
         provision.employee_sku_attach(ssh_sat)
         provision.satellite_repo_enable(ssh_sat, sat_ver, rhel_ver)
     if "cdn" in sat_type:
         provision.employee_sku_attach(ssh_sat)
@@ -80,63 +85,76 @@
             provision.satellite_cdn_repo_enable(ssh_sat, sat_ver, rhel_ver)
     if "nightly" in sat_type:
         provision.employee_sku_attach(ssh_sat)
         provision.rhel_repo_enable(ssh_sat)
         provision.satellite_nightly_deploy(
-            ssh_sat, admin_username, admin_password, manifest_url)
+            ssh_sat, admin_username, admin_password, manifest_url
+        )
     else:
         provision.satellite_pkg_install(ssh_sat)
         provision.satellite_deploy(
-            ssh_sat, admin_username, admin_password, manifest_url, sat_ver)
+            ssh_sat, admin_username, admin_password, manifest_url, sat_ver
+        )
     cmd = "rm -f {1}; curl -L {0} -o {1}; sync".format(
-        deploy.kubevirt.kube_config_url,
-        deploy.kubevirt.kube_config_file)
+        deploy.kubevirt.kube_config_url, deploy.kubevirt.kube_config_file
+    )
     provision.runcmd(cmd, ssh_sat)
     provision.runcmd(
-        'hammer settings set --name=failed_login_attempts_limit --value=0',
-        ssh_sat)
+        "hammer settings set --name=failed_login_attempts_limit --value=0", ssh_sat
+    )
     provision.runcmd(
-        'hammer settings set --name=unregister_delete_host --value=true',
-        ssh_sat)
+        "hammer settings set --name=unregister_delete_host --value=true", ssh_sat
+    )
     provision.ssh_no_passwd_access(ssh_sat)
-    update_section('satellite', 'hostname', host)
-    update_section('satellite', 'ssh_username', username)
-    update_section('satellite', 'ssh_password', password)
-    update_section('satellite', 'admin_username', admin_username)
-    update_section('satellite', 'admin_password', admin_username)
+    update_section("satellite", "hostname", host)
+    update_section("satellite", "ssh_username", username)
+    update_section("satellite", "ssh_password", password)
+    update_section("satellite", "admin_username", admin_username)
+    update_section("satellite", "admin_password", admin_username)
+
 
 def setup_esx():
     vcenter_ip = deploy.vcenter.ip
     vcenter_admin_user = deploy.vcenter.admin_user
     vcenter_admin_passwd = deploy.vcenter.admin_passwd
     guest_name = deploy.vcenter.guest_name
     guest_username = deploy.vcenter.guest_user
     guest_password = deploy.vcenter.guest_passwd
     image_path = deploy.vcenter.image_path
     ssh_vcenter = {
-        'host':vcenter_ip,
-        'username': deploy.vcenter.ssh_user,
-        'password': deploy.vcenter.ssh_passwd}
+        "host": vcenter_ip,
+        "username": deploy.vcenter.ssh_user,
+        "password": deploy.vcenter.ssh_passwd,
+    }
     ssh_master = {
-        'host': deploy.vcenter.master,
-        'username': deploy.vcenter.master_user,
-        'password': deploy.vcenter.master_passwd}
-    cert = provision.vcenter_cert(
-        vcenter_ip, vcenter_admin_user, vcenter_admin_passwd)
+        "host": deploy.vcenter.master,
+        "username": deploy.vcenter.master_user,
+        "password": deploy.vcenter.master_passwd,
+    }
+    cert = provision.vcenter_cert(vcenter_ip, vcenter_admin_user, vcenter_admin_passwd)
     guest_ip = provision.vcenter_guest_ip(cert, ssh_vcenter, guest_name)
     if not guest_ip:
         provision.vcenter_host_ready(cert, ssh_vcenter, ssh_master)
         guest_ip = provision.vcenter_guest_add(
-            cert, ssh_vcenter, ssh_master, guest_name, image_path)
+            cert, ssh_vcenter, ssh_master, guest_name, image_path
+        )
     ssh_guest = {
-        'host': guest_ip, 
-        'username': guest_username, 
-        'password': guest_password}
+        "host": guest_ip,
+        "username": guest_username,
+        "password": guest_password,
+    }
     provision.system_init("ci-guest-esx", ssh_guest)
     update_hypervisor_section(
-        'esx', vcenter_ip, vcenter_admin_user, vcenter_admin_passwd,
-        guest_ip, guest_username, guest_password)
+        "esx",
+        vcenter_ip,
+        vcenter_admin_user,
+        vcenter_admin_passwd,
+        guest_ip,
+        guest_username,
+        guest_password,
+    )
+
 
 def setup_xen():
     master = deploy.xen.master
     master_username = deploy.xen.master_user
     master_password = deploy.xen.master_passwd
@@ -145,237 +163,272 @@
     guest_password = deploy.xen.guest_passwd
     sr_name = deploy.xen.sr_name
     sr_server = deploy.xen.sr_server
     sr_path = deploy.xen.sr_path
     image_path = deploy.xen.image_path
-    ssh_master ={
-        'host': master,
-        'username': master_username,
-        'password': master_password}
+    ssh_master = {
+        "host": master,
+        "username": master_username,
+        "password": master_password,
+    }
     guest_ip = provision.xen_guest_ip(ssh_master, guest_name)
     if not guest_ip:
         provision.xen_host_ready(ssh_master, sr_name, sr_server, sr_path)
-        guest_ip = provision.xen_guest_add(
-            ssh_master, guest_name, sr_name, image_path)
+        guest_ip = provision.xen_guest_add(ssh_master, guest_name, sr_name, image_path)
     ssh_guest = {
-        'host': guest_ip,
-        'username': guest_username,
-        'password': guest_password}
+        "host": guest_ip,
+        "username": guest_username,
+        "password": guest_password,
+    }
     provision.system_init("ci-guest-xen", ssh_guest)
     update_hypervisor_section(
-        'xen', master, master_username, master_password,
-        guest_ip, guest_username, guest_password)
+        "xen",
+        master,
+        master_username,
+        master_password,
+        guest_ip,
+        guest_username,
+        guest_password,
+    )
+
 
 def setup_hyperv():
     master = deploy.hyperv.master
     master_username = deploy.hyperv.master_user
     master_password = deploy.hyperv.master_passwd
     guest_name = deploy.hyperv.guest_name
     guest_username = deploy.hyperv.guest_user
     guest_password = deploy.hyperv.guest_passwd
     image_path = deploy.hyperv.image_path
-    ssh_hyperv ={
-        'host': master,
-        'username': master_username,
-        'password': master_password}
+    ssh_hyperv = {
+        "host": master,
+        "username": master_username,
+        "password": master_password,
+    }
     guest_ip = provision.hyperv_guest_ip(ssh_hyperv, guest_name)
     if not guest_ip:
-        guest_ip = provision.hyperv_guest_add(
-            ssh_hyperv, guest_name, image_path)
+        guest_ip = provision.hyperv_guest_add(ssh_hyperv, guest_name, image_path)
     ssh_guest = {
-        'host': guest_ip,
-        'username': guest_username,
-        'password': guest_password}
+        "host": guest_ip,
+        "username": guest_username,
+        "password": guest_password,
+    }
     provision.system_init("ci-guest-hyperv", ssh_guest)
     update_hypervisor_section(
-        'hyperv', master, master_username, master_password,
-        guest_ip, guest_username, guest_password)
-   
+        "hyperv",
+        master,
+        master_username,
+        master_password,
+        guest_ip,
+        guest_username,
+        guest_password,
+    )
+
+
 def setup_rhevm():
     rhevm_admin_username = deploy.rhevm.rhevm_admin_user
     rhevm_admin_password = deploy.rhevm.rhevm_admin_passwd
     guest_name = deploy.rhevm.guest_name
     guest_username = deploy.rhevm.guest_user
     guest_password = deploy.rhevm.guest_passwd
     ssh_rhevm = {
-        'host': deploy.rhevm.rhevm_ip,
-        'username': deploy.rhevm.rhevm_ssh_user,
-        'password': deploy.rhevm.rhevm_ssh_passwd}
+        "host": deploy.rhevm.rhevm_ip,
+        "username": deploy.rhevm.rhevm_ssh_user,
+        "password": deploy.rhevm.rhevm_ssh_passwd,
+    }
     rhevm_url = provision.rhevm_admin_get(ssh_rhevm)
     guest_ip = provision.rhevm_guest_ip(ssh_rhevm, guest_name)
     ssh_guest = {
-        'host': guest_ip,
-        'username': guest_username,
-        'password': guest_password}
+        "host": guest_ip,
+        "username": guest_username,
+        "password": guest_password,
+    }
     provision.system_init("ci-guest-rhevm", ssh_guest)
     update_hypervisor_section(
-        'rhevm', rhevm_url, rhevm_admin_username, rhevm_admin_password,
-        guest_ip, guest_username, guest_password)
+        "rhevm",
+        rhevm_url,
+        rhevm_admin_username,
+        rhevm_admin_password,
+        guest_ip,
+        guest_username,
+        guest_password,
+    )
+
 
 def setup_libvirt():
     host = deploy.libvirt.remote
     username = deploy.libvirt.remote_user
     password = deploy.libvirt.remote_passwd
     guest_name = deploy.libvirt.guest_name
     guest_username = deploy.libvirt.guest_user
     guest_password = deploy.libvirt.guest_passwd
-    ssh_libvirt = {
-        'host': host,
-        'username': username,
-        'password': password}
-    provision.runcmd('service libvirtd restart', ssh_libvirt)
+    ssh_libvirt = {"host": host, "username": username, "password": password}
+    provision.runcmd("service libvirtd restart", ssh_libvirt)
     guest_ip = provision.libvirt_guest_ip(guest_name, ssh_libvirt)
     if not guest_ip:
         provision.libvirt_guests_all_clean(ssh_libvirt)
         guest_ip = provision.libvirt_guest_add(guest_name, ssh_libvirt)
     ssh_guest = {
-        'host':guest_ip,
-        'username': guest_username,
-        'password': guest_password}
+        "host": guest_ip,
+        "username": guest_username,
+        "password": guest_password,
+    }
     provision.system_init("ci-guest-libvirt-remote", ssh_guest)
     update_hypervisor_section(
-        'libvirt', host, username, password,
-        guest_ip, guest_username, guest_password)
+        "libvirt", host, username, password, guest_ip, guest_username, guest_password
+    )
 
 
 def setup_kubevirt():
     master = deploy.kubevirt.endpoint
-    master_username = ''
+    master_username = ""
     master_password = deploy.kubevirt.token
     guest_name = deploy.kubevirt.guest_name
     guest_username = deploy.kubevirt.guest_user
     guest_password = deploy.kubevirt.guest_passwd
     guest = provision.kubevirt_guest_ip(guest_name)
     if guest:
         ssh_guest = {
-            'host': guest,
-            'username': guest_username,
-            'password' :guest_password}
+            "host": guest,
+            "username": guest_username,
+            "password": guest_password,
+        }
         provision.system_init("ci-guest-kubvirt", ssh_guest)
-        if ':' in guest:
-            guest_ip = guest.split(':')[0]
-            guest_port = guest.split(':')[1]
+        if ":" in guest:
+            guest_ip = guest.split(":")[0]
+            guest_port = guest.split(":")[1]
         update_hypervisor_section(
-            'kubevirt', master, master_username, master_password,
-            guest_ip, guest_username, guest_password, guest_port,
-            deploy.kubevirt.kube_config_file)
+            "kubevirt",
+            master,
+            master_username,
+            master_password,
+            guest_ip,
+            guest_username,
+            guest_password,
+            guest_port,
+            deploy.kubevirt.kube_config_file,
+        )
+
 
 def update_hypervisor_section(
-        mode, server, username, password,
-        guest, guest_username, guest_password, guest_port=22,
-        kubeconfig=None):
-    update_section(mode, 'hypervisor_type', mode)
-    update_section(mode, 'hypervisor_server', server)
-    update_section(mode, 'hypervisor_username', username)
-    update_section(mode, 'hypervisor_password', password) 
+    mode,
+    server,
+    username,
+    password,
+    guest,
+    guest_username,
+    guest_password,
+    guest_port=22,
+    kubeconfig=None,
+):
+    update_section(mode, "hypervisor_type", mode)
+    update_section(mode, "hypervisor_server", server)
+    update_section(mode, "hypervisor_username", username)
+    update_section(mode, "hypervisor_password", password)
     if kubeconfig:
-        update_section(mode, 'hypervisor_config_file', kubeconfig)
-    update_section(mode, 'guest', guest)
-    update_section(mode, 'guest_port', str(guest_port))
-    update_section(mode, 'guest_username', guest_username)
-    update_section(mode, 'guest_password', guest_password)
+        update_section(mode, "hypervisor_config_file", kubeconfig)
+    update_section(mode, "guest", guest)
+    update_section(mode, "guest_port", str(guest_port))
+    update_section(mode, "guest_username", guest_username)
+    update_section(mode, "guest_password", guest_password)
+
 
 def parser_arguments():
     parser = argparse.ArgumentParser()
-    subparsers = parser.add_subparsers(dest='command')
+    subparsers = parser.add_subparsers(dest="command")
     # Install RHEL OS by Beaker
     beaker_parser = subparsers.add_parser(
-        'install-rhel-bkr',
-        help='Install rhel os by beaker')
+        "install-rhel-bkr", help="Install rhel os by beaker"
+    )
     beaker_parser.add_argument(
-        '--os-type',
-        required=True,
-        help='One of [physical, virtual]')
+        "--os-type", required=True, help="One of [physical, virtual]"
+    )
     beaker_parser.add_argument(
-        '--variant',
-        required=True,
-        help='One of [Server, Client, Workstation, BaseOS]')
+        "--variant", required=True, help="One of [Server, Client, Workstation, BaseOS]"
+    )
     beaker_parser.add_argument(
-        '--arch',
-        required=True,
-        help='One of [x86_64, s390x, ppc64, ppc64le, aarch64]')
+        "--arch", required=True, help="One of [x86_64, s390x, ppc64, ppc64le, aarch64]"
+    )
     beaker_parser.add_argument(
-        '--rhel-compose',
-        required=True,
-        help='Such as: RHEL-7.6-20181010.0, RHEL-8.0-20181005.1')
+        "--rhel-compose",
+        required=True,
+        help="Such as: RHEL-7.6-20181010.0, RHEL-8.0-20181005.1",
+    )
     # Install RHEL OS by updating grub
     grub_parser = subparsers.add_parser(
-        'install-rhel-grub',
-        help='Install rhel os by updating grub')
+        "install-rhel-grub", help="Install rhel os by updating grub"
+    )
     grub_parser.add_argument(
-        '--host',
-        required=True,
-        help="The IP or Hostname where host's grub will be updated")
+        "--host",
+        required=True,
+        help="The IP or Hostname where host's grub will be updated",
+    )
     grub_parser.add_argument(
-        '--username',
-        required=True,
-        help="The ssh username of this host")
+        "--username", required=True, help="The ssh username of this host"
+    )
     grub_parser.add_argument(
-        '--password',
-        required=True,
-        help="The ssh password of this host")
+        "--password", required=True, help="The ssh password of this host"
+    )
     grub_parser.add_argument(
-        '--rhel-compose',
-        required=True,
-        help='such as: RHEL-7.6-20181010.0, RHEL-8.0-20181005.1')
+        "--rhel-compose",
+        required=True,
+        help="such as: RHEL-7.6-20181010.0, RHEL-8.0-20181005.1",
+    )
     # Install Satellite
-    sat_parser = subparsers.add_parser(
-        'install-satellite',
-        help='install satellite')
-    sat_parser.add_argument(
-        '--host',
-        required=True,
-        help="The IP or Hostname where satellite will be deployed")
-    sat_parser.add_argument(
-        '--username',
-        required=True,
-        help="The ssh username of this host")
-    sat_parser.add_argument(
-        '--password',
-        required=True,
-        help="The ssh password of this host")
-    sat_parser.add_argument(
-        '--sat-release',
-        required=True,
-        help="One of ['6.5', '6.6']")
-    sat_parser.add_argument(
-        '--sat-repo',
-        required=True,
-        help="One of ['cdn', 'dogfood']")
-    sat_parser.add_argument(
-        '--sat-os',
-        required=True,
-        help='such as: RHEL-7.6-20181010.0, RHEL-8.0-20181005.1')
+    sat_parser = subparsers.add_parser("install-satellite", help="install satellite")
+    sat_parser.add_argument(
+        "--host",
+        required=True,
+        help="The IP or Hostname where satellite will be deployed",
+    )
+    sat_parser.add_argument(
+        "--username", required=True, help="The ssh username of this host"
+    )
+    sat_parser.add_argument(
+        "--password", required=True, help="The ssh password of this host"
+    )
+    sat_parser.add_argument(
+        "--sat-release", required=True, help="One of ['6.5', '6.6']"
+    )
+    sat_parser.add_argument(
+        "--sat-repo", required=True, help="One of ['cdn', 'dogfood']"
+    )
+    sat_parser.add_argument(
+        "--sat-os",
+        required=True,
+        help="such as: RHEL-7.6-20181010.0, RHEL-8.0-20181005.1",
+    )
     # Hypervisor Provision
     hypervisor_parser = subparsers.add_parser(
-        'install-hypervisor',
-        help='setup hypervisor based on the provision.in')
+        "install-hypervisor", help="setup hypervisor based on the provision.in"
+    )
     hypervisor_parser.add_argument(
-        '--hypervisor-type',
-        required=True,
-        help="One of ['esx', 'xen', 'hyperv', 'rhevm', 'libvirt', 'kubevirt']")
+        "--hypervisor-type",
+        required=True,
+        help="One of ['esx', 'xen', 'hyperv', 'rhevm', 'libvirt', 'kubevirt']",
+    )
     return parser.parse_args()
 
+
 if __name__ == "__main__":
-    json_file = os.path.join(
-        os.path.abspath(os.path.dirname(__file__)),
-        'report.json')
+    json_file = os.path.join(os.path.abspath(os.path.dirname(__file__)), "report.json")
     provision_ini = os.path.join(
         os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir)),
-        'provision.ini')
+        "provision.ini",
+    )
     if not os.path.exists(provision_ini):
-        logger.error('{} is not existing.'.format(provision_ini))
+        logger.error("{} is not existing.".format(provision_ini))
         sys.exit(1)
     args = parser_arguments()
     provision = Provision()
-    if args.command == 'install-rhel-bkr':
+    if args.command == "install-rhel-bkr":
         install_rhel_by_beaker(args)
-    if args.command == 'install-rhel-grub':
+    if args.command == "install-rhel-grub":
         install_rhel_by_grub(args)
-    if args.command == 'install-satellite':
+    if args.command == "install-satellite":
         install_satellite(args)
-    if args.command == 'install-hypervisor':
+    if args.command == "install-hypervisor":
         if args.hypervisor_type == "esx":
             setup_esx()
         if args.hypervisor_type == "xen":
             setup_xen()
         if args.hypervisor_type == "hyperv":
would reformat /tmp/lint/utils/installer.py
--- /tmp/lint/virt_who/scheduler.py	2023-03-03 05:26:23.350065 +0000
+++ /tmp/lint/virt_who/scheduler.py	2023-03-06 06:25:01.876091 +0000
@@ -1,12 +1,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.provision import Provision
+
 
 class RunProvision(Provision):
     def test_run(self):
         case_name = self.__class__.__name__
         self.provision_start()
 
+
 if __name__ == "__main__":
     unittest.main()
would reformat /tmp/lint/virt_who/scheduler.py
--- /tmp/lint/virt_who/base.py	2023-03-03 05:26:23.349065 +0000
+++ /tmp/lint/virt_who/base.py	2023-03-06 06:25:02.356502 +0000
@@ -1,6 +1,7 @@
 from virt_who import *
+
 
 class Base(unittest.TestCase):
     def paramiko_run(self, cmd, host, username, password, timeout=1800, port=22):
         ssh = paramiko.SSHClient()
         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
@@ -20,11 +21,11 @@
                 error_buff = chan.recv_stderr(1024)
                 while error_buff:
                     error.write(error_buff)
                     error_buff = chan.recv_stderr(1024)
                 exit_status = chan.recv_exit_status()
-                output = contents.getvalue()+error.getvalue()
+                output = contents.getvalue() + error.getvalue()
                 if type(output) is bytes:
                     output = output.decode("utf-8")
                 ssh.close()
                 return exit_status, output
             except socket.timeout:
@@ -42,63 +43,65 @@
         sftp = paramiko.SFTPClient.from_transport(scp)
         sftp.get(from_path, to_path)
         scp.close()
 
     def paramiko_putfile(self, ssh, from_path, to_path, port=22):
-        host = ssh['host']
+        host = ssh["host"]
         if ":" in host:
-            var = host.split(':')
+            var = host.split(":")
             host = var[0]
             port = int(var[1])
-        username = ssh['username']
-        password = ssh['password']
+        username = ssh["username"]
+        password = ssh["password"]
         scp = paramiko.Transport((host, port))
         scp.connect(username=username, password=password)
         sftp = paramiko.SFTPClient.from_transport(scp)
         sftp.put(from_path, to_path)
         scp.close()
 
     def paramiko_putdir(self, ssh, local_dir, remote_dir, port=22):
-        host = ssh['host']
-        username = ssh['username']
-        password = ssh['password']
+        host = ssh["host"]
+        username = ssh["username"]
+        password = ssh["password"]
         try:
-            t=paramiko.Transport((host, port))
+            t = paramiko.Transport((host, port))
             t.connect(username=username, password=password)
-            sftp=paramiko.SFTPClient.from_transport(t)
-            for root,dirs,files in os.walk(local_dir):
+            sftp = paramiko.SFTPClient.from_transport(t)
+            for root, dirs, files in os.walk(local_dir):
                 for filespath in files:
-                    local_file = os.path.join(root,filespath)
-                    a = local_file.replace(local_dir,'')
-                    remote_file = os.path.join(remote_dir,a)
+                    local_file = os.path.join(root, filespath)
+                    a = local_file.replace(local_dir, "")
+                    remote_file = os.path.join(remote_dir, a)
                     try:
-                        sftp.put(local_file,remote_file)
+                        sftp.put(local_file, remote_file)
                     except Exception as e:
                         sftp.mkdir(os.path.split(remote_file)[0])
-                        sftp.put(local_file,remote_file)
+                        sftp.put(local_file, remote_file)
                 for name in dirs:
-                    local_path = os.path.join(root,name)
-                    a = local_path.replace(local_dir,'')
-                    remote_path = os.path.join(remote_dir,a)
+                    local_path = os.path.join(root, name)
+                    a = local_path.replace(local_dir, "")
+                    remote_path = os.path.join(remote_dir, a)
                     try:
                         sftp.mkdir(remote_path)
                     except Exception as e:
                         logger.info(e)
             t.close()
         except Exception as e:
             logger.info(e)
 
     def runcmd(self, cmd, ssh, timeout=None, desc=None, debug=True, port=22):
-        host = ssh['host']
+        host = ssh["host"]
         if ":" in host:
-            var = host.split(':')
+            var = host.split(":")
             host = var[0]
             port = int(var[1])
-        username = ssh['username']
-        password = ssh['password']
-        retcode, stdout = self.paramiko_run(cmd, host, username, password, timeout, port)
-        fd = open(DEBUG_FILE, 'a')
+        username = ssh["username"]
+        password = ssh["password"]
+        retcode, stdout = self.paramiko_run(
+            cmd, host, username, password, timeout, port
+        )
+        fd = open(DEBUG_FILE, "a")
         fd.write(">>> Running in: {0}:{1}, Desc: {2}\n".format(host, port, desc))
         fd.write("Command: {0}\n".format(str(cmd)))
         fd.write("Retcode: {0}\n".format(retcode))
         if debug or retcode != 0:
             try:
@@ -129,57 +132,62 @@
 
     def run_expect(self, ssh, cmd, attrs):
         options = list()
         filename = "/tmp/exp.sh"
         for attr in attrs:
-            expect = r'expect "%s"' % attr.split('|')[0]
-            send = r'send "%s\r"' % attr.split('|')[1]
-            options.append(expect+'\n'+send)
-        cmd = ('cat <<EOF > %s\n'
-                '#!/usr/bin/expect\n'
-                'spawn %s\n'
-                '%s\n'
-                'expect eof\n'
-                'exit\n'
-                'EOF'
-              ) % (filename, cmd, '\n'.join(options))
+            expect = r'expect "%s"' % attr.split("|")[0]
+            send = r'send "%s\r"' % attr.split("|")[1]
+            options.append(expect + "\n" + send)
+        cmd = (
+            "cat <<EOF > %s\n"
+            "#!/usr/bin/expect\n"
+            "spawn %s\n"
+            "%s\n"
+            "expect eof\n"
+            "exit\n"
+            "EOF"
+        ) % (filename, cmd, "\n".join(options))
         ret, output = self.runcmd(cmd, ssh, desc="create expect script")
         cmd = "chmod +x {0}; {1}".format(filename, filename)
         ret, output = self.runcmd(cmd, ssh, desc="run expect script")
         self.runcmd("rm -f {0}".format(filename), ssh, desc="rm expect script")
         return ret, output
 
     def get_exported_param(self, name):
         value = os.getenv(name)
-        if value is None or value == '':
+        if value is None or value == "":
             value = None
         return value
 
     def set_exported_param(self, name, value):
         os.putenv(name, value)
         return os.getenv(name)
 
     def shell_escape_char(self, char):
-        char = char.replace('[', '\[').replace(']', '\]').replace('/', '\/')
+        char = char.replace("[", "\[").replace("]", "\]").replace("/", "\/")
         return char
 
     def randomMAC(self):
-        mac = [ 0x06,
-                random.randint(0x00, 0x2f),
-                random.randint(0x00, 0x3f),
-                random.randint(0x00, 0x4f),
-                random.randint(0x00, 0x8f),
-                random.randint(0x00, 0xff) ]
-        return ':'.join(map(lambda x: "%02x" % x, mac))
+        mac = [
+            0x06,
+            random.randint(0x00, 0x2F),
+            random.randint(0x00, 0x3F),
+            random.randint(0x00, 0x4F),
+            random.randint(0x00, 0x8F),
+            random.randint(0x00, 0xFF),
+        ]
+        return ":".join(map(lambda x: "%02x" % x, mac))
 
     def get_url_domain(self, url):
-        reobj = re.compile(r"""(?xi)\A
+        reobj = re.compile(
+            r"""(?xi)\A
         [a-z][a-z0-9+\-.]*://               # Scheme
         ([a-z0-9\-._~%!$&'()*+,;=]+@)?      # User
         ([a-z0-9\-._~%]+                    # Named or IPv4 host
         |\[[a-z0-9\-._~%!$&'()*+,;=:]+\])   # IPv6+ host
-        """)
+        """
+        )
         match = reobj.search(url)
         if match:
             return match.group(2)
 
     def is_json(self, data):
@@ -189,11 +197,13 @@
             logger.warning("No JSON object could be decoded")
             return False
         return json_object
 
     def url_validation(self, url):
-        cmd = "if ( curl -o/dev/null -sfI '{0}' ); then echo 'true'; else echo 'false'; fi".format(url)
+        cmd = "if ( curl -o/dev/null -sfI '{0}' ); then echo 'true'; else echo 'false'; fi".format(
+            url
+        )
         output = os.popen(cmd).read()
         if output.strip() == "true":
             return True
         else:
             return False
@@ -211,33 +221,41 @@
                 logger.warning("Failed to delete {0}".format(file_path))
 
     def ssh_no_passwd_access(self, ssh_local, ssh_remote=None):
         if ssh_remote is None:
             ssh_remote = {
-                    "host":deploy.libvirt.remote,
-                    "username":deploy.libvirt.remote_user,
-                    "password":deploy.libvirt.remote_passwd}
+                "host": deploy.libvirt.remote,
+                "username": deploy.libvirt.remote_user,
+                "password": deploy.libvirt.remote_passwd,
+            }
         cmd = 'echo -e "\n" | ssh-keygen -N "" &> /dev/null'
         ret, output = self.runcmd(cmd, ssh_local, desc="create ssh key")
         cmd = "cat ~/.ssh/id_rsa.pub"
         ret, output = self.runcmd(cmd, ssh_local, desc="check id_rsa.pub exist")
         if ret != 0 or output is None:
             raise FailException("Failed to create ssh key")
         cmd = "mkdir ~/.ssh/; echo '{0}' >> ~/.ssh/authorized_keys".format(output)
         ret, output = self.runcmd(cmd, ssh_remote, desc="copy id_rsa.pub to remote")
-        host = ssh_remote['host']
+        host = ssh_remote["host"]
         port = 22
         if ":" in host:
-            var = host.split(':')
+            var = host.split(":")
             host = var[0]
             port = int(var[1])
-        cmd = "ssh-keyscan -p {0} {1} >> ~/.ssh/known_hosts".format(port, host) 
+        cmd = "ssh-keyscan -p {0} {1} >> ~/.ssh/known_hosts".format(port, host)
         ret, output = self.runcmd(cmd, ssh_local, desc="create ~/.ssh/known_hosts")
-        logger.info("Succeeded to copy sshkey from {0} to {1}".format(ssh_local['host'], ssh_remote['host']))
+        logger.info(
+            "Succeeded to copy sshkey from {0} to {1}".format(
+                ssh_local["host"], ssh_remote["host"]
+            )
+        )
 
     def kill_pid_by_name(self, ssh, process_name):
-        cmd = "ps -ef | grep %s -i | grep -v grep | awk '{print $2}' | xargs -I {} kill -9 {}" % process_name
+        cmd = (
+            "ps -ef | grep %s -i | grep -v grep | awk '{print $2}' | xargs -I {} kill -9 {}"
+            % process_name
+        )
         ret, output = self.runcmd(cmd, ssh, desc="kill pid by pid_name")
         cmd = "rm -f /var/run/%s.pid" % process_name
         ret, output = self.runcmd(cmd, ssh, desc="remove pid file")
         cmd = "ps -ef | grep %s -i | grep -v grep |sort" % process_name
         ret, output = self.runcmd(cmd, ssh, desc="check pid exist")
@@ -245,43 +263,45 @@
             return True
         else:
             return False
 
     def system_reboot(self, ssh):
-        host = ssh['host']
+        host = ssh["host"]
         is_container = "no"
         if ":" in host:
-            var = host.split(':')
+            var = host.split(":")
             host = var[0]
             port = int(var[1])
             if port != 22:
                 is_container = "yes"
         if is_container == "no":
             cmd = "sync;sync;sync;sync;reboot -f && exit"
             ret, output = self.runcmd(cmd, ssh, desc="reboot os", timeout=3)
             time.sleep(60)
         else:
             container_name = self.get_hostname(ssh)
-            ssh_docker ={
-                "host" : deploy.docker.server,
-                "username" : deploy.docker.server_user,
-                "password" : deploy.docker.server_passwd,
+            ssh_docker = {
+                "host": deploy.docker.server,
+                "username": deploy.docker.server_user,
+                "password": deploy.docker.server_passwd,
             }
-            logger.info("system({0}) is a container, will restart it by docker".format(host))
+            logger.info(
+                "system({0}) is a container, will restart it by docker".format(host)
+            )
             cmd = "docker restart %s" % container_name
             ret, output = self.runcmd(cmd, ssh_docker, desc="restart container")
             cmd = "docker exec -i %s /usr/sbin/sshd" % container_name
             ret, output = self.runcmd(cmd, ssh_docker, desc="start container ssh")
             time.sleep(180)
         if self.ssh_is_connected(ssh):
-            logger.info('Succeeded to reboot system({0})'.format(host))
-        else:
-            raise FailException('Failed to reboot system({0})'.format(host))
+            logger.info("Succeeded to reboot system({0})".format(host))
+        else:
+            raise FailException("Failed to reboot system({0})".format(host))
 
     def ssh_is_connected(self, ssh):
-        host = ssh['host']
-        cmd ="rpm -qa filesystem"
+        host = ssh["host"]
+        cmd = "rpm -qa filesystem"
         for i in range(60):
             ret, output = self.runcmd(cmd, ssh)
             if ret == 0 and "filesystem" in output:
                 logger.info("Succeeded to connect host {0} by ssh".format(host))
                 return True
@@ -299,105 +319,122 @@
 
     def rhel_version(self, ssh):
         cmd = "cat /etc/redhat-release"
         ret, output = self.runcmd(cmd, ssh)
         if ret == 0 and output is not None:
-            m = re.search(r'(?<=release )\d', output)
+            m = re.search(r"(?<=release )\d", output)
             rhel_ver = m.group(0)
             return str(rhel_ver)
         else:
-            raise FailException("Unknown rhel release: %s (%s)" % (output.strip(), ssh['host']))
+            raise FailException(
+                "Unknown rhel release: %s (%s)" % (output.strip(), ssh["host"])
+            )
 
     def stop_firewall(self, ssh):
         rhel_ver = self.rhel_version(ssh)
         if rhel_ver == "6":
             cmd = "service iptables stop; chkconfig iptables off"
             self.runcmd(cmd, ssh)
         else:
-            cmd = "systemctl stop firewalld.service; systemctl disable firewalld.service"
+            cmd = (
+                "systemctl stop firewalld.service; systemctl disable firewalld.service"
+            )
             self.runcmd(cmd, ssh)
         cmd = "setenforce 0; sed -i -e 's/SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config"
         self.runcmd(cmd, ssh, desc="disable selinux")
 
     def bridge_setup(self, bridge_name, ssh):
         root_path = os.path.abspath(os.path.join(os.getcwd(), "../"))
-        local_file = os.path.join(root_path,'utils/bridge_setup.sh')
+        local_file = os.path.join(root_path, "utils/bridge_setup.sh")
         remote_file = "/tmp/bridge_setup.sh"
         self.paramiko_putfile(ssh, local_file, remote_file)
-        cmd = 'sh {0} -b {1}'.format(remote_file, bridge_name)
+        cmd = "sh {0} -b {1}".format(remote_file, bridge_name)
         ret, output = self.runcmd(cmd, ssh)
         logger.info(output)
 
     def get_hostname(self, ssh):
-        ret, output = self.runcmd('hostname', ssh)
+        ret, output = self.runcmd("hostname", ssh)
         if ret == 0 and output is not None and output != "":
             hostname = output.strip()
             return hostname
         else:
-            raise FailException("Failed to get hostname(%s)" % ssh['host'])
+            raise FailException("Failed to get hostname(%s)" % ssh["host"])
 
     def get_ipaddr(self, ssh):
-        #cmd = "ip route get 8.8.8.8 | awk 'NR==1 {print $NF}'"
+        # cmd = "ip route get 8.8.8.8 | awk 'NR==1 {print $NF}'"
         cmd = "ip route get 8.8.8.8 | awk '/src/ { print $7 }'"
         ret, output = self.runcmd(cmd, ssh)
         if ret == 0 and output is not None:
-                return output.strip()
-        else:
-            raise FailException("Failed to get ip address(%s)" % ssh['host'])
+            return output.strip()
+        else:
+            raise FailException("Failed to get ip address(%s)" % ssh["host"])
 
     def get_gateway(self, ssh):
         ipaddr = self.get_ipaddr(ssh)
         cmd = "ip route | grep %s" % ipaddr
         ret, output = self.runcmd(cmd, ssh)
         if ret == 0 and output is not None and output != "":
             output = output.strip().split(" ")
             if len(output) > 0:
                 gateway = output[0]
                 return gateway
-        raise FailException("Failed to get gateway(%s)" % ssh['host'])
+        raise FailException("Failed to get gateway(%s)" % ssh["host"])
 
     def set_etc_hosts(self, etc_hosts_value, ssh):
-        cmd = "sed -i '/localhost/!d' /etc/hosts; echo '%s' >> /etc/hosts" % (etc_hosts_value)
+        cmd = "sed -i '/localhost/!d' /etc/hosts; echo '%s' >> /etc/hosts" % (
+            etc_hosts_value
+        )
         ret, output = self.runcmd(cmd, ssh)
         if ret != 0:
-            raise FailException("Failed to set /etc/hosts (%s)" % ssh['host'])
+            raise FailException("Failed to set /etc/hosts (%s)" % ssh["host"])
 
     def set_hostname(self, hostname, ssh):
         try:
             cmd = "hostnamectl set-hostname {0}".format(hostname)
             self.runcmd(cmd, ssh)
             rhel_ver = self.rhel_version(ssh)
             if rhel_ver == "6":
-                cmd = "sed -i '/HOSTNAME=/d' /etc/sysconfig/network; echo 'HOSTNAME={0}' >> /etc/sysconfig/network".format(hostname)
+                cmd = "sed -i '/HOSTNAME=/d' /etc/sysconfig/network; echo 'HOSTNAME={0}' >> /etc/sysconfig/network".format(
+                    hostname
+                )
                 self.runcmd(cmd, ssh)
             else:
-                cmd = "if [ -f /etc/hostname ]; then sed -i -e '/localhost/d' -e '/{0}/d' /etc/hostname; echo {0} >> /etc/hostname; fi".format(hostname)
+                cmd = "if [ -f /etc/hostname ]; then sed -i -e '/localhost/d' -e '/{0}/d' /etc/hostname; echo {0} >> /etc/hostname; fi".format(
+                    hostname
+                )
                 self.runcmd(cmd, ssh)
         except:
-            raise FailException("Failed to set hostname ({0})".format(ssh['host']))
+            raise FailException("Failed to set hostname ({0})".format(ssh["host"]))
 
     def system_init(self, key, ssh):
         if self.ssh_is_connected(ssh):
             self.rhsm_backup(ssh)
             host_ip = self.get_ipaddr(ssh)
             host_name = self.get_hostname(ssh)
-            if "localhost" in host_name or "unused" in host_name or "openshift" in host_name or host_name is None:
-                random_str = ''.join(random.sample(string.ascii_letters + string.digits, 8))
+            if (
+                "localhost" in host_name
+                or "unused" in host_name
+                or "openshift" in host_name
+                or host_name is None
+            ):
+                random_str = "".join(
+                    random.sample(string.ascii_letters + string.digits, 8)
+                )
                 host_name = "%s-%s.redhat.com" % (key, random_str)
             etc_hosts_value = "%s %s" % (host_ip, host_name)
             self.set_hostname(host_name, ssh)
             self.set_etc_hosts(etc_hosts_value, ssh)
             self.stop_firewall(ssh)
             logger.info("Finished to init system {0}".format(host_name))
         else:
-            raise FailException("Failed to ssh login {0}".format(ssh['host']))
+            raise FailException("Failed to ssh login {0}".format(ssh["host"]))
 
     def pkg_check(self, ssh, package):
         cmd = "rpm -qa {0}".format(package)
         ret, output = self.runcmd(cmd, ssh)
         if ret == 0 and output is not None and output != "":
-            pkg = output.strip()+".rpm"
+            pkg = output.strip() + ".rpm"
             return pkg
         else:
             return False
 
     def pkg_install(self, ssh, package):
@@ -420,16 +457,16 @@
             logger.warning("Failed to uninstall {0}".format(package))
             return False
 
     def pkg_info(self, ssh, package):
         cmd = "rpm -qi {0}".format(package)
-        ret,output = self.runcmd(cmd, ssh)
+        ret, output = self.runcmd(cmd, ssh)
         dic = output.split("\n")
         info = {}
         for d in dic:
             try:
-                kv_entry = d.split(': ')
+                kv_entry = d.split(": ")
                 k = kv_entry[0].strip()
                 v = kv_entry[1].strip()
                 info.update({k: v})
             except:
                 pass
@@ -437,15 +474,17 @@
 
     def nmap_pkg_ready(self, ssh):
         if self.pkg_check(ssh, "nmap") is False:
             self.nmap_pkg_install(ssh)
         else:
-            logger.info("nmap is ready on {0} to scan ip".format(ssh['host']))
+            logger.info("nmap is ready on {0} to scan ip".format(ssh["host"]))
 
     def nmap_pkg_install(self, ssh):
         rhel_ver = self.rhel_version(ssh)
-        mirror = "http://mirror.centos.org/centos/{0}/os/x86_64/Packages".format(rhel_ver)
+        mirror = "http://mirror.centos.org/centos/{0}/os/x86_64/Packages".format(
+            rhel_ver
+        )
         ftp = deploy.repo.rhel8_ftp
         ret, output = self.runcmd("yum install nmap nmap-ncat", ssh)
         if self.pkg_check(ssh, "nmap") is False:
             if rhel_ver == "8":
                 nmap = "{0}/nmap-7.70-4.el8.x86_64.rpm".format(ftp)
@@ -468,16 +507,19 @@
             logger.info("nmap package is installed")
 
     def get_ipaddr_bymac(self, mac_addr, ssh):
         self.nmap_pkg_ready(ssh)
         gateway = self.get_gateway(ssh)
-        cmd = "nmap -sP -n %s | grep -i -B 2 %s |grep 'Nmap scan report for' | grep -Eo '([0-9]{1,3}[\.]){3}[0-9]{1,3}'| tail -1" % (gateway, mac_addr)
+        cmd = (
+            "nmap -sP -n %s | grep -i -B 2 %s |grep 'Nmap scan report for' | grep -Eo '([0-9]{1,3}[\.]){3}[0-9]{1,3}'| tail -1"
+            % (gateway, mac_addr)
+        )
         for i in range(40):
             time.sleep(60)
             ret, output = self.runcmd(cmd, ssh, desc="check ip addr by mac")
             if ret == 0 and output is not None and output != "":
                 ipaddr = output.strip()
                 if self.ping_is_connected(ipaddr):
                     return ipaddr
-            logger.info("Try to scan ip by nmap in %s after 30s ..." % ssh['host'])
-        logger.error("Failed to get ip addr by mac(%s)" % ssh['host'])
+            logger.info("Try to scan ip by nmap in %s after 30s ..." % ssh["host"])
+        logger.error("Failed to get ip addr by mac(%s)" % ssh["host"])
         return False
would reformat /tmp/lint/virt_who/base.py
--- /tmp/lint/virt_who/settings.py	2023-03-03 05:26:23.350065 +0000
+++ /tmp/lint/virt_who/settings.py	2023-03-06 06:25:03.904123 +0000
@@ -1,13 +1,15 @@
 import os, sys
 from configparser import ConfigParser
 
+
 def get_exported_param(name):
     value = os.getenv(name)
-    if value is None or value == '':
+    if value is None or value == "":
         value = None
     return value
+
 
 class ReaderConf(object):
     def __init__(self, path):
         self.config_parser = ConfigParser()
         try:
@@ -28,41 +30,40 @@
         return value
 
     def has_section(self, section):
         return self.config_parser.has_section(section)
 
+
 class FeatureSettings(object):
     def read(self, reader):
-        raise NotImplementedError('Subclasses must implement read method.')
+        raise NotImplementedError("Subclasses must implement read method.")
 
     def validate(self):
-        raise NotImplementedError('Subclasses must implement validate method.')
+        raise NotImplementedError("Subclasses must implement validate method.")
+
 
 class Settings(object):
     def __init__(self):
         self.configured = False
 
     def configure(self, settings_file):
-        settings_path = os.path.join(os.path.realpath(os.path.join(
-            os.path.dirname(__file__),
-            os.pardir)),
-            settings_file)
-    
+        settings_path = os.path.join(
+            os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir)),
+            settings_file,
+        )
+
         self.reader = ReaderConf(settings_path)
-        attrs = map(
-            lambda attr_name: (attr_name, getattr(self, attr_name)),
-            dir(self)
-        )
+        attrs = map(lambda attr_name: (attr_name, getattr(self, attr_name)), dir(self))
         feature_settings = filter(
-            lambda tpl: isinstance(tpl[1], FeatureSettings),
-            attrs
+            lambda tpl: isinstance(tpl[1], FeatureSettings), attrs
         )
         for name, settings in feature_settings:
             if self.reader.has_section(name):
                 settings.read(self.reader)
 
         self.configured = True
+
 
 class SetTrigger(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetTrigger, self).__init__(*args, **kwargs)
         self.type = None
@@ -86,29 +87,30 @@
         self.rhev_iso = get_exported_param("RHEV_ISO")
         self.brew_package = get_exported_param("VIRTWHO_BREW_PACKAGE")
         self.virtwho_upstream = get_exported_param("VIRTWHO_UPSTREAM")
         self.arch_type = get_exported_param("ARCH_TYPE")
         if not self.type:
-            self.type = reader.get('trigger', 'type')
+            self.type = reader.get("trigger", "type")
         if not self.level:
-            self.level = reader.get('trigger', 'level')
+            self.level = reader.get("trigger", "level")
         if not self.rhel_compose:
-            self.rhel_compose = reader.get('trigger', 'rhel_compose')
+            self.rhel_compose = reader.get("trigger", "rhel_compose")
         if not self.hypervisor_list:
-            self.hypervisor_list = reader.get('trigger', 'hypervisor_list')
+            self.hypervisor_list = reader.get("trigger", "hypervisor_list")
         if not self.register_list:
-            self.register_list = reader.get('trigger', 'register_list')
+            self.register_list = reader.get("trigger", "register_list")
         if not self.satellite_host:
-            self.satellite_host = reader.get('trigger', 'satellite_host')
+            self.satellite_host = reader.get("trigger", "satellite_host")
         if not self.rhev_iso:
-            self.rhev_iso = reader.get('trigger', 'rhev_iso')
+            self.rhev_iso = reader.get("trigger", "rhev_iso")
         if not self.brew_package:
-            self.brew_package = reader.get('trigger', 'brew_package')
+            self.brew_package = reader.get("trigger", "brew_package")
         if not self.virtwho_upstream:
-            self.virtwho_upstream = reader.get('trigger', 'virtwho_upstream')
+            self.virtwho_upstream = reader.get("trigger", "virtwho_upstream")
         if not self.arch_type:
-            self.arch_type = reader.get('trigger', 'arch_type')
+            self.arch_type = reader.get("trigger", "arch_type")
+
 
 class SetRepo(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetRepo, self).__init__(*args, **kwargs)
         self.rhel_base = None
@@ -117,28 +119,30 @@
         self.epel = None
         self.rhel8_ftp = None
         self.brew = None
 
     def read(self, reader):
-        self.rhel_base = reader.get('repo', 'rhel_base')
-        self.rhel_brew = reader.get('repo', 'rhel_brew')
-        self.rhel_sat = reader.get('repo', 'rhel_sat')
-        self.epel = reader.get('repo', 'epel')
-        self.rhel8_ftp = reader.get('repo', 'rhel8_ftp')
-        self.brew = reader.get('repo', 'brew')
+        self.rhel_base = reader.get("repo", "rhel_base")
+        self.rhel_brew = reader.get("repo", "rhel_brew")
+        self.rhel_sat = reader.get("repo", "rhel_sat")
+        self.epel = reader.get("repo", "epel")
+        self.rhel8_ftp = reader.get("repo", "rhel8_ftp")
+        self.brew = reader.get("repo", "brew")
+
 
 class SetJenkins(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetJenkins, self).__init__(*args, **kwargs)
         self.url = None
         self.username = None
         self.password = None
 
     def read(self, reader):
-        self.url = reader.get('jenkins', 'url')
-        self.username = reader.get('jenkins', 'username')
-        self.password = reader.get('jenkins', 'password')
+        self.url = reader.get("jenkins", "url")
+        self.username = reader.get("jenkins", "username")
+        self.password = reader.get("jenkins", "password")
+
 
 class SetDocker(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetDocker, self).__init__(*args, **kwargs)
         self.server = None
@@ -149,18 +153,19 @@
         self.slave_passwd = None
         self.container_user = None
         self.container_passwd = None
 
     def read(self, reader):
-        self.server = reader.get('docker', 'server')
-        self.server_user = reader.get('docker', 'server_user')
-        self.server_passwd = reader.get('docker', 'server_passwd')
-        self.slave = reader.get('docker', 'slave')
-        self.slave_user = reader.get('docker', 'slave_user')
-        self.slave_passwd = reader.get('docker', 'slave_passwd')
-        self.container_user = reader.get('docker', 'container_user')
-        self.container_passwd = reader.get('docker', 'container_passwd')
+        self.server = reader.get("docker", "server")
+        self.server_user = reader.get("docker", "server_user")
+        self.server_passwd = reader.get("docker", "server_passwd")
+        self.slave = reader.get("docker", "slave")
+        self.slave_user = reader.get("docker", "slave_user")
+        self.slave_passwd = reader.get("docker", "slave_passwd")
+        self.container_user = reader.get("docker", "container_user")
+        self.container_passwd = reader.get("docker", "container_passwd")
+
 
 class SetBeaker(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetBeaker, self).__init__(*args, **kwargs)
         self.client = None
@@ -170,31 +175,33 @@
         self.default_passwd = None
         self.keytab = None
         self.principal = None
 
     def read(self, reader):
-        self.client = reader.get('beaker', 'client')
-        self.client_user = reader.get('beaker', 'client_user')
-        self.client_passwd = reader.get('beaker', 'client_passwd')
-        self.default_user = reader.get('beaker', 'default_user')
-        self.default_passwd = reader.get('beaker', 'default_passwd')
-        self.keytab = reader.get('beaker', 'keytab')
-        self.principal = reader.get('beaker', 'principal')
+        self.client = reader.get("beaker", "client")
+        self.client_user = reader.get("beaker", "client_user")
+        self.client_passwd = reader.get("beaker", "client_passwd")
+        self.default_user = reader.get("beaker", "default_user")
+        self.default_passwd = reader.get("beaker", "default_passwd")
+        self.keytab = reader.get("beaker", "keytab")
+        self.principal = reader.get("beaker", "principal")
+
 
 class SetPolarion(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetPolarion, self).__init__(*args, **kwargs)
         self.testrun_url = None
         self.import_url = None
         self.username = None
         self.password = None
 
     def read(self, reader):
-        self.testrun_url = reader.get('polarion', 'testrun_url')
-        self.import_url = reader.get('polarion', 'import_url')
-        self.username = reader.get('polarion', 'username')
-        self.password = reader.get('polarion', 'password')
+        self.testrun_url = reader.get("polarion", "testrun_url")
+        self.import_url = reader.get("polarion", "import_url")
+        self.username = reader.get("polarion", "username")
+        self.password = reader.get("polarion", "password")
+
 
 class SetNFS(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetNFS, self).__init__(*args, **kwargs)
         self.server = None
@@ -204,17 +211,18 @@
         self.rhel_url = None
         self.rhev_mount = None
         self.rhev_url = None
 
     def read(self, reader):
-        self.server = reader.get('nfs', 'server')
-        self.server_user = reader.get('nfs', 'server_user')
-        self.server_passwd = reader.get('nfs', 'server_passwd')
-        self.rhel_mount = reader.get('nfs', 'rhel_mount')
-        self.rhel_url = reader.get('nfs', 'rhel_url')
-        self.rhev_mount = reader.get('nfs', 'rhev_mount')
-        self.rhev_url = reader.get('nfs', 'rhev_url')
+        self.server = reader.get("nfs", "server")
+        self.server_user = reader.get("nfs", "server_user")
+        self.server_passwd = reader.get("nfs", "server_passwd")
+        self.rhel_mount = reader.get("nfs", "rhel_mount")
+        self.rhel_url = reader.get("nfs", "rhel_url")
+        self.rhev_mount = reader.get("nfs", "rhev_mount")
+        self.rhev_url = reader.get("nfs", "rhev_url")
+
 
 class SetRegister(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetRegister, self).__init__(*args, **kwargs)
         self.serverurl = None
@@ -223,26 +231,28 @@
         self.password = None
         self.employee_sku = None
         self.satellite_sku = None
 
     def read(self, reader):
-        self.serverurl = reader.get('register', 'serverurl')
-        self.baseurl = reader.get('register', 'baseurl')
-        self.username = reader.get('register', 'username')
-        self.password = reader.get('register', 'password')
-        self.employee_sku = reader.get('register', 'employee_sku')
-        self.satellite_sku = reader.get('register', 'satellite_sku')
+        self.serverurl = reader.get("register", "serverurl")
+        self.baseurl = reader.get("register", "baseurl")
+        self.username = reader.get("register", "username")
+        self.password = reader.get("register", "password")
+        self.employee_sku = reader.get("register", "employee_sku")
+        self.satellite_sku = reader.get("register", "satellite_sku")
+
 
 class SetProxy(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetProxy, self).__init__(*args, **kwargs)
         self.server = None
         self.port = None
 
     def read(self, reader):
-        self.server = reader.get('proxy', 'server')
-        self.port = reader.get('proxy', 'port')
+        self.server = reader.get("proxy", "server")
+        self.port = reader.get("proxy", "port")
+
 
 class SetStage(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetStage, self).__init__(*args, **kwargs)
         self.server = None
@@ -270,41 +280,42 @@
         self.ahv_user = None
         self.ahv_passwd = None
         self.ahv_org = None
 
     def read(self, reader):
-        self.server = reader.get('stage', 'server')
-        self.gate_user = reader.get('stage', 'gate_user')
-        self.gate_passwd = reader.get('stage', 'gate_passwd')
-        self.gate_org = reader.get('stage', 'gate_org')
-        self.esx_user = reader.get('stage', 'esx_user')
-        self.esx_passwd = reader.get('stage', 'esx_passwd')
-        self.esx_org = reader.get('stage', 'esx_org')
-        self.xen_user = reader.get('stage', 'xen_user')
-        self.xen_passwd = reader.get('stage', 'xen_passwd')
-        self.xen_org = reader.get('stage', 'xen_org')
-        self.hyperv_user = reader.get('stage', 'hyperv_user')
-        self.hyperv_passwd = reader.get('stage', 'hyperv_passwd')
-        self.hyperv_org = reader.get('stage', 'hyperv_org')
-        self.kubevirt_user = reader.get('stage', 'kubevirt_user')
-        self.kubevirt_passwd = reader.get('stage', 'kubevirt_passwd')
-        self.kubevirt_org = reader.get('stage', 'kubevirt_org')
-        self.rhevm_user = reader.get('stage', 'rhevm_user')
-        self.rhevm_passwd = reader.get('stage', 'rhevm_passwd')
-        self.rhevm_org = reader.get('stage', 'rhevm_org')
-        self.vdsm_user = reader.get('stage', 'vdsm_user')
-        self.vdsm_passwd = reader.get('stage', 'vdsm_passwd')
-        self.vdsm_org = reader.get('stage', 'vdsm_org')
-        self.libvirt_remote_user = reader.get('stage', 'libvirt_remote_user')
-        self.libvirt_remote_passwd = reader.get('stage', 'libvirt_remote_passwd')
-        self.libvirt_remote_org = reader.get('stage', 'libvirt_remote_org')
-        self.libvirt_local_user = reader.get('stage', 'libvirt_local_user')
-        self.libvirt_local_passwd = reader.get('stage', 'libvirt_local_passwd')
-        self.libvirt_local_org = reader.get('stage', 'libvirt_local_org')
-        self.ahv_user = reader.get('stage', 'ahv_user')
-        self.ahv_passwd = reader.get('stage', 'ahv_passwd')
-        self.ahv_org = reader.get('stage', 'ahv_org')
+        self.server = reader.get("stage", "server")
+        self.gate_user = reader.get("stage", "gate_user")
+        self.gate_passwd = reader.get("stage", "gate_passwd")
+        self.gate_org = reader.get("stage", "gate_org")
+        self.esx_user = reader.get("stage", "esx_user")
+        self.esx_passwd = reader.get("stage", "esx_passwd")
+        self.esx_org = reader.get("stage", "esx_org")
+        self.xen_user = reader.get("stage", "xen_user")
+        self.xen_passwd = reader.get("stage", "xen_passwd")
+        self.xen_org = reader.get("stage", "xen_org")
+        self.hyperv_user = reader.get("stage", "hyperv_user")
+        self.hyperv_passwd = reader.get("stage", "hyperv_passwd")
+        self.hyperv_org = reader.get("stage", "hyperv_org")
+        self.kubevirt_user = reader.get("stage", "kubevirt_user")
+        self.kubevirt_passwd = reader.get("stage", "kubevirt_passwd")
+        self.kubevirt_org = reader.get("stage", "kubevirt_org")
+        self.rhevm_user = reader.get("stage", "rhevm_user")
+        self.rhevm_passwd = reader.get("stage", "rhevm_passwd")
+        self.rhevm_org = reader.get("stage", "rhevm_org")
+        self.vdsm_user = reader.get("stage", "vdsm_user")
+        self.vdsm_passwd = reader.get("stage", "vdsm_passwd")
+        self.vdsm_org = reader.get("stage", "vdsm_org")
+        self.libvirt_remote_user = reader.get("stage", "libvirt_remote_user")
+        self.libvirt_remote_passwd = reader.get("stage", "libvirt_remote_passwd")
+        self.libvirt_remote_org = reader.get("stage", "libvirt_remote_org")
+        self.libvirt_local_user = reader.get("stage", "libvirt_local_user")
+        self.libvirt_local_passwd = reader.get("stage", "libvirt_local_passwd")
+        self.libvirt_local_org = reader.get("stage", "libvirt_local_org")
+        self.ahv_user = reader.get("stage", "ahv_user")
+        self.ahv_passwd = reader.get("stage", "ahv_passwd")
+        self.ahv_org = reader.get("stage", "ahv_org")
+
 
 class SetSatellite(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetSatellite, self).__init__(*args, **kwargs)
         self.admin_user = None
@@ -322,26 +333,26 @@
         self.katello_proxy_url = None
         self.katello_proxy_username = None
         self.katello_proxy_password = None
 
     def read(self, reader):
-        self.admin_user = reader.get('satellite', 'admin_user')
-        self.admin_passwd = reader.get('satellite', 'admin_passwd')
-        self.default_org = reader.get('satellite', 'default_org')
-        self.default_env = reader.get('satellite', 'default_env')
-        self.extra_org = reader.get('satellite', 'extra_org')
-        self.rhel6_compose = reader.get('satellite', 'rhel6_compose')
-        self.rhel7_compose = reader.get('satellite', 'rhel7_compose')
-        self.rhel8_compose = reader.get('satellite', 'rhel8_compose')
-        self.manifest = reader.get('satellite', 'manifest')
-        self.activation_key = reader.get('satellite', 'activation_key')
-        self.foreman_proxy_dns = reader.get('satellite', 'foreman_proxy_dns')
-        self.foreman_proxy_tftp = reader.get('satellite', 'foreman_proxy_tftp')
-        self.katello_proxy_url = reader.get('satellite', 'katello_proxy_url')
-        self.katello_proxy_username = reader.get('satellite', 'katello_proxy_username')
-        self.katello_proxy_password = reader.get('satellite', 'katello_proxy_password')
-        
+        self.admin_user = reader.get("satellite", "admin_user")
+        self.admin_passwd = reader.get("satellite", "admin_passwd")
+        self.default_org = reader.get("satellite", "default_org")
+        self.default_env = reader.get("satellite", "default_env")
+        self.extra_org = reader.get("satellite", "extra_org")
+        self.rhel6_compose = reader.get("satellite", "rhel6_compose")
+        self.rhel7_compose = reader.get("satellite", "rhel7_compose")
+        self.rhel8_compose = reader.get("satellite", "rhel8_compose")
+        self.manifest = reader.get("satellite", "manifest")
+        self.activation_key = reader.get("satellite", "activation_key")
+        self.foreman_proxy_dns = reader.get("satellite", "foreman_proxy_dns")
+        self.foreman_proxy_tftp = reader.get("satellite", "foreman_proxy_tftp")
+        self.katello_proxy_url = reader.get("satellite", "katello_proxy_url")
+        self.katello_proxy_username = reader.get("satellite", "katello_proxy_username")
+        self.katello_proxy_password = reader.get("satellite", "katello_proxy_password")
+
 
 class SetVcenter(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetVcenter, self).__init__(*args, **kwargs)
         self.ip = None
@@ -361,27 +372,28 @@
         self.guest_user = None
         self.guest_passwd = None
         self.image_path = None
 
     def read(self, reader):
-        self.ip = reader.get('vcenter', 'ip')
-        self.admin_user = reader.get('vcenter', 'admin_user')
-        self.admin_passwd = reader.get('vcenter', 'admin_passwd') 
-        self.ssh_ip = reader.get('vcenter', 'ssh_ip')
-        self.ssh_user = reader.get('vcenter', 'ssh_user')
-        self.ssh_passwd = reader.get('vcenter', 'ssh_passwd')
-        self.master = reader.get('vcenter', 'master')
-        self.master_user = reader.get('vcenter', 'master_user')
-        self.master_passwd = reader.get('vcenter', 'master_passwd')
-        self.cluster = reader.get('vcenter', 'cluster')
-        self.slave = reader.get('vcenter', 'slave')
-        self.slave_user = reader.get('vcenter', 'slave_user')
-        self.slave_passwd = reader.get('vcenter', 'slave_passwd')
-        self.guest_name = reader.get('vcenter', 'guest_name')
-        self.guest_user = reader.get('vcenter', 'guest_user')
-        self.guest_passwd = reader.get('vcenter', 'guest_passwd')
-        self.image_path = reader.get('vcenter', 'image_path')
+        self.ip = reader.get("vcenter", "ip")
+        self.admin_user = reader.get("vcenter", "admin_user")
+        self.admin_passwd = reader.get("vcenter", "admin_passwd")
+        self.ssh_ip = reader.get("vcenter", "ssh_ip")
+        self.ssh_user = reader.get("vcenter", "ssh_user")
+        self.ssh_passwd = reader.get("vcenter", "ssh_passwd")
+        self.master = reader.get("vcenter", "master")
+        self.master_user = reader.get("vcenter", "master_user")
+        self.master_passwd = reader.get("vcenter", "master_passwd")
+        self.cluster = reader.get("vcenter", "cluster")
+        self.slave = reader.get("vcenter", "slave")
+        self.slave_user = reader.get("vcenter", "slave_user")
+        self.slave_passwd = reader.get("vcenter", "slave_passwd")
+        self.guest_name = reader.get("vcenter", "guest_name")
+        self.guest_user = reader.get("vcenter", "guest_user")
+        self.guest_passwd = reader.get("vcenter", "guest_passwd")
+        self.image_path = reader.get("vcenter", "image_path")
+
 
 class SetXen(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetXen, self).__init__(*args, **kwargs)
         self.master = None
@@ -397,23 +409,24 @@
         self.sr_server = None
         self.sr_path = None
         self.image_path = None
 
     def read(self, reader):
-        self.master = reader.get('xen', 'master') 
-        self.master_user = reader.get('xen', 'master_user') 
-        self.master_passwd = reader.get('xen', 'master_passwd')
-        self.slave = reader.get('xen', 'slave')
-        self.slave_user = reader.get('xen', 'slave_user')
-        self.slave_passwd = reader.get('xen', 'slave_passwd')
-        self.guest_name = reader.get('xen', 'guest_name')
-        self.guest_user = reader.get('xen', 'guest_user')
-        self.guest_passwd = reader.get('xen', 'guest_passwd')
-        self.sr_name = reader.get('xen', 'sr_name')
-        self.sr_server = reader.get('xen', 'sr_server')
-        self.sr_path = reader.get('xen', 'sr_path')
-        self.image_path = reader.get('xen', 'image_path')
+        self.master = reader.get("xen", "master")
+        self.master_user = reader.get("xen", "master_user")
+        self.master_passwd = reader.get("xen", "master_passwd")
+        self.slave = reader.get("xen", "slave")
+        self.slave_user = reader.get("xen", "slave_user")
+        self.slave_passwd = reader.get("xen", "slave_passwd")
+        self.guest_name = reader.get("xen", "guest_name")
+        self.guest_user = reader.get("xen", "guest_user")
+        self.guest_passwd = reader.get("xen", "guest_passwd")
+        self.sr_name = reader.get("xen", "sr_name")
+        self.sr_server = reader.get("xen", "sr_server")
+        self.sr_path = reader.get("xen", "sr_path")
+        self.image_path = reader.get("xen", "image_path")
+
 
 class SetHyperv(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetHyperv, self).__init__(*args, **kwargs)
         self.master = None
@@ -423,17 +436,18 @@
         self.guest_user = None
         self.guest_passwd = None
         self.image_path = None
 
     def read(self, reader):
-        self.master = reader.get('hyperv', 'master') 
-        self.master_user = reader.get('hyperv', 'master_user') 
-        self.master_passwd = reader.get('hyperv', 'master_passwd')
-        self.guest_name = reader.get('hyperv', 'guest_name')
-        self.guest_user = reader.get('hyperv', 'guest_user')
-        self.guest_passwd = reader.get('hyperv', 'guest_passwd')
-        self.image_path = reader.get('hyperv', 'image_path')
+        self.master = reader.get("hyperv", "master")
+        self.master_user = reader.get("hyperv", "master_user")
+        self.master_passwd = reader.get("hyperv", "master_passwd")
+        self.guest_name = reader.get("hyperv", "guest_name")
+        self.guest_user = reader.get("hyperv", "guest_user")
+        self.guest_passwd = reader.get("hyperv", "guest_passwd")
+        self.image_path = reader.get("hyperv", "image_path")
+
 
 class SetRHEVM(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetRHEVM, self).__init__(*args, **kwargs)
         self.rhevm_ip = None
@@ -457,31 +471,32 @@
         self.template = None
         self.disk = None
         self.nfs_path = None
 
     def read(self, reader):
-        self.rhevm_ip = reader.get('rhevm', 'rhevm_ip') 
-        self.rhevm_ssh_user = reader.get('rhevm', 'rhevm_ssh_user') 
-        self.rhevm_ssh_passwd = reader.get('rhevm', 'rhevm_ssh_passwd') 
-        self.rhevm_admin_user = reader.get('rhevm', 'rhevm_admin_user')
-        self.rhevm_admin_passwd = reader.get('rhevm', 'rhevm_admin_passwd')
-        self.master = reader.get('rhevm', 'master')
-        self.master_user = reader.get('rhevm', 'master_user')
-        self.master_passwd = reader.get('rhevm', 'master_passwd')
-        self.slave = reader.get('rhevm', 'slave')
-        self.slave_user = reader.get('rhevm', 'slave_user')
-        self.slave_passwd = reader.get('rhevm', 'slave_passwd')
-        self.datacenter = reader.get('rhevm', 'datacenter')
-        self.cluster = reader.get('rhevm', 'cluster')
-        self.cputype = reader.get('rhevm', 'cputype')
-        self.storage = reader.get('rhevm', 'storage')
-        self.guest_name = reader.get('rhevm', 'guest_name')
-        self.guest_user = reader.get('rhevm', 'guest_user')
-        self.guest_passwd = reader.get('rhevm', 'guest_passwd')
-        self.template = reader.get('rhevm', 'template')
-        self.disk = reader.get('rhevm', 'disk')
-        self.nfs_path = reader.get('rhevm', 'nfs_path')
+        self.rhevm_ip = reader.get("rhevm", "rhevm_ip")
+        self.rhevm_ssh_user = reader.get("rhevm", "rhevm_ssh_user")
+        self.rhevm_ssh_passwd = reader.get("rhevm", "rhevm_ssh_passwd")
+        self.rhevm_admin_user = reader.get("rhevm", "rhevm_admin_user")
+        self.rhevm_admin_passwd = reader.get("rhevm", "rhevm_admin_passwd")
+        self.master = reader.get("rhevm", "master")
+        self.master_user = reader.get("rhevm", "master_user")
+        self.master_passwd = reader.get("rhevm", "master_passwd")
+        self.slave = reader.get("rhevm", "slave")
+        self.slave_user = reader.get("rhevm", "slave_user")
+        self.slave_passwd = reader.get("rhevm", "slave_passwd")
+        self.datacenter = reader.get("rhevm", "datacenter")
+        self.cluster = reader.get("rhevm", "cluster")
+        self.cputype = reader.get("rhevm", "cputype")
+        self.storage = reader.get("rhevm", "storage")
+        self.guest_name = reader.get("rhevm", "guest_name")
+        self.guest_user = reader.get("rhevm", "guest_user")
+        self.guest_passwd = reader.get("rhevm", "guest_passwd")
+        self.template = reader.get("rhevm", "template")
+        self.disk = reader.get("rhevm", "disk")
+        self.nfs_path = reader.get("rhevm", "nfs_path")
+
 
 class SetVDSM(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetVDSM, self).__init__(*args, **kwargs)
         self.rhevm_ip = None
@@ -502,28 +517,29 @@
         self.template = None
         self.disk = None
         self.nfs_path = None
 
     def read(self, reader):
-        self.rhevm_ip = reader.get('vdsm', 'rhevm_ip') 
-        self.rhevm_ssh_user = reader.get('vdsm', 'rhevm_ssh_user') 
-        self.rhevm_ssh_passwd = reader.get('vdsm', 'rhevm_ssh_passwd') 
-        self.rhevm_admin_user = reader.get('vdsm', 'rhevm_admin_user')
-        self.rhevm_admin_passwd = reader.get('vdsm', 'rhevm_admin_passwd')
-        self.master = reader.get('vdsm', 'master')
-        self.master_user = reader.get('vdsm', 'master_user')
-        self.master_passwd = reader.get('vdsm', 'master_passwd')
-        self.datacenter = reader.get('vdsm', 'datacenter')
-        self.cluster = reader.get('vdsm', 'cluster')
-        self.cputype = reader.get('vdsm', 'cputype')
-        self.storage = reader.get('vdsm', 'storage')
-        self.guest_name = reader.get('vdsm', 'guest_name')
-        self.guest_user = reader.get('vdsm', 'guest_user')
-        self.guest_passwd = reader.get('vdsm', 'guest_passwd')
-        self.template = reader.get('vdsm', 'template')
-        self.disk = reader.get('vdsm', 'disk')
-        self.nfs_path = reader.get('vdsm', 'nfs_path')
+        self.rhevm_ip = reader.get("vdsm", "rhevm_ip")
+        self.rhevm_ssh_user = reader.get("vdsm", "rhevm_ssh_user")
+        self.rhevm_ssh_passwd = reader.get("vdsm", "rhevm_ssh_passwd")
+        self.rhevm_admin_user = reader.get("vdsm", "rhevm_admin_user")
+        self.rhevm_admin_passwd = reader.get("vdsm", "rhevm_admin_passwd")
+        self.master = reader.get("vdsm", "master")
+        self.master_user = reader.get("vdsm", "master_user")
+        self.master_passwd = reader.get("vdsm", "master_passwd")
+        self.datacenter = reader.get("vdsm", "datacenter")
+        self.cluster = reader.get("vdsm", "cluster")
+        self.cputype = reader.get("vdsm", "cputype")
+        self.storage = reader.get("vdsm", "storage")
+        self.guest_name = reader.get("vdsm", "guest_name")
+        self.guest_user = reader.get("vdsm", "guest_user")
+        self.guest_passwd = reader.get("vdsm", "guest_passwd")
+        self.template = reader.get("vdsm", "template")
+        self.disk = reader.get("vdsm", "disk")
+        self.nfs_path = reader.get("vdsm", "nfs_path")
+
 
 class SetLibvirt(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetLibvirt, self).__init__(*args, **kwargs)
         self.remote = None
@@ -539,23 +555,24 @@
         self.image_url = None
         self.xml_path = None
         self.xml_url = None
 
     def read(self, reader):
-        self.remote = reader.get('libvirt', 'remote')
-        self.remote_user = reader.get('libvirt', 'remote_user')
-        self.remote_passwd = reader.get('libvirt', 'remote_passwd')
-        self.local = reader.get('libvirt', 'local')
-        self.local_user = reader.get('libvirt', 'local_user')
-        self.local_passwd = reader.get('libvirt', 'local_passwd')
-        self.guest_name = reader.get('libvirt', 'guest_name')
-        self.guest_user = reader.get('libvirt', 'guest_user')
-        self.guest_passwd = reader.get('libvirt', 'guest_passwd')
-        self.image_path = reader.get('libvirt', 'image_path')
-        self.image_url = reader.get('libvirt', 'image_url')
-        self.xml_path = reader.get('libvirt', 'xml_path')
-        self.xml_url = reader.get('libvirt', 'xml_url')
+        self.remote = reader.get("libvirt", "remote")
+        self.remote_user = reader.get("libvirt", "remote_user")
+        self.remote_passwd = reader.get("libvirt", "remote_passwd")
+        self.local = reader.get("libvirt", "local")
+        self.local_user = reader.get("libvirt", "local_user")
+        self.local_passwd = reader.get("libvirt", "local_passwd")
+        self.guest_name = reader.get("libvirt", "guest_name")
+        self.guest_user = reader.get("libvirt", "guest_user")
+        self.guest_passwd = reader.get("libvirt", "guest_passwd")
+        self.image_path = reader.get("libvirt", "image_path")
+        self.image_url = reader.get("libvirt", "image_url")
+        self.xml_path = reader.get("libvirt", "xml_path")
+        self.xml_url = reader.get("libvirt", "xml_url")
+
 
 class SetKubevirt(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetKubevirt, self).__init__(*args, **kwargs)
         self.endpoint = None
@@ -567,19 +584,20 @@
         self.kube_config_file = None
         self.kube_config_url = None
         self.kube_config_url_no_cert = None
 
     def read(self, reader):
-        self.endpoint = reader.get('kubevirt', 'endpoint')
-        self.token = reader.get('kubevirt', 'token')
-        self.guest_name = reader.get('kubevirt', 'guest_name')
-        self.guest_user = reader.get('kubevirt', 'guest_user')
-        self.guest_passwd = reader.get('kubevirt', 'guest_passwd')
-        self.guest_port = reader.get('kubevirt', 'guest_port')
-        self.kube_config_file = reader.get('kubevirt', 'kube_config_file')
-        self.kube_config_url = reader.get('kubevirt', 'kube_config_url')
-        self.kube_config_url_no_cert = reader.get('kubevirt', 'kube_config_url_no_cert')
+        self.endpoint = reader.get("kubevirt", "endpoint")
+        self.token = reader.get("kubevirt", "token")
+        self.guest_name = reader.get("kubevirt", "guest_name")
+        self.guest_user = reader.get("kubevirt", "guest_user")
+        self.guest_passwd = reader.get("kubevirt", "guest_passwd")
+        self.guest_port = reader.get("kubevirt", "guest_port")
+        self.kube_config_file = reader.get("kubevirt", "kube_config_file")
+        self.kube_config_url = reader.get("kubevirt", "kube_config_url")
+        self.kube_config_url_no_cert = reader.get("kubevirt", "kube_config_url_no_cert")
+
 
 class SetAhv(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(SetAhv, self).__init__(*args, **kwargs)
         self.master = None
@@ -594,22 +612,23 @@
         self.host_uuid = None
         self.guest_ip = None
         self.guest_uuid = None
 
     def read(self, reader):
-        self.master = reader.get('ahv', 'master')
-        self.master_user = reader.get('ahv', 'master_user')
-        self.master_passwd = reader.get('ahv', 'master_passwd')
-        self.cluster = reader.get('ahv', 'cluster')
-        self.api_version = reader.get('ahv', 'api_version')
-        self.guest_name = reader.get('ahv', 'guest_name')
-        self.guest_user = reader.get('ahv', 'guest_user')
-        self.guest_passwd = reader.get('ahv', 'guest_passwd')
-        self.host_name = reader.get('ahv', 'host_name')
-        self.host_uuid = reader.get('ahv', 'host_uuid')
-        self.guest_ip = reader.get('ahv', 'guest_ip')
-        self.guest_uuid = reader.get('ahv', 'guest_uuid')
+        self.master = reader.get("ahv", "master")
+        self.master_user = reader.get("ahv", "master_user")
+        self.master_passwd = reader.get("ahv", "master_passwd")
+        self.cluster = reader.get("ahv", "cluster")
+        self.api_version = reader.get("ahv", "api_version")
+        self.guest_name = reader.get("ahv", "guest_name")
+        self.guest_user = reader.get("ahv", "guest_user")
+        self.guest_passwd = reader.get("ahv", "guest_passwd")
+        self.host_name = reader.get("ahv", "host_name")
+        self.host_uuid = reader.get("ahv", "host_uuid")
+        self.guest_ip = reader.get("ahv", "guest_ip")
+        self.guest_uuid = reader.get("ahv", "guest_uuid")
+
 
 class DeploySettings(Settings):
     def __init__(self):
         self.trigger = SetTrigger()
         self.repo = SetRepo()
@@ -629,25 +648,27 @@
         self.vdsm = SetVDSM()
         self.libvirt = SetLibvirt()
         self.kubevirt = SetKubevirt()
         self.ahv = SetAhv()
 
+
 class ConfigureVirtwho(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(ConfigureVirtwho, self).__init__(*args, **kwargs)
         self.trigger_type = None
         self.rhel_compose = None
         self.host_ip = None
         self.host_user = None
         self.host_passwd = None
 
     def read(self, reader):
-        self.trigger_type = reader.get('virtwho', 'trigger_type')
-        self.rhel_compose = reader.get('virtwho', 'rhel_compose')
-        self.host_ip = reader.get('virtwho', 'host_ip')
-        self.host_user = reader.get('virtwho', 'host_user')
-        self.host_passwd = reader.get('virtwho', 'host_passwd')
+        self.trigger_type = reader.get("virtwho", "trigger_type")
+        self.rhel_compose = reader.get("virtwho", "rhel_compose")
+        self.host_ip = reader.get("virtwho", "host_ip")
+        self.host_user = reader.get("virtwho", "host_user")
+        self.host_passwd = reader.get("virtwho", "host_passwd")
+
 
 class ConfigureHypervisor(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(ConfigureHypervisor, self).__init__(*args, **kwargs)
         self.type = None
@@ -662,22 +683,23 @@
         self.guest_name = None
         self.guest_user = None
         self.guest_passwd = None
 
     def read(self, reader):
-        self.type = reader.get('hypervisor', 'type')
-        self.server = reader.get('hypervisor', 'server')
-        self.server_username = reader.get('hypervisor', 'server_username')
-        self.server_password = reader.get('hypervisor', 'server_password')
-        self.server_ssh_ip = reader.get('hypervisor', 'server_ssh_ip')
-        self.server_ssh_user = reader.get('hypervisor', 'server_ssh_user')
-        self.server_ssh_passwd = reader.get('hypervisor', 'server_ssh_passwd')
-        self.server_config = reader.get('hypervisor', 'server_config')
-        self.guest_ip = reader.get('hypervisor', 'guest_ip')
-        self.guest_name = reader.get('hypervisor', 'guest_name')
-        self.guest_user = reader.get('hypervisor', 'guest_user')
-        self.guest_passwd = reader.get('hypervisor', 'guest_passwd')
+        self.type = reader.get("hypervisor", "type")
+        self.server = reader.get("hypervisor", "server")
+        self.server_username = reader.get("hypervisor", "server_username")
+        self.server_password = reader.get("hypervisor", "server_password")
+        self.server_ssh_ip = reader.get("hypervisor", "server_ssh_ip")
+        self.server_ssh_user = reader.get("hypervisor", "server_ssh_user")
+        self.server_ssh_passwd = reader.get("hypervisor", "server_ssh_passwd")
+        self.server_config = reader.get("hypervisor", "server_config")
+        self.guest_ip = reader.get("hypervisor", "guest_ip")
+        self.guest_name = reader.get("hypervisor", "guest_name")
+        self.guest_user = reader.get("hypervisor", "guest_user")
+        self.guest_passwd = reader.get("hypervisor", "guest_passwd")
+
 
 class ConfigureRegister(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(ConfigureRegister, self).__init__(*args, **kwargs)
         self.type = None
@@ -688,18 +710,19 @@
         self.admin_passwd = None
         self.ssh_user = None
         self.ssh_passwd = None
 
     def read(self, reader):
-        self.type = reader.get('register', 'type')
-        self.server = reader.get('register', 'server')
-        self.owner = reader.get('register', 'owner')
-        self.env = reader.get('register', 'env')
-        self.admin_user = reader.get('register', 'admin_user')
-        self.admin_passwd = reader.get('register', 'admin_passwd')
-        self.ssh_user = reader.get('register', 'ssh_user')
-        self.ssh_passwd = reader.get('register', 'ssh_passwd')
+        self.type = reader.get("register", "type")
+        self.server = reader.get("register", "server")
+        self.owner = reader.get("register", "owner")
+        self.env = reader.get("register", "env")
+        self.admin_user = reader.get("register", "admin_user")
+        self.admin_passwd = reader.get("register", "admin_passwd")
+        self.ssh_user = reader.get("register", "ssh_user")
+        self.ssh_passwd = reader.get("register", "ssh_passwd")
+
 
 class ConfigureManifest(FeatureSettings):
     def __init__(self, *args, **kwargs):
         super(ConfigureManifest, self).__init__(*args, **kwargs)
         self.vdc = None
@@ -707,15 +730,15 @@
         self.instance = None
         self.limit = None
         self.unlimit = None
 
     def read(self, reader):
-        self.vdc = reader.get('manifest', 'vdc')
-        self.vdc_bonus = reader.get('manifest', 'vdc_bonus')
-        self.instance = reader.get('manifest', 'instance')
-        self.limit = reader.get('manifest', 'limit')
-        self.unlimit = reader.get('manifest', 'unlimit')
+        self.vdc = reader.get("manifest", "vdc")
+        self.vdc_bonus = reader.get("manifest", "vdc_bonus")
+        self.instance = reader.get("manifest", "instance")
+        self.limit = reader.get("manifest", "limit")
+        self.unlimit = reader.get("manifest", "unlimit")
 
 
 class ConfigSettings(Settings):
     def __init__(self):
         self.virtwho = ConfigureVirtwho()
would reformat /tmp/lint/virt_who/settings.py
--- /tmp/lint/virt_who/register.py	2023-03-03 05:26:23.350065 +0000
+++ /tmp/lint/virt_who/register.py	2023-03-06 06:25:04.007478 +0000
@@ -1,31 +1,42 @@
 from virt_who import *
 from virt_who.base import Base
 
+
 class Register(Base):
-    #*****************************************
+    # *****************************************
     # Attach Employee SKU and enable rhel repo
-    #*****************************************
+    # *****************************************
     def employee_sku_attach(self, ssh):
         self.rhsm_recovery(ssh)
-        host = ssh['host']
+        host = ssh["host"]
         serverurl = "--serverurl={0}".format(deploy.register.serverurl)
         baseurl = "--baseurl={0}".format(deploy.register.baseurl)
-        account = "--username={0} --password={1}".format(deploy.register.username, deploy.register.password)
+        account = "--username={0} --password={1}".format(
+            deploy.register.username, deploy.register.password
+        )
         employee_sku = deploy.register.employee_sku
         is_registered = ""
-        cmd = "subscription-manager clean; subscription-manager register {0} {1} {2}".format(serverurl, baseurl, account)
+        cmd = "subscription-manager clean; subscription-manager register {0} {1} {2}".format(
+            serverurl, baseurl, account
+        )
         for i in range(10):
-            ret, output = self.runcmd(cmd, ssh, desc="register host to {0}".format(deploy.register.username))
+            ret, output = self.runcmd(
+                cmd, ssh, desc="register host to {0}".format(deploy.register.username)
+            )
             if ret == 0 or "already registered" in output:
-                logger.info("Succeeded to register ({0}) to Stage Candlepin".format(host))
+                logger.info(
+                    "Succeeded to register ({0}) to Stage Candlepin".format(host)
+                )
                 is_registered = "Yes"
                 break
             time.sleep(10)
         if is_registered != "Yes":
             raise FailException("Failed to register ({0})".format(host))
-        cmd = "subscription-manager subscribe --pool={0}; subscription-manager repos --disable=*".format(employee_sku)
+        cmd = "subscription-manager subscribe --pool={0}; subscription-manager repos --disable=*".format(
+            employee_sku
+        )
         status, output = self.run_loop(cmd, ssh, desc="attach Employee SKU")
         if status == "Yes":
             logger.info("Succeeded to attach Employee SKU({0})".format(host))
         else:
             raise FailException("Failed to attach Employee SKU({0})".format(host))
@@ -34,250 +45,345 @@
         rhel_ver = self.rhel_version(ssh)
         cmd = "subscription-manager repos \
                 --enable=rhel-{0}-server-rpms \
                 --enable=rhel-{0}-server-optional-rpms \
                 --enable=rhel-{0}-server-extras-rpms \
-                --enable=rhel-server-rhscl-{0}-rpms".format(rhel_ver)
+                --enable=rhel-server-rhscl-{0}-rpms".format(
+            rhel_ver
+        )
         status, output = self.run_loop(cmd, ssh, desc="enable rhel repos")
         if status != "Yes":
-            raise FailException("Failed to enable rhel base repos({0})".format(ssh['host']))
-        logger.info("Succeeded to enable rhel base repos({0})".format(ssh['host']))
-
-    #**************************************
-    # subscription-manager function 
-    #**************************************
+            raise FailException(
+                "Failed to enable rhel base repos({0})".format(ssh["host"])
+            )
+        logger.info("Succeeded to enable rhel base repos({0})".format(ssh["host"]))
+
+    # **************************************
+    # subscription-manager function
+    # **************************************
     def rhsm_override_uuid(self, ssh):
-        ret, output = self.runcmd('uuidgen | tr a-z A-Z', ssh)
+        ret, output = self.runcmd("uuidgen | tr a-z A-Z", ssh)
         option = r'{"dmi.system.uuid":"%s"}' % output.strip()
         cmd = "echo '{0}' > /etc/rhsm/facts/override_uuid.facts".format(option)
         ret, output = self.runcmd(cmd, ssh)
-        ret, output = self.runcmd('cat /etc/rhsm/facts/override_uuid.facts', ssh)
+        ret, output = self.runcmd("cat /etc/rhsm/facts/override_uuid.facts", ssh)
 
     def rhsm_backup(self, ssh):
         ret, output = self.runcmd("ls /backup/rhsm.conf", ssh)
         if ret != 0 or "No such file or directory" in output:
             cmd = "rm -rf /backup/; mkdir -p /backup/; cp /etc/rhsm/rhsm.conf /backup/"
             self.runcmd(cmd, ssh)
         else:
-            logger.info("rhsm.conf is backup already({0})".format(ssh['host']))
+            logger.info("rhsm.conf is backup already({0})".format(ssh["host"]))
 
     def rhsm_recovery(self, ssh):
         self.system_unregister(ssh)
-        ret, output = self.runcmd("rpm -qa | grep katello-ca-consumer | xargs rpm -e |sort", ssh)
+        ret, output = self.runcmd(
+            "rpm -qa | grep katello-ca-consumer | xargs rpm -e |sort", ssh
+        )
         ret, output = self.runcmd("ls /backup/rhsm.conf", ssh)
         if ret == 0 and "No such file or directory" not in output:
             cmd = "rm -f /etc/rhsm/rhsm.conf; cp /backup/rhsm.conf /etc/rhsm/rhsm.conf"
             self.runcmd(cmd, ssh)
         else:
-            logger.info("Failed to recovery rhsm.conf, backup file is not found({0})".format(ssh['host']))
+            logger.info(
+                "Failed to recovery rhsm.conf, backup file is not found({0})".format(
+                    ssh["host"]
+                )
+            )
 
     def system_register_config_validate(self, ssh, register_type, register_config):
-        key = register_config['server']
+        key = register_config["server"]
         if "satellite" in register_type:
-            key = self.get_hostname(register_config['ssh_sat'])
+            key = self.get_hostname(register_config["ssh_sat"])
         cmd = "grep '{0}' /etc/rhsm/rhsm.conf".format(key)
         ret, output = self.runcmd(cmd, ssh)
         if ret == 0 and output is not None and output != "":
             host_name = self.get_hostname(ssh)
             if "stage" in register_type:
-                registered_id = self.stage_consumer_uuid(ssh, register_config, host_name, host_name)
+                registered_id = self.stage_consumer_uuid(
+                    ssh, register_config, host_name, host_name
+                )
             if "satellite" in register_type:
-                registered_id = self.satellite_host_id(ssh, register_config, host_name, host_name)
+                registered_id = self.satellite_host_id(
+                    ssh, register_config, host_name, host_name
+                )
             if registered_id is None or registered_id == "" or registered_id is False:
                 return False
             else:
                 return True
         else:
             return False
 
     def system_isregister(self, ssh, register_type, register_config):
-        host = ssh['host']
-        owner = register_config['owner']
+        host = ssh["host"]
+        owner = register_config["owner"]
         ret, output = self.runcmd("subscription-manager identity", ssh)
         if ret == 0:
             if "stage" in register_type:
                 if owner not in output:
-                    logger.info("System({0}) is registered to stage, but not expected owner".format(host))
+                    logger.info(
+                        "System({0}) is registered to stage, but not expected owner".format(
+                            host
+                        )
+                    )
                     self.system_register_config(ssh, register_type, register_config)
                     return False
-            if self.system_register_config_validate(ssh, register_type, register_config):
+            if self.system_register_config_validate(
+                ssh, register_type, register_config
+            ):
                 logger.info("System({0}) is registered as expected type".format(host))
                 return True
             else:
-                logger.info("System({0}) is registered, but not expected type".format(host))
+                logger.info(
+                    "System({0}) is registered, but not expected type".format(host)
+                )
         elif "has been deleted" in output:
             logger.info("System({0}) is unregistered on server side".format(host))
         else:
             logger.info("System({0}) is not registered".format(host))
         self.system_register_config(ssh, register_type, register_config)
         return False
 
     def system_register_config(self, ssh, register_type, register_config):
-        server = register_config['server']
-        host = ssh['host']
+        server = register_config["server"]
+        host = ssh["host"]
         self.rhsm_recovery(ssh)
         if "stage" in register_type:
-            cmd = "sed -i -e 's|^hostname.*|hostname = {0}|g' /etc/rhsm/rhsm.conf".format(server)
+            cmd = (
+                "sed -i -e 's|^hostname.*|hostname = {0}|g' /etc/rhsm/rhsm.conf".format(
+                    server
+                )
+            )
             ret, output = self.runcmd(cmd, ssh)
             cmd = "sed -i -e 's|^baseurl.*|baseurl=https:\/\/stage.cdn.redhat.com|g' /etc/rhsm/rhsm.conf"
             ret, output = self.runcmd(cmd, ssh)
             if ret != 0:
-                raise FailException("Failed to config stage register for host({0})".format(host))
+                raise FailException(
+                    "Failed to config stage register for host({0})".format(host)
+                )
         if "satellite" in register_type:
-            cmd = "rpm -ihv http://{0}/pub/katello-ca-consumer-latest.noarch.rpm".format(server)
+            cmd = (
+                "rpm -ihv http://{0}/pub/katello-ca-consumer-latest.noarch.rpm".format(
+                    server
+                )
+            )
             ret, output = self.runcmd(cmd, ssh)
             if ret != 0:
-                raise FailException("Failed to config satellite register for host({0})".format(host))
+                raise FailException(
+                    "Failed to config satellite register for host({0})".format(host)
+                )
 
     def system_register(self, ssh, register_type, register_config):
-        server = register_config['server']
-        username = register_config['username']
-        password = register_config['password']
-        owner = register_config['owner']
-        host = ssh['host']
+        server = register_config["server"]
+        username = register_config["username"]
+        password = register_config["password"]
+        owner = register_config["owner"]
+        host = ssh["host"]
         if "stage" in register_type:
-            cmd = "subscription-manager register --username={0} --password={1}".format(username, password)
+            cmd = "subscription-manager register --username={0} --password={1}".format(
+                username, password
+            )
         if "satellite" in register_type:
-            cmd = "subscription-manager register --username={0} --password={1} --org={2}".format(username, password, owner)
+            cmd = "subscription-manager register --username={0} --password={1} --org={2}".format(
+                username, password, owner
+            )
         for i in range(3):
             ret, output = self.runcmd(cmd, ssh)
-            if ret == 0 or "system has been registered" in output or "system is already registered" in output:
-                logger.info("Succeeded to register system {0} to {1}({2})".format(host, server, register_type))
+            if (
+                ret == 0
+                or "system has been registered" in output
+                or "system is already registered" in output
+            ):
+                logger.info(
+                    "Succeeded to register system {0} to {1}({2})".format(
+                        host, server, register_type
+                    )
+                )
                 return True
             elif "certificate verify failed" in output:
                 cmd = "sed -i -e 's|^insecure.*|insecure = 1|g' /etc/rhsm/rhsm.conf"
                 ret, output = self.runcmd(cmd, ssh)
                 self.system_unregister(ssh)
             elif "Please unregister or remove hosts" in output:
                 self.system_unregister(ssh)
             time.sleep(180)
-        raise FailException("Failed to register system {0} to {1}({2})".format(host, server, register_type))
+        raise FailException(
+            "Failed to register system {0} to {1}({2})".format(
+                host, server, register_type
+            )
+        )
 
     def system_register_with_ak(self, ssh, register_config, key_name):
-        owner = register_config['owner']
+        owner = register_config["owner"]
         self.system_unregister(ssh)
-        cmd = 'subscription-manager register  --org="{0}" --activationkey="{1}"'.format(owner, key_name)
+        cmd = 'subscription-manager register  --org="{0}" --activationkey="{1}"'.format(
+            owner, key_name
+        )
         ret, output = self.runcmd(cmd, ssh)
-        if 'system has been registered with ID' in output:
-            logger.info('Succeded to register system using activation_key: {0}'.format(key_name))
-        else:
-            raise FailException('Failed to register system using activation_key')
+        if "system has been registered with ID" in output:
+            logger.info(
+                "Succeded to register system using activation_key: {0}".format(key_name)
+            )
+        else:
+            raise FailException("Failed to register system using activation_key")
 
     def system_unregister(self, ssh):
         for i in range(3):
             ret, output = self.runcmd("subscription-manager unregister", ssh)
             ret, output = self.runcmd("subscription-manager clean", ssh)
             if ret == 0:
-                logger.info("Succeeded to unregister and clean system({0})".format(ssh['host']))
+                logger.info(
+                    "Succeeded to unregister and clean system({0})".format(ssh["host"])
+                )
                 return output.strip()
-            logger.warning("unregister subscription return code {0}, try again after 180s...".format(ret))
+            logger.warning(
+                "unregister subscription return code {0}, try again after 180s...".format(
+                    ret
+                )
+            )
             logger.warning(output)
             time.sleep(180)
         raise FailException("Failed to unregister subscription after trying 3 loops")
 
     def sku_attr_callback(self, attrs):
         sku_attr = dict()
         attrs = attrs.strip().split("\n")
         for line in attrs:
             if re.match(r"^Subscription Name:", line):
-                sku_name = line.split(':')[1].strip()
-                sku_attr['sku_name'] = sku_name
+                sku_name = line.split(":")[1].strip()
+                sku_attr["sku_name"] = sku_name
             if re.match(r"^SKU:", line):
-                sku_id = line.split(':')[1].strip()
-                sku_attr['sku_id'] = sku_id
+                sku_id = line.split(":")[1].strip()
+                sku_attr["sku_id"] = sku_id
             if re.match(r"^Contract:", line):
-                contract_id = line.split(':')[1].strip()
-                sku_attr['contract_id'] = contract_id
+                contract_id = line.split(":")[1].strip()
+                sku_attr["contract_id"] = contract_id
             if re.match(r"^Pool ID:", line):
-                pool_id = line.split(':')[1].strip()
-                sku_attr['pool_id'] = pool_id
+                pool_id = line.split(":")[1].strip()
+                sku_attr["pool_id"] = pool_id
             if re.match(r"^Available:", line):
-                available = line.split(':')[1].strip()
-                sku_attr['available'] = available
+                available = line.split(":")[1].strip()
+                sku_attr["available"] = available
             if re.match(r"^Suggested:", line):
-                suggested = line.split(':')[1].strip()
-                sku_attr['suggested'] = suggested
+                suggested = line.split(":")[1].strip()
+                sku_attr["suggested"] = suggested
             if re.match(r"^Service Level:", line):
-                service_level = line.split(':')[1].strip()
-                sku_attr['service_level'] = service_level
+                service_level = line.split(":")[1].strip()
+                sku_attr["service_level"] = service_level
             if re.match(r"^Service Type:", line):
-                service_type = line.split(':')[1].strip()
-                sku_attr['service_type'] = service_type
+                service_type = line.split(":")[1].strip()
+                sku_attr["service_type"] = service_type
             if re.match(r"^Subscription Type:", line):
-                sub_type = line.split(':')[1].strip()
-                sku_attr['sub_type'] = sub_type
+                sub_type = line.split(":")[1].strip()
+                sku_attr["sub_type"] = sub_type
             if re.match(r"^Ends:", line):
-                ends = line.split(':')[1].strip()
-                sku_attr['ends'] = ends
-            if re.match(r"^System Type:", line) \
-                    or re.match(r"^Entitlement Type:", line):
-                sku_type = line.split(':')[1].strip()
-                sku_attr['sku_type'] = sku_type
+                ends = line.split(":")[1].strip()
+                sku_attr["ends"] = ends
+            if re.match(r"^System Type:", line) or re.match(
+                r"^Entitlement Type:", line
+            ):
+                sku_type = line.split(":")[1].strip()
+                sku_attr["sku_type"] = sku_type
         return sku_attr
 
     def system_sku_attr(self, ssh, sku_id, sku_type, exp_exist=True):
         if "physical" in sku_type.lower():
-            sku_type= "Physical"
+            sku_type = "Physical"
         elif "virtual" in sku_type.lower():
-            sku_type= "Virtual"
+            sku_type = "Virtual"
         else:
             raise FailException("Unknown sku type, please check")
         for i in range(3):
             self.system_sku_refresh(ssh)
-            cmd = "subscription-manager list --av --all --matches=%s | tail -n +4" % sku_id
+            cmd = (
+                "subscription-manager list --av --all --matches=%s | tail -n +4"
+                % sku_id
+            )
             ret, output = self.runcmd(cmd, ssh, desc="subscription list matches")
-            if 'Failed to synchronize cache' in output:
-                logger.warning('Failed to synchronize cache for repo..., refer to bz1719177')
-                output = re.sub('Failed to synchronize.*ignoring this repo.', '', output).strip()
+            if "Failed to synchronize cache" in output:
+                logger.warning(
+                    "Failed to synchronize cache for repo..., refer to bz1719177"
+                )
+                output = re.sub(
+                    "Failed to synchronize.*ignoring this repo.", "", output
+                ).strip()
             if ret == 0 and not output and exp_exist is False:
-                logger.info("Succeeded to search, unexpected sku %s(%s) is not exist" % (sku_id, sku_type))
+                logger.info(
+                    "Succeeded to search, unexpected sku %s(%s) is not exist"
+                    % (sku_id, sku_type)
+                )
                 return output
-            if ret == 0 and "No available subscription pools" not in output \
-                    and "Remote server error" not in output and "Pool ID:" in output:
-                sku_list = output.strip().split('\n\n')
+            if (
+                ret == 0
+                and "No available subscription pools" not in output
+                and "Remote server error" not in output
+                and "Pool ID:" in output
+            ):
+                sku_list = output.strip().split("\n\n")
                 sku_attrs = dict()
                 if len(sku_list) > 0:
                     for attrs in sku_list:
                         pattern_1 = r"System Type:.*%s" % sku_type
                         pattern_2 = r"Entitlement Type:.*%s" % sku_type
-                        if re.search(pattern_1, attrs) \
-                                or re.search(pattern_2, attrs):
+                        if re.search(pattern_1, attrs) or re.search(pattern_2, attrs):
                             sku_attrs = self.sku_attr_callback(attrs)
                 if sku_attrs and exp_exist:
-                    logger.info("Succeeded to search, expected sku %s(%s) is exist" %(sku_id, sku_type))
+                    logger.info(
+                        "Succeeded to search, expected sku %s(%s) is exist"
+                        % (sku_id, sku_type)
+                    )
                     return sku_attrs
                 if sku_attrs and exp_exist is False:
-                    logger.warning("Failed to search, unexpected sku %s(%s) is exist" %(sku_id, sku_type))
+                    logger.warning(
+                        "Failed to search, unexpected sku %s(%s) is exist"
+                        % (sku_id, sku_type)
+                    )
                 if not sku_attrs and exp_exist:
-                    logger.warning("Failed to search, expected sku %s(%s) is not exist" %(sku_id, sku_type))
+                    logger.warning(
+                        "Failed to search, expected sku %s(%s) is not exist"
+                        % (sku_id, sku_type)
+                    )
                 if not sku_attrs and exp_exist is False:
-                    logger.info("Succeeded to search, unexpected sku %s(%s) is not exist" % (sku_id, sku_type))
+                    logger.info(
+                        "Succeeded to search, unexpected sku %s(%s) is not exist"
+                        % (sku_id, sku_type)
+                    )
                     return sku_attrs
-            logger.warning("Failed to list expected subscription, try again after 180s...")
+            logger.warning(
+                "Failed to list expected subscription, try again after 180s..."
+            )
             logger.warning(output)
             time.sleep(180)
-        raise FailException("Failed to find %s(%s)" %(sku_id, sku_type))
+        raise FailException("Failed to find %s(%s)" % (sku_id, sku_type))
 
     def system_sku_refresh(self, ssh):
         for i in range(3):
             cmd = "subscription-manager refresh"
             ret, output = self.runcmd(cmd, ssh, desc="subscription refresh")
             if ret == 0:
                 logger.info("Succeeded to refresh subscription")
                 return output.strip()
             if "Error loading certificate" in output:
-                raise FailException("Failed to refresh subscription due to Error loading certificate, need to register")
-            logger.warning("refresh subscription return code %s, try again after 180s ..." % ret)
+                raise FailException(
+                    "Failed to refresh subscription due to Error loading certificate, need to register"
+                )
+            logger.warning(
+                "refresh subscription return code %s, try again after 180s ..." % ret
+            )
             logger.warning(output)
             time.sleep(180)
         raise FailException("Failed to refresh subscription after trying 3 loops")
 
     def system_sku_attach(self, ssh, pool_id=None, quantity=None):
         if pool_id is not None and quantity is not None:
-            cmd = "subscription-manager attach --pool=%s --quantity=%s" % (pool_id, quantity)
+            cmd = "subscription-manager attach --pool=%s --quantity=%s" % (
+                pool_id,
+                quantity,
+            )
         elif pool_id is not None and quantity is None:
-            cmd = "subscription-manager attach --pool=%s"  % (pool_id)
+            cmd = "subscription-manager attach --pool=%s" % (pool_id)
         else:
             cmd = "subscription-manager attach --auto"
         logger.info("attach command: %s" % cmd)
         for i in range(3):
             ret, output = self.runcmd(cmd, ssh, desc="subscription attach")
@@ -286,13 +392,19 @@
                 return output.strip()
             if "--auto" in cmd and "Unable to find available" in output:
                 logger.warning("Failed to attach subscription by auto")
                 return output.strip()
             if "Multi-entitlement not supported" in output:
-                logger.warning("It's a 'Standard' subscription type, quantity=2*N is only used for 'Stackable'")
+                logger.warning(
+                    "It's a 'Standard' subscription type, quantity=2*N is only used for 'Stackable'"
+                )
                 return output.strip()
-            logger.warning("attach subscription return code {0}, try again after 180s...".format(ret))
+            logger.warning(
+                "attach subscription return code {0}, try again after 180s...".format(
+                    ret
+                )
+            )
             logger.warning(output)
             time.sleep(180)
         raise FailException("Failed to attach subscription after trying 3 loops")
 
     def system_sku_consumed(self, ssh, exp_exist=True):
@@ -300,11 +412,13 @@
             self.system_sku_refresh(ssh)
             cmd = "subscription-manager list --co"
             ret, output = self.runcmd(cmd, ssh, desc="subscription list consumed")
             status = re.findall(r"Status Details:\s+(.*?)\n", output)
             if ret != 0 or "Subscription management service doesn't support" in output:
-                logger.warning("Consumed status is: %s, try again after 180s..." % status)
+                logger.warning(
+                    "Consumed status is: %s, try again after 180s..." % status
+                )
                 logger.warning(output)
                 time.sleep(180)
             elif exp_exist == True and "No consumed subscription pools" in output:
                 logger.warning("No consumed found, try again after 180s...")
                 logger.warning(output)
@@ -319,62 +433,74 @@
             self.system_sku_refresh(ssh)
             cmd = "subscription-manager list --in | tail -n +4"
             ret, output = self.runcmd(cmd, ssh, desc="subscription list installed")
             if ret == 0 and output.strip() != "":
                 attrs = dict()
-                output = output.strip().split('\n')
+                output = output.strip().split("\n")
                 for line in output:
                     if re.match(r"^Product Name:", line):
-                        product_name = line.split(':')[1].strip()
-                        attrs['product_name'] = product_name
+                        product_name = line.split(":")[1].strip()
+                        attrs["product_name"] = product_name
                     if re.match(r"^Product ID:", line):
-                        product_id = line.split(':')[1].strip()
-                        attrs['product_id'] = product_id
+                        product_id = line.split(":")[1].strip()
+                        attrs["product_id"] = product_id
                     if re.match(r"^Version:", line):
-                        version = line.split(':')[1].strip()
-                        attrs['version'] = version
+                        version = line.split(":")[1].strip()
+                        attrs["version"] = version
                     if re.match(r"^Arch:", line):
-                        arch = line.split(':')[1].strip()
-                        attrs['arch'] = arch
+                        arch = line.split(":")[1].strip()
+                        attrs["arch"] = arch
                     if re.match(r"^Status:", line):
-                        status = line.split(':')[1].strip()
-                        attrs['status'] = status
+                        status = line.split(":")[1].strip()
+                        attrs["status"] = status
                     if re.match(r"^Status Details:", line):
-                        status_details = line.split(':')[1].strip()
-                        attrs['status_details'] = status_details
+                        status_details = line.split(":")[1].strip()
+                        attrs["status_details"] = status_details
                     if re.match(r"^Starts:", line):
-                        starts = line.split(':')[1].strip()
-                        attrs['starts'] = starts
+                        starts = line.split(":")[1].strip()
+                        attrs["starts"] = starts
                     if re.match(r"^Ends:", line):
-                        ends = line.split(':')[1].strip()
-                        attrs['ends'] = ends
-                logger.info("Succeeded to list installed subscription, status: %s" % attrs['status'])
+                        ends = line.split(":")[1].strip()
+                        attrs["ends"] = ends
+                logger.info(
+                    "Succeeded to list installed subscription, status: %s"
+                    % attrs["status"]
+                )
                 return attrs
-            logger.warning("list installed subscription return code %s, try again after 180s..." % ret)
+            logger.warning(
+                "list installed subscription return code %s, try again after 180s..."
+                % ret
+            )
             logger.warning(output)
             time.sleep(180)
-        raise FailException("Failed to list installed subscription after trying 3 loops")
+        raise FailException(
+            "Failed to list installed subscription after trying 3 loops"
+        )
 
     def system_sku_unattach(self, ssh, pool_id=None):
         if pool_id is not None:
             cmd = "subscription-manager remove --pool=%s" % pool_id
         else:
             cmd = "subscription-manager remove --all"
         for i in range(3):
             ret, output = self.runcmd(cmd, ssh, desc="subscription unattached")
-            if ret ==0:
+            if ret == 0:
                 logger.info("Succeeded to remove consumed subscription")
                 return output.strip()
             if "Error loading certificate" in output:
-                logger.warning("Failed to remove subscription due to Error loading certificate, register again")
+                logger.warning(
+                    "Failed to remove subscription due to Error loading certificate, register again"
+                )
                 self.system_unregister(ssh)
                 return False
             co_data = self.system_sku_consumed(ssh, exp_exist=False)
             if "No consumed subscription pools" in co_data:
                 logger.info("Succeeded to remove consumed subscription")
                 return output.strip()
-            logger.warning("remove subscription return code %s, try again after 180s..." % ret)
+            logger.warning(
+                "remove subscription return code %s, try again after 180s..." % ret
+            )
             logger.warning(output)
             time.sleep(180)
         raise FailException("Failed to remove subscription after trying 3 loops")
 
     def system_disable_auto_attach(self, ssh):
@@ -392,203 +518,281 @@
         if ret != 0:
             raise FailException("Failed to create custom.facts")
         logger.info("Succeeded to create custom.facts")
         cmd = "subscription-manager facts --update"
         ret, output = self.runcmd(cmd, ssh, desc="subscription facts update")
-        '''time sleep for satellite conflicts with tasks when run facts --update'''
+        """time sleep for satellite conflicts with tasks when run facts --update"""
         time.sleep(60)
         if ret != 0 and "Successfully updated" not in output:
             raise FailException("Failed to update subscription facts")
         logger.info("Succeeded to update subscription facts")
         cmd = "subscription-manager facts --list |grep '%s:'" % facts_key
         ret, output = self.runcmd(cmd, ssh, desc="subscription facts check")
         if ret != 0 and facts_key not in output:
             raise FailException("Failed to check subscription facts: %s" % facts_key)
         actual_value = output.split(": ")[1].strip()
         if facts_value == actual_value:
-            logger.info("Succeeded to check subscription facts: %s:%s" %(facts_key, actual_value))
+            logger.info(
+                "Succeeded to check subscription facts: %s:%s"
+                % (facts_key, actual_value)
+            )
             return True
         else:
-            logger.error("Failed to check subscription facts: %s:%s" %(facts_key, actual_value))
+            logger.error(
+                "Failed to check subscription facts: %s:%s" % (facts_key, actual_value)
+            )
             return False
 
     def system_custom_facts_remove(self, ssh):
-        ret, output = self.runcmd('rm -f /etc/rhsm/facts/custom.facts', ssh)
-        for i in range(3):
-            ret, output = self.runcmd('subscription-manager facts --update', ssh)
+        ret, output = self.runcmd("rm -f /etc/rhsm/facts/custom.facts", ssh)
+        for i in range(3):
+            ret, output = self.runcmd("subscription-manager facts --update", ssh)
             time.sleep(60)
             if ret == 0 and "Successfully updated" in output:
                 logger.info("Succeeded to remove custom.facts")
                 return True
             time.sleep(60)
         raise FailException("Failed to remove custom.facts")
 
-    #**************************************
+    # **************************************
     # Stage API Function
     # https://access.redhat.com/solutions/431773
     # https://hosted.englab.nay.redhat.com/issues/11373
-    #**************************************
+    # **************************************
     def stage_consumer_clean(self, ssh, register_config):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        owner = register_config['owner']
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        owner = register_config["owner"]
         cmd = "curl -s -k -u {0}:{1} {2}/owners/{3}/consumers".format(
-                username, password, api, owner)
+            username, password, api, owner
+        )
         for i in range(3):
             ret, output = self.runcmd(cmd, ssh)
             consumer_list = self.is_json(output.strip())
-            if consumer_list is not False and consumer_list is not None and consumer_list != "":
+            if (
+                consumer_list is not False
+                and consumer_list is not None
+                and consumer_list != ""
+            ):
                 for item in consumer_list:
-                    consumer_uuid = item['uuid'].strip()
+                    consumer_uuid = item["uuid"].strip()
                     cmd = "curl -s -k -u {0}:{1} -X DELETE {2}/consumers/{3}".format(
-                            username, password, api, consumer_uuid)
+                        username, password, api, consumer_uuid
+                    )
                     ret, output = self.runcmd(cmd, ssh)
-                    logger.info("Succeeded to delete consumer: {0}".format(consumer_uuid))
+                    logger.info(
+                        "Succeeded to delete consumer: {0}".format(consumer_uuid)
+                    )
                 return True
             logger.warning("can't get the expected json data, try again after 30s ...")
             time.sleep(30)
         logger.error("Failed to clean consumers due to invalid json data")
         return False
 
-    def stage_consumer_uuid(self, ssh, register_config, host_name, host_uuid, retry=True):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        owner = register_config['owner']
+    def stage_consumer_uuid(
+        self, ssh, register_config, host_name, host_uuid, retry=True
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        owner = register_config["owner"]
         cmd = "curl -s -k -u {0}:{1} {2}/owners/{3}/consumers".format(
-                username, password, api, owner)
+            username, password, api, owner
+        )
         for i in range(3):
             ret, output = self.runcmd(cmd, ssh)
             consumer_list = self.is_json(output.strip())
-            if ret == 0 and "system is unable to complete the requested" not in output \
-                    and consumer_list is not False and consumer_list is not None and consumer_list != "" \
-                    and (host_name in output or host_uuid in output):
+            if (
+                ret == 0
+                and "system is unable to complete the requested" not in output
+                and consumer_list is not False
+                and consumer_list is not None
+                and consumer_list != ""
+                and (host_name in output or host_uuid in output)
+            ):
                 results = dict()
                 for item in consumer_list:
-                    if host_name in item['name'].strip() or host_uuid in item['name'].strip():
-                        consumer_uuid = item['uuid'].strip()
-                        last_checkin = item['lastCheckin'].strip()
+                    if (
+                        host_name in item["name"].strip()
+                        or host_uuid in item["name"].strip()
+                    ):
+                        consumer_uuid = item["uuid"].strip()
+                        last_checkin = item["lastCheckin"].strip()
                         results[last_checkin] = consumer_uuid
                 if results:
                     latest_time = max(results.keys())
                     consumer_uuid = results[latest_time]
-                    logger.info("Succeeded to get stage consumer_uuid: {0}:{1}".format(
-                        host_name, consumer_uuid))
+                    logger.info(
+                        "Succeeded to get stage consumer_uuid: {0}:{1}".format(
+                            host_name, consumer_uuid
+                        )
+                    )
                     return consumer_uuid
             if retry is False:
                 return None
             logger.warning("no consumer_uuid found, try again after 180s...")
             logger.warning(output)
             time.sleep(180)
-        logger.error("Failed to get stage consumer_uuid for host({0})".format(host_name))
+        logger.error(
+            "Failed to get stage consumer_uuid for host({0})".format(host_name)
+        )
         return None
 
-    def stage_consumer_delete(self, ssh, register_config, host_name, host_uuid, retry=True):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        consumer_uuid = self.stage_consumer_uuid(ssh, register_config, host_name, host_uuid, retry)
+    def stage_consumer_delete(
+        self, ssh, register_config, host_name, host_uuid, retry=True
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        consumer_uuid = self.stage_consumer_uuid(
+            ssh, register_config, host_name, host_uuid, retry
+        )
         if consumer_uuid is not None and consumer_uuid != "":
             cmd = "curl -s -k -u {0}:{1} -X DELETE {2}/consumers/{3}".format(
-                    username, password, api, consumer_uuid)
+                username, password, api, consumer_uuid
+            )
             ret, output = self.runcmd(cmd, ssh)
             cmd = "curl -s -k -u {0}:{1} -X GET {2}/consumers/{3}".format(
-                    username, password, api, consumer_uuid)
+                username, password, api, consumer_uuid
+            )
             ret, output = self.runcmd(cmd, ssh)
             if host_name not in output:
                 logger.info("Succeeded to delete host {0}".format(host_name))
         else:
             logger.info("Host({0}) is not found in stage server".format(host_name))
         return True
 
     def stage_consumer_get(self, ssh, register_config, host_name, host_uuid, desc=""):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        consumer_uuid = self.stage_consumer_uuid(ssh, register_config, host_name, host_uuid, True)
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        consumer_uuid = self.stage_consumer_uuid(
+            ssh, register_config, host_name, host_uuid, True
+        )
         if consumer_uuid is not None and consumer_uuid != "":
             cmd = "curl -s -k -u {0}:{1} -X GET {2}/consumers/{3}".format(
-                    username, password, api, consumer_uuid)
+                username, password, api, consumer_uuid
+            )
             ret, output = self.runcmd(cmd, ssh, desc=desc)
             if ret == 0 and output is not False and output is not None:
                 output = self.is_json(output.strip())
-                logger.info("Succeeded to get host display info :{0}".format(output['name']))
+                logger.info(
+                    "Succeeded to get host display info :{0}".format(output["name"])
+                )
             return output
         else:
             logger.info("Failed to get host display info")
 
-    def stage_consumer_attach(self, ssh, register_config, host_name, host_uuid, pool_id):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        consumer_uuid = self.stage_consumer_uuid(ssh, register_config, host_name, host_uuid)
+    def stage_consumer_attach(
+        self, ssh, register_config, host_name, host_uuid, pool_id
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        consumer_uuid = self.stage_consumer_uuid(
+            ssh, register_config, host_name, host_uuid
+        )
         if consumer_uuid is not None and consumer_uuid != "":
             cmd = "curl -s -k -u {0}:{1} -X POST {2}/consumers/{3}/entitlements?pool={4}".format(
-                    username, password, api, consumer_uuid, pool_id)
+                username, password, api, consumer_uuid, pool_id
+            )
             for i in range(3):
                 ret, output = self.runcmd(cmd, ssh)
                 if "unit has already had the subscription matching pool ID" in output:
-                    logger.warning("consumer_uuid({0}) is already attached to pool({1}), will remove it".format(
-                        consumer_uuid, pool_id))
-                    self.stage_consumer_unattach(ssh, register_config, host_name, host_uuid)
+                    logger.warning(
+                        "consumer_uuid({0}) is already attached to pool({1}), will remove it".format(
+                            consumer_uuid, pool_id
+                        )
+                    )
+                    self.stage_consumer_unattach(
+                        ssh, register_config, host_name, host_uuid
+                    )
                 if ret == 0 and consumer_uuid in output and pool_id in output:
-                    logger.info("Succeeded to attach pool({0}) for consumer({1})".format(
-                        pool_id, consumer_uuid))
+                    logger.info(
+                        "Succeeded to attach pool({0}) for consumer({1})".format(
+                            pool_id, consumer_uuid
+                        )
+                    )
                     return True
-                logger.warning("Failed to attach pool({0}) for consumer({1}), try again after 15s".format(
-                    pool_id, consumer_uuid))
+                logger.warning(
+                    "Failed to attach pool({0}) for consumer({1}), try again after 15s".format(
+                        pool_id, consumer_uuid
+                    )
+                )
                 time.sleep(15)
-        raise FailException("Failed to attach pool({0}) for consumer({1})".format(
-            pool_id, consumer_uuid))
+        raise FailException(
+            "Failed to attach pool({0}) for consumer({1})".format(
+                pool_id, consumer_uuid
+            )
+        )
 
     def stage_consumer_unattach(self, ssh, register_config, host_name, host_uuid):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        consumer_uuid = self.stage_consumer_uuid(ssh, register_config, host_name, host_uuid)
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        consumer_uuid = self.stage_consumer_uuid(
+            ssh, register_config, host_name, host_uuid
+        )
         if consumer_uuid is not None and consumer_uuid != "":
-            cmd = "curl -s -k -u {0}:{1} -X DELETE {2}/consumers/{3}/entitlements".format(
-                    username, password, api, consumer_uuid)
+            cmd = (
+                "curl -s -k -u {0}:{1} -X DELETE {2}/consumers/{3}/entitlements".format(
+                    username, password, api, consumer_uuid
+                )
+            )
             ret, output = self.runcmd(cmd, ssh)
             if ret == 0:
-                logger.info("Succeeded to remove attached pools for consumer: {0}".format(host_name))
+                logger.info(
+                    "Succeeded to remove attached pools for consumer: {0}".format(
+                        host_name
+                    )
+                )
                 return True
-        raise FailException("Failed to remove attached pools for consumer: {0}".format(host_name))
-
-    def stage_consumer_associate(self, ssh, register_config, host_name, host_uuid, guest_uuid):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        consumer_uuid = self.stage_consumer_uuid(ssh, register_config, host_name, host_uuid)
+        raise FailException(
+            "Failed to remove attached pools for consumer: {0}".format(host_name)
+        )
+
+    def stage_consumer_associate(
+        self, ssh, register_config, host_name, host_uuid, guest_uuid
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        consumer_uuid = self.stage_consumer_uuid(
+            ssh, register_config, host_name, host_uuid
+        )
         if consumer_uuid is not None and consumer_uuid != "":
             cmd = "curl -s -k -u {0}:{1} {2}/consumers/{3}/guestids".format(
-                    username, password, api, consumer_uuid)
+                username, password, api, consumer_uuid
+            )
             ret, output = self.runcmd(cmd, ssh)
             if ret == 0 and guest_uuid in output:
                 logger.info("Hypervisor and Guest are associated in stage web")
                 return True
         logger.error("Hypervisor and Guest are not associated in stage web")
         return False
 
     def stage_job_delete(self, ssh, register_config, job_ids):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         if len(job_ids) > 0:
             for job_id in job_ids:
                 cmd = "curl -s -k -u {0}:{1} -X DELETE {2}/jobs/{3}".format(
-                        username, password, api, job_id.strip())
+                    username, password, api, job_id.strip()
+                )
                 ret, output = self.runcmd(cmd, ssh)
                 logger.info("Finished to cancel job {0}".format(job_id))
 
     def stage_sca_set(self, ssh, register_config, enable=True):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        owner = register_config['owner']
-        curl_header = '-H "accept: application/json" -H "Content-Type: application/json"'
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        owner = register_config["owner"]
+        curl_header = (
+            '-H "accept: application/json" -H "Content-Type: application/json"'
+        )
         data = '{"contentAccessMode": "org_environment"}'
         if not enable:
             data = '{"contentAccessMode": "entitlement"}'
         json_data = json.dumps(data)
         cmd = f"curl -X PUT -s -k -u {username}:{password} -d {json_data} {curl_header} {api}/owners/{owner}"
@@ -596,448 +800,677 @@
         if ret == 0:
             logger.info(f"Succeeded to set stage candlepin with SCA={enable}")
         else:
             raise FailException(f"Failed to set stage candlepin with SCA={enable}")
 
-    #**************************************
+    # **************************************
     # Satellite API Function
-    #**************************************
+    # **************************************
     def satellite_host_setting(self, ssh, register_config):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/settings/?per_page=1000".format(username, password, api)
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/settings/?per_page=1000".format(
+            username, password, api
+        )
         for i in range(3):
             ret, output = self.runcmd(cmd, ssh, debug=False)
             output = self.is_json(output.strip())
             if output is not False and output is not None and output != "":
                 for item in output["results"]:
-                    if item['name'] == "unregister_delete_host":
+                    if item["name"] == "unregister_delete_host":
                         curl_header = '-H "accept:application/json" -H "content-type:application/json"'
                         json_data = json.dumps('{"value":"true"}')
-                        cmd = 'curl -X PUT -s -k {0} -u {1}:{2} -d {3} {4}/api/settings/{5}'.format(
-                                curl_header, username, password, json_data, api, item['id'])
+                        cmd = "curl -X PUT -s -k {0} -u {1}:{2} -d {3} {4}/api/settings/{5}".format(
+                            curl_header, username, password, json_data, api, item["id"]
+                        )
                         ret, output = self.runcmd(cmd, ssh)
                         if ret == 0 and '"value":true' in output:
-                            logger.info("Succeeded to update unregister_delete_host option to True")
+                            logger.info(
+                                "Succeeded to update unregister_delete_host option to True"
+                            )
                         else:
-                            logger.error("Failed to update unregister_delete_host option to True")
+                            logger.error(
+                                "Failed to update unregister_delete_host option to True"
+                            )
                         break
                 return True
         logger.error("Failed to set satellite host for unregister_delete_host")
         return False
 
-    def satellite_host_id(self, ssh, register_config, host_name, host_uuid, host_hwuuid=None, retry=True):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+    def satellite_host_id(
+        self, ssh, register_config, host_name, host_uuid, host_hwuuid=None, retry=True
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/?per_page=1000".format(
-                username, password, api)
+            username, password, api
+        )
         for i in range(3):
             rex = [host_name, host_name.lower(), host_uuid, host_uuid.lower()]
             if host_hwuuid is not None:
-                rex = [host_name, host_name.lower(), host_uuid, host_uuid.lower(), host_hwuuid, host_hwuuid.lower()]
-            ret, output = self.runcmd(cmd, ssh, desc="satellite hosts list", debug=False)
+                rex = [
+                    host_name,
+                    host_name.lower(),
+                    host_uuid,
+                    host_uuid.lower(),
+                    host_hwuuid,
+                    host_hwuuid.lower(),
+                ]
+            ret, output = self.runcmd(
+                cmd, ssh, desc="satellite hosts list", debug=False
+            )
             output = self.is_json(output.strip())
-            if output is not False and output is not None and output != "" and 'results' in output.keys():
+            if (
+                output is not False
+                and output is not None
+                and output != ""
+                and "results" in output.keys()
+            ):
                 results = dict()
-                for item in output['results']:
-                    if ret == 0 and any(key in item['name'] for key in rex):
-                        host_id = str(item['id']).strip()
-                        create_at = item['created_at'].strip()
+                for item in output["results"]:
+                    if ret == 0 and any(key in item["name"] for key in rex):
+                        host_id = str(item["id"]).strip()
+                        create_at = item["created_at"].strip()
                         results[create_at] = host_id
                 if results:
                     latest_time = max(results.keys())
                     host_id = results[latest_time]
-                    logger.info("Succeeded to get satellite host_id: {0}:{1}".format(host_name, host_id))
+                    logger.info(
+                        "Succeeded to get satellite host_id: {0}:{1}".format(
+                            host_name, host_id
+                        )
+                    )
                     return host_id
             if retry is False:
                 return None
             logger.warning("no results found for host_id, try again after 15s...")
             time.sleep(15)
-        logger.warning("Failed to get satellite host_id for host({0}), maybe mapping is not sent".format(host_name))
+        logger.warning(
+            "Failed to get satellite host_id for host({0}), maybe mapping is not sent".format(
+                host_name
+            )
+        )
         return None
 
-    def satellite_katello_id(self, ssh, register_config, pool_id, org_name="Default_Organization"):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+    def satellite_katello_id(
+        self, ssh, register_config, pool_id, org_name="Default_Organization"
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         org_id = self.satellite_org_id_get(ssh, register_config, org_name)
         cmd = "curl -X GET -s -k -u {0}:{1} {2}/katello/api/organizations/{3}/subscriptions/?per_page=1000".format(
-                username, password, api, org_id)
-        for i in range(3):
-            ret, output = self.runcmd(cmd, ssh, desc="satellite pools list", debug=False)
+            username, password, api, org_id
+        )
+        for i in range(3):
+            ret, output = self.runcmd(
+                cmd, ssh, desc="satellite pools list", debug=False
+            )
             output = self.is_json(output.strip())
-            if output is not False and output is not None and output != "" and 'results' in output.keys():
-                for item in output['results']:
-                    if pool_id in item['cp_id']:
-                        katello_id = str(item['id']).strip()
-                        logger.info("Succeeded to get satellite katello_id: {0}({1})".format(katello_id, pool_id))
+            if (
+                output is not False
+                and output is not None
+                and output != ""
+                and "results" in output.keys()
+            ):
+                for item in output["results"]:
+                    if pool_id in item["cp_id"]:
+                        katello_id = str(item["id"]).strip()
+                        logger.info(
+                            "Succeeded to get satellite katello_id: {0}({1})".format(
+                                katello_id, pool_id
+                            )
+                        )
                         return katello_id
             logger.warning("no results found for katello_id, try again after 15s...")
             time.sleep(15)
         logger.error("Failed to get satellite katello_id for pool({0})".format(pool_id))
         return None
 
-    def satellite_host_delete(self, ssh, register_config, host_name, host_uuid, retry=True):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        host_id = self.satellite_host_id(ssh, register_config, host_name, host_uuid, retry=retry)
+    def satellite_host_delete(
+        self, ssh, register_config, host_name, host_uuid, retry=True
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        host_id = self.satellite_host_id(
+            ssh, register_config, host_name, host_uuid, retry=retry
+        )
         if host_id is not None and host_id != "":
             cmd = "curl -X DELETE -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(
-                    username, password, api, host_id)
+                username, password, api, host_id
+            )
             ret, output = self.runcmd(cmd, ssh, desc="satellite host delete")
             cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(
-                    username, password, api, host_id)
+                username, password, api, host_id
+            )
             ret, output = self.runcmd(cmd, ssh, desc="satellite host get")
             if host_name not in output:
                 logger.info("Succeeded to delete host: {0}".format(host_name))
         else:
             logger.info("Host({0}) is not found in satellite server".format(host_name))
         return True
 
-    def satellite_host_attach(self, ssh, register_config, host_name, host_uuid, pool_id, quantity=1):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+    def satellite_host_attach(
+        self, ssh, register_config, host_name, host_uuid, pool_id, quantity=1
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         host_id = self.satellite_host_id(ssh, register_config, host_name, host_uuid)
         katello_id = self.satellite_katello_id(ssh, register_config, pool_id)
-        if host_id is not None and host_id != "" and katello_id is not None and katello_id != "":
-            curl_header = '-H "accept:application/json" -H "content-type:application/json"'
-            json_data = json.dumps('{"subscriptions":[{"id":%s, "quantity":%s}]}' % (katello_id, quantity))
-            cmd = 'curl -X PUT -s -k {0} -u {1}:{2} -d {3} {4}/api/v2/hosts/{5}/subscriptions/add_subscriptions'.format(
-                    curl_header, username, password, json_data, api, host_id)
+        if (
+            host_id is not None
+            and host_id != ""
+            and katello_id is not None
+            and katello_id != ""
+        ):
+            curl_header = (
+                '-H "accept:application/json" -H "content-type:application/json"'
+            )
+            json_data = json.dumps(
+                '{"subscriptions":[{"id":%s, "quantity":%s}]}' % (katello_id, quantity)
+            )
+            cmd = "curl -X PUT -s -k {0} -u {1}:{2} -d {3} {4}/api/v2/hosts/{5}/subscriptions/add_subscriptions".format(
+                curl_header, username, password, json_data, api, host_id
+            )
             for i in range(3):
                 ret, output = self.runcmd(cmd, ssh, desc="satellite attach pool")
-                if pool_id in output and "subscription_id" in output and "product_id" in output:
-                    logger.info("Succeeded to attach pool({0}) for host_id({0})".format(pool_id, host_id))
+                if (
+                    pool_id in output
+                    and "subscription_id" in output
+                    and "product_id" in output
+                ):
+                    logger.info(
+                        "Succeeded to attach pool({0}) for host_id({0})".format(
+                            pool_id, host_id
+                        )
+                    )
                     return True
-                logger.warning("can't attach pool({0}) for host_id({1}), try again after 15s".format(pool_id, host_id))
+                logger.warning(
+                    "can't attach pool({0}) for host_id({1}), try again after 15s".format(
+                        pool_id, host_id
+                    )
+                )
                 time.sleep(15)
-        raise FailException("Failed to attach pool({0}) for host_id({1})".format(pool_id, host_id))
+        raise FailException(
+            "Failed to attach pool({0}) for host_id({1})".format(pool_id, host_id)
+        )
 
     def satellite_host_unattach(self, ssh, register_config, host_name, host_uuid):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         host_id = self.satellite_host_id(ssh, register_config, host_name, host_uuid)
         if host_id is not None and host_id != "":
-            '''get all the attached subscriptions(katello_ids) for the host'''
+            """get all the attached subscriptions(katello_ids) for the host"""
             katello_ids = dict()
             cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}/subscriptions/?per_page=1000".format(
-                    username, password, api, host_id)
+                username, password, api, host_id
+            )
             for i in range(3):
-                ret, output = self.runcmd(cmd, ssh, desc="satellite host consumed list", debug=False)
+                ret, output = self.runcmd(
+                    cmd, ssh, desc="satellite host consumed list", debug=False
+                )
                 output = self.is_json(output.strip())
-                if output is not False and output is not None and output != "" and 'results' in output.keys():
-                    for item in output['results']:
-                        if 'cp_id' in item.keys():
-                            katello_ids[item['cp_id']] = str(item['id']).strip()
+                if (
+                    output is not False
+                    and output is not None
+                    and output != ""
+                    and "results" in output.keys()
+                ):
+                    for item in output["results"]:
+                        if "cp_id" in item.keys():
+                            katello_ids[item["cp_id"]] = str(item["id"]).strip()
                     break
-                logger.warning("no results found for host subscriptions, try again after 15s...")
+                logger.warning(
+                    "no results found for host subscriptions, try again after 15s..."
+                )
                 time.sleep(15)
-            '''remove all the attached subscriptions(katello_ids) for the host'''
+            """remove all the attached subscriptions(katello_ids) for the host"""
             if katello_ids:
-                logger.info("Succeeded to find consumed pools for host_id({0}): {1}".format(host_id, katello_ids))
+                logger.info(
+                    "Succeeded to find consumed pools for host_id({0}): {1}".format(
+                        host_id, katello_ids
+                    )
+                )
                 for cp_id, katello_id in katello_ids.items():
                     curl_header = '-H "accept:application/json" -H "content-type:application/json"'
                     json_data = json.dumps('{"subscriptions":[{"id":%s}]}' % katello_id)
-                    cmd = 'curl -X PUT -s -k {0} -u {1}:{2} -d {3} {4}/api/v2/hosts/{5}/subscriptions/remove_subscriptions'.format(
-                            curl_header, username, password, json_data, api, host_id)
+                    cmd = "curl -X PUT -s -k {0} -u {1}:{2} -d {3} {4}/api/v2/hosts/{5}/subscriptions/remove_subscriptions".format(
+                        curl_header, username, password, json_data, api, host_id
+                    )
                     ret, output = self.runcmd(cmd, ssh, desc="satellite remove pool")
                     if ret == 0:
-                        logger.info("Succeeded to remove pool({0}) for host_id({1})".format(cp_id, host_id))
+                        logger.info(
+                            "Succeeded to remove pool({0}) for host_id({1})".format(
+                                cp_id, host_id
+                            )
+                        )
                     else:
-                        logger.error("Failed to remove pool({0}) for host_id({1})".format(cp_id, host_id))
+                        logger.error(
+                            "Failed to remove pool({0}) for host_id({1})".format(
+                                cp_id, host_id
+                            )
+                        )
             else:
                 logger.info("no consumed pools for host_id({0})".format(host_id))
 
-    def satellite_host_associate(self, ssh, register_config, hypervisor_hostname, hypervisor_uuid, guest_hostname, guest_uuid):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
-        hypervisor_hostid = self.satellite_host_id(ssh, register_config, hypervisor_hostname, hypervisor_uuid)
-        guest_hostid = self.satellite_host_id(ssh, register_config, guest_hostname, guest_uuid)
+    def satellite_host_associate(
+        self,
+        ssh,
+        register_config,
+        hypervisor_hostname,
+        hypervisor_uuid,
+        guest_hostname,
+        guest_uuid,
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
+        hypervisor_hostid = self.satellite_host_id(
+            ssh, register_config, hypervisor_hostname, hypervisor_uuid
+        )
+        guest_hostid = self.satellite_host_id(
+            ssh, register_config, guest_hostname, guest_uuid
+        )
         for i in range(3):
             time.sleep(60)
             results = list()
-            if hypervisor_hostid is not None and hypervisor_hostid != "" \
-                    and guest_hostid is not None and guest_hostid != "":
-                cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(username, password, api, hypervisor_hostid)
+            if (
+                hypervisor_hostid is not None
+                and hypervisor_hostid != ""
+                and guest_hostid is not None
+                and guest_hostid != ""
+            ):
+                cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(
+                    username, password, api, hypervisor_hostid
+                )
                 ret, output = self.runcmd(cmd, ssh, desc="satellite host show")
-                rex = [guest_hostname, guest_hostname.lower(), guest_uuid, guest_uuid.lower()]
+                rex = [
+                    guest_hostname,
+                    guest_hostname.lower(),
+                    guest_uuid,
+                    guest_uuid.lower(),
+                ]
                 if ret == 0 and any(key in output for key in rex):
                     results.append("Yes")
-                    logger.info("Succeeded to find guest associated info in hypervisor page")
+                    logger.info(
+                        "Succeeded to find guest associated info in hypervisor page"
+                    )
                 else:
                     results.append("No")
-                    logger.error("Failed to find guest associated info in hypervisor page")
-                cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(username,password, api, guest_hostid)
+                    logger.error(
+                        "Failed to find guest associated info in hypervisor page"
+                    )
+                cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(
+                    username, password, api, guest_hostid
+                )
                 ret, output = self.runcmd(cmd, ssh, desc="satellite host show")
-                rex = [hypervisor_hostname, hypervisor_hostname.lower(), hypervisor_uuid, hypervisor_uuid.lower()]
+                rex = [
+                    hypervisor_hostname,
+                    hypervisor_hostname.lower(),
+                    hypervisor_uuid,
+                    hypervisor_uuid.lower(),
+                ]
                 if ret == 0 and any(key in output for key in rex):
                     results.append("Yes")
-                    logger.info("Succeeded to find hypervisor host associated info in guest page")
+                    logger.info(
+                        "Succeeded to find hypervisor host associated info in guest page"
+                    )
                 else:
                     results.append("No")
-                    logger.error("Failed to find hypervisor host associated info in guest page")
+                    logger.error(
+                        "Failed to find hypervisor host associated info in guest page"
+                    )
             if "No" in results or results is None:
-                logger.warning("no hypervisor and guest associated info found, try again after 60s...")
+                logger.warning(
+                    "no hypervisor and guest associated info found, try again after 60s..."
+                )
             else:
                 return True
         return False
 
-    def satellite_org_create(self, ssh, register_config, org_name, org_label="", desc=""):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+    def satellite_org_create(
+        self, ssh, register_config, org_name, org_label="", desc=""
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         if org_label == "":
             org_label = org_name
         curl_header = '-H "Accept:application/json" -H "Content-Type:application/json"'
-        org_json = json.dumps('{"name":"%s", "label":"%s", "description":"%s"}' \
-                            % (org_name, org_label, desc))
+        org_json = json.dumps(
+            '{"name":"%s", "label":"%s", "description":"%s"}'
+            % (org_name, org_label, desc)
+        )
         cmd = "curl {0} -X POST -s -k -u {1}:{2} -d {3} {4}/katello/api/organizations".format(
-                curl_header, username, password, org_json, api)
+            curl_header, username, password, org_json, api
+        )
         ret, output = self.runcmd(cmd, ssh)
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None and output != "":
             for i in range(3):
                 output = self.satellite_org_list(ssh, register_config)
-                if 'results' in output.keys():
-                    for item in output['results']:
-                        if item['name'] == org_name:
-                            logger.info("succeeded to create organization {0}".format(org_name))
+                if "results" in output.keys():
+                    for item in output["results"]:
+                        if item["name"] == org_name:
+                            logger.info(
+                                "succeeded to create organization {0}".format(org_name)
+                            )
                             return
                 logger.warning("no org found for creation, try again after 15s...")
                 time.sleep(15)
         raise FailException("Failed to create organization")
 
     def satellite_org_list(self, ssh, register_config):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         for i in range(3):
             cmd = "curl -X GET -s -k -u {0}:{1} '{2}/katello/api/organizations'".format(
-                    username, password, api)
+                username, password, api
+            )
             ret, output = self.runcmd(cmd, ssh)
             output = self.is_json(output.strip())
             if ret == 0 and output is not False and output is not None and output != "":
                 return output
         raise FailException("Failed to list organization info")
 
     def satellite_org_id_get(self, ssh, register_config, org_name):
         for i in range(3):
             org_list = self.satellite_org_list(ssh, register_config)
-            if 'results' in org_list.keys():
-                for item in org_list['results']:
-                    if item['label'] == org_name:
-                        org_id = item['id']
+            if "results" in org_list.keys():
+                for item in org_list["results"]:
+                    if item["label"] == org_name:
+                        org_id = item["id"]
                         return org_id
-            logger.warning("no {0} organization find, try again after 15s...".format(org_name))
+            logger.warning(
+                "no {0} organization find, try again after 15s...".format(org_name)
+            )
             time.sleep(15)
         logger.warning("Failed to find organization: {0}".format(org_name))
         return False
 
     def satellite_hosts_list(self, ssh, register_config, org_name):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         org_id = self.satellite_org_id_get(ssh, register_config, org_name)
-        cmd = "curl -X GET -s -k -u {0}:{1} '{2}/api/organizations/{3}/hosts/?per_page=1000'".format(username, password, api, org_id)
+        cmd = "curl -X GET -s -k -u {0}:{1} '{2}/api/organizations/{3}/hosts/?per_page=1000'".format(
+            username, password, api, org_id
+        )
         ret, output = self.runcmd(cmd, ssh, debug=False)
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None and output != "":
             logger.info("succeeded to list all hosts")
             return output
         else:
             raise FailException("Failed to list all hosts")
 
-    def satellite_hosts_search(self, ssh, register_config, org_name, hostname, hostuuid, exp_exist=True):
+    def satellite_hosts_search(
+        self, ssh, register_config, org_name, hostname, hostuuid, exp_exist=True
+    ):
         hosts = self.satellite_hosts_list(ssh, register_config, org_name)
-        if 'results' in hosts.keys():
+        if "results" in hosts.keys():
             name_list = []
-            for item in hosts['results']:
-                name = item['name']
+            for item in hosts["results"]:
+                name = item["name"]
                 name_list.append(name)
             name_list = str(name_list)
-            res1 = re.findall('.*%s.*' % hostname, name_list, re.I)
-            res2 = re.findall('.*%s.*' % hostuuid, name_list, re.I)
+            res1 = re.findall(".*%s.*" % hostname, name_list, re.I)
+            res2 = re.findall(".*%s.*" % hostuuid, name_list, re.I)
             num = len(res1) + len(res2)
             if num > 0 and exp_exist is True:
-                    logger.info("Succeeded to search, expected host is exist in org {0}".format(org_name))
-                    return True
+                logger.info(
+                    "Succeeded to search, expected host is exist in org {0}".format(
+                        org_name
+                    )
+                )
+                return True
             if num == 0 and exp_exist is True:
-                    logger.error("Failed to search, expected host is not exist in org {0}".format(org_name))
-                    return False
+                logger.error(
+                    "Failed to search, expected host is not exist in org {0}".format(
+                        org_name
+                    )
+                )
+                return False
             if num > 0 and exp_exist is False:
-                    logger.error("Failed to search, unexpected host is exist in org {0}".format(org_name))
-                    return False
+                logger.error(
+                    "Failed to search, unexpected host is exist in org {0}".format(
+                        org_name
+                    )
+                )
+                return False
             if num == 0 and exp_exist is False:
-                    logger.info("Succeeded to search, unexpected host is not exist in org {0}".format(org_name))
-                    return True
+                logger.info(
+                    "Succeeded to search, unexpected host is not exist in org {0}".format(
+                        org_name
+                    )
+                )
+                return True
         else:
             if exp_exist is True:
-                logger.error("Failed to search, expected host is not exist in org {0}".format(org_name))
+                logger.error(
+                    "Failed to search, expected host is not exist in org {0}".format(
+                        org_name
+                    )
+                )
                 return False
             if exp_exist is False:
-                logger.info("Succeeded to search, unexpected host is not exist in org {0}".format(org_name))
+                logger.info(
+                    "Succeeded to search, unexpected host is not exist in org {0}".format(
+                        org_name
+                    )
+                )
                 return True
 
-    def satellite_hosts_get(self, ssh, register_config, host_name, host_uuid, host_hwuuid=None, desc=""):
-        admin_user = register_config['username']
-        admin_passwd = register_config['password']
-        server = register_config['server']
+    def satellite_hosts_get(
+        self, ssh, register_config, host_name, host_uuid, host_hwuuid=None, desc=""
+    ):
+        admin_user = register_config["username"]
+        admin_passwd = register_config["password"]
+        server = register_config["server"]
         baseurl = "https://{0}".format(server)
-        host_id = self.satellite_host_id(ssh, register_config, host_name, host_uuid, host_hwuuid, True)
-        cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}" \
-            .format(admin_user, admin_passwd, baseurl, host_id)
+        host_id = self.satellite_host_id(
+            ssh, register_config, host_name, host_uuid, host_hwuuid, True
+        )
+        cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(
+            admin_user, admin_passwd, baseurl, host_id
+        )
         ret, output = self.runcmd(str(cmd), ssh, desc=desc)
         if ret == 0 and output is not False and output is not None:
             logger.info("Succeed to get expected host info")
             output = self.is_json(output.strip())
             return output
         else:
             logger.info("Failed to get host info")
             return None
 
-    def satellite_active_key_create(self, ssh, register_config, key_name, org_id=1, desc=""):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+    def satellite_active_key_create(
+        self, ssh, register_config, key_name, org_id=1, desc=""
+    ):
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         curl_header = '-H "Accept:application/json" -H "Content-Type:application/json"'
-        active_key_json = json.dumps('\
+        active_key_json = json.dumps(
+            '\
                 {"organization_id":"%s", \
                 "name":"%s", "description":"%s", \
                 "environment_id":1, \
                 "environment": {"id":1, "name":"Library"}, \
                 "content_view_id":"1", \
-                "content_view":{"id":1,"name":"Default Organization View"}}' % (org_id, key_name, desc))
+                "content_view":{"id":1,"name":"Default Organization View"}}'
+            % (org_id, key_name, desc)
+        )
         cmd = "curl {0} -X POST -s -k -u {1}:{2} -d {3} {4}/katello/api/activation_keys".format(
-                curl_header, username, password, active_key_json, api)
+            curl_header, username, password, active_key_json, api
+        )
         ret, output = self.runcmd(cmd, ssh)
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None and output != "":
             for i in range(5):
                 output = self.satellite_active_key_list(ssh, register_config, org_id)
-                if 'results' in output.keys():
-                    for item in output['results']:
-                        if item['name'] == key_name:
+                if "results" in output.keys():
+                    for item in output["results"]:
+                        if item["name"] == key_name:
                             logger.info("succeeded to create activation_key")
                             return
-                logger.warning("no results found for created activation_key, try again after 30s...")
+                logger.warning(
+                    "no results found for created activation_key, try again after 30s..."
+                )
                 time.sleep(30)
         raise FailException("Failed to create activation_key")
 
     def satellite_active_key_delete(self, ssh, register_config, key_name, org_id=1):
-        key_id = self.satellite_active_key_id_get(ssh, register_config, key_name, org_id)
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+        key_id = self.satellite_active_key_id_get(
+            ssh, register_config, key_name, org_id
+        )
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         curl_header = '-H "Accept:application/json" -H "Content-Type:application/json"'
         cmd = "curl {0} -X DELETE -s -k -u {1}:{2} {3}/katello/api/activation_keys/{4}".format(
-                curl_header, username, password, api, key_id)
+            curl_header, username, password, api, key_id
+        )
         ret, output = self.runcmd(cmd, ssh)
         if ret == 0:
             for i in range(5):
                 output = self.satellite_active_key_list(ssh, register_config, org_id)
-                if output['total'] != 0:
-                    for item in output['results']:
+                if output["total"] != 0:
+                    for item in output["results"]:
                         id_list = []
-                        id_list.append(item['id'])
+                        id_list.append(item["id"])
                         if key_id not in id_list:
-                            logger.info("Succeeded to delete activation_key id: {0}".format(key_id))
+                            logger.info(
+                                "Succeeded to delete activation_key id: {0}".format(
+                                    key_id
+                                )
+                            )
                             return
-                        logger.warning("Activation key still exists, try again after 30s...")
+                        logger.warning(
+                            "Activation key still exists, try again after 30s..."
+                        )
                         time.sleep(30)
                 else:
-                    logger.info("Succeeded to delete activation_key id: {0}".format(key_id))
+                    logger.info(
+                        "Succeeded to delete activation_key id: {0}".format(key_id)
+                    )
                     return
         raise FailException("Failed to delete activation_key")
 
     def satellite_active_key_list(self, ssh, register_config, org_id=1):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         cmd = "curl -X GET -s -k -u {0}:{1} '{2}/katello/api/activation_keys?organization_id={3}'".format(
-                username, password, api, org_id)
+            username, password, api, org_id
+        )
         ret, output = self.runcmd(cmd, ssh)
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None and output != "":
             return output
         raise FailException("Failed to list activation_keys info")
 
     def satellite_active_key_id_get(self, ssh, register_config, key_name, org_id=1):
         output = self.satellite_active_key_list(ssh, register_config, org_id)
         if output is not False and output is not None and output != "":
-            for item in output['results']:
-                if item['name'] == key_name:
-                    key_id = item['id']
+            for item in output["results"]:
+                if item["name"] == key_name:
+                    key_id = item["id"]
                     logger.info("Succeded to get activation key id: %s" % key_id)
                     return key_id
         raise FailException("Failed to get activation key id of %s" % key_name)
 
-    def satellite_active_key_attach_sku(self, ssh, register_config, key_name, katello_id, org_id=1, quantity=1):
-        key_id = self.satellite_active_key_id_get(ssh, register_config, key_name, org_id)
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+    def satellite_active_key_attach_sku(
+        self, ssh, register_config, key_name, katello_id, org_id=1, quantity=1
+    ):
+        key_id = self.satellite_active_key_id_get(
+            ssh, register_config, key_name, org_id
+        )
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         curl_header = '-H "accept:application/json" -H "content-type:application/json"'
-        data_json = json.dumps('{"id":"%s", "subscription_id":%s, "quantity":%s}' \
-                 % (key_id, katello_id, quantity))
+        data_json = json.dumps(
+            '{"id":"%s", "subscription_id":%s, "quantity":%s}'
+            % (key_id, katello_id, quantity)
+        )
         cmd = "curl {0} -X PUT -s -k -u {1}:{2} -d {3} {4}/katello/api/v2/activation_keys/{5}/add_subscriptions".format(
-                curl_header, username, password, data_json, api, key_id)
+            curl_header, username, password, data_json, api, key_id
+        )
         ret, output = self.runcmd(cmd, ssh)
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None and output != "":
-            logger.info("Succeeded to add subscription {0} for activation key".format(katello_id))
+            logger.info(
+                "Succeeded to add subscription {0} for activation key".format(
+                    katello_id
+                )
+            )
         else:
             raise FailException("Failed to add subscription for activation key")
 
-    def satellite_active_key_unattach_sku(self, ssh, register_config, key_name, katello_id, org_id=1):
-        key_id = self.satellite_active_key_id_get(ssh, register_config, key_name, org_id)
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+    def satellite_active_key_unattach_sku(
+        self, ssh, register_config, key_name, katello_id, org_id=1
+    ):
+        key_id = self.satellite_active_key_id_get(
+            ssh, register_config, key_name, org_id
+        )
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         curl_header = '-H "Accept:application/json" -H "Content-Type:application/json"'
-        data_json = json.dumps('{"id":"%s", "subscription_id":"%s"}' \
-                 % (key_id, katello_id))
+        data_json = json.dumps(
+            '{"id":"%s", "subscription_id":"%s"}' % (key_id, katello_id)
+        )
         cmd = "curl {0} -X PUT -s -k -u {1}:{2} -d {3} {4}/katello/api/v2/activation_keys/{5}/remove_subscriptions".format(
-                curl_header, username, password, data_json, api, key_id)
+            curl_header, username, password, data_json, api, key_id
+        )
         ret, output = self.runcmd(cmd, ssh)
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None and output != "":
             logger.info("Succeeded to remove subscription from activation key")
         else:
             raise FailException("Failed to remove subscription from activation key")
 
-    def satellite_active_key_auto_attach_enable(self, ssh, register_config, key_name, org_id=1, auto_attach='true'):
-        key_id = self.satellite_active_key_id_get(ssh, register_config, key_name, org_id)
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+    def satellite_active_key_auto_attach_enable(
+        self, ssh, register_config, key_name, org_id=1, auto_attach="true"
+    ):
+        key_id = self.satellite_active_key_id_get(
+            ssh, register_config, key_name, org_id
+        )
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         curl_header = '-H "Accept:application/json" -H "Content-Type:application/json"'
-        data_json = json.dumps('{"organization_id":"%s", "auto_attach":"%s"}' % (org_id, auto_attach))
+        data_json = json.dumps(
+            '{"organization_id":"%s", "auto_attach":"%s"}' % (org_id, auto_attach)
+        )
         cmd = "curl {0} -X PUT -s -k -u {1}:{2} -d {3} {4}/katello/api/activation_keys/{5}".format(
-                curl_header, username, password, data_json, api, key_id)
+            curl_header, username, password, data_json, api, key_id
+        )
         ret, output = self.runcmd(cmd, ssh)
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None and output != "":
             logger.info("Succeeded to set auto_attach to {}".format(auto_attach))
         else:
             raise FailException("Failed to set auto_attach")
 
     def satellite_sca_set(self, ssh, register_config, org_id=1, enable=True):
-        api = register_config['api']
-        username = register_config['username']
-        password = register_config['password']
+        api = register_config["api"]
+        username = register_config["username"]
+        password = register_config["password"]
         curl_header = '-H "Accept:application/json" -H "Content-Type:application/json"'
         data = "enable"
         if not enable:
             data = "disable"
         cmd = "curl {0} -X PUT -s -k -u {1}:{2} {3}/katello/api/organizations/{4}/upstream_subscriptions/simple_content_access/{5}".format(
-                curl_header, username, password, api, org_id, data)
+            curl_header, username, password, api, org_id, data
+        )
         ret, output = self.runcmd(cmd, ssh)
         if ret == 0 and output is not False and output is not None and output != "":
             logger.info(f"Succeeded to set satellite with SCA={enable}")
         else:
             raise FailException(f"Failed to set satellite with SCA={enable}")
would reformat /tmp/lint/virt_who/register.py
--- /tmp/lint/virt_who/testing.py	2023-03-03 05:26:23.350065 +0000
+++ /tmp/lint/virt_who/testing.py	2023-03-06 06:25:05.031994 +0000
@@ -1,21 +1,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.provision import Provision
 
+
 class Testing(Provision):
     def get_config(self, name, value=None):
-        if name == 'trigger_type':
+        if name == "trigger_type":
             value = self.get_exported_param("TRIGGER_TYPE")
             if not value:
                 value = config.virtwho.trigger_type
-        if name == 'rhel_compose':
+        if name == "rhel_compose":
             value = self.get_exported_param("RHEL_COMPOSE")
             if not value:
                 value = config.virtwho.rhel_compose
-        if name == 'hypervisor_type':
+        if name == "hypervisor_type":
             value = self.get_exported_param("HYPERVISOR_TYPE")
             if not value:
                 value = config.hypervisor.type
         if name == "register_type":
             value = self.get_exported_param("REGISTER_TYPE")
@@ -35,33 +36,41 @@
             host_user = config.virtwho.host_user
         if not host_passwd:
             host_passwd = config.virtwho.host_passwd
         if not host_ip:
             raise FailException("no virtwho host ip defined")
-        ssh_host = {"host":host_ip,"username":host_user,"password":host_passwd}
+        ssh_host = {"host": host_ip, "username": host_user, "password": host_passwd}
         return ssh_host
 
     def ssh_guest(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        return config['ssh_guest']
+        return config["ssh_guest"]
 
     def get_hypervisor_config(self, uid=None):
         if uid:
             hypervisor_type = self.get_exported_param("HYPERVISOR_{0}_TYPE".format(uid))
             server = self.get_exported_param("HYPERVISOR_{0}_SERVER".format(uid))
             username = self.get_exported_param("HYPERVISOR_{0}_USERNAME".format(uid))
             password = self.get_exported_param("HYPERVISOR_{0}_PASSWORD".format(uid))
             ssh_ip = self.get_exported_param("HYPERVISOR_{0}_SSH_IP".format(uid))
             ssh_user = self.get_exported_param("HYPERVISOR_{0}_SSH_USER".format(uid))
-            ssh_passwd = self.get_exported_param("HYPERVISOR_{0}_SSH_PASSWD".format(uid))
+            ssh_passwd = self.get_exported_param(
+                "HYPERVISOR_{0}_SSH_PASSWD".format(uid)
+            )
             guest_ip = self.get_exported_param("HYPERVISOR_{0}_GUEST_IP".format(uid))
-            guest_name = self.get_exported_param("HYPERVISOR_{0}_GUEST_NAME".format(uid))
-            guest_user = self.get_exported_param("HYPERVISOR_{0}_GUEST_USER".format(uid))
-            guest_passwd = self.get_exported_param("HYPERVISOR_{0}_GUEST_PASSWD".format(uid))
+            guest_name = self.get_exported_param(
+                "HYPERVISOR_{0}_GUEST_NAME".format(uid)
+            )
+            guest_user = self.get_exported_param(
+                "HYPERVISOR_{0}_GUEST_USER".format(uid)
+            )
+            guest_passwd = self.get_exported_param(
+                "HYPERVISOR_{0}_GUEST_PASSWD".format(uid)
+            )
             server_config = self.get_exported_param("HYPERVISOR_{0}_CONFIG_FILE")
         else:
-            hypervisor_type = self.get_config('hypervisor_type')
+            hypervisor_type = self.get_config("hypervisor_type")
             server = self.get_exported_param("HYPERVISOR_SERVER")
             username = self.get_exported_param("HYPERVISOR_USERNAME")
             password = self.get_exported_param("HYPERVISOR_PASSWORD")
             ssh_ip = self.get_exported_param("HYPERVISOR_SSH_IP")
             ssh_user = self.get_exported_param("HYPERVISOR_SSH_USER")
@@ -96,35 +105,43 @@
 
         if server is not None and "//" in server:
             server_ip = self.get_url_domain(server)
         else:
             server_ip = server
-        ssh_hypervisor = {"host":server_ip,"username":username,"password":password}
-        ssh_guest = {"host":guest_ip,"username":guest_user,"password":guest_passwd}
+        ssh_hypervisor = {"host": server_ip, "username": username, "password": password}
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         if "libvirt-local" in hypervisor_type:
             ssh_hypervisor = self.ssh_host()
         if "rhevm" in hypervisor_type or "vdsm" in hypervisor_type:
-            ssh_hypervisor = {"host":server_ip,"username":ssh_user,"password":ssh_passwd}
+            ssh_hypervisor = {
+                "host": server_ip,
+                "username": ssh_user,
+                "password": ssh_passwd,
+            }
             if "//" not in server:
                 server = self.rhevm_admin_get(ssh_hypervisor)
         if "esx" in hypervisor_type:
             # the ssh_hypervisor of esx is the windows to run powercli command
-            ssh_hypervisor = {"host":ssh_ip,"username":ssh_user,"password":ssh_passwd}
+            ssh_hypervisor = {
+                "host": ssh_ip,
+                "username": ssh_user,
+                "password": ssh_passwd,
+            }
         configs = {
-                'type':hypervisor_type,
-                'server':server,
-                'username':username,
-                'password':password,
-                'guest_name':guest_name,
-                'ssh_hypervisor':ssh_hypervisor,
-                'ssh_guest':ssh_guest,
-                'server_config':server_config
-                }
+            "type": hypervisor_type,
+            "server": server,
+            "username": username,
+            "password": password,
+            "guest_name": guest_name,
+            "ssh_hypervisor": ssh_hypervisor,
+            "ssh_guest": ssh_guest,
+            "server_config": server_config,
+        }
         return configs
 
     def get_register_config(self):
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         server = self.get_exported_param("REGISTER_SERVER")
         owner = self.get_exported_param("REGISTER_OWNER")
         env = self.get_exported_param("REGISTER_ENV")
         admin_user = self.get_exported_param("REGISTER_ADMIN_USER")
         admin_passwd = self.get_exported_param("REGISTER_ADMIN_PASSWD")
@@ -155,11 +172,11 @@
             api = "https://{0}/subscription".format(server)
             ssh_sat = ""
             prefix = "/subscription"
         if "satellite" in register_type:
             api = "https://{0}".format(server)
-            ssh_sat = {"host": server,"username":ssh_user,"password":ssh_passwd}
+            ssh_sat = {"host": server, "username": ssh_user, "password": ssh_passwd}
             prefix = "/rhsm"
         if not vdc:
             vdc = "RH00001"
         if not vdc_bonus:
             vdc_bonus = "RH00049"
@@ -168,60 +185,62 @@
         if not limit:
             limit = "RH00204"
         if not unlimit:
             unlimit = "RH00060"
         configs = {
-                'type':register_type,
-                'server':server,
-                'username':admin_user,
-                'password':admin_passwd,
-                'owner':owner,
-                'env':env,
-                'prefix':prefix,
-                'ssh_user': ssh_user,
-                'ssh_passwd':ssh_passwd,
-                'api':api,
-                'ssh_sat':ssh_sat,
-                'vdc':vdc,
-                'vdc_bonus':vdc_bonus,
-                'instance':instance,
-                'limit':limit,
-                'unlimit':unlimit
-                }
+            "type": register_type,
+            "server": server,
+            "username": admin_user,
+            "password": admin_passwd,
+            "owner": owner,
+            "env": env,
+            "prefix": prefix,
+            "ssh_user": ssh_user,
+            "ssh_passwd": ssh_passwd,
+            "api": api,
+            "ssh_sat": ssh_sat,
+            "vdc": vdc,
+            "vdc_bonus": vdc_bonus,
+            "instance": instance,
+            "limit": limit,
+            "unlimit": unlimit,
+        }
         return configs
 
     def hypervisor_supported(self, hypervisor_type):
         if hypervisor_type in (
-                'esx',
-                'hyperv',
-                'rhevm',
-                'vdsm',
-                'xen',
-                'kubevirt',
-                'ahv',
-                'libvirt-remote',
-                'libvirt-local'
-                ):
+            "esx",
+            "hyperv",
+            "rhevm",
+            "vdsm",
+            "xen",
+            "kubevirt",
+            "ahv",
+            "libvirt-remote",
+            "libvirt-local",
+        ):
             return True
         raise FailException("Unsupported hypervisor_type: {0}".format(hypervisor_type))
 
     def get_hypervisor_hostname(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        guest_name = config['guest_name']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        guest_name = config["guest_name"]
         self.hypervisor_supported(hypervisor_type)
         if hypervisor_type == "esx":
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             esx_host = self.vcenter_host_get(cert, ssh_hypervisor, guest_name)
             hostname = self.vcenter_fqdn_get(cert, ssh_hypervisor, esx_host)
         if hypervisor_type == "hyperv":
             hostname = self.hyperv_host_name(ssh_hypervisor)
         if hypervisor_type == "xen":
             hostname = self.get_hostname(ssh_hypervisor)
         if hypervisor_type == "kubevirt":
-            hostname = self.kubevirt_guest_attrs(guest_name)['guest_node']
+            hostname = self.kubevirt_guest_attrs(guest_name)["guest_node"]
         if hypervisor_type == "ahv":
             hostname = self.ahv_host_name()
         if hypervisor_type == "rhevm":
             hostname = self.rhevm_host_name_by_guest(ssh_hypervisor, guest_name)
         if hypervisor_type == "vdsm":
@@ -232,25 +251,27 @@
             hostname = self.get_hostname(ssh_hypervisor)
         return hostname
 
     def get_hypervisor_hostuuid(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        guest_name = config['guest_name']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        guest_name = config["guest_name"]
         self.hypervisor_supported(hypervisor_type)
         if hypervisor_type == "esx":
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             esx_host = self.vcenter_host_get(cert, ssh_hypervisor, guest_name)
             uuid = self.vcenter_host_uuid(cert, ssh_hypervisor, esx_host)
         if hypervisor_type == "hyperv":
             uuid = self.hyperv_host_uuid(ssh_hypervisor)
         if hypervisor_type == "xen":
             uuid = self.xen_host_uuid(ssh_hypervisor)
         if hypervisor_type == "kubevirt":
-            node_name = self.kubevirt_guest_attrs(guest_name)['guest_node']
-            uuid = self.kubevirt_host_attrs(node_name)['host_uuid']
+            node_name = self.kubevirt_guest_attrs(guest_name)["guest_node"]
+            uuid = self.kubevirt_host_attrs(node_name)["host_uuid"]
         if hypervisor_type == "ahv":
             uuid = self.ahv_host_uuid()
         if hypervisor_type == "libvirt-local":
             uuid = self.libvirt_host_uuid(self.ssh_host())
         if hypervisor_type == "libvirt-remote":
@@ -259,38 +280,42 @@
             uuid = self.rhevm_host_uuid_by_guest(ssh_hypervisor, guest_name)
         return uuid
 
     def get_hypervisor_hwuuid(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        guest_name = config['guest_name']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        guest_name = config["guest_name"]
         if hypervisor_type == "esx":
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             esx_host = self.vcenter_host_get(cert, ssh_hypervisor, guest_name)
             hwuuid = self.vcenter_host_hwuuid(cert, ssh_hypervisor, esx_host)
         elif hypervisor_type == "rhevm":
             hwuuid = self.rhevm_host_hwuuid_by_guest(ssh_hypervisor, guest_name)
         else:
             hwuuid = "unsupported hypervisor type"
         return hwuuid
-        
+
     def get_hypervisor_guestuuid(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        guest_name = config['guest_name']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        guest_name = config["guest_name"]
         self.hypervisor_supported(hypervisor_type)
         if hypervisor_type == "esx":
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             uuid = self.vcenter_guest_uuid(cert, ssh_hypervisor, guest_name)
         if hypervisor_type == "hyperv":
             uuid = self.hyperv_guest_uuid(ssh_hypervisor, guest_name)
         if hypervisor_type == "xen":
             uuid = self.xen_guest_uuid(ssh_hypervisor, guest_name)
         if hypervisor_type == "kubevirt":
-            uuid = self.kubevirt_guest_attrs(guest_name)['guest_id']
+            uuid = self.kubevirt_guest_attrs(guest_name)["guest_id"]
         if hypervisor_type == "ahv":
             uuid = self.ahv_guest_uuid()
         if hypervisor_type == "libvirt-local":
             uuid = self.libvirt_guest_uuid(guest_name, self.ssh_host())
         if hypervisor_type == "libvirt-remote":
@@ -299,138 +324,152 @@
             uuid = self.rhevm_guest_uuid(ssh_hypervisor, guest_name)
         return uuid
 
     def hypervisor_guest_start(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        guest_name = config['guest_name']
-        guest_ip = config['ssh_guest']['host']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        guest_name = config["guest_name"]
+        guest_ip = config["ssh_guest"]["host"]
         self.hypervisor_supported(hypervisor_type)
         if hypervisor_type == "kubevirt":
             return "unsupport guest start"
-        if hypervisor_type in ('rhevm', 'vdsm'):
+        if hypervisor_type in ("rhevm", "vdsm"):
             self.rhevm_guest_start(ssh_hypervisor, guest_name)
         if hypervisor_type == "esx":
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             guest_ip = self.vcenter_guest_start(cert, ssh_hypervisor, guest_name)
         if hypervisor_type == "hyperv":
             guest_ip = self.hyperv_guest_start(ssh_hypervisor, guest_name)
         if hypervisor_type == "xen":
-            guest_ip =  self.xen_guest_start(ssh_hypervisor, guest_name)
+            guest_ip = self.xen_guest_start(ssh_hypervisor, guest_name)
         if hypervisor_type == "libvirt-local":
             guest_ip = self.libvirt_guest_start(guest_name, self.ssh_host())
         if hypervisor_type == "libvirt-remote":
             guest_ip = self.libvirt_guest_start(guest_name, ssh_hypervisor)
         if guest_ip:
             self.set_exported_param("GUEST_IP", guest_ip)
-            logger.info("Succeeded to start guest for mode {0}, guest ip: {1}".format(hypervisor_type, guest_ip))
+            logger.info(
+                "Succeeded to start guest for mode {0}, guest ip: {1}".format(
+                    hypervisor_type, guest_ip
+                )
+            )
 
     def hypervisor_guest_stop(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        guest_name = config['guest_name']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        guest_name = config["guest_name"]
         self.hypervisor_supported(hypervisor_type)
         if hypervisor_type == "kubevirt":
             return "unsupport guest stop"
         if hypervisor_type == "esx":
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             self.vcenter_guest_stop(cert, ssh_hypervisor, guest_name)
         if hypervisor_type == "hyperv":
             self.hyperv_guest_stop(ssh_hypervisor, guest_name)
         if hypervisor_type == "xen":
             self.xen_guest_stop(ssh_hypervisor, guest_name)
         if hypervisor_type == "libvirt-local":
             self.libvirt_guest_stop(guest_name, self.ssh_host())
         if hypervisor_type == "libvirt-remote":
             self.libvirt_guest_stop(guest_name, ssh_hypervisor)
-        if hypervisor_type in ('rhevm', 'vdsm'):
+        if hypervisor_type in ("rhevm", "vdsm"):
             self.rhevm_guest_stop(ssh_hypervisor, guest_name)
         logger.info("Succeeded to stop guest for mode {0}".format(hypervisor_type))
 
     def hypervisor_guest_suspend(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        guest_name = config['guest_name']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        guest_name = config["guest_name"]
         self.hypervisor_supported(hypervisor_type)
         if hypervisor_type == "kubevirt":
             return "unsupport guest suspend"
         if hypervisor_type == "esx":
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             self.vcenter_guest_suspend(cert, ssh_hypervisor, guest_name)
         if hypervisor_type == "hyperv":
             self.hyperv_guest_suspend(ssh_hypervisor, guest_name)
         if hypervisor_type == "xen":
             self.xen_guest_suspend(ssh_hypervisor, guest_name)
         if hypervisor_type == "libvirt-local":
             self.libvirt_guest_suspend(guest_name, self.ssh_host())
         if hypervisor_type == "libvirt-remote":
             self.libvirt_guest_suspend(guest_name, ssh_hypervisor)
-        if hypervisor_type in ('rhevm', 'vdsm'):
+        if hypervisor_type in ("rhevm", "vdsm"):
             self.rhevm_guest_suspend(ssh_hypervisor, guest_name)
         logger.info("Succeeded to suspend guest for mode {0}".format(hypervisor_type))
 
     def hypervisor_guest_resume(self, uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        guest_name = config['guest_name']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        guest_name = config["guest_name"]
         self.hypervisor_supported(hypervisor_type)
         if hypervisor_type == "kubevirt":
             return "unsupport guest resume"
         if hypervisor_type == "esx":
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             self.vcenter_guest_resume(cert, ssh_hypervisor, guest_name)
         if hypervisor_type == "hyperv":
             self.hyperv_guest_resume(ssh_hypervisor, guest_name)
         if hypervisor_type == "xen":
             self.xen_guest_resume(ssh_hypervisor, guest_name)
         if hypervisor_type == "libvirt-local":
             self.libvirt_guest_resume(guest_name, self.ssh_host())
         if hypervisor_type == "libvirt-remote":
             self.libvirt_guest_resume(guest_name, ssh_hypervisor)
-        if hypervisor_type in ('rhevm', 'vdsm'):
+        if hypervisor_type in ("rhevm", "vdsm"):
             self.rhevm_guest_start(ssh_hypervisor, guest_name)
         logger.info("Succeeded to resume guest for mode {0}".format(hypervisor_type))
 
     def hypervisor_firewall_setup(self, action="on", uid=None):
         config = self.get_hypervisor_config(uid)
-        hypervisor_type = config['type']
-        ssh_hypervisor = config['ssh_hypervisor']
-        hypervisor_host = ssh_hypervisor['host']
+        hypervisor_type = config["type"]
+        ssh_hypervisor = config["ssh_hypervisor"]
+        hypervisor_host = ssh_hypervisor["host"]
         # for esx mode, the hypervisor_host is just the windows client
         if hypervisor_type == "esx":
-            hypervisor_host = config['server']
+            hypervisor_host = config["server"]
         cmd = "iptables -D INPUT -s {0} -j DROP".format(hypervisor_host)
         if action == "off":
             cmd = "iptables -I INPUT -s {0} -j DROP".format(hypervisor_host)
         ret, output = self.runcmd(cmd, self.ssh_host())
 
-    #******************************************
+    # ******************************************
     # virt-who config function
-    #******************************************
+    # ******************************************
     def vw_case_info(self, case_name, case_id=None):
-        logger.info("+"*30)
+        logger.info("+" * 30)
         msg = case_name
         if case_id:
             msg = "{0}:{1}".format(case_id, case_name)
         logger.info(msg)
-        fd = open(DEBUG_FILE, 'a')
+        fd = open(DEBUG_FILE, "a")
         fd.write("{0}\n".format(msg))
         fd.close()
-        if self.pkg_check(self.ssh_host(), 'virt-who') is False:
-            self.pkg_install(self.ssh_host(), 'virt-who')
+        if self.pkg_check(self.ssh_host(), "virt-who") is False:
+            self.pkg_install(self.ssh_host(), "virt-who")
 
     def vw_case_skip(self, skip_reason=None):
-        self.skipTest("Succeeded to skip case, not avaialbe for {0}\n".format(skip_reason))
+        self.skipTest(
+            "Succeeded to skip case, not avaialbe for {0}\n".format(skip_reason)
+        )
 
     def vw_case_result(self, results, notes=None):
         for key, value in results.items():
             if False in value:
-                logger.error('Failed step: {0}'.format(key))
+                logger.error("Failed step: {0}".format(key))
         if notes is not None:
             for msg in notes:
                 logger.warning(msg)
         if any(False in res for res in results.values()):
             raise FailException("Failed to run case, please check the failed steps\n")
@@ -438,13 +477,13 @@
             logger.info("Succeeded to run case, all steps passed\n")
 
     def vw_case_init(self, uid=None):
         hypervisor_config = self.get_hypervisor_config(uid)
         register_config = self.get_register_config()
-        hypervisor_type = hypervisor_config['type']
-        ssh_hypervisor = hypervisor_config['ssh_hypervisor']
-        register_type = register_config['type']
+        hypervisor_type = hypervisor_config["type"]
+        ssh_hypervisor = hypervisor_config["ssh_hypervisor"]
+        register_type = register_config["type"]
         if "libvirt-remote" in hypervisor_type:
             self.ssh_no_passwd_access(self.ssh_host(), ssh_hypervisor)
         if "vdsm" in hypervisor_type or "rhevm" in hypervisor_type:
             cmd = "ovirt-aaa-jdbc-tool user unlock admin"
             self.runcmd(cmd, ssh_hypervisor)
@@ -473,28 +512,32 @@
             raise FailException("Unsupported hypervisor event")
 
     def vw_etc_conf_disable_all(self):
         op_1 = '-e "/;/d"'
         op_2 = '-e "s|^[^#]|#&|g"'
-        cmd = 'sed -i %s %s /etc/virt-who.conf' % (op_1, op_2)
+        cmd = "sed -i %s %s /etc/virt-who.conf" % (op_1, op_2)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret != 0:
             raise FailException("Failed to disable all options in /etc/virt-who.conf")
         else:
             logger.info("Succeeded to disable all options in /etc/virt-who.conf")
 
     def vw_etc_sys_disable_all(self):
-        if "RHEL-9" in self.get_config('rhel_compose'):
-            logger.warning('/etc/sysconfig/virt-who is not supported in rhel9')
+        if "RHEL-9" in self.get_config("rhel_compose"):
+            logger.warning("/etc/sysconfig/virt-who is not supported in rhel9")
         else:
             op_1 = '-e "s|^[^#]|#&|g"'
-            cmd = 'sed -i %s /etc/sysconfig/virt-who' % op_1
+            cmd = "sed -i %s /etc/sysconfig/virt-who" % op_1
             ret, output = self.runcmd(cmd, self.ssh_host())
             if ret != 0:
-                raise FailException("Failed to disable all modes in /etc/sysconfig/virt-who")
+                raise FailException(
+                    "Failed to disable all modes in /etc/sysconfig/virt-who"
+                )
             else:
-                logger.info("Succeeded to disable all options in /etc/sysconfig/virt-who")
+                logger.info(
+                    "Succeeded to disable all options in /etc/sysconfig/virt-who"
+                )
 
     def vw_etc_d_delete_all(self):
         cmd = "rm -rf /etc/virt-who.d/*; rm -f /etc/virt-who.d/.*swp"
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret != 0:
@@ -504,143 +547,169 @@
 
     def vw_etc_sys_mode_enable(self, uid=None):
         filename = "/etc/sysconfig/virt-who"
         hypervisor_config = self.get_hypervisor_config(uid)
         register_config = self.get_register_config()
-        mode = hypervisor_config['type']
-        server = hypervisor_config['server']
-        username = hypervisor_config['username']
-        password = hypervisor_config['password']
-        owner = register_config['owner']
-        env = register_config['env']
+        mode = hypervisor_config["type"]
+        server = hypervisor_config["server"]
+        username = hypervisor_config["username"]
+        password = hypervisor_config["password"]
+        owner = register_config["owner"]
+        env = register_config["env"]
         mode = mode.upper()
         if mode == "LIBVIRT-REMOTE":
             mode = "LIBVIRT"
         if mode == "LIBVIRT-LOCAL":
             logger.info("libvirt local mode is default, don't need to configure")
             return True
         cf_type = '-e "s|.*{0}=.*|VIRTWHO_{0}=1|g"'.format(mode)
         cf_owner = '-e "s|.*{0}_OWNER=.*|VIRTWHO_{0}_OWNER={1}|g"'.format(mode, owner)
         cf_env = '-e "s|.*{0}_ENV=.*|VIRTWHO_{0}_ENV={1}|g"'.format(mode, env)
-        cf_server = '-e "s|.*{0}_SERVER=.*|VIRTWHO_{0}_SERVER={1}|g"'.format(mode, server)
-        cf_username = '-e "s|.*{0}_USERNAME=.*|VIRTWHO_{0}_USERNAME={1}|g"'.format(mode, username)
-        cf_password = '-e "s|.*{0}_PASSWORD=.*|VIRTWHO_{0}_PASSWORD={1}|g"'.format(mode, password)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
-            cf_env = ''
+        cf_server = '-e "s|.*{0}_SERVER=.*|VIRTWHO_{0}_SERVER={1}|g"'.format(
+            mode, server
+        )
+        cf_username = '-e "s|.*{0}_USERNAME=.*|VIRTWHO_{0}_USERNAME={1}|g"'.format(
+            mode, username
+        )
+        cf_password = '-e "s|.*{0}_PASSWORD=.*|VIRTWHO_{0}_PASSWORD={1}|g"'.format(
+            mode, password
+        )
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
+            cf_env = ""
         if mode == "VDSM":
-            cmd = 'sed -i -e "s|.*VIRTWHO_VDSM=.*|VIRTWHO_VDSM=1|g" {0}'.format(filename)
+            cmd = 'sed -i -e "s|.*VIRTWHO_VDSM=.*|VIRTWHO_VDSM=1|g" {0}'.format(
+                filename
+            )
         elif mode == "KUBEVIRT":
-            server_config = hypervisor_config['server_config']
-            cmd = 'sed -i "/^KUBECONFIG/d" %s; sed -i "/^#KUBECONFIG/d" %s' % (filename, filename)
+            server_config = hypervisor_config["server_config"]
+            cmd = 'sed -i "/^KUBECONFIG/d" %s; sed -i "/^#KUBECONFIG/d" %s' % (
+                filename,
+                filename,
+            )
             ret, output = self.runcmd(cmd, self.ssh_host())
             cmd = 'echo -e "\nKUBECONFIG=%s" >> %s' % (server_config, filename)
             ret, output = self.runcmd(cmd, self.ssh_host())
-            cmd = 'sed -i {0} {1} {2} {3}'.format(cf_type, cf_owner, cf_env, filename)
-        else:
-            cmd = 'sed -i {0} {1} {2} {3} {4} {5} {6}'.format(
-                    cf_type, cf_owner, cf_env, cf_server, cf_username, cf_password, filename)
+            cmd = "sed -i {0} {1} {2} {3}".format(cf_type, cf_owner, cf_env, filename)
+        else:
+            cmd = "sed -i {0} {1} {2} {3} {4} {5} {6}".format(
+                cf_type, cf_owner, cf_env, cf_server, cf_username, cf_password, filename
+            )
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret != 0:
-            raise FailException("Failed to enable mode {0} in /etc/sysconfig/virt-who".format(mode))
-        else:
-            logger.info("Succeeded to enable mode {0} in /etc/sysconfig/virt-who".format(mode))
+            raise FailException(
+                "Failed to enable mode {0} in /etc/sysconfig/virt-who".format(mode)
+            )
+        else:
+            logger.info(
+                "Succeeded to enable mode {0} in /etc/sysconfig/virt-who".format(mode)
+            )
 
     def vw_etc_d_mode_create(self, config_name, config_file, uid=None):
         hypervisor_config = self.get_hypervisor_config(uid)
         register_config = self.get_register_config()
-        mode = hypervisor_config['type']
-        server = hypervisor_config['server']
-        username = hypervisor_config['username']
-        password = hypervisor_config['password']
-        owner = register_config['owner']
-        env = register_config['env']
+        mode = hypervisor_config["type"]
+        server = hypervisor_config["server"]
+        username = hypervisor_config["username"]
+        password = hypervisor_config["password"]
+        owner = register_config["owner"]
+        env = register_config["env"]
         mode = mode.lower()
         if mode == "libvirt-remote":
             mode = "libvirt"
         if mode == "libvirt-local":
             logger.info("libvirt local mode is default, don't need to configure")
             return True
-        cf_file = '{0}\n'.format(config_file)
-        cf_title = '[{0}]\n'.format(config_name)
-        cf_type = 'type={0}\n'.format(mode)
-        cf_server = 'server={0}\n'.format(server)
-        cf_username = 'username={0}\n'.format(username)
-        cf_password = 'password={0}\n'.format(password)
-        cf_owner = 'owner={0}\n'.format(owner)
-        cf_env = 'env={0}\n'.format(env)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
-            cf_env = ''
+        cf_file = "{0}\n".format(config_file)
+        cf_title = "[{0}]\n".format(config_name)
+        cf_type = "type={0}\n".format(mode)
+        cf_server = "server={0}\n".format(server)
+        cf_username = "username={0}\n".format(username)
+        cf_password = "password={0}\n".format(password)
+        cf_owner = "owner={0}\n".format(owner)
+        cf_env = "env={0}\n".format(env)
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
+            cf_env = ""
         if mode == "vdsm":
             cmd = "echo -e '[{0}]\ntype={1}\nowner={2}' > {3}".format(
-                config_name, mode, owner, config_file)
+                config_name, mode, owner, config_file
+            )
         elif mode == "kubevirt":
-            cf_kube = 'kubeconfig={0}\n'.format(hypervisor_config['server_config'])
-            cmd = ('cat <<EOF > {0}''{1}''{2}''{3}''{4}''{5}''EOF').format(
-                    cf_file, cf_title, cf_type, cf_kube, cf_owner, cf_env)
-        else:
-            option = ('{0}''{1}''{2}''{3}''{4}''{5}''{6}').format(
-                cf_title, cf_type, cf_server, cf_username, cf_password, cf_owner, cf_env)
-            if mode == 'ahv' and 'v3' in deploy.ahv.api_version:
-                cf_central = 'prism_central=true\n'
-                option += '{0}'.format(cf_central)
-            cmd = ('cat <<EOF > {0}''{1}''EOF').format(cf_file, option)
+            cf_kube = "kubeconfig={0}\n".format(hypervisor_config["server_config"])
+            cmd = ("cat <<EOF > {0}" "{1}" "{2}" "{3}" "{4}" "{5}" "EOF").format(
+                cf_file, cf_title, cf_type, cf_kube, cf_owner, cf_env
+            )
+        else:
+            option = ("{0}" "{1}" "{2}" "{3}" "{4}" "{5}" "{6}").format(
+                cf_title, cf_type, cf_server, cf_username, cf_password, cf_owner, cf_env
+            )
+            if mode == "ahv" and "v3" in deploy.ahv.api_version:
+                cf_central = "prism_central=true\n"
+                option += "{0}".format(cf_central)
+            cmd = ("cat <<EOF > {0}" "{1}" "EOF").format(cf_file, option)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret != 0:
             raise FailException("Failed to create config file {0}".format(config_file))
         else:
             logger.info("Succeeded to create config file {0}".format(config_file))
 
     def vw_fake_json_create(self, cli, json_file):
         self.vw_stop()
-        cmd ="{0} -p -d > {1}".format(cli, json_file)
+        cmd = "{0} -p -d > {1}".format(cli, json_file)
         ret, output = self.runcmd(cmd, self.ssh_host())
         ret, output = self.runcmd("cat {0}".format(json_file), self.ssh_host())
         logger.info(output)
         if "guestId" not in output:
             raise FailException("Failed to create json data: {0}".format(json_file))
         logger.info("Succeeded to create json data: {0}".format(json_file))
 
     def vw_fake_conf_create(self, conf_file, json_file, is_hypervisor=True):
         register_config = self.get_register_config()
-        owner = register_config['owner']
-        env = register_config['env']
-        cf_file = '{0}\n'.format(conf_file)
-        cf_title = '[fake]\n'
-        cf_type = 'type=fake\n'
-        cf_json = 'file={0}\n'.format(json_file)
-        cf_is_hypervisor = 'is_hypervisor={0}\n'.format(is_hypervisor)
-        cf_owner = 'owner={0}\n'.format(owner)
-        cf_env = 'env={0}\n'.format(env)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
-            cf_env=''
-        cmd = ('cat <<EOF > {0}''{1}''{2}''{3}''{4}''{5}''{6}''EOF').format(
-                cf_file, cf_title, cf_type, cf_json, cf_is_hypervisor, cf_owner, cf_env)
+        owner = register_config["owner"]
+        env = register_config["env"]
+        cf_file = "{0}\n".format(conf_file)
+        cf_title = "[fake]\n"
+        cf_type = "type=fake\n"
+        cf_json = "file={0}\n".format(json_file)
+        cf_is_hypervisor = "is_hypervisor={0}\n".format(is_hypervisor)
+        cf_owner = "owner={0}\n".format(owner)
+        cf_env = "env={0}\n".format(env)
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
+            cf_env = ""
+        cmd = ("cat <<EOF > {0}" "{1}" "{2}" "{3}" "{4}" "{5}" "{6}" "EOF").format(
+            cf_file, cf_title, cf_type, cf_json, cf_is_hypervisor, cf_owner, cf_env
+        )
         ret, output = self.runcmd(cmd, self.ssh_host())
         ret, output = self.runcmd("ls {0}".format(conf_file), self.ssh_host())
-        if ret != 0 :
-            raise FailException("Failed to create fake config file: {0}".format(conf_file))
+        if ret != 0:
+            raise FailException(
+                "Failed to create fake config file: {0}".format(conf_file)
+            )
         logger.info("Succeeded to create fake config file: {0}".format(conf_file))
 
     def vw_fake_json_update(self, name, rename, filename):
         option = self.shell_escape_char(name)
         rename = self.shell_escape_char(rename)
         cmd = 'sed -i "s|%s|%s|g" %s' % (option, rename, filename)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to update json value %s to %s" % (option, rename))
         else:
-            raise FailException("Failed to update json value %s to %s" % (option, rename))
+            raise FailException(
+                "Failed to update json value %s to %s" % (option, rename)
+            )
 
     def vw_option_update_name(self, option, rename, filename):
         option = self.shell_escape_char(option)
         rename = self.shell_escape_char(rename)
         cmd = 'sed -i "s|^%s|%s|g" %s' % (option, rename, filename)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to update option name %s to %s" % (option, rename))
         else:
-            raise FailException("Failed to update option name %s to %s" % (option, rename))
+            raise FailException(
+                "Failed to update option name %s to %s" % (option, rename)
+            )
 
     def vw_option_update_value(self, option, value, filename):
         option = self.shell_escape_char(option)
         value = self.shell_escape_char(value)
         cmd = 'sed -i "s|^%s.*|%s=%s|g" %s' % (option, option, value, filename)
@@ -654,20 +723,20 @@
         option = self.shell_escape_char(option)
         op_1 = '-e "s|^#%s$|%s|g"' % (option, option)
         op_2 = '-e "s|^#%s=|%s=|g"' % (option, option)
         op_3 = '-e "s|^# %s$|%s|g"' % (option, option)
         op_4 = '-e "s|^# %s=|%s=|g"' % (option, option)
-        cmd = 'sed -i %s %s %s %s %s' % (op_1, op_2, op_3, op_4, filename)
+        cmd = "sed -i %s %s %s %s %s" % (op_1, op_2, op_3, op_4, filename)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to enable option %s" % option)
         else:
             raise FailException("Failed to enable option %s" % option)
 
     def vw_option_disable(self, option, filename):
         option = self.shell_escape_char(option)
-        cmd = 'sed -i "s|^%s|#%s|g" %s' % (option, option, filename) 
+        cmd = 'sed -i "s|^%s|#%s|g" %s' % (option, option, filename)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to disable option %s" % option)
         else:
             raise FailException("Failed to disable option %s" % option)
@@ -680,57 +749,65 @@
         else:
             raise FailException("Failed to add option %s=%s" % (option, value))
 
     def vw_option_del(self, option, filename):
         option = self.shell_escape_char(option)
-        cmd = 'sed -i "/^%s/d" %s; sed -i "/^#%s/d" %s' % (option, filename, option, filename)
+        cmd = 'sed -i "/^%s/d" %s; sed -i "/^#%s/d" %s' % (
+            option,
+            filename,
+            option,
+            filename,
+        )
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to delete option %s" % option)
         else:
             raise FailException("Failed to delete option %s" % option)
 
     def vw_option_get(self, option, filename):
         cmd = "grep -v '^#' %s |grep ^%s" % (filename, option)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret == 0 and option in output:
-            value = output.split('=')[1].strip()
+            value = output.split("=")[1].strip()
             return value
         else:
             raise FailException("No this option or option is not enabled")
 
     def vw_cli_base(self, uid=None):
         hypervisor_config = self.get_hypervisor_config(uid)
         register_config = self.get_register_config()
-        mode = hypervisor_config['type']
-        server = hypervisor_config['server']
-        username = hypervisor_config['username']
-        password = hypervisor_config['password']
-        owner = register_config['owner']
-        env = register_config['env']
+        mode = hypervisor_config["type"]
+        server = hypervisor_config["server"]
+        username = hypervisor_config["username"]
+        password = hypervisor_config["password"]
+        owner = register_config["owner"]
+        env = register_config["env"]
         mode = mode.lower()
         if mode == "libvirt-remote":
             mode = "libvirt"
         cf_type = "--{0}".format(mode)
         cf_owner = "--{0}-owner={1}".format(mode, owner)
         cf_env = "--{0}-env={1}".format(mode, env)
         cf_server = "--{0}-server={1}".format(mode, server)
         cf_username = "--{0}-username={1}".format(mode, username)
         cf_password = "--{0}-password={1}".format(mode, password)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
-            cf_env=''
-        if mode == "libvirt-local" or mode == "" or mode is None: 
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
+            cf_env = ""
+        if mode == "libvirt-local" or mode == "" or mode is None:
             cmd = "virt-who "
         elif mode == "vdsm":
             cmd = "virt-who --vdsm "
         elif mode == "kubevirt":
             kube_cfg = deploy.kubevirt.kube_config_file
             cf_kube_cfg = "--{0}-cfg={1}".format(mode, kube_cfg)
-            cmd = "virt-who {0} {1} {2} {3} ".format(cf_type, cf_owner, cf_env, cf_kube_cfg)
+            cmd = "virt-who {0} {1} {2} {3} ".format(
+                cf_type, cf_owner, cf_env, cf_kube_cfg
+            )
         else:
             cmd = "virt-who {0} {1} {2} {3} {4} {5} ".format(
-                    cf_type, cf_owner, cf_env, cf_server, cf_username, cf_password)
+                cf_type, cf_owner, cf_env, cf_server, cf_username, cf_password
+            )
         return cmd
 
     def vw_cli_base_update(self, cmd, pattern, new_str):
         pattern = r"%s?(?= )" % pattern
         cmd = re.sub(pattern, new_str, cmd)
@@ -750,159 +827,174 @@
         else:
             raise FailException("Failed to check virt-who status")
 
     def vw_async_log(self, data, rhsm_output):
         orgs = re.findall(r"Host-to-guest mapping being sent to '(.*?)'", rhsm_output)
-        if len(orgs) > 0: 
-            data['orgs'] = orgs
+        if len(orgs) > 0:
+            data["orgs"] = orgs
             org_data = dict()
             for org in orgs:
                 key = "Host-to-guest mapping being sent to '%s': " % org
-                rex = re.compile(r'(?<=%s){.*?}\n+(?=202|$)' % key, re.S)
+                rex = re.compile(r"(?<=%s){.*?}\n+(?=202|$)" % key, re.S)
                 mapping_info = rex.findall(rhsm_output)[-1]
                 try:
-                    mapping_info = json.loads(mapping_info.replace('\n', ''), strict=False)
+                    mapping_info = json.loads(
+                        mapping_info.replace("\n", ""), strict=False
+                    )
                 except:
                     logger.warning("Failed to run json.loads for rhsm.log")
                     return data
-                hypervisors = mapping_info['hypervisors']
+                hypervisors = mapping_info["hypervisors"]
                 org_data["hypervisor_num"] = len(hypervisors)
                 for item in hypervisors:
-                    hypervisorId =  item['hypervisorId']['hypervisorId']
-                    if 'name' in item.keys():
-                        hypervisor_name =  item['name']
+                    hypervisorId = item["hypervisorId"]["hypervisorId"]
+                    if "name" in item.keys():
+                        hypervisor_name = item["name"]
                     else:
                         hypervisor_name = ""
                     facts = dict()
-                    facts['name'] = hypervisor_name
-                    facts['type'] = item['facts']['hypervisor.type']
-                    facts['version'] = item['facts']['hypervisor.version']
-                    facts['socket'] = item['facts']['cpu.cpu_socket(s)']
-                    if 'dmi.system.uuid' in item['facts'].keys():
-                        facts['dmi'] = item['facts']['dmi.system.uuid']
+                    facts["name"] = hypervisor_name
+                    facts["type"] = item["facts"]["hypervisor.type"]
+                    facts["version"] = item["facts"]["hypervisor.version"]
+                    facts["socket"] = item["facts"]["cpu.cpu_socket(s)"]
+                    if "dmi.system.uuid" in item["facts"].keys():
+                        facts["dmi"] = item["facts"]["dmi.system.uuid"]
                     else:
-                        facts['dmi'] = ''
-                    if 'hypervisor.cluster' in item['facts'].keys():
-                        facts['cluster'] = item['facts']['hypervisor.cluster']
+                        facts["dmi"] = ""
+                    if "hypervisor.cluster" in item["facts"].keys():
+                        facts["cluster"] = item["facts"]["hypervisor.cluster"]
                     else:
-                        facts['cluster'] = ''
+                        facts["cluster"] = ""
                     guests = list()
-                    for guest in item['guestIds']:
-                        guestId = guest['guestId']
+                    for guest in item["guestIds"]:
+                        guestId = guest["guestId"]
                         guests.append(guestId)
                         attr = dict()
-                        attr['guest_hypervisor'] = hypervisorId
-                        attr['state'] = guest['state']
-                        attr['active'] = guest['attributes']['active']
-                        attr['type'] = guest['attributes']['virtWhoType']
+                        attr["guest_hypervisor"] = hypervisorId
+                        attr["state"] = guest["state"]
+                        attr["active"] = guest["attributes"]["active"]
+                        attr["type"] = guest["attributes"]["virtWhoType"]
                         org_data[guestId] = attr
-                    facts['guests'] = guests
+                    facts["guests"] = guests
                     org_data[hypervisorId] = facts
                 data[org] = org_data
         return data
 
     def vw_unasync_log(self, data, rhsm_output):
         orgs = re.findall(r"Host-to-guest mapping being sent to '(.*?)'", rhsm_output)
-        if len(orgs) > 0: 
-            data['orgs'] = orgs
+        if len(orgs) > 0:
+            data["orgs"] = orgs
             org_data = dict()
             for org in orgs:
                 key = "Host-to-guest mapping being sent to '%s'" % org
-                rex = re.compile(r'(?<=: ){.*?}\n+(?=201|$)', re.S)
+                rex = re.compile(r"(?<=: ){.*?}\n+(?=201|$)", re.S)
                 mapping_info = rex.findall(rhsm_output)[-1]
                 try:
-                    mapping_info = json.loads(mapping_info.replace('\n', ''), strict=False)
+                    mapping_info = json.loads(
+                        mapping_info.replace("\n", ""), strict=False
+                    )
                 except:
                     logger.warning("json.loads failed: %s" % mapping_info)
                     return data
-                org_data['hypervisor_num'] = len(mapping_info.keys())
+                org_data["hypervisor_num"] = len(mapping_info.keys())
                 for hypervisor_id, hypervisors_data in mapping_info.items():
                     facts = dict()
                     guests = list()
                     for guest in hypervisors_data:
-                        guestId = guest['guestId']
+                        guestId = guest["guestId"]
                         guests.append(guestId)
                         attr = dict()
-                        attr['guest_hypervisor'] = hypervisor_id
-                        attr['state'] = guest['state']
-                        attr['active'] = guest['attributes']['active']
-                        attr['type'] = guest['attributes']['virtWhoType']
+                        attr["guest_hypervisor"] = hypervisor_id
+                        attr["state"] = guest["state"]
+                        attr["active"] = guest["attributes"]["active"]
+                        attr["type"] = guest["attributes"]["virtWhoType"]
                         org_data[guestId] = attr
-                    facts['guests'] = guests
+                    facts["guests"] = guests
                     org_data[hypervisor_id] = facts
                 data[org] = org_data
         return data
 
     def vw_local_mode_log(self, data, rhsm_output):
         key = "Domain info:"
-        rex = re.compile(r'(?<=Domain info: )\[.*?\]\n+(?=\d\d\d\d|$)', re.S)
+        rex = re.compile(r"(?<=Domain info: )\[.*?\]\n+(?=\d\d\d\d|$)", re.S)
         mapping_info = rex.findall(rhsm_output)[0]
         try:
-            mapping_info = json.loads(mapping_info.replace('\n', ''), strict=False)
+            mapping_info = json.loads(mapping_info.replace("\n", ""), strict=False)
         except:
             logger.warning("json.loads failed: %s" % mapping_info)
             return data
         for item in mapping_info:
-            guestId = item['guestId']
+            guestId = item["guestId"]
             attr = dict()
-            attr['state'] = item['state']
-            attr['active'] = item['attributes']['active']
-            attr['type'] = item['attributes']['virtWhoType']
+            attr["state"] = item["state"]
+            attr["active"] = item["attributes"]["active"]
+            attr["type"] = item["attributes"]["virtWhoType"]
             data[guestId] = attr
         return data
 
     def vw_log_analyzer(self, data, tty_output, rhsm_output):
-        if "virtwho.main DEBUG" in rhsm_output and \
-                ("Domain info:" in rhsm_output or "Host-to-guest mapping being sent to" in rhsm_output):
+        if "virtwho.main DEBUG" in rhsm_output and (
+            "Domain info:" in rhsm_output
+            or "Host-to-guest mapping being sent to" in rhsm_output
+        ):
             res = re.findall(r"reporter_id='(.*?)'", rhsm_output)
             if len(res) > 0:
                 reporter_id = res[0].strip()
-                data['reporter_id'] = reporter_id
-            res = re.findall(r"Starting infinite loop with(.*?)seconds interval", rhsm_output)
-            if len(res) > 0: 
+                data["reporter_id"] = reporter_id
+            res = re.findall(
+                r"Starting infinite loop with(.*?)seconds interval", rhsm_output
+            )
+            if len(res) > 0:
                 interval_time = res[0].strip()
-                data['interval_time'] = int(interval_time)
+                data["interval_time"] = int(interval_time)
             if "Domain info:" in rhsm_output:
                 data = self.vw_local_mode_log(data, rhsm_output)
             res = re.findall(r"Server has capability '(.*?)'", rhsm_output)
             if len(res) > 0:
                 is_async = res[0].strip()
-                data['is_async'] = is_async
+                data["is_async"] = is_async
                 data = self.vw_async_log(data, rhsm_output)
             else:
-                data['is_async'] = "not_async"
+                data["is_async"] = "not_async"
                 data = self.vw_unasync_log(data, rhsm_output)
         return data
 
     def vw_callback_loop_num(self):
-        key= ""; loop_num = 0
+        key = ""
+        loop_num = 0
         cmd = "grep 'Report for config' /var/log/rhsm/rhsm.log |grep 'placing in datastore' | head -1"
-        ret, output = self.runcmd(cmd, self.ssh_host(), desc="virt-who placing number check")
+        ret, output = self.runcmd(
+            cmd, self.ssh_host(), desc="virt-who placing number check"
+        )
         keys = re.findall(r'Report for config "(.*?)"', output)
         if output is not None and output != "" and len(keys) > 0:
-            key = "Report for config \"%s\" gathered, placing in datastore" % keys[0]
+            key = 'Report for config "%s" gathered, placing in datastore' % keys[0]
             cmd = "grep '%s' /var/log/rhsm/rhsm.log | wc -l" % key
-            ret, output = self.runcmd(cmd, self.ssh_host(), desc="virt-who placing number check")
+            ret, output = self.runcmd(
+                cmd, self.ssh_host(), desc="virt-who placing number check"
+            )
             if output is not None or output != "":
-                loop_num = int(output)-1
+                loop_num = int(output) - 1
         return key, loop_num
 
     def vw_callback_loop_time(self):
         loop_time = -1
         key, loop_num = self.vw_callback_loop_num()
         if loop_num != 0:
             cmd = "grep '%s' /var/log/rhsm/rhsm.log | head -2" % key
-            ret, output = self.runcmd(cmd, self.ssh_host(), desc="virt-who placing number check")
-            output = output.split('\n')
+            ret, output = self.runcmd(
+                cmd, self.ssh_host(), desc="virt-who placing number check"
+            )
+            output = output.split("\n")
             if len(output) > 0:
                 d1 = re.findall(r"\d{2}:\d{2}:\d{2}", output[0])[0]
                 d2 = re.findall(r"\d{2}:\d{2}:\d{2}", output[1])[0]
-                h,m,s = d1.strip().split(":")
+                h, m, s = d1.strip().split(":")
                 s1 = int(h) * 3600 + int(m) * 60 + int(s)
-                h,m,s = d2.strip().split(":")
+                h, m, s = d2.strip().split(":")
                 s2 = int(h) * 3600 + int(m) * 60 + int(s)
-                loop_time = s2-s1
+                loop_time = s2 - s1
         return loop_time
 
     def vw_rhsm_modes_check(self, rhsm_output):
         env_mode = self.get_exported_param("HYPERVISOR_TYPE")
         if not env_mode:
@@ -912,40 +1004,60 @@
         rhsm_modes = re.findall(r'Using configuration.*\("(.*?)" mode\)', rhsm_output)
         if len(rhsm_modes) == 0:
             return env_mode
         elif len(rhsm_modes) == 1 and "fake" in rhsm_modes:
             return env_mode
-        elif len(rhsm_modes) == 1 and "libvirt" in rhsm_modes and 'Using libvirt url: ""' in rhsm_output:
+        elif (
+            len(rhsm_modes) == 1
+            and "libvirt" in rhsm_modes
+            and 'Using libvirt url: ""' in rhsm_output
+        ):
             return "libvirt-local"
         elif len(rhsm_modes) == 1 and "vdsm" in rhsm_modes and "vdsm" in env_mode:
             return "vdsm"
-        elif len(rhsm_modes) == 2 and "vdsm" in rhsm_modes[0] and "vdsm" in rhsm_modes[1] and "vdsm" in env_mode:
+        elif (
+            len(rhsm_modes) == 2
+            and "vdsm" in rhsm_modes[0]
+            and "vdsm" in rhsm_modes[1]
+            and "vdsm" in env_mode
+        ):
             return "vdsm"
         else:
             return "mix"
 
     def vw_callback_send_num(self):
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         cmd = "cat /var/log/rhsm/rhsm.log"
         ret, rhsm_output = self.runcmd(cmd, self.ssh_host(), debug=False)
         if rhsm_output is None or rhsm_output == "":
-            ret1, output1 = self.runcmd("ls /var/log/rhsm/virtwho/rhsm.log", self.ssh_host())
-            ret2, output2 = self.runcmd("ls /var/log/rhsm/virtwho/virtwho.log", self.ssh_host())
-            ret3, output3 = self.runcmd("ls /var/log/rhsm/virtwho.destination_*.log", self.ssh_host())
+            ret1, output1 = self.runcmd(
+                "ls /var/log/rhsm/virtwho/rhsm.log", self.ssh_host()
+            )
+            ret2, output2 = self.runcmd(
+                "ls /var/log/rhsm/virtwho/virtwho.log", self.ssh_host()
+            )
+            ret3, output3 = self.runcmd(
+                "ls /var/log/rhsm/virtwho.destination_*.log", self.ssh_host()
+            )
             if ret1 == 0:
                 cmd = "cat {0}".format(output1)
             elif ret2 == 0:
                 cmd = "cat {0}".format(output2)
             elif ret3 == 0:
                 cmd = "cat {0}".format(output3)
             ret, rhsm_output = self.runcmd(cmd, self.ssh_host(), debug=False)
         mode_type = self.vw_rhsm_modes_check(rhsm_output)
         if "0 hypervisors and 0 guests found" in rhsm_output:
-            logger.info("virt-who send terminated because '0 hypervisors and 0 guests found'")
+            logger.info(
+                "virt-who send terminated because '0 hypervisors and 0 guests found'"
+            )
             msg = "0 hypervisors and 0 guests found"
-        elif "virtwho.main DEBUG" in rhsm_output or "rhsm.connection DEBUG" in rhsm_output:
+        elif (
+            "virtwho.main DEBUG" in rhsm_output
+            or "rhsm.connection DEBUG" in rhsm_output
+        ):
             if "satellite" in register_type:
                 if mode_type == "libvirt-local" or mode_type == "vdsm":
                     msg = r'Response: status=200, request="PUT /rhsm/consumers'
                 else:
                     msg = r'Response: status=200, request="POST /rhsm/hypervisors'
@@ -961,16 +1073,16 @@
                 msg = r"Sending updated Host-to-guest mapping to"
         res = re.findall(msg, rhsm_output, re.I)
         return len(res)
 
     def vw_callback_error_num(self):
-        error_num = 0 
+        error_num = 0
         error_list = list()
         cmd = 'grep "\[.*ERROR.*\]" /var/log/rhsm/rhsm.log |sort'
         ret, output = self.runcmd(cmd, self.ssh_host())
         if output is not None and output != "":
-            error_list = output.strip().split('\n')
+            error_list = output.strip().split("\n")
             error_num = len(error_list)
         return error_num, error_list
 
     def vw_callback_thread_num(self):
         thread_num = 0
@@ -988,15 +1100,15 @@
         else:
             return "no"
 
     def vw_callback_pending_job(self):
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         pending_job = list()
         if "stage" in register_type:
             cmd = "cat /var/log/rhsm/rhsm.log"
-            ret, rhsm_output = self.runcmd(cmd, self.ssh_host(),debug=False)
+            ret, rhsm_output = self.runcmd(cmd, self.ssh_host(), debug=False)
             pending_job = re.findall(r"Job (.*?) not finished", rhsm_output)
         return pending_job
 
     def vw_thread_callback(self):
         pending_job = list()
@@ -1006,16 +1118,36 @@
         key, loop_num = self.vw_callback_loop_num()
         loop_time = self.vw_callback_loop_time()
         send_num = self.vw_callback_send_num()
         if send_num > 0:
             pending_job = self.vw_callback_pending_job()
-        logger.info("pending_job: %s, is_429: %s, loop_num: %s, loop_time: %s, send_num: %s, error_num: %s, thread_num: %s" \
-                % (len(pending_job), is_429, loop_num, loop_time, send_num, error_num, thread_num))
-        return pending_job, is_429, loop_num, loop_time, send_num, error_num, error_list, thread_num
+        logger.info(
+            "pending_job: %s, is_429: %s, loop_num: %s, loop_time: %s, send_num: %s, error_num: %s, thread_num: %s"
+            % (
+                len(pending_job),
+                is_429,
+                loop_num,
+                loop_time,
+                send_num,
+                error_num,
+                thread_num,
+            )
+        )
+        return (
+            pending_job,
+            is_429,
+            loop_num,
+            loop_time,
+            send_num,
+            error_num,
+            error_list,
+            thread_num,
+        )
 
     def vw_thread_timeout(
-            self, t1, q, timeout, exp_send, exp_loopnum, oneshot, exp_error, event):
+        self, t1, q, timeout, exp_send, exp_loopnum, oneshot, exp_error, event
+    ):
         while t1.is_alive():
             time.sleep(5)
         if event is not None:
             time.sleep(60)
             self.vw_hypervisor_event(event)
@@ -1032,20 +1164,20 @@
                 break
         start = time.time()
         while True:
             time.sleep(10)
             end = time.time()
-            spend_time = int(end-start)
+            spend_time = int(end - start)
             (
                 pending_job,
                 is_429,
                 loop_num,
                 loop_time,
                 send_num,
                 error_num,
                 error_list,
-                thread_num
+                thread_num,
             ) = self.vw_thread_callback()
             if is_429 == "yes":
                 logger.info("virt-who is terminated by 429 status")
                 break
             if thread_num == 0:
@@ -1062,18 +1194,18 @@
                     logger.info(
                         "virt-who is terminated by expected_send and expected_loop ready"
                     )
                     break
         data = dict()
-        data['pending_job'] = pending_job
-        data['is_429'] = is_429
-        data['thread_num'] = thread_num
-        data['error_num'] = error_num
-        data['error_list'] = error_list
-        data['send_num'] = send_num
-        data['loop_num'] = loop_num
-        data['loop_time'] = loop_time
+        data["pending_job"] = pending_job
+        data["is_429"] = is_429
+        data["thread_num"] = thread_num
+        data["error_num"] = error_num
+        data["error_list"] = error_list
+        data["send_num"] = send_num
+        data["loop_num"] = loop_num
+        data["loop_time"] = loop_time
         self.vw_stop()
         cmd = "cat /var/log/rhsm/rhsm.log"
         ret, rhsm_output = self.runcmd(cmd, self.ssh_host())
         q.put(("rhsm_output", rhsm_output, data))
 
@@ -1092,21 +1224,22 @@
         self.vw_stop()
         cmd = "rm -rf /var/log/rhsm/*"
         ret, output = self.runcmd(cmd, self.ssh_host())
 
     def vw_start_thread(
-            self, cli, timeout, exp_send, exp_loopnum, oneshot, event, exp_error):
+        self, cli, timeout, exp_send, exp_loopnum, oneshot, event, exp_error
+    ):
         q = queue.Queue()
         results = list()
         threads = list()
         t1 = threading.Thread(target=self.vw_thread_clean, args=())
         threads.append(t1)
         t2 = threading.Thread(target=self.vw_thread_run, args=(t1, q, cli))
         threads.append(t2)
         t3 = threading.Thread(
             target=self.vw_thread_timeout,
-            args=(t1, q, timeout, exp_send, exp_loopnum, oneshot, exp_error, event)
+            args=(t1, q, timeout, exp_send, exp_loopnum, oneshot, exp_error, event),
         )
         threads.append(t3)
         for t in threads:
             t.start()
         for t in threads:
@@ -1119,44 +1252,81 @@
             if item[0] == "rhsm_output":
                 rhsm_output = item[1]
                 data = item[2]
         return data, tty_output, rhsm_output
 
-    def vw_start(self, cli=None, timeout=900, exp_send=1, exp_loopnum=0, oneshot=False, event=None, web_check=True, exp_error=False):
+    def vw_start(
+        self,
+        cli=None,
+        timeout=900,
+        exp_send=1,
+        exp_loopnum=0,
+        oneshot=False,
+        event=None,
+        web_check=True,
+        exp_error=False,
+    ):
         for i in range(4):
-            data, tty_output, rhsm_output = self.vw_start_thread(cli, timeout, exp_send, exp_loopnum, oneshot, event, exp_error)
-            if data['is_429'] == "yes":
-                wait_time = 60*(i+3)
-                logger.warning("429 code found, re-register virt-who host and try again after %s seconds..." % wait_time)
+            data, tty_output, rhsm_output = self.vw_start_thread(
+                cli, timeout, exp_send, exp_loopnum, oneshot, event, exp_error
+            )
+            if data["is_429"] == "yes":
+                wait_time = 60 * (i + 3)
+                logger.warning(
+                    "429 code found, re-register virt-who host and try again after %s seconds..."
+                    % wait_time
+                )
                 register_config = self.get_register_config()
-                register_type = register_config['type']
-                self.runcmd("\cp -f /etc/rhsm/rhsm.conf /root/rhsm429.conf", self.ssh_host())
-                self.system_register_config(self.ssh_host(), register_type, register_config)
+                register_type = register_config["type"]
+                self.runcmd(
+                    "\cp -f /etc/rhsm/rhsm.conf /root/rhsm429.conf", self.ssh_host()
+                )
+                self.system_register_config(
+                    self.ssh_host(), register_type, register_config
+                )
                 self.system_register(self.ssh_host(), register_type, register_config)
-                self.runcmd("mv -f /root/rhsm429.conf /etc/rhsm/rhsm.conf", self.ssh_host())
+                self.runcmd(
+                    "mv -f /root/rhsm429.conf /etc/rhsm/rhsm.conf", self.ssh_host()
+                )
                 time.sleep(wait_time)
-            elif len(data['pending_job']) > 0:
-                wait_time = 60*(i+1)
-                logger.warning("Job is not finished, cancel it and try again after %s seconds..." % wait_time)
-                self.vw_pending_job_cancel(data['pending_job'])
+            elif len(data["pending_job"]) > 0:
+                wait_time = 60 * (i + 1)
+                logger.warning(
+                    "Job is not finished, cancel it and try again after %s seconds..."
+                    % wait_time
+                )
+                self.vw_pending_job_cancel(data["pending_job"])
                 time.sleep(wait_time)
-            elif len(re.findall('RemoteServerException: Server error attempting a GET.*returned status 500', rhsm_output, re.I)) > 0:
-                logger.warning("RemoteServerException return 500 code, restart virt-who again after 60s")
+            elif (
+                len(
+                    re.findall(
+                        "RemoteServerException: Server error attempting a GET.*returned status 500",
+                        rhsm_output,
+                        re.I,
+                    )
+                )
+                > 0
+            ):
+                logger.warning(
+                    "RemoteServerException return 500 code, restart virt-who again after 60s"
+                )
                 time.sleep(60)
             else:
                 data = self.vw_log_analyzer(data, tty_output, rhsm_output)
-                if web_check and data['error_num'] == 0 and data['send_num'] > 0:
+                if web_check and data["error_num"] == 0 and data["send_num"] > 0:
                     if self.vw_web_host_exist():
                         return data, tty_output, rhsm_output
                     else:
-                        logger.warning("Mapping info is not sent to website, restart virt-who again after 15s")
+                        logger.warning(
+                            "Mapping info is not sent to website, restart virt-who again after 15s"
+                        )
                         time.sleep(15)
                 else:
                     return data, tty_output, rhsm_output
-        if data['is_429'] == "yes":
+        if data["is_429"] == "yes":
             raise FailException("Failed to due to 429 code, please check")
-        elif len(data['pending_job']) > 0:
+        elif len(data["pending_job"]) > 0:
             raise FailException("Failed to due to not finished job, please check")
         else:
             logger.warning("Exception to run virt-who, please check")
             return data, tty_output, rhsm_output
 
@@ -1168,35 +1338,37 @@
     def vw_gen_json(self, hypervisors, guests):
         virtwho = {}
         for i in range(hypervisors):
             guest_list = []
             for c in range(guests):
-                guest_list.append({
-                    "guestId": str(uuid.uuid4()),
-                    "state": 1,
-                    "attributes": {
-                        "active": 1,
-                        "virtWhoType": "esx"
+                guest_list.append(
+                    {
+                        "guestId": str(uuid.uuid4()),
+                        "state": 1,
+                        "attributes": {"active": 1, "virtWhoType": "esx"},
                     }
-                })
+                )
             virtwho[str(uuid.uuid4()).replace("-", ".")] = guest_list
         return virtwho
 
     def vw_rhsm_associate(self, data, host_uuid, guest_uuid, uid=None):
         hypervisor_config = self.get_hypervisor_config(uid)
         register_config = self.get_register_config()
-        mode = hypervisor_config['type']
-        owner = register_config['owner']
+        mode = hypervisor_config["type"]
+        owner = register_config["owner"]
         if "libvirt-local" in mode or "vdsm" in mode:
             if guest_uuid in data.keys():
                 logger.info("Succeeded to check the associated info by rhsm.log")
                 return True
             else:
                 logger.error("Faild to check the associated info by rhsm.log")
                 return False
         else:
-            if guest_uuid in data[owner].keys() and host_uuid in data[owner][guest_uuid]['guest_hypervisor']:
+            if (
+                guest_uuid in data[owner].keys()
+                and host_uuid in data[owner][guest_uuid]["guest_hypervisor"]
+            ):
                 logger.info("Succeeded to check the associated info by rhsm.log")
                 return True
             else:
                 logger.error("Faild to check the associated info by rhsm.log")
                 return False
@@ -1204,102 +1376,143 @@
     def vw_encrypted(self, password, option=None):
         if option is None or option == "":
             attrs = ["Password:|%s" % password]
             ret, output = self.run_expect(self.ssh_host(), "virt-who-password", attrs)
             if ret == 0 and output is not None:
-                encrypted_value = output.split('\n')[-1].strip()
-                logger.info("Succeeded to get encrypted_password without option: %s" % encrypted_value)
+                encrypted_value = output.split("\n")[-1].strip()
+                logger.info(
+                    "Succeeded to get encrypted_password without option: %s"
+                    % encrypted_value
+                )
                 return encrypted_value
-            else: raise FailException("Failed to run virt-who-password")
+            else:
+                raise FailException("Failed to run virt-who-password")
         else:
             cmd = "virt-who-password %s %s > /tmp/vw.log" % (option, password)
-            ret, output = self.runcmd(cmd, self.ssh_host(), desc="virt-who-password to encrypted")
+            ret, output = self.runcmd(
+                cmd, self.ssh_host(), desc="virt-who-password to encrypted"
+            )
             if ret == 0:
                 ret, output = self.runcmd("cat /tmp/vw.log", self.ssh_host())
                 if output is not None and output != "":
-                    encrypted_value  = output.strip()
-                    logger.info("Succeeded to get encrypted_password with %s option: %s" % (option,encrypted_value))
+                    encrypted_value = output.strip()
+                    logger.info(
+                        "Succeeded to get encrypted_password with %s option: %s"
+                        % (option, encrypted_value)
+                    )
                     return encrypted_value
-                else: raise FailException("Failed to run virt-who-password")
-            else: raise FailException("Failed to run virt-who-password")
-    
+                else:
+                    raise FailException("Failed to run virt-who-password")
+            else:
+                raise FailException("Failed to run virt-who-password")
+
     def vw_pending_job_cancel(self, job_ids):
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         if "stage" in register_type:
             self.stage_job_delete(self.ssh_host(), register_config, job_ids)
         if "satellite" in register_type:
             logger.warning("not support to delete job currently")
 
     def vw_web_host_delete(self, host_name, host_uuid, retry=True):
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         if "stage" in register_type:
-            self.stage_consumer_delete(self.ssh_host(), register_config, host_name, host_uuid, retry)
+            self.stage_consumer_delete(
+                self.ssh_host(), register_config, host_name, host_uuid, retry
+            )
         elif "satellite" in register_type:
-            self.satellite_host_delete(self.ssh_host(), register_config, host_name, host_uuid, retry)
+            self.satellite_host_delete(
+                self.ssh_host(), register_config, host_name, host_uuid, retry
+            )
         else:
             raise FailException("Unkonwn server type for web host delete")
 
     def vw_web_attach(self, host_name, host_uuid, pool_id, quantity=1):
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         if "stage" in register_type:
-            self.stage_consumer_attach(self.ssh_host(), register_config, host_name, host_uuid, pool_id)
+            self.stage_consumer_attach(
+                self.ssh_host(), register_config, host_name, host_uuid, pool_id
+            )
         elif "satellite" in register_type:
-            self.satellite_host_attach(self.ssh_host(), register_config, host_name, host_uuid, pool_id, quantity)
+            self.satellite_host_attach(
+                self.ssh_host(),
+                register_config,
+                host_name,
+                host_uuid,
+                pool_id,
+                quantity,
+            )
         else:
             raise FailException("Unkonwn server type for web attach")
 
     def vw_web_unattach(self, host_name, host_uuid):
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         if "stage" in register_type:
-            self.stage_consumer_unattach(self.ssh_host(), register_config, host_name, host_uuid)
+            self.stage_consumer_unattach(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
         elif "satellite" in register_type:
-            self.satellite_host_unattach(self.ssh_host(), register_config, host_name, host_uuid)
+            self.satellite_host_unattach(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
         else:
             raise FailException("Unkonwn server type for web unattach")
 
     def vw_web_associate(self, host_name, host_uuid, guest_name, guest_uuid):
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         if "stage" in register_type:
-            return self. stage_consumer_associate(self.ssh_host(), register_config, host_name, host_uuid, guest_uuid)
+            return self.stage_consumer_associate(
+                self.ssh_host(), register_config, host_name, host_uuid, guest_uuid
+            )
         elif "satellite" in register_type:
-            return self.satellite_host_associate(self.ssh_host(), register_config, host_name, host_uuid, guest_name, guest_uuid)
+            return self.satellite_host_associate(
+                self.ssh_host(),
+                register_config,
+                host_name,
+                host_uuid,
+                guest_name,
+                guest_uuid,
+            )
         else:
             raise FailException("Unkonwn server type for web associate")
 
     def vw_web_registered_id(self, host_name, host_uuid):
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         if "stage" in register_type:
-            registered_id = self.stage_consumer_uuid(self.ssh_host(), register_config, host_name, host_uuid)
+            registered_id = self.stage_consumer_uuid(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
         if "satellite" in register_type:
-            registered_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
+            registered_id = self.satellite_host_id(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
         if registered_id is None or registered_id == "" or registered_id is False:
             return False
         else:
             return True
 
     def vw_web_host_exist(self):
-        keys = {'key1':'hypervisorId', 'key2':'name'}
+        keys = {"key1": "hypervisorId", "key2": "name"}
         hypervisorId_list = list()
         name_list = list()
-        for key, value in sorted(keys.items(),key=lambda item:item[0]):
-            cmd = "grep '\"%s\": \"' /var/log/rhsm/* -r" % value
+        for key, value in sorted(keys.items(), key=lambda item: item[0]):
+            cmd = 'grep \'"%s": "\' /var/log/rhsm/* -r' % value
             ret, output = self.runcmd(cmd, self.ssh_host(), debug=False)
             if output.strip() is not None and output.strip() != "":
-                lines = output.strip().split('\n')
+                lines = output.strip().split("\n")
                 if len(lines) > 0:
                     for line in lines:
                         res = re.findall(r'"%s": "(.*?)"' % value, line)
                         if len(res) > 0 and key == "key1":
-                                hypervisorId_list.append(res[-1])
+                            hypervisorId_list.append(res[-1])
                         if len(res) > 0 and key == "key2":
-                                name_list.append(res[-1])
+                            name_list.append(res[-1])
         if len(hypervisorId_list) > 0 and len(name_list) > 0:
             dictionary = dict(zip(name_list, hypervisorId_list))
             for name, uuid in dictionary.items():
                 if self.vw_web_registered_id(name, uuid) is False:
                     return False
@@ -1315,20 +1528,28 @@
 
     def vw_msg_search(self, output, msg, exp_exist=True):
         res = re.findall(msg, output, re.I)
         num = len(res)
         if num > 0 and exp_exist is True:
-            logger.info("Succeeded to search, expected msg(%s) is exist(%s)" %(msg, num))
+            logger.info(
+                "Succeeded to search, expected msg(%s) is exist(%s)" % (msg, num)
+            )
             return True
         if num > 0 and exp_exist is False:
-            logger.error("Failed to search, unexpected msg(%s) is exist(%s)" %(msg, num))
+            logger.error(
+                "Failed to search, unexpected msg(%s) is exist(%s)" % (msg, num)
+            )
             return False
         if num == 0 and exp_exist is True:
-            logger.error("Failed to search, expected msg(%s) is not exist(%s)" %(msg, num))
+            logger.error(
+                "Failed to search, expected msg(%s) is not exist(%s)" % (msg, num)
+            )
             return False
         if num == 0 and exp_exist is False:
-            logger.info("Succeeded to search, unexpected msg(%s) is not exist(%s)" %(msg, num))
+            logger.info(
+                "Succeeded to search, unexpected msg(%s) is not exist(%s)" % (msg, num)
+            )
             return True
 
     def msg_validation(self, output, msg_list, exp_exist=True):
         matched_list = list()
         for msg in msg_list:
@@ -1349,104 +1570,140 @@
                 matched_list.append("No")
         if "No" in matched_list and exp_exist is True:
             logger.error("Failed to search, expected msg(%s) is not exist" % msg_list)
             return False
         if "No" in matched_list and exp_exist is False:
-            logger.info("Succeeded to search, unexpected msg(%s) is not exist" % msg_list)
+            logger.info(
+                "Succeeded to search, unexpected msg(%s) is not exist" % msg_list
+            )
             return True
         if "No" not in matched_list and "Yes" in matched_list and exp_exist is True:
             logger.info("Succeeded to search, expected msg(%s) is exist" % msg_list)
             return True
         if "No" not in matched_list and "Yes" in matched_list and exp_exist is False:
             logger.error("Failed to search, unexpected msg(%s) is exist" % msg_list)
             return False
 
-    def op_normal_value(self, data, exp_error=None, exp_thread=None, exp_send=None, \
-            exp_interval=None, exp_loopnum=None, exp_looptime=None):
-        '''validate thread number'''
+    def op_normal_value(
+        self,
+        data,
+        exp_error=None,
+        exp_thread=None,
+        exp_send=None,
+        exp_interval=None,
+        exp_loopnum=None,
+        exp_looptime=None,
+    ):
+        """validate thread number"""
         if exp_thread is not None:
-            if data['thread_num'] == exp_thread:
-                logger.info("virtwho thread number(%s) is expected" % data['thread_num'])
+            if data["thread_num"] == exp_thread:
+                logger.info(
+                    "virtwho thread number(%s) is expected" % data["thread_num"]
+                )
             else:
-                logger.error("virtwho thread number(%s) is not expected" % data['thread_num'])
+                logger.error(
+                    "virtwho thread number(%s) is not expected" % data["thread_num"]
+                )
                 return False
-        '''validate error number'''
+        """validate error number"""
         if exp_error is not None:
             if "|" in str(exp_error):
-                if str(data['error_num']) in exp_error.split('|'):
-                    logger.info("virtwho error number(%s) is expected" % data['error_num'])
+                if str(data["error_num"]) in exp_error.split("|"):
+                    logger.info(
+                        "virtwho error number(%s) is expected" % data["error_num"]
+                    )
                 else:
-                    logger.error("virtwho error number(%s) is not expected" % data['error_num'])
+                    logger.error(
+                        "virtwho error number(%s) is not expected" % data["error_num"]
+                    )
                     return False
             elif str(exp_error) == "nonzero" or str(exp_error) == "nz":
-                if str(data['error_num']) == 0:
-                    logger.error("virtwho error number(%s) is not expected" % data['error_num'])
+                if str(data["error_num"]) == 0:
+                    logger.error(
+                        "virtwho error number(%s) is not expected" % data["error_num"]
+                    )
                     return False
                 else:
-                    logger.info("virtwho error number(%s) is expected" % data['error_num'])
+                    logger.info(
+                        "virtwho error number(%s) is expected" % data["error_num"]
+                    )
             else:
-                if str(data['error_num']) == str(exp_error):
-                    logger.info("virtwho error number(%s) is expected" % data['error_num'])
+                if str(data["error_num"]) == str(exp_error):
+                    logger.info(
+                        "virtwho error number(%s) is expected" % data["error_num"]
+                    )
                 else:
-                    logger.error("virtwho error number(%s) is not expected" % data['error_num'])
+                    logger.error(
+                        "virtwho error number(%s) is not expected" % data["error_num"]
+                    )
                     return False
-        '''validate send number'''
+        """validate send number"""
         if exp_send is not None:
-            if data['send_num'] == exp_send:
-                logger.info("virtwho send number(%s) is expected" % data['send_num'])
+            if data["send_num"] == exp_send:
+                logger.info("virtwho send number(%s) is expected" % data["send_num"])
             else:
-                logger.error("virtwho send number(%s) is not expected" % data['send_num'])
+                logger.error(
+                    "virtwho send number(%s) is not expected" % data["send_num"]
+                )
                 return False
-        '''validate interval time'''
+        """validate interval time"""
         if exp_interval is not None:
-            if data['interval_time'] == exp_interval:
-                logger.info("virtwho interval time(%s) is expected" % data['interval_time'])
+            if data["interval_time"] == exp_interval:
+                logger.info(
+                    "virtwho interval time(%s) is expected" % data["interval_time"]
+                )
             else:
-                logger.error("virtwho interval time(%s) is not expected" % data['interval_time'])
+                logger.error(
+                    "virtwho interval time(%s) is not expected" % data["interval_time"]
+                )
                 return False
-        '''validate loop number'''
+        """validate loop number"""
         if exp_loopnum is not None:
-            if data['loop_num'] == exp_loopnum:
-                logger.info("virtwho loop number(%s) is expected" % data['loop_num'])
+            if data["loop_num"] == exp_loopnum:
+                logger.info("virtwho loop number(%s) is expected" % data["loop_num"])
             else:
-                logger.error("virtwho loop number(%s) is not expected" % data['loop_num'])
+                logger.error(
+                    "virtwho loop number(%s) is not expected" % data["loop_num"]
+                )
                 return False
-        '''validate loop time'''
+        """validate loop time"""
         if exp_looptime is not None:
-            loop_time = data['loop_time']
-            if loop_time > exp_looptime+20 or loop_time < exp_looptime-20:
+            loop_time = data["loop_time"]
+            if loop_time > exp_looptime + 20 or loop_time < exp_looptime - 20:
                 logger.error("virtwho loop time(%s) is not expected" % loop_time)
                 return False
             else:
                 logger.info("virtwho loop time(%s) is expected" % loop_time)
         logger.info("Finished to validate all the expected options")
         return True
 
-    def vw_status(self, cmd='virt-who --status', if_json=False):
+    def vw_status(self, cmd="virt-who --status", if_json=False):
         status_data = dict()
         if if_json != False:
-            cmd += ' --json'
-        ret, output = self.runcmd(cmd, self.ssh_host())
-        if not if_json and 'Configuration Name' in output:
-            status = output.strip().split('\n')
+            cmd += " --json"
+        ret, output = self.runcmd(cmd, self.ssh_host())
+        if not if_json and "Configuration Name" in output:
+            status = output.strip().split("\n")
             for item in status:
                 num = status.index(item)
-                if 'Configuration Name' in item:
-                    config_name = item.split(':')[1].strip()
+                if "Configuration Name" in item:
+                    config_name = item.split(":")[1].strip()
                     status_data[config_name] = dict()
-                    if 'Source Status:' in status[num+1]:
-                        status_data[config_name]['source_status'] = \
-                            status[num+1].split(':')[1].strip()
-                    if 'Destination Status:' in status[num+2]:
-                        status_data[config_name]['destination_status'] = \
-                            status[num+2].split(':')[1].strip()
-        if if_json and 'configurations' in output:
-            output = json.loads(output.replace('\n', ''), strict=False)
-            configurations = output['configurations']
+                    if "Source Status:" in status[num + 1]:
+                        status_data[config_name]["source_status"] = (
+                            status[num + 1].split(":")[1].strip()
+                        )
+                    if "Destination Status:" in status[num + 2]:
+                        status_data[config_name]["destination_status"] = (
+                            status[num + 2].split(":")[1].strip()
+                        )
+        if if_json and "configurations" in output:
+            output = json.loads(output.replace("\n", ""), strict=False)
+            configurations = output["configurations"]
             for item in configurations:
-                name = item['name']
+                name = item["name"]
                 status_data[name] = dict()
-                if 'source' in item.keys():
-                    status_data[name]['source'] = item['source']
-                if 'destination' in item.keys():
-                    status_data[name]['destination'] = item['destination']
+                if "source" in item.keys():
+                    status_data[name]["source"] = item["source"]
+                if "destination" in item.keys():
+                    status_data[name]["destination"] = item["destination"]
         return status_data
would reformat /tmp/lint/virt_who/testing.py
--- /tmp/lint/virt_who/provision.py	2023-03-03 05:26:23.349065 +0000
+++ /tmp/lint/virt_who/provision.py	2023-03-06 06:25:06.570486 +0000
@@ -1,13 +1,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 
+
 class Provision(Register):
-    #****************************************
+    # ****************************************
     # Provision Entry
-    #****************************************
+    # ****************************************
     def provision_validation(self):
         if deploy.trigger.type == "trigger-rhev":
             if not deploy.trigger.rhev_iso:
                 raise FailException("no rhev iso url")
         elif deploy.trigger.type == "trigger-gating":
@@ -58,87 +59,95 @@
     def ci_msg_parser(self):
         env = dict()
         ci_msg_content = self.get_exported_param("CI_MESSAGE")
         if ci_msg_content:
             msg = json.loads(ci_msg_content)
-            if 'info' in msg.keys():
-                build_id = msg['info']['build_id']
-                task_id = msg['info']['task_id']
-                owner_name = msg['info']['owner_name']
-                source = msg['info']['source']
+            if "info" in msg.keys():
+                build_id = msg["info"]["build_id"]
+                task_id = msg["info"]["task_id"]
+                owner_name = msg["info"]["owner_name"]
+                source = msg["info"]["source"]
             else:
                 build_id = re.findall(r'"build_id":(.*?),', ci_msg_content)[-1].strip()
                 task_id = re.findall(r'"task_id":(.*?),', ci_msg_content)[-1].strip()
-                owner_name = re.findall(r'"owner_name":(.*?),', ci_msg_content)[-1].strip()
+                owner_name = re.findall(r'"owner_name":(.*?),', ci_msg_content)[
+                    -1
+                ].strip()
                 source = re.findall(r'"source":(.*?),', ci_msg_content)[-1].strip()
-            brew_build_url = "{0}/brew/buildinfo?buildID={1}".format(deploy.repo.brew, build_id)
+            brew_build_url = "{0}/brew/buildinfo?buildID={1}".format(
+                deploy.repo.brew, build_id
+            )
         else:
             brew_build_url = self.get_exported_param("BREW_BUILD_URL")
-            build_id = re.findall(r'buildID=(.*?)$', brew_build_url)[-1]
+            build_id = re.findall(r"buildID=(.*?)$", brew_build_url)[-1]
             task_id = build_id
-            owner_name = 'wpoteat'
-            source = ''
-        cmd = 'curl -k -s -i {0}'.format(brew_build_url)
+            owner_name = "wpoteat"
+            source = ""
+        cmd = "curl -k -s -i {0}".format(brew_build_url)
         output = os.popen(cmd).read()
-        pkg_url = re.findall(r'<a href="https://(.*?).noarch.rpm">download</a>', output)[-1]
-        items = pkg_url.split('/')
+        pkg_url = re.findall(
+            r'<a href="https://(.*?).noarch.rpm">download</a>', output
+        )[-1]
+        items = pkg_url.split("/")
         rhel_release = items[3]
         rhel_compose = self.get_exported_param("RHEL_COMPOSE")
         if not rhel_compose:
             base_url = deploy.repo.rhel_base
-            if 'rhel-9' in rhel_release:
-                url = '{0}/rhel-9/nightly/RHEL-9/latest-RHEL-9/COMPOSE_ID'.format(base_url)
-            if 'rhel-8' in rhel_release:
-                url = '{0}/rhel-8/nightly/RHEL-8/latest-RHEL-8/COMPOSE_ID'.format(base_url)
-            if 'rhel-7' in rhel_release:
-                url = '{0}/rhel-7/rel-eng/RHEL-7/latest-RHEL-7/COMPOSE_ID'.format(base_url)
-            if 'rhel-6' in rhel_release:
-                url = '{0}/rel-eng/latest-RHEL-6/COMPOSE_ID'.format(base_url)
-            cmd = 'curl -s -k -L {0}'.format(url)
+            if "rhel-9" in rhel_release:
+                url = "{0}/rhel-9/nightly/RHEL-9/latest-RHEL-9/COMPOSE_ID".format(
+                    base_url
+                )
+            if "rhel-8" in rhel_release:
+                url = "{0}/rhel-8/nightly/RHEL-8/latest-RHEL-8/COMPOSE_ID".format(
+                    base_url
+                )
+            if "rhel-7" in rhel_release:
+                url = "{0}/rhel-7/rel-eng/RHEL-7/latest-RHEL-7/COMPOSE_ID".format(
+                    base_url
+                )
+            if "rhel-6" in rhel_release:
+                url = "{0}/rel-eng/latest-RHEL-6/COMPOSE_ID".format(base_url)
+            cmd = "curl -s -k -L {0}".format(url)
             rhel_compose = os.popen(cmd).read().strip()
         if not pkg_url:
             raise FailException("no package url found")
         if not rhel_compose:
             raise FailException("no rhel compose found")
-        env['build_id'] = build_id
-        env['task_id'] = task_id
-        env['owner_name'] = owner_name
-        env['source'] = source
-        env['pkg_url'] = 'http://'+pkg_url+'.noarch.rpm'
-        env['pkg_name'] = items[5]
-        env['pkg_version'] = items[6]
-        env['pkg_release'] = items[7]
-        env['pkg_arch'] = items[8]
-        env['pkg_nvr'] = items[9]
-        env['rhel_release'] = rhel_release
-        env['rhel_compose'] = rhel_compose
+        env["build_id"] = build_id
+        env["task_id"] = task_id
+        env["owner_name"] = owner_name
+        env["source"] = source
+        env["pkg_url"] = "http://" + pkg_url + ".noarch.rpm"
+        env["pkg_name"] = items[5]
+        env["pkg_version"] = items[6]
+        env["pkg_release"] = items[7]
+        env["pkg_arch"] = items[8]
+        env["pkg_nvr"] = items[9]
+        env["rhel_release"] = rhel_release
+        env["rhel_compose"] = rhel_compose
         return env
 
     def provision_start(self):
         self.provision_validation()
         if deploy.trigger.type == "trigger-gating":
             env = self.ci_msg_parser()
-            rhel_compose = env['rhel_compose']
+            rhel_compose = env["rhel_compose"]
             for key, value in env.items():
                 logger.info("{0}: {1}".format(key, value))
         else:
             rhel_compose = deploy.trigger.rhel_compose
         remote_modes, local_modes = self.hypervisors_validation()
         q = queue.Queue()
         results = list()
         threads = list()
         threads.append(
-            threading.Thread(
-                target=self.provision_register_servers,
-                args=(q,)
-            )
+            threading.Thread(target=self.provision_register_servers, args=(q,))
         )
         if len(remote_modes) > 0:
             threads.append(
                 threading.Thread(
-                    target=self.provision_remote_guests,
-                    args=(q, remote_modes)
+                    target=self.provision_remote_guests, args=(q, remote_modes)
                 )
             )
         # if deploy.trigger.type == "trigger-rhev":
         #     threads.append(
         #         threading.Thread(
@@ -147,27 +156,25 @@
         #         )
         #     )
         if deploy.trigger.type == "trigger-multiarch":
             threads.append(
                 threading.Thread(
-                    target=self.provision_arch_host,
-                    args=(q, rhel_compose)
+                    target=self.provision_arch_host, args=(q, rhel_compose)
                 )
             )
         else:
             if len(remote_modes) > 0:
                 threads.append(
                     threading.Thread(
                         target=self.provision_docker_hosts,
-                        args=(q, rhel_compose, remote_modes)
+                        args=(q, rhel_compose, remote_modes),
                     )
                 )
             if "libvirt-local" in local_modes:
                 threads.append(
                     threading.Thread(
-                        target=self.provision_libvirt_local_host,
-                        args=(q, rhel_compose)
+                        target=self.provision_libvirt_local_host, args=(q, rhel_compose)
                     )
                 )
             # if "vdsm" in local_modes:
             #     threads.append(
             #         threading.Thread(
@@ -196,39 +203,39 @@
             if item[0] == "provision_remote_guests":
                 guests.update(item[1])
             if item[0] == "provision_docker_hosts":
                 hosts.update(item[1])
             if item[0] == "provision_rhev_host":
-                if 'virtwho-host-ip' in item[1].keys():
-                    hosts['virtwho-host-ip'] = item[1]['virtwho-host-ip']
-                if 'vdsm-guest-ip' in item[2].keys():
-                    guests['vdsm-guest-ip'] = item[2]['vdsm-guest-ip']
+                if "virtwho-host-ip" in item[1].keys():
+                    hosts["virtwho-host-ip"] = item[1]["virtwho-host-ip"]
+                if "vdsm-guest-ip" in item[2].keys():
+                    guests["vdsm-guest-ip"] = item[2]["vdsm-guest-ip"]
             if item[0] == "provision_arch_host":
-                if 'virtwho-host-ip' in item[1].keys():
-                    hosts['virtwho-host-ip'] = item[1]['virtwho-host-ip']
+                if "virtwho-host-ip" in item[1].keys():
+                    hosts["virtwho-host-ip"] = item[1]["virtwho-host-ip"]
             if item[0] == "provision_libvirt_local_host":
-                if 'libvirt-local-host-ip' in item[1].keys():
-                    hosts['libvirt-local-host-ip'] = item[1]['libvirt-local-host-ip']
-                if 'libvirt-local-guest-ip' in item[2].keys():
-                    guests['libvirt-local-guest-ip'] = item[2]['libvirt-local-guest-ip']
+                if "libvirt-local-host-ip" in item[1].keys():
+                    hosts["libvirt-local-host-ip"] = item[1]["libvirt-local-host-ip"]
+                if "libvirt-local-guest-ip" in item[2].keys():
+                    guests["libvirt-local-guest-ip"] = item[2]["libvirt-local-guest-ip"]
             if item[0] == "provision_vdsm_host":
-                if 'vdsm-host-ip' in item[1].keys():
-                    hosts['vdsm-host-ip'] = item[1]['vdsm-host-ip']
-                if 'vdsm-guest-ip' in item[2].keys():
-                    guests['vdsm-guest-ip'] = item[2]['vdsm-guest-ip']
+                if "vdsm-host-ip" in item[1].keys():
+                    hosts["vdsm-host-ip"] = item[1]["vdsm-host-ip"]
+                if "vdsm-guest-ip" in item[2].keys():
+                    guests["vdsm-guest-ip"] = item[2]["vdsm-guest-ip"]
         return register_servers, hosts, guests
 
     def provision_register_servers(self, q):
         logger.info("Start to provision register servers")
         func_name = sys._getframe().f_code.co_name
         register_list = deploy.trigger.register_list.lower()
-        satellite_server = self.get_exported_param('SATELLITE_SERVER')
+        satellite_server = self.get_exported_param("SATELLITE_SERVER")
         servers_ip = dict()
         sat_list = list()
-        for register_type in register_list.strip().split(','):
+        for register_type in register_list.strip().split(","):
             if "stage" in register_type:
-                servers_ip['stage'] = deploy.stage.server
+                servers_ip["stage"] = deploy.stage.server
             if "satellite" in register_type:
                 sat_list.append(register_type)
                 if satellite_server:
                     servers_ip[register_type] = satellite_server
         if not satellite_server:
@@ -239,11 +246,11 @@
                 sat_threads = []
                 for sat_type, sat_host in job_passed.items():
                     sat_threads.append(
                         threading.Thread(
                             target=self.satellite_setup,
-                            args=(sat_queue, sat_type, sat_host)
+                            args=(sat_queue, sat_type, sat_host),
                         )
                     )
                 for t in sat_threads:
                     t.start()
                 for t in sat_threads:
@@ -265,53 +272,47 @@
             mode_type = "%s-guest-ip" % mode_type
             if "libvirt-remote" in mode_type:
                 mode_threads.append(
                     threading.Thread(
                         target=self.guest_libvirt_remote_setup,
-                        args=(mode_queue, mode_type)
+                        args=(mode_queue, mode_type),
                     )
                 )
             if "rhevm" in mode_type:
                 mode_threads.append(
                     threading.Thread(
-                        target=self.guest_rhevm_setup,
-                        args=(mode_queue, mode_type)
+                        target=self.guest_rhevm_setup, args=(mode_queue, mode_type)
                     )
                 )
             if "xen" in mode_type:
                 mode_threads.append(
                     threading.Thread(
-                        target=self.guest_xen_setup,
-                        args=(mode_queue, mode_type)
+                        target=self.guest_xen_setup, args=(mode_queue, mode_type)
                     )
                 )
             if "hyperv" in mode_type:
                 mode_threads.append(
                     threading.Thread(
-                        target=self.guest_hyperv_setup,
-                        args=(mode_queue, mode_type)
+                        target=self.guest_hyperv_setup, args=(mode_queue, mode_type)
                     )
                 )
             if "ahv" in mode_type:
                 mode_threads.append(
                     threading.Thread(
-                        target=self.guest_ahv_setup,
-                        args=(mode_queue, mode_type)
+                        target=self.guest_ahv_setup, args=(mode_queue, mode_type)
                     )
                 )
             if "esx" in mode_type:
                 mode_threads.append(
                     threading.Thread(
-                        target=self.guest_esx_setup,
-                        args=(mode_queue, mode_type)
+                        target=self.guest_esx_setup, args=(mode_queue, mode_type)
                     )
                 )
             if "kubevirt" in mode_type:
                 mode_threads.append(
                     threading.Thread(
-                        target=self.guest_kubevirt_setup,
-                        args=(mode_queue, mode_type)
+                        target=self.guest_kubevirt_setup, args=(mode_queue, mode_type)
                     )
                 )
         for t in mode_threads:
             t.start()
         for t in mode_threads:
@@ -349,18 +350,14 @@
         func_name = sys._getframe().f_code.co_name
         logger.info("Start to provision multiarch host")
         conf_host = dict()
         arch_type = deploy.trigger.arch_type
         host_ip = self.beaker_compose_setup(compose_id, arch_type.strip())
-        conf_host["virtwho-host-ip"] = host_ip 
+        conf_host["virtwho-host-ip"] = host_ip
         username = deploy.beaker.default_user
         password = deploy.beaker.default_passwd
-        ssh_host = {
-            "host": host_ip,
-            "username": username,
-            "password": password
-        }
+        ssh_host = {"host": host_ip, "username": username, "password": password}
         self.system_init("ci-host-arch", ssh_host)
         self.ssh_no_passwd_access(ssh_host)
         self.install_base_packages(ssh_host)
         q.put((func_name, conf_host))
 
@@ -379,11 +376,11 @@
         local_user = deploy.libvirt.local_user
         local_passwd = deploy.libvirt.local_passwd
         ssh_libvirt = {
             "host": local_host,
             "username": local_user,
-            "password": local_passwd
+            "password": local_passwd,
         }
         self.rhel_install_by_grub(ssh_libvirt, compose_id)
         self.system_init("ci-host-libvirt-local", ssh_libvirt)
         self.ssh_no_passwd_access(ssh_libvirt)
         guest_ip = self.guest_libvirt_local_setup(ssh_libvirt)
@@ -410,13 +407,13 @@
     #     guest_ip = self.guest_vdsm_setup(ssh_vdsm)
     #     conf_host["vdsm-host-ip"] = master
     #     conf_guest["vdsm-guest-ip"] = guest_ip
     #     q.put((func_name, conf_host, conf_guest))
 
-    #*************************************************
-    # Jenkins Job Scheduler 
-    #*************************************************
+    # *************************************************
+    # Jenkins Job Scheduler
+    # *************************************************
     def jenkins_job_scheduler(self, register_servers, virtwho_hosts, guests):
         trigger_type = deploy.trigger.type
         if trigger_type == "trigger-rhev" or trigger_type == "trigger-multiarch":
             for key, value in guests.items():
                 guest_ip = value
@@ -437,53 +434,69 @@
                     job_name = "runtest-libvirt-remote"
                 if "libvirt-local" in key:
                     job_name = "runtest-libvirt-local"
                 if "vdsm" in key:
                     job_name = "runtest-vdsm"
-                if len(register_servers) > 0 \
-                        and 'virtwho-host-ip' in virtwho_hosts.keys() \
-                        and guest_ip != "" \
-                        and job_name != "":
-                    host_ip = virtwho_hosts['virtwho-host-ip']
-                    self.jenkins_job_start(register_servers, host_ip, guest_ip, job_name)
+                if (
+                    len(register_servers) > 0
+                    and "virtwho-host-ip" in virtwho_hosts.keys()
+                    and guest_ip != ""
+                    and job_name != ""
+                ):
+                    host_ip = virtwho_hosts["virtwho-host-ip"]
+                    self.jenkins_job_start(
+                        register_servers, host_ip, guest_ip, job_name
+                    )
         else:
             results = list()
             threads = list()
             for key, value in virtwho_hosts.items():
                 host_ip = value
                 job_name = ""
                 guest_ip = ""
-                if "esx" in key and 'esx-guest-ip' in guests.keys():
+                if "esx" in key and "esx-guest-ip" in guests.keys():
                     job_name = "runtest-esx"
-                    guest_ip = guests['esx-guest-ip']
-                if "xen" in key and 'xen-guest-ip' in guests.keys():
+                    guest_ip = guests["esx-guest-ip"]
+                if "xen" in key and "xen-guest-ip" in guests.keys():
                     job_name = "runtest-xen"
-                    guest_ip = guests['xen-guest-ip']
-                if "hyperv" in key and 'hyperv-guest-ip' in guests.keys():
+                    guest_ip = guests["xen-guest-ip"]
+                if "hyperv" in key and "hyperv-guest-ip" in guests.keys():
                     job_name = "runtest-hyperv"
-                    guest_ip = guests['hyperv-guest-ip']
-                if "rhevm" in key and 'rhevm-guest-ip' in guests.keys():
+                    guest_ip = guests["hyperv-guest-ip"]
+                if "rhevm" in key and "rhevm-guest-ip" in guests.keys():
                     job_name = "runtest-rhevm"
-                    guest_ip = guests['rhevm-guest-ip']
-                if "kubevirt" in key and 'kubevirt-guest-ip' in guests.keys():
+                    guest_ip = guests["rhevm-guest-ip"]
+                if "kubevirt" in key and "kubevirt-guest-ip" in guests.keys():
                     job_name = "runtest-kubevirt"
-                    guest_ip = guests['kubevirt-guest-ip']
-                if "ahv" in key and 'ahv-guest-ip' in guests.keys():
+                    guest_ip = guests["kubevirt-guest-ip"]
+                if "ahv" in key and "ahv-guest-ip" in guests.keys():
                     job_name = "runtest-ahv"
-                    guest_ip = guests['ahv-guest-ip']
-                if "libvirt-remote" in key and 'libvirt-remote-guest-ip' in guests.keys():
+                    guest_ip = guests["ahv-guest-ip"]
+                if (
+                    "libvirt-remote" in key
+                    and "libvirt-remote-guest-ip" in guests.keys()
+                ):
                     job_name = "runtest-libvirt-remote"
-                    guest_ip = guests['libvirt-remote-guest-ip']
-                if "libvirt-local" in key and 'libvirt-local-guest-ip' in guests.keys():
+                    guest_ip = guests["libvirt-remote-guest-ip"]
+                if "libvirt-local" in key and "libvirt-local-guest-ip" in guests.keys():
                     job_name = "runtest-libvirt-local"
-                    guest_ip = guests['libvirt-local-guest-ip']
-                if "vdsm" in key and 'vdsm-guest-ip' in guests.keys():
+                    guest_ip = guests["libvirt-local-guest-ip"]
+                if "vdsm" in key and "vdsm-guest-ip" in guests.keys():
                     job_name = "runtest-vdsm"
-                    guest_ip = guests['vdsm-guest-ip']
-                if len(register_servers) > 0 and host_ip != "" and guest_ip != "" and job_name != "":
-                    threads.append(threading.Thread(
-                        target=self.jenkins_job_start, args=(register_servers, host_ip, guest_ip, job_name)))
+                    guest_ip = guests["vdsm-guest-ip"]
+                if (
+                    len(register_servers) > 0
+                    and host_ip != ""
+                    and guest_ip != ""
+                    and job_name != ""
+                ):
+                    threads.append(
+                        threading.Thread(
+                            target=self.jenkins_job_start,
+                            args=(register_servers, host_ip, guest_ip, job_name),
+                        )
+                    )
             for t in threads:
                 t.start()
             for t in threads:
                 t.join()
 
@@ -539,20 +552,20 @@
             if deploy.trigger.type == "trigger-gating":
                 username = deploy.stage.gate_user
                 password = deploy.stage.gate_passwd
                 owner = deploy.stage.gate_org
                 env = deploy.stage.gate_org
-            register_config={
-                    'type':register_type,
-                    'server':server,
-                    'username':username,
-                    'password':password,
-                    'owner':owner,
-                    'env':env,
-                    'ssh_user':"",
-                    'ssh_passwd':"",
-                    'api':api
+            register_config = {
+                "type": register_type,
+                "server": server,
+                "username": username,
+                "password": password,
+                "owner": owner,
+                "env": env,
+                "ssh_user": "",
+                "ssh_passwd": "",
+                "api": api,
             }
             return register_config
         if "satellite" in register_type:
             server = register_server
             api = "https://{0}".format(server)
@@ -560,22 +573,22 @@
             ssh_passwd = deploy.beaker.default_passwd
             username = deploy.satellite.admin_user
             password = deploy.satellite.admin_passwd
             owner = deploy.satellite.default_org
             env = deploy.satellite.default_env
-            ssh_sat = {"host": server,"username":ssh_user,"password":ssh_passwd}
-            register_config={
-                    'type':register_type,
-                    'server':server,
-                    'username':username,
-                    'password':password,
-                    'owner':owner,
-                    'env':env,
-                    'ssh_user':ssh_user,
-                    'ssh_passwd':ssh_passwd,
-                    'api':api,
-                    'ssh_sat':ssh_sat
+            ssh_sat = {"host": server, "username": ssh_user, "password": ssh_passwd}
+            register_config = {
+                "type": register_type,
+                "server": server,
+                "username": username,
+                "password": password,
+                "owner": owner,
+                "env": env,
+                "ssh_user": ssh_user,
+                "ssh_passwd": ssh_passwd,
+                "api": api,
+                "ssh_sat": ssh_sat,
             }
             return register_config
 
     def jenkins_hypervisor_config(self, host_ip, guest_ip, job_name):
         trigger_type = deploy.trigger.type
@@ -628,22 +641,26 @@
             guest_user = deploy.ahv.guest_user
             guest_passwd = deploy.ahv.guest_passwd
         if "kubevirt" in job_name:
             hypervisor_type = "kubevirt"
             hypervisor_server = deploy.kubevirt.endpoint
-            hypervisor_user = ''
+            hypervisor_user = ""
             hypervisor_passwd = deploy.kubevirt.token
             guest_name = deploy.kubevirt.guest_name
             guest_user = deploy.kubevirt.guest_user
             guest_passwd = deploy.kubevirt.guest_passwd
             hypervisor_config_file = deploy.kubevirt.kube_config_file
         if "rhevm" in job_name:
             hypervisor_type = "rhevm"
-            rhevm_ip =  deploy.rhevm.rhevm_ip
+            rhevm_ip = deploy.rhevm.rhevm_ip
             hypervisor_ssh_user = deploy.rhevm.rhevm_ssh_user
             hypervisor_ssh_passwd = deploy.rhevm.rhevm_ssh_passwd
-            ssh_rhevm = {'host':rhevm_ip,'username':hypervisor_ssh_user,'password':hypervisor_ssh_passwd}
+            ssh_rhevm = {
+                "host": rhevm_ip,
+                "username": hypervisor_ssh_user,
+                "password": hypervisor_ssh_passwd,
+            }
             hypervisor_server = self.rhevm_admin_get(ssh_rhevm)
             hypervisor_user = deploy.rhevm.rhevm_admin_user
             hypervisor_passwd = deploy.rhevm.rhevm_admin_passwd
             guest_name = deploy.rhevm.guest_name
             guest_user = deploy.rhevm.guest_user
@@ -678,31 +695,31 @@
             host_user = deploy.libvirt.local_user
             host_passwd = deploy.libvirt.local_passwd
             guest_name = deploy.libvirt.guest_name
             guest_user = deploy.libvirt.guest_user
             guest_passwd = deploy.libvirt.guest_passwd
-        ssh_host = {"host": host_ip,"username":host_user,"password":host_passwd}
-        ssh_guest = {"host":guest_ip,"username":guest_user,"password":guest_passwd}
+        ssh_host = {"host": host_ip, "username": host_user, "password": host_passwd}
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         hypervisor_config = {
-                'hypervisor_type':hypervisor_type,
-                'hypervisor_server':hypervisor_server,
-                'hypervisor_user':hypervisor_user,
-                'hypervisor_passwd':hypervisor_passwd,
-                'hypervisor_ssh_ip':hypervisor_ssh_ip,
-                'hypervisor_ssh_user':hypervisor_ssh_user,
-                'hypervisor_ssh_passwd':hypervisor_ssh_passwd,
-                'hypervisor_config_file':hypervisor_config_file,
-                'host_ip':host_ip,
-                'host_user':host_user,
-                'host_passwd':host_passwd,
-                'guest_ip':guest_ip,
-                'guest_name':guest_name,
-                'guest_user':guest_user,
-                'guest_passwd':guest_passwd,
-                'ssh_host':ssh_host,
-                'ssh_guest':ssh_guest,
-                }
+            "hypervisor_type": hypervisor_type,
+            "hypervisor_server": hypervisor_server,
+            "hypervisor_user": hypervisor_user,
+            "hypervisor_passwd": hypervisor_passwd,
+            "hypervisor_ssh_ip": hypervisor_ssh_ip,
+            "hypervisor_ssh_user": hypervisor_ssh_user,
+            "hypervisor_ssh_passwd": hypervisor_ssh_passwd,
+            "hypervisor_config_file": hypervisor_config_file,
+            "host_ip": host_ip,
+            "host_user": host_user,
+            "host_passwd": host_passwd,
+            "guest_ip": guest_ip,
+            "guest_name": guest_name,
+            "guest_user": guest_user,
+            "guest_passwd": guest_passwd,
+            "ssh_host": ssh_host,
+            "ssh_guest": ssh_guest,
+        }
         return hypervisor_config
 
     def jenkins_virtwho_install(self, register_type, ssh_host):
         trigger_type = deploy.trigger.type
         rhel_ver = self.rhel_version(ssh_host)
@@ -710,20 +727,22 @@
             cmd = "dbus-uuidgen > /var/lib/dbus/machine-id"
             ret, output = self.runcmd(cmd, ssh_host)
         if rhel_ver == "8":
             cmd = "localectl set-locale en_US.utf8; source /etc/profile.d/lang.sh"
             ret, output = self.runcmd(cmd, ssh_host)
-        cmd = ("rm -rf /var/lib/rpm/__db*; mv /var/lib/rpm /var/lib/rpm.old; rpm --initdb;"
-               "rm -rf /var/lib/rpm; mv /var/lib/rpm.old /var/lib/rpm;"
-               "rm -rf /var/lib/yum/history/*.sqlite; rpm -v --rebuilddb")
+        cmd = (
+            "rm -rf /var/lib/rpm/__db*; mv /var/lib/rpm /var/lib/rpm.old; rpm --initdb;"
+            "rm -rf /var/lib/rpm; mv /var/lib/rpm.old /var/lib/rpm;"
+            "rm -rf /var/lib/yum/history/*.sqlite; rpm -v --rebuilddb"
+        )
         ret, output = self.runcmd(cmd, ssh_host)
         if trigger_type == "trigger-brew":
             pkg_url = deploy.trigger.brew_package
             self.install_virtwho_by_url(ssh_host, pkg_url)
         elif trigger_type == "trigger-gating":
             env = self.ci_msg_parser()
-            pkg_url = env['pkg_url']
+            pkg_url = env["pkg_url"]
             self.install_virtwho_by_url(ssh_host, pkg_url)
         elif trigger_type == "trigger-upstream":
             self.install_virtwho_upstream(ssh_host)
         elif trigger_type == "trigger-satellite":
             self.install_virtwho_sattools(ssh_host, register_type)
@@ -744,145 +763,209 @@
         if "stage" in register_type:
             self.stage_consumer_clean(ssh_host, register_config)
 
     def jenkins_parameter(self, hypervisor_config, register_config, virtwho_build):
         parameter = list()
-        parameter.append('-d TRIGGER_TYPE={0}'.format(deploy.trigger.type))
-        parameter.append('-d VIRTWHO_BUILD={0}'.format(virtwho_build))
-        parameter.append('-d VIRTWHO_HOST_IP={0}'.format(hypervisor_config['host_ip']))
-        parameter.append('-d VIRTWHO_HOST_USER={0}'.format(hypervisor_config['host_user']))
-        parameter.append('-d VIRTWHO_HOST_PASSWD={0}'.format(hypervisor_config['host_passwd']))
-        parameter.append('-d HYPERVISOR_TYPE={0}'.format(hypervisor_config['hypervisor_type']))
-        parameter.append('-d HYPERVISOR_SERVER={0}'.format(hypervisor_config['hypervisor_server']))
-        parameter.append('-d HYPERVISOR_USERNAME={0}'.format(hypervisor_config['hypervisor_user']))
-        parameter.append('-d HYPERVISOR_PASSWORD={0}'.format(hypervisor_config['hypervisor_passwd']))
-        parameter.append('-d HYPERVISOR_SSH_IP={0}'.format(hypervisor_config['hypervisor_ssh_ip']))
-        parameter.append('-d HYPERVISOR_SSH_USER={0}'.format(hypervisor_config['hypervisor_ssh_user']))
-        parameter.append('-d HYPERVISOR_SSH_PASSWD={0}'.format(hypervisor_config['hypervisor_ssh_passwd']))
-        parameter.append('-d HYPERVISOR_CONFIG_FILE={0}'.format(hypervisor_config['hypervisor_config_file']))
-        parameter.append('-d GUEST_IP={0}'.format(hypervisor_config['guest_ip']))
-        parameter.append('-d GUEST_NAME={0}'.format(hypervisor_config['guest_name']))
-        parameter.append('-d GUEST_USER={0}'.format(hypervisor_config['guest_user']))
-        parameter.append('-d GUEST_PASSWD={0}'.format(hypervisor_config['guest_passwd']))
-        parameter.append('-d REGISTER_TYPE={0}'.format(register_config['type']))
-        parameter.append('-d REGISTER_SERVER={0}'.format(register_config['server']))
-        parameter.append('-d REGISTER_OWNER={0}'.format(register_config['owner']))
-        parameter.append('-d REGISTER_ENV={0}'.format(register_config['env']))
-        parameter.append('-d REGISTER_ADMIN_USER={0}'.format(register_config['username']))
-        parameter.append('-d REGISTER_ADMIN_PASSWD={0}'.format(register_config['password']))
-        parameter.append('-d REGISTER_SSH_USER={0}'.format(register_config['ssh_user']))
-        parameter.append('-d REGISTER_SSH_PASSWD={0}'.format(register_config['ssh_passwd']))
+        parameter.append("-d TRIGGER_TYPE={0}".format(deploy.trigger.type))
+        parameter.append("-d VIRTWHO_BUILD={0}".format(virtwho_build))
+        parameter.append("-d VIRTWHO_HOST_IP={0}".format(hypervisor_config["host_ip"]))
+        parameter.append(
+            "-d VIRTWHO_HOST_USER={0}".format(hypervisor_config["host_user"])
+        )
+        parameter.append(
+            "-d VIRTWHO_HOST_PASSWD={0}".format(hypervisor_config["host_passwd"])
+        )
+        parameter.append(
+            "-d HYPERVISOR_TYPE={0}".format(hypervisor_config["hypervisor_type"])
+        )
+        parameter.append(
+            "-d HYPERVISOR_SERVER={0}".format(hypervisor_config["hypervisor_server"])
+        )
+        parameter.append(
+            "-d HYPERVISOR_USERNAME={0}".format(hypervisor_config["hypervisor_user"])
+        )
+        parameter.append(
+            "-d HYPERVISOR_PASSWORD={0}".format(hypervisor_config["hypervisor_passwd"])
+        )
+        parameter.append(
+            "-d HYPERVISOR_SSH_IP={0}".format(hypervisor_config["hypervisor_ssh_ip"])
+        )
+        parameter.append(
+            "-d HYPERVISOR_SSH_USER={0}".format(
+                hypervisor_config["hypervisor_ssh_user"]
+            )
+        )
+        parameter.append(
+            "-d HYPERVISOR_SSH_PASSWD={0}".format(
+                hypervisor_config["hypervisor_ssh_passwd"]
+            )
+        )
+        parameter.append(
+            "-d HYPERVISOR_CONFIG_FILE={0}".format(
+                hypervisor_config["hypervisor_config_file"]
+            )
+        )
+        parameter.append("-d GUEST_IP={0}".format(hypervisor_config["guest_ip"]))
+        parameter.append("-d GUEST_NAME={0}".format(hypervisor_config["guest_name"]))
+        parameter.append("-d GUEST_USER={0}".format(hypervisor_config["guest_user"]))
+        parameter.append(
+            "-d GUEST_PASSWD={0}".format(hypervisor_config["guest_passwd"])
+        )
+        parameter.append("-d REGISTER_TYPE={0}".format(register_config["type"]))
+        parameter.append("-d REGISTER_SERVER={0}".format(register_config["server"]))
+        parameter.append("-d REGISTER_OWNER={0}".format(register_config["owner"]))
+        parameter.append("-d REGISTER_ENV={0}".format(register_config["env"]))
+        parameter.append(
+            "-d REGISTER_ADMIN_USER={0}".format(register_config["username"])
+        )
+        parameter.append(
+            "-d REGISTER_ADMIN_PASSWD={0}".format(register_config["password"])
+        )
+        parameter.append("-d REGISTER_SSH_USER={0}".format(register_config["ssh_user"]))
+        parameter.append(
+            "-d REGISTER_SSH_PASSWD={0}".format(register_config["ssh_passwd"])
+        )
         if deploy.trigger.type == "trigger-gating":
             env = self.ci_msg_parser()
-            rhel_compose = env['rhel_compose']
-            build_id = env['build_id']
-            task_id = env['task_id']
-            pkg_nvr = env['pkg_nvr']
-            owner_name = env['owner_name']
-            source = env['source']
-            parameter.append('-d RHEL_COMPOSE={0}'.format(rhel_compose))
-            parameter.append('-d BREW_BUILD_ID={0}'.format(build_id))
-            parameter.append('-d BREW_TASK_ID={0}'.format(task_id))
-            parameter.append('-d PACKAGE_NVR={0}'.format(pkg_nvr))
-            parameter.append('-d OWNER_NAME={0}'.format(owner_name))
-            parameter.append('-d SOURCE={0}'.format(source))
+            rhel_compose = env["rhel_compose"]
+            build_id = env["build_id"]
+            task_id = env["task_id"]
+            pkg_nvr = env["pkg_nvr"]
+            owner_name = env["owner_name"]
+            source = env["source"]
+            parameter.append("-d RHEL_COMPOSE={0}".format(rhel_compose))
+            parameter.append("-d BREW_BUILD_ID={0}".format(build_id))
+            parameter.append("-d BREW_TASK_ID={0}".format(task_id))
+            parameter.append("-d PACKAGE_NVR={0}".format(pkg_nvr))
+            parameter.append("-d OWNER_NAME={0}".format(owner_name))
+            parameter.append("-d SOURCE={0}".format(source))
         else:
             node_label = self.get_exported_param("NODE_LABEL")
-            parameter.append('-d NODE_LABEL={0}'.format(node_label))
+            parameter.append("-d NODE_LABEL={0}".format(node_label))
             provision_ini = self.get_exported_param("PROVISION_INI")
-            parameter.append('-d PROVISION_INI={0}'.format(provision_ini))
-            parameter.append('-d RHEL_COMPOSE={0}'.format(deploy.trigger.rhel_compose))
-            parameter.append('-d RHEL_COMPOSE_PATH={0}'.format(self.get_exported_param("RHEL_COMPOSE_PATH")))
-            parameter.append('-d TRIGGER_LEVEL={0}'.format(deploy.trigger.level))
-            parameter.append('-d POLARION_REPORT={0}'.format(self.get_exported_param("POLARION_REPORT")))
-            parameter.append('-d PLANNED_IN={0}'.format(self.get_exported_param("PLANNED_IN")))
-        data = ' '.join(parameter)
-        return data 
+            parameter.append("-d PROVISION_INI={0}".format(provision_ini))
+            parameter.append("-d RHEL_COMPOSE={0}".format(deploy.trigger.rhel_compose))
+            parameter.append(
+                "-d RHEL_COMPOSE_PATH={0}".format(
+                    self.get_exported_param("RHEL_COMPOSE_PATH")
+                )
+            )
+            parameter.append("-d TRIGGER_LEVEL={0}".format(deploy.trigger.level))
+            parameter.append(
+                "-d POLARION_REPORT={0}".format(
+                    self.get_exported_param("POLARION_REPORT")
+                )
+            )
+            parameter.append(
+                "-d PLANNED_IN={0}".format(self.get_exported_param("PLANNED_IN"))
+            )
+        data = " ".join(parameter)
+        return data
 
     def jenkins_job_start(self, register_servers, host_ip, guest_ip, job_name):
         jenkins_url = deploy.jenkins.url
         jenkins_user = deploy.jenkins.username
         jenkins_passwd = deploy.jenkins.password
         for register_type, register_server in register_servers.items():
-            hypervisor_config = self.jenkins_hypervisor_config(host_ip, guest_ip, job_name)
-            register_config = self.jenkins_register_config(register_type, register_server, job_name)
-            ssh_host = hypervisor_config['ssh_host']
-            ssh_guest = hypervisor_config['ssh_guest']
+            hypervisor_config = self.jenkins_hypervisor_config(
+                host_ip, guest_ip, job_name
+            )
+            register_config = self.jenkins_register_config(
+                register_type, register_server, job_name
+            )
+            ssh_host = hypervisor_config["ssh_host"]
+            ssh_guest = hypervisor_config["ssh_guest"]
             self.jenkins_job_init(register_type, register_config, ssh_host, ssh_guest)
-            if 'kubevirt' in job_name and self.pkg_check(ssh_host, 'virt-who')[9:15] < '0.24.4':
-                logger.warning("skip kubevirt testing, it's not available for this virt-who version")
+            if (
+                "kubevirt" in job_name
+                and self.pkg_check(ssh_host, "virt-who")[9:15] < "0.24.4"
+            ):
+                logger.warning(
+                    "skip kubevirt testing, it's not available for this virt-who version"
+                )
                 return False
-            if 'kubevirt' in job_name and self.pkg_check(ssh_host, 'virt-who')[9:15] >= '0.24.4':
+            if (
+                "kubevirt" in job_name
+                and self.pkg_check(ssh_host, "virt-who")[9:15] >= "0.24.4"
+            ):
                 kube_config_file = deploy.kubevirt.kube_config_file
                 kube_config_url = deploy.kubevirt.kube_config_url
-                cmd = "rm -f {1}; curl -L {0} -o {1}; sync".format(kube_config_url, kube_config_file)
+                cmd = "rm -f {1}; curl -L {0} -o {1}; sync".format(
+                    kube_config_url, kube_config_file
+                )
                 ret, output = self.runcmd(cmd, ssh_host)
             _, virtwho_build = self.runcmd("rpm -qa virt-who", ssh_host)
-            virtwho_build = virtwho_build.split('.noarch')[0]
-            data = self.jenkins_parameter(hypervisor_config, register_config, virtwho_build)
+            virtwho_build = virtwho_build.split(".noarch")[0]
+            data = self.jenkins_parameter(
+                hypervisor_config, register_config, virtwho_build
+            )
             if deploy.trigger.type == "trigger-gating":
                 job_name = "runtest-gating"
             cmd = "curl -k -s -i -X POST {0}/job/{1}/buildWithParameters --user {2}:{3} {4}".format(
                 deploy.jenkins.url,
                 job_name,
                 deploy.jenkins.username,
                 deploy.jenkins.password,
-                data
+                data,
             )
             job_tips = "{0}+{1}".format(job_name, register_type)
             is_created = ""
             for i in range(3):
                 output = os.popen(cmd).readlines()
-                if 'Location:' in str(output) or 'location:' in str(output):
-                    is_created = 'yes'
+                if "Location:" in str(output) or "location:" in str(output):
+                    is_created = "yes"
                     break
                 logger.info(cmd)
                 logger.warning(output)
-                logger.warning("Failed to post data to create jenkinks job, try again...")
+                logger.warning(
+                    "Failed to post data to create jenkinks job, try again..."
+                )
                 time.sleep(30)
-            if is_created != 'yes':
+            if is_created != "yes":
                 raise FailException("Failed to get jenkins job url")
             job_url = self.jenkins_job_url(output)
-            logger.info("JJB({0})-Job URL: {1}".format(job_tips, job_url)) 
+            logger.info("JJB({0})-Job URL: {1}".format(job_tips, job_url))
             while self.jenkins_job_is_finished(job_url, job_tips) is False:
                 time.sleep(60)
 
     def jenkins_job_url(self, data):
         for line in data:
             if "Location" in line or "location" in line:
-                url = line.split('ocation:')[1].strip()
+                url = line.split("ocation:")[1].strip()
                 break
         cmd = "curl -k -s -u {0}:{1} {2}/api/json".format(
-                deploy.jenkins.username, deploy.jenkins.password, url)
+            deploy.jenkins.username, deploy.jenkins.password, url
+        )
         output = os.popen(cmd).read()
         while "executable" not in output:
             time.sleep(10)
             output = os.popen(cmd).read()
         data = json.loads(output)
-        job_url = data['executable']['url']
+        job_url = data["executable"]["url"]
         return job_url
 
     def jenkins_job_is_finished(self, job_url, job_tips):
         cmd = "curl -k -s -u {0}:{1} {2}/api/json".format(
-                deploy.jenkins.username, deploy.jenkins.password, job_url)
+            deploy.jenkins.username, deploy.jenkins.password, job_url
+        )
         try:
             output = os.popen(cmd).read()
             data = json.loads(output)
-            status = data['result']
+            status = data["result"]
             if status == "" or status == "null" or status is None:
                 return False
             else:
                 logger.info("JJB({0})-Status: {1}".format(job_tips, status))
                 return True
         except Exception as e:
             logger.warning("Failed to check job status by: {0}".format(cmd))
             logger.warning(str(e))
             return False
 
-    #*************************************************
+    # *************************************************
     # Re-install host by update grub for rhel and rhev
-    #*************************************************
+    # *************************************************
     def install_virtwho_by_url(self, ssh_host, pkg_url):
         if self.url_validation(pkg_url) is False:
             raise FailException("package url is not available")
         cmd = "rm -rf /var/cache/yum/; yum clean all; yum remove -y virt-who"
         ret, output = self.runcmd(cmd, ssh_host)
@@ -906,11 +989,13 @@
         if ret != 0:
             raise FailException("Failed to create virt-who package")
 
     def install_virtwho_sattools(self, ssh_host, sat_type):
         sat_ver, rhel_ver = self.satellite_version(sat_type)
-        self.satellite_qa_dogfood_enable(ssh_host, sat_ver, rhel_ver, repo_type="satellite-tools")
+        self.satellite_qa_dogfood_enable(
+            ssh_host, sat_ver, rhel_ver, repo_type="satellite-tools"
+        )
         cmd = "rm -rf /var/cache/yum/; yum clean all; yum remove -y virt-who; yum install -y virt-who"
         ret, output = self.runcmd(cmd, ssh_host)
 
     def install_base_packages(self, ssh_host):
         compose_id = deploy.trigger.rhel_compose
@@ -920,11 +1005,13 @@
             cmd = "yum clean all; yum install -y @core @x11 net-tools virt-who wget git nmap \
                     hostname subscription-manager pexpect expect libvirt-python"
         else:
             cmd = "yum clean all; yum install -y @core @base-x net-tools virt-who wget git nmap expect \
                     hostname subscription-manager python3-pexpect python3-libvirt"
-        status, output = self.run_loop(cmd, ssh_host, desc="install base required packages")
+        status, output = self.run_loop(
+            cmd, ssh_host, desc="install base required packages"
+        )
         if status != "Yes":
             raise FailException("Failed to install base required packages")
         logger.info("Succeeded to install base required packages")
         # uninstall cockpit due to bug https://bugzilla.redhat.com/show_bug.cgi?id=1663812
         self.runcmd("rpm -e cockpit cockpit-ws subscription-manager-cockpit", ssh_host)
@@ -941,294 +1028,368 @@
             epel_url = "{0}/6/x86_64/".format(repo_epel)
         if rhel_ver == "7":
             epel_url = "{0}/7/x86_64/".format(repo_epel)
         if rhel_ver == "8":
             epel_url = "{0}/8/Everything/x86_64/".format(repo_epel)
-        cmd = ('cat <<EOF > /etc/yum.repos.d/epel.repo\n'
-               '[rhel-epel]\n'
-               'name=rhel-epel\n'
-               'baseurl={0}\n'
-               'enabled=1\n'
-               'gpgcheck=0\n'
-               'EOF'
-              ).format(epel_url)
+        cmd = (
+            "cat <<EOF > /etc/yum.repos.d/epel.repo\n"
+            "[rhel-epel]\n"
+            "name=rhel-epel\n"
+            "baseurl={0}\n"
+            "enabled=1\n"
+            "gpgcheck=0\n"
+            "EOF"
+        ).format(epel_url)
         ret, output = self.runcmd(cmd, ssh_host, desc="enable epel repo")
 
     def rhel_compose_url(self, compose_id):
         base_url = deploy.repo.rhel_base
         repo_base = ""
         repo_extra = ""
         compose_path = self.get_exported_param("RHEL_COMPOSE_PATH")
         if compose_path:
             if "RHEL-7" in compose_id:
                 repo_base = f"{compose_path}/{compose_id}/compose/Server/x86_64/os"
-                repo_extra = f"{compose_path}/{compose_id}/compose/Server-optional/x86_64/os"
+                repo_extra = (
+                    f"{compose_path}/{compose_id}/compose/Server-optional/x86_64/os"
+                )
             else:
                 repo_base = f"{compose_path}/{compose_id}/compose/BaseOS/x86_64/os"
                 repo_extra = f"{compose_path}/{compose_id}/compose/AppStream/x86_64/os"
         else:
             if "RHEL-7" in compose_id:
                 if "updates" in compose_id:
                     repo_base = "{0}/rhel-7/rel-eng/updates/RHEL-7/{1}/compose/Server/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                     repo_extra = "{0}/rhel-7/rel-eng/updates/RHEL-7/{1}/compose/Server-optional/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                 elif ".n" in compose_id:
-                    repo_base = "{0}/rhel-7/nightly/RHEL-7/{1}/compose/Server/x86_64/os".format(
-                        base_url, compose_id)
+                    repo_base = (
+                        "{0}/rhel-7/nightly/RHEL-7/{1}/compose/Server/x86_64/os".format(
+                            base_url, compose_id
+                        )
+                    )
                     repo_extra = "{0}/rhel-7/nightly/RHEL-7/{1}/compose/Server-optional/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                 else:
-                    repo_base = "{0}/rhel-7/rel-eng/RHEL-7/{1}/compose/Server/x86_64/os".format(
-                        base_url, compose_id)
+                    repo_base = (
+                        "{0}/rhel-7/rel-eng/RHEL-7/{1}/compose/Server/x86_64/os".format(
+                            base_url, compose_id
+                        )
+                    )
                     repo_extra = "{0}/rhel-7/rel-eng/RHEL-7/{1}/compose/Server-optional/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
             elif "RHEL-8" in compose_id:
                 if "updates" in compose_id or "RHEL-8.4" in compose_id:
                     repo_base = "{0}/rhel-8/nightly/updates/RHEL-8/{1}/compose/BaseOS/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                     repo_extra = "{0}/rhel-8/nightly/updates/RHEL-8/{1}/compose/AppStream/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                 elif ".d" in compose_id:
                     repo_base = "{0}/rhel-8/development/RHEL-8/{1}/compose/BaseOS/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                     repo_extra = "{0}/rhel-8/development/RHEL-8/{1}/compose/AppStream/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                 else:
-                    repo_base = "{0}/rhel-8/nightly/RHEL-8/{1}/compose/BaseOS/x86_64/os".format(
-                        base_url, compose_id)
+                    repo_base = (
+                        "{0}/rhel-8/nightly/RHEL-8/{1}/compose/BaseOS/x86_64/os".format(
+                            base_url, compose_id
+                        )
+                    )
                     repo_extra = "{0}/rhel-8/nightly/RHEL-8/{1}/compose/AppStream/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
             elif "RHEL-9" in compose_id:
                 if ".d" in compose_id:
                     repo_base = "{0}/rhel-9/development/RHEL-9/{1}/compose/BaseOS/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                     repo_extra = "{0}/rhel-9/development/RHEL-9/{1}/compose/AppStream/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
                 else:
-                    repo_base = "{0}/rhel-9/nightly/RHEL-9/{1}/compose/BaseOS/x86_64/os".format(
-                        base_url, compose_id)
+                    repo_base = (
+                        "{0}/rhel-9/nightly/RHEL-9/{1}/compose/BaseOS/x86_64/os".format(
+                            base_url, compose_id
+                        )
+                    )
                     repo_extra = "{0}/rhel-9/nightly/RHEL-9/{1}/compose/AppStream/x86_64/os".format(
-                        base_url, compose_id)
+                        base_url, compose_id
+                    )
         return repo_base, repo_extra
 
     def rhel_compose_repo(self, ssh_host, compose_id, repo_file):
         repo_base, repo_extra = self.rhel_compose_url(compose_id)
-        cmd = ('cat <<EOF > {0}\n'
-               '[{1}]\n'
-               'name={1}\n'
-               'baseurl={2}\n'
-               'enabled=1\n'
-               'gpgcheck=0\n\n'
-               '[{1}-optional]\n'
-               'name={1}-optional\n'
-               'baseurl={3}\n'
-               'enabled=1\n'
-               'gpgcheck=0\n'
-               'EOF'
-              ).format(repo_file, compose_id, repo_base, repo_extra)
+        cmd = (
+            "cat <<EOF > {0}\n"
+            "[{1}]\n"
+            "name={1}\n"
+            "baseurl={2}\n"
+            "enabled=1\n"
+            "gpgcheck=0\n\n"
+            "[{1}-optional]\n"
+            "name={1}-optional\n"
+            "baseurl={3}\n"
+            "enabled=1\n"
+            "gpgcheck=0\n"
+            "EOF"
+        ).format(repo_file, compose_id, repo_base, repo_extra)
         ret, output = self.runcmd(cmd, ssh_host, desc="enable compose repo")
 
-    def rhel_grub_update(self, ssh_host, ks_url, vmlinuz_url, initrd_url, repo_url, is_rhev=False):
+    def rhel_grub_update(
+        self, ssh_host, ks_url, vmlinuz_url, initrd_url, repo_url, is_rhev=False
+    ):
         if self.url_validation(vmlinuz_url) is False:
             raise FailException("vmlinuz_url is not available")
         if self.url_validation(initrd_url) is False:
             raise FailException("initrd_url is not available")
         if self.url_validation(repo_url) is False:
             raise FailException("repo_url is not available")
         menu_title = "rhel-reinstall"
         vmlinuz_name = "vmlinuz-reinstall"
         initrd_name = "initrd-reinstall.img"
-        cmd = "rm -f /boot/%s; curl -L %s -o /boot/%s; sync" % (vmlinuz_name, vmlinuz_url, vmlinuz_name) 
+        cmd = "rm -f /boot/%s; curl -L %s -o /boot/%s; sync" % (
+            vmlinuz_name,
+            vmlinuz_url,
+            vmlinuz_name,
+        )
         ret, output = self.runcmd(cmd, ssh_host, desc="download vmlinux file")
-        cmd = "rm -f /boot/%s; curl -L %s -o /boot/%s; sync" % (initrd_name, initrd_url, initrd_name) 
+        cmd = "rm -f /boot/%s; curl -L %s -o /boot/%s; sync" % (
+            initrd_name,
+            initrd_url,
+            initrd_name,
+        )
         ret, output = self.runcmd(cmd, ssh_host, desc="download initrd file")
         if is_rhev == True:
             repo = "stage2=%s" % repo_url
         else:
-            repo = "repo=%s" % repo_url 
+            repo = "repo=%s" % repo_url
         rhel_ver = self.rhel_version(ssh_host)
         if rhel_ver == "6":
-            cmd = ('cat <<EOF > /boot/grub/grub.conf\n'
-                   'default=0\n'
-                   'timeout=5\n'
-                   'splashimage=(hd0,0)/grub/splash.xpm.gz\n'
-                   'hiddenmenu\n'
-                   'title %s\n'
-                   'root (hd0,0)\n'
-                   'kernel /%s ksdevice=bootif ip=dhcp ks=%s %s quiet LANG=en_US.UTF-8 acpi=off\n'
-                   'initrd /%s\n'
-                   'EOF'
-                  ) % (menu_title, vmlinuz_name, ks_url, repo, initrd_name)
+            cmd = (
+                "cat <<EOF > /boot/grub/grub.conf\n"
+                "default=0\n"
+                "timeout=5\n"
+                "splashimage=(hd0,0)/grub/splash.xpm.gz\n"
+                "hiddenmenu\n"
+                "title %s\n"
+                "root (hd0,0)\n"
+                "kernel /%s ksdevice=bootif ip=dhcp ks=%s %s quiet LANG=en_US.UTF-8 acpi=off\n"
+                "initrd /%s\n"
+                "EOF"
+            ) % (menu_title, vmlinuz_name, ks_url, repo, initrd_name)
             ret, output = self.runcmd(cmd, ssh_host, desc="update grub menuentry")
         else:
-            cmd = ('cat <<EOF > /etc/grub.d/40_custom\n'
-                   '#!/bin/sh\n'
-                   'exec tail -n +3 \$0\n'
-                   "menuentry '%s' --class red --class gnu-linux --class gnu --class os {\n"
-                   'load_video\n'
-                   'set gfxpayload=keep\n'
-                   'insmod gzio\n'
-                   'insmod part_msdos\n'
-                   'insmod xfs\n'
-                   'set root="hd0,msdos1"\n'
-                   'linux16 /%s ksdevice=bootif ip=dhcp ks=%s %s quiet LANG=en_US.UTF-8 acpi=off\n'
-                   'initrd16 /%s\n'
-                   '}\n'
-                   'EOF'
-                  ) % (menu_title, vmlinuz_name, ks_url, repo, initrd_name)
+            cmd = (
+                "cat <<EOF > /etc/grub.d/40_custom\n"
+                "#!/bin/sh\n"
+                "exec tail -n +3 \$0\n"
+                "menuentry '%s' --class red --class gnu-linux --class gnu --class os {\n"
+                "load_video\n"
+                "set gfxpayload=keep\n"
+                "insmod gzio\n"
+                "insmod part_msdos\n"
+                "insmod xfs\n"
+                'set root="hd0,msdos1"\n'
+                "linux16 /%s ksdevice=bootif ip=dhcp ks=%s %s quiet LANG=en_US.UTF-8 acpi=off\n"
+                "initrd16 /%s\n"
+                "}\n"
+                "EOF"
+            ) % (menu_title, vmlinuz_name, ks_url, repo, initrd_name)
             ret, output = self.runcmd(cmd, ssh_host, desc="update grub menuentry")
             cmd = "grub2-mkconfig -o /boot/grub2/grub.cfg"
             ret, output = self.runcmd(cmd, ssh_host, desc="grub2-mkconfig")
             cmd = 'grub2-set-default "%s"; grub2-editenv list' % menu_title
             ret, output = self.runcmd(cmd, ssh_host, desc="grub2-set-default")
         time.sleep(60)
         cmd = "sync;sync;sync;sync;reboot -f && exit"
-        ret, output = self.runcmd(cmd, ssh_host, desc="reboot for re-install", timeout=3)
+        ret, output = self.runcmd(
+            cmd, ssh_host, desc="reboot for re-install", timeout=3
+        )
         time.sleep(60)
 
     def rhel_install_by_grub(self, ssh_host, compose_id):
-        random_str = ''.join(random.sample(string.ascii_letters + string.digits, 8))
+        random_str = "".join(random.sample(string.ascii_letters + string.digits, 8))
         nfs_server = deploy.nfs.server
         nfs_server_user = deploy.nfs.server_user
         nfs_server_passwd = deploy.nfs.server_passwd
         nfs_rhel_url = deploy.nfs.rhel_url
         nfs_rhel_mount = deploy.nfs.rhel_mount
-        ssh_nfs = {"host":nfs_server,"username":nfs_server_user,"password":nfs_server_passwd}
+        ssh_nfs = {
+            "host": nfs_server,
+            "username": nfs_server_user,
+            "password": nfs_server_passwd,
+        }
         ks_name = "{0}.cfg".format(random_str)
         ks_url = "{0}/{1}".format(nfs_rhel_url, ks_name)
         ks_path = "{0}/{1}".format(nfs_rhel_mount, ks_name)
         repo_base, repo_extra = self.rhel_compose_url(compose_id)
-        cmd = ('cat <<EOF > {0}\n'
-               'text\n'
-               'bootloader --location=mbr\n'
-               'lang en_US.UTF-8\n'
-               'keyboard us\n'
-               'network  --bootproto=dhcp --activate\n'
-               'rootpw --plaintext {1}\n'
-               'firewall --disabled\n'
-               'selinux --disabled\n'
-               'timezone Asia/Shanghai\n'
-               'zerombr\n'
-               'clearpart --all --initlabel\n'
-               'autopart\n'
-               'reboot\n'
-               'repo --name=base --baseurl={2}\n'
-               'repo --name=extra --baseurl={3}\n'
-               '%packages --ignoremissing\n'
-               '@base\n'
-               '%end\n'
-               '%post\n'
-               'sed -i "s/#*PermitRootLogin.*/PermitRootLogin yes/g" /etc/ssh/sshd_config\n'
-               'sed -i "s@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g" /etc/pam.d/sshd\n'
-               '%end\n'
-               'EOF'
-              ).format(ks_path, ssh_host['password'], repo_base, repo_extra)
+        cmd = (
+            "cat <<EOF > {0}\n"
+            "text\n"
+            "bootloader --location=mbr\n"
+            "lang en_US.UTF-8\n"
+            "keyboard us\n"
+            "network  --bootproto=dhcp --activate\n"
+            "rootpw --plaintext {1}\n"
+            "firewall --disabled\n"
+            "selinux --disabled\n"
+            "timezone Asia/Shanghai\n"
+            "zerombr\n"
+            "clearpart --all --initlabel\n"
+            "autopart\n"
+            "reboot\n"
+            "repo --name=base --baseurl={2}\n"
+            "repo --name=extra --baseurl={3}\n"
+            "%packages --ignoremissing\n"
+            "@base\n"
+            "%end\n"
+            "%post\n"
+            'sed -i "s/#*PermitRootLogin.*/PermitRootLogin yes/g" /etc/ssh/sshd_config\n'
+            'sed -i "s@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g" /etc/pam.d/sshd\n'
+            "%end\n"
+            "EOF"
+        ).format(ks_path, ssh_host["password"], repo_base, repo_extra)
         ks_iscreated = ""
         for i in range(10):
             ret, output = self.runcmd(cmd, ssh_nfs, desc="create ks file")
-            ret, output = self.runcmd("ls {0}".format(ks_path), ssh_nfs, desc="check ks file created")
+            ret, output = self.runcmd(
+                "ls {0}".format(ks_path), ssh_nfs, desc="check ks file created"
+            )
             if ret == 0:
                 logger.info("Succeeded to create ks file: {0}".format(ks_url))
                 ks_iscreated = "Yes"
                 break
             time.sleep(10)
         if ks_iscreated != "Yes":
             raise FailException("Failed to create ks file: {0}".format(ks_url))
         vmlinuz_url = "{0}/isolinux/vmlinuz".format(repo_base)
         initrd_url = "{0}/isolinux/initrd.img".format(repo_base)
         try:
-            self.rhel_grub_update(ssh_host, ks_url, vmlinuz_url, initrd_url, repo_base, is_rhev=False)
+            self.rhel_grub_update(
+                ssh_host, ks_url, vmlinuz_url, initrd_url, repo_base, is_rhev=False
+            )
             if self.ssh_is_connected(ssh_host):
-                self.rhel_compose_repo(ssh_host, compose_id, "/etc/yum.repos.d/compose.repo")
+                self.rhel_compose_repo(
+                    ssh_host, compose_id, "/etc/yum.repos.d/compose.repo"
+                )
                 self.install_base_packages(ssh_host)
         except Exception as e:
             logger.error(e)
         finally:
             cmd = "rm -rf %s" % (ks_path)
-            ret, output = self.runcmd(cmd, ssh_nfs, desc="clean ks file") 
+            ret, output = self.runcmd(cmd, ssh_nfs, desc="clean ks file")
 
     def rhev_install_by_grub(self, ssh_host, iso_url):
         if self.url_validation(iso_url) is False:
             raise FailException("iso_url is not available")
-        random_dir = ''.join(random.sample(string.ascii_letters + string.digits, 8))
+        random_dir = "".join(random.sample(string.ascii_letters + string.digits, 8))
         nfs_server = deploy.nfs.server
         nfs_server_user = deploy.nfs.server_user
         nfs_server_passwd = deploy.nfs.server_passwd
         nfs_rhev_url = deploy.nfs.rhev_url
         nfs_rhev_mount = deploy.nfs.rhev_mount
-        ssh_nfs = {"host":nfs_server,"username":nfs_server_user,"password":nfs_server_passwd}
+        ssh_nfs = {
+            "host": nfs_server,
+            "username": nfs_server_user,
+            "password": nfs_server_passwd,
+        }
         ks_name = "rhev.ks"
         img_name = "squashfs.img"
         workspace = "{0}/{1}/".format(nfs_rhev_mount, random_dir)
         mnt_path = "{0}/mnt/".format(workspace)
-        tmp_path  = "{0}/tmp/".format(workspace)
+        tmp_path = "{0}/tmp/".format(workspace)
         img_path = "{0}/{1}".format(workspace, img_name)
         ks_path = "{0}/{1}".format(workspace, ks_name)
         ks_url = "{0}/{1}/{2}".format(nfs_rhev_url, random_dir, ks_name)
         iso_path = "{0}/rhevh.iso".format(workspace)
         try:
-            cmd = "rm -rf {0}; mkdir {0}; mkdir {1} {2}".format(workspace, tmp_path, mnt_path)
-            ret, output = self.runcmd(cmd, ssh_nfs, desc="create dir for mount") 
+            cmd = "rm -rf {0}; mkdir {0}; mkdir {1} {2}".format(
+                workspace, tmp_path, mnt_path
+            )
+            ret, output = self.runcmd(cmd, ssh_nfs, desc="create dir for mount")
             cmd = "curl -L {0} -o {1}".format(iso_url, iso_path)
             ret, output = self.runcmd(cmd, ssh_nfs, desc="download iso to nfs server")
             cmd = "mount -o loop {0} {1}".format(iso_path, mnt_path)
-            ret, output = self.runcmd(cmd, ssh_nfs, desc="mount iso") 
-            cmd = "cd {0}; rpm2cpio {1}/Packages/redhat-virtualization-host-image-update* |cpio -ivd".format(tmp_path, mnt_path)
-            ret, output = self.runcmd(cmd, ssh_nfs, desc="rpm2cpio to get squashfs.img") 
-            cmd = "cd {0}; find|grep squashfs|grep -v meta | xargs -I {} cp {} {1}".format(tmp_path, img_path)
-            ret, output = self.runcmd(cmd, ssh_nfs, desc="copy squashfs.img") 
+            ret, output = self.runcmd(cmd, ssh_nfs, desc="mount iso")
+            cmd = "cd {0}; rpm2cpio {1}/Packages/redhat-virtualization-host-image-update* |cpio -ivd".format(
+                tmp_path, mnt_path
+            )
+            ret, output = self.runcmd(cmd, ssh_nfs, desc="rpm2cpio to get squashfs.img")
+            cmd = "cd {0}; find|grep squashfs|grep -v meta | xargs -I {} cp {} {1}".format(
+                tmp_path, img_path
+            )
+            ret, output = self.runcmd(cmd, ssh_nfs, desc="copy squashfs.img")
             img_url = "{0}/{1}/{2}".format(nfs_rhev_url, random_dir, img_name)
-            cmd = ('cat <<EOF > {0}\n'
-                   'liveimg --url={1}\n'
-                   'clearpart --all\n'
-                   'autopart --type=thinp\n'
-                   'rootpw --plaintext {2}\n'
-                   'timezone --utc Asia/Harbin\n'
-                   'zerombr\n'
-                   'text\n'
-                   'reboot\n'
-                   '%post --erroronfail\n'
-                   'imgbase layout --init\n'
-                   '%end\n'
-                   'EOF'
-                  ).format(ks_path, img_url, ssh_host['password'])
+            cmd = (
+                "cat <<EOF > {0}\n"
+                "liveimg --url={1}\n"
+                "clearpart --all\n"
+                "autopart --type=thinp\n"
+                "rootpw --plaintext {2}\n"
+                "timezone --utc Asia/Harbin\n"
+                "zerombr\n"
+                "text\n"
+                "reboot\n"
+                "%post --erroronfail\n"
+                "imgbase layout --init\n"
+                "%end\n"
+                "EOF"
+            ).format(ks_path, img_url, ssh_host["password"])
             ks_iscreated = ""
             for i in range(10):
                 ret, output = self.runcmd(cmd, ssh_nfs, desc="create ks file")
-                ret, output = self.runcmd("ls {0}".format(ks_path), ssh_nfs, desc="check ks file created")
+                ret, output = self.runcmd(
+                    "ls {0}".format(ks_path), ssh_nfs, desc="check ks file created"
+                )
                 if ret == 0:
                     logger.info("Succeeded to create ks file: {0}".format(ks_url))
                     ks_iscreated = "Yes"
                     break
                 time.sleep(10)
             if ks_iscreated != "Yes":
                 raise FailException("Failed to create ks file: {0}".format(ks_url))
             repo_url = "{0}/{1}/mnt/".format(nfs_rhev_url, random_dir)
-            vmlinuz_url = "{0}/{1}/mnt/isolinux/vmlinuz".format(nfs_rhev_url, random_dir)
-            initrd_url = "{0}/{1}/mnt/isolinux/initrd.img".format(nfs_rhev_url, random_dir)
-            self.rhel_grub_update(ssh_host, ks_url, vmlinuz_url, initrd_url, repo_url, is_rhev=True)
+            vmlinuz_url = "{0}/{1}/mnt/isolinux/vmlinuz".format(
+                nfs_rhev_url, random_dir
+            )
+            initrd_url = "{0}/{1}/mnt/isolinux/initrd.img".format(
+                nfs_rhev_url, random_dir
+            )
+            self.rhel_grub_update(
+                ssh_host, ks_url, vmlinuz_url, initrd_url, repo_url, is_rhev=True
+            )
             self.ssh_is_connected(ssh_host)
         except Exception as e:
             logger.error(e)
         finally:
             cmd = "umount {0}; rm -rf {1}".format(mnt_path, workspace)
-            ret, output = self.runcmd(cmd, ssh_nfs, desc="clean rhev iso and image") 
-
-    #*********************************************
+            ret, output = self.runcmd(cmd, ssh_nfs, desc="clean rhev iso and image")
+
+    # *********************************************
     # Beaker Client Function for provision
-    #*********************************************
+    # *********************************************
     def runcmd_beaker(self, cmd, timeout=None, desc="run cmd on beaker"):
-        ssh_bkr ={
-                "host" : deploy.beaker.client,
-                "username" : deploy.beaker.client_user,
-                "password" : deploy.beaker.client_passwd,
-                }
+        ssh_bkr = {
+            "host": deploy.beaker.client,
+            "username": deploy.beaker.client_user,
+            "password": deploy.beaker.client_passwd,
+        }
         return self.runcmd(cmd, ssh_bkr, timeout, desc)
 
     def beaker_kinit(self):
-        cmd = "kinit -k -t {0} {1}".format(deploy.beaker.keytab, deploy.beaker.principal)
+        cmd = "kinit -k -t {0} {1}".format(
+            deploy.beaker.keytab, deploy.beaker.principal
+        )
         ret, output = self.runcmd_beaker(cmd, desc="beaker client kinit")
         if ret == 0:
             cmd = "bkr whoami"
             ret, output = self.runcmd_beaker(cmd, desc="bkr whoami test")
             return True
@@ -1240,26 +1401,31 @@
         whiteboard = '''--whiteboard="reserve host for {0}"'''.format(job_name)
         reserve = "--reserve --reserve-duration 259200 --priority Urgent"
         job_group = "--job-group=virt-who-ci-server-group"
         if os_type == "virtual":
             satellite_vm = f'''--hostrequire "<and><system><name op='like' value='{deploy.trigger.satellite_host}'/></system></and>"'''
-            hostrequire = '''{0} --hostrequire "hypervisor!=" --hostrequire "memory > 7000"'''.format(satellite_vm)
-        else:
-            hostrequire = '''--hostrequire "hypervisor=" --hostrequire "memory > 7000"'''
-        cmd = '''bkr workflow-simple --prettyxml --variant={0} --arch={1} --distro={2} {3} {4} {5} {6} {7}'''\
-                .format(variant, arch, distro, task, whiteboard, job_group, hostrequire, reserve) 
+            hostrequire = '''{0} --hostrequire "hypervisor!=" --hostrequire "memory > 7000"'''.format(
+                satellite_vm
+            )
+        else:
+            hostrequire = (
+                '''--hostrequire "hypervisor=" --hostrequire "memory > 7000"'''
+            )
+        cmd = """bkr workflow-simple --prettyxml --variant={0} --arch={1} --distro={2} {3} {4} {5} {6} {7}""".format(
+            variant, arch, distro, task, whiteboard, job_group, hostrequire, reserve
+        )
         ret, output = self.runcmd_beaker(cmd, desc="provsion host from beaker")
         if ret == 0 and "Submitted" in output:
             logger.info("Succeeded to submit beaker job: {0}".format(job_name))
             job_id = re.findall(r"Submitted: \['(.*?)'", output)[0]
             return job_id
         else:
             raise FailException("Failed to submit beaker job {0}".format(job_name))
 
     def beaker_Jstatus(self, jobs):
         job_status = list()
-        for job_name,job_id in jobs.items():
+        for job_name, job_id in jobs.items():
             cmd = "bkr job-results {0} --no-logs".format(job_id)
             ret, output = self.runcmd_beaker(cmd, desc="check beaker job status")
             if 'status="Aborted"' in output:
                 job_status.append("Aborted")
             elif 'status="Completed"' in output:
@@ -1274,43 +1440,49 @@
         else:
             return False
 
     def beaker_Jresult(self, jobs):
         job_passed = dict()
-        for job_name,job_id in jobs.items():
+        for job_name, job_id in jobs.items():
             cmd = "bkr job-results {0} --no-logs".format(job_id)
             ret, output = self.runcmd_beaker(cmd, desc="check beaker job result")
             if ret == 0 and 'status="Completed"' in output:
                 output = re.findall(r'system="(.*?)"', output)
                 if len(output) > 0:
                     job_passed[job_name] = output[0]
             else:
-                logger.error("No available machines found for job [{0}: {1}]".format(job_name, job_id))
+                logger.error(
+                    "No available machines found for job [{0}: {1}]".format(
+                        job_name, job_id
+                    )
+                )
         return job_passed
 
     def beaker_compose_setup(self, compose_id, arch_type):
         jobs = dict()
         job_name = "virtwho-host-%s" % arch_type
         os_type = "physical"
-        variant = arch_type.split('-')[0]
-        arch = arch_type.split('-')[1]
+        variant = arch_type.split("-")[0]
+        arch = arch_type.split("-")[1]
         distro = compose_id
         job_id = self.beaker_Jsubmit(os_type, variant, arch, distro, job_name)
         jobs[job_name] = job_id
-        while(self.beaker_Jstatus(jobs)):
+        while self.beaker_Jstatus(jobs):
             logger.info("Sleep 60s to check the beaker job status again")
             time.sleep(60)
         job_passed = self.beaker_Jresult(jobs)
         if job_passed:
             for job_name, host_ip in job_passed.items():
                 return host_ip
         else:
-            raise FailException("Failed to provision beaker host for job: {0}".format(job_name))
-
-    #*********************************************
+            raise FailException(
+                "Failed to provision beaker host for job: {0}".format(job_name)
+            )
+
+    # *********************************************
     # Provision Satellite
-    #*********************************************
+    # *********************************************
     def satellite_machines(self, sat_list):
         jobs = dict()
         for job_name in sat_list:
             os_type = "virtual"
             variant = "Server"
@@ -1324,11 +1496,11 @@
                 variant = "BaseOS"
             distro = compose_id
             job_id = self.beaker_Jsubmit(os_type, variant, arch, distro, job_name)
             jobs[job_name] = job_id
         logger.info(jobs)
-        while(self.beaker_Jstatus(jobs)):
+        while self.beaker_Jstatus(jobs):
             time.sleep(60)
         job_passed = self.beaker_Jresult(jobs)
         return job_passed
 
     def satellite_version(self, sat_type):
@@ -1366,203 +1538,270 @@
             rhel_ver = "7"
         elif "rhel8" in sat_type or "rhel-8" in sat_type:
             rhel_ver = "8"
         else:
             raise FailException("Unknown rhel version")
-        logger.info("Succeed to get the satellite version: {0}, RHEL version: {1}".format(sat_ver, rhel_ver))
+        logger.info(
+            "Succeed to get the satellite version: {0}, RHEL version: {1}".format(
+                sat_ver, rhel_ver
+            )
+        )
         return sat_ver, rhel_ver
 
     def satellite_cdn_pool_attach(self, ssh_sat):
         pool_id = deploy.register.satellite_sku
-        sat_host = ssh_sat['host']
+        sat_host = ssh_sat["host"]
         cmd = "subscription-manager subscribe --pool={0}".format(pool_id)
         for i in range(10):
             ret, output = self.runcmd(cmd, ssh_sat, desc="attach Satellite Pool")
             if ret == 0 or "has already had the subscription" in output:
                 logger.info("Succeeded to attach Satellite Pool({0})".format(sat_host))
                 return True
-            logger.warning("Failed to attach Satellite Pool({0}), try again after 30s...".format(sat_host))
+            logger.warning(
+                "Failed to attach Satellite Pool({0}), try again after 30s...".format(
+                    sat_host
+                )
+            )
             cmd = "subscription-manager remove --pool={0}".format(pool_id)
             ret, output = self.runcmd(cmd, ssh_sat, desc="remove Satellite Pool")
             time.sleep(30)
         raise FailException("Failed to attach Satellite Pool({0})".format(sat_host))
 
     def satellite_cdn_repo_enable(self, ssh_sat, sat_ver, rhel_ver):
-        sat_host = ssh_sat['host']
+        sat_host = ssh_sat["host"]
         cmd = "subscription-manager repos \
                 --enable=rhel-{0}-server-satellite-maintenance-6-rpms \
                 --enable=rhel-{0}-server-satellite-{1}-rpms \
-                --enable=rhel-{0}-server-ansible-2.9-rpms".format(rhel_ver, sat_ver)
-        if rhel_ver == '8':
+                --enable=rhel-{0}-server-ansible-2.9-rpms".format(
+            rhel_ver, sat_ver
+        )
+        if rhel_ver == "8":
             cmd = "subscription-manager repos \
                     --enable=satellite-{0}-for-rhel-8-x86_64-rpms \
-                    --enable=satellite-maintenance-{0}-for-rhel-8-x86_64-rpms".format(sat_ver)
+                    --enable=satellite-maintenance-{0}-for-rhel-8-x86_64-rpms".format(
+                sat_ver
+            )
         status, output = self.run_loop(cmd, ssh_sat, desc="enable satellite repos")
         if status != "Yes":
-            raise FailException("Failed to enable satellite repos({0})".format(sat_host))
+            raise FailException(
+                "Failed to enable satellite repos({0})".format(sat_host)
+            )
         if rhel_ver == "8":
             cmd = "dnf -y module enable satellite:el8"
             _, _ = self.runcmd("dnf -y module enable satellite:el8", ssh_sat)
         logger.info("Succeeded to enable satellite repos({0})".format(sat_host))
 
     def satellite_cdn_repo_config(self, ssh_sat, sat_ver, rhel_ver):
-        sat_host = ssh_sat['host']
+        sat_host = ssh_sat["host"]
         cmd = "subscription-manager repos \
                 --enable=rhel-{0}-for-x86_64-baseos-rpms \
                 --enable=rhel-{0}-for-x86_64-appstream-rpms \
                 --enable=satellite-{1}-for-rhel-{0}-x86_64-rpms \
-                --enable=satellite-maintenance-{1}-for-rhel-{0}-x86_64-rpms".format(rhel_ver, sat_ver)
+                --enable=satellite-maintenance-{1}-for-rhel-{0}-x86_64-rpms".format(
+            rhel_ver, sat_ver
+        )
         status, output = self.run_loop(cmd, ssh_sat, desc="enable satellite repos")
         if status != "Yes":
-            raise FailException("Failed to enable satellite repos({0})".format(sat_host))
+            raise FailException(
+                "Failed to enable satellite repos({0})".format(sat_host)
+            )
         logger.info("Succeeded to enable satellite repos({0})".format(sat_host))
         if rhel_ver == "8":
             cmd = "dnf -y module enable satellite:el8"
             _, output = self.runcmd(cmd, ssh_sat, desc="enable satellite rhel8 module")
 
-    def satellite_qa_dogfood_enable(self, ssh_sat, sat_ver, rhel_ver, repo_type="satellite"):
-        '''repo_type should be one of them: satellite, capsule, satellite-tools'''
+    def satellite_qa_dogfood_enable(
+        self, ssh_sat, sat_ver, rhel_ver, repo_type="satellite"
+    ):
+        """repo_type should be one of them: satellite, capsule, satellite-tools"""
         repo = deploy.repo.rhel_sat
         for i in range(3):
             cmd = "subscription-manager unregister"
             ret, output = self.runcmd(cmd, ssh_sat, desc="sub-man unregister")
             cmd = "subscription-manager clean"
             ret, output = self.runcmd(cmd, ssh_sat, desc="sub-man clean")
             cmd = "rpm -qa | grep katello-ca-consumer | xargs rpm -e |sort"
-            ret, output = self.runcmd(cmd, ssh_sat, desc="uninstall katello-ca-consumer")
+            ret, output = self.runcmd(
+                cmd, ssh_sat, desc="uninstall katello-ca-consumer"
+            )
             cmd = "yum -y localinstall {0}".format(repo)
             ret, output = self.runcmd(cmd, ssh_sat, desc="install katello-ca")
-            cmd = "subscription-manager register --org Sat6-CI --activationkey '%s-%s-qa-rhel%s'" % (repo_type, sat_ver, rhel_ver)
+            cmd = (
+                "subscription-manager register --org Sat6-CI --activationkey '%s-%s-qa-rhel%s'"
+                % (repo_type, sat_ver, rhel_ver)
+            )
             ret, output = self.runcmd(cmd, ssh_sat, desc="register and enable repo")
             if rhel_ver == "8":
                 cmd = "dnf -y module enable satellite:el8"
-                _, output = self.runcmd(cmd, ssh_sat, desc="enable satellite rhel8 module")
+                _, output = self.runcmd(
+                    cmd, ssh_sat, desc="enable satellite rhel8 module"
+                )
             if ret == 0:
                 cmd = "subscription-manager attach --pool 8a88800f5ca45116015cc807610319ed"
-                ret, output = self.runcmd(cmd, ssh_sat, desc="attach Satellite Maintenance Composes")
+                ret, output = self.runcmd(
+                    cmd, ssh_sat, desc="attach Satellite Maintenance Composes"
+                )
                 return True
             time.sleep(15)
         logger.error("Failed to enable satellite qa repo")
         return False
 
     def satellite_repo_enable(self, ssh_sat, sat_ver, rhel_ver):
-        '''enable satellite repo'''
+        """enable satellite repo"""
         if rhel_ver == "7":
             cmd = "subscription-manager repos --disable=*; subscription-manager repos \
             --enable=rhel-{0}-server-rpms \
             --enable=rhel-server-rhscl-{0}-rpms \
-            --enable=rhel-{0}-server-ansible-2.9-rpms".format(rhel_ver)
+            --enable=rhel-{0}-server-ansible-2.9-rpms".format(
+                rhel_ver
+            )
         elif rhel_ver == "8":
             cmd = "subscription-manager repos --disable=*; subscription-manager repos \
             --enable=rhel-{0}-for-x86_64-baseos-rpms \
-            --enable=rhel-{0}-for-x86_64-appstream-rpms".format(rhel_ver)
+            --enable=rhel-{0}-for-x86_64-appstream-rpms".format(
+                rhel_ver
+            )
         status, output = self.run_loop(cmd, ssh_sat, desc="enable satellite repos")
         if status != "Yes":
             raise FailException("Failed to enable satellite repos({0})".format(ssh_sat))
         logger.info("Succeeded to enable satellite repos".format(ssh_sat))
         cmd = "curl -o /etc/pki/ca-trust/source/anchors/satellite-sat-engineering-ca.crt http://satellite.sat.engineering.redhat.com/pub/katello-server-ca.crt; update-ca-trust"
         status, output = self.run_loop(cmd, ssh_sat, desc="update ca cert")
         if status != "Yes":
             raise FailException("Failed to update ca cert)".format(ssh_sat))
         logger.info("Succeeded to update ca cert".format(ssh_sat))
         cmd = "curl -o /etc/yum.repos.d/satellite.repo http://ohsnap.sat.engineering.redhat.com/api/releases/{0}.0/el{1}/satellite/repo_file".format(
-            sat_ver, rhel_ver)
+            sat_ver, rhel_ver
+        )
         status, output = self.run_loop(cmd, ssh_sat, desc="get satellite repo_file")
         if status != "Yes":
             raise FailException("Failed to get satellite repo_file)".format(ssh_sat))
         logger.info("Succeeded to get satellite repo_file".format(ssh_sat))
         if rhel_ver == "8":
             cmd = "dnf -y module enable satellite:el8"
             _, output = self.runcmd(cmd, ssh_sat, desc="enable satellite rhel8 module")
 
     def satellite_pkg_install(self, ssh_sat):
-        sat_host = ssh_sat['host']
+        sat_host = ssh_sat["host"]
         logger.info("Start to install satellite package({0})".format(sat_host))
         for i in range(3):
             cmd = "rm -f /var/lib/rpm/__db*; rpm --rebuilddb; rm -rf /var/lib/yum/history/*.sqlite; rm -fr /var/cache/yum/*; yum clean all"
-            ret, output = self.runcmd(cmd, ssh_sat, desc="clean yum history and rebuilddb")
+            ret, output = self.runcmd(
+                cmd, ssh_sat, desc="clean yum history and rebuilddb"
+            )
             cmd = "yum install -y satellite"
             ret, output = self.runcmd(cmd, ssh_sat, desc="install satellite packages")
             if ret == 0:
-                logger.info("Succeeded to install satellite package({0})".format(sat_host))
+                logger.info(
+                    "Succeeded to install satellite package({0})".format(sat_host)
+                )
                 return True
         raise FailException("Failed to install satellite package({0})".format(sat_host))
 
-    def satellite_deploy(self, ssh_sat, admin_user, admin_passwd, manifest_url, sat_ver):
-        sat_host = ssh_sat['host']
+    def satellite_deploy(
+        self, ssh_sat, admin_user, admin_passwd, manifest_url, sat_ver
+    ):
+        sat_host = ssh_sat["host"]
         manifest_path = "/tmp/manifest"
-        ret, output = self.runcmd("rm -rf {0}; mkdir -p {0}".format(manifest_path), ssh_sat)
-        ret, output = self.runcmd("wget {0} -P {1}".format(manifest_url, manifest_path), ssh_sat)
+        ret, output = self.runcmd(
+            "rm -rf {0}; mkdir -p {0}".format(manifest_path), ssh_sat
+        )
+        ret, output = self.runcmd(
+            "wget {0} -P {1}".format(manifest_url, manifest_path), ssh_sat
+        )
         ret, output = self.runcmd("ls {0}".format(manifest_path), ssh_sat)
         if output is not None:
             manifest_filename = "{0}/{1}".format(manifest_path, output.strip())
         else:
             raise FailException("No manifest file found")
-        options = "--disable-system-checks --foreman-initial-admin-password={0}".format(admin_passwd)
+        options = "--disable-system-checks --foreman-initial-admin-password={0}".format(
+            admin_passwd
+        )
         cmd = "satellite-installer --scenario satellite {0}".format(options)
         ret, output = self.runcmd(cmd, ssh_sat)
         if ret != 0:
             cmd = "for i in pulp_resource_manager pulp_workers pulp_celerybeat; do service $i stop; done"
             ret, output = self.runcmd(cmd, ssh_sat)
             cmd = "sudo -u apache pulp-manage-db"
             ret, output = self.runcmd(cmd, ssh_sat)
-            cmd = "echo y |satellite-installer --reset --scenario satellite {0}".format(options)
+            cmd = "echo y |satellite-installer --reset --scenario satellite {0}".format(
+                options
+            )
             ret, output = self.runcmd(cmd, ssh_sat)
             if ret != 0:
-                raise FailException("Failed to satellite-installer --scenario satellite({0})".format(sat_host))
-        logger.info("Succeeded to run satellite-installer --scenario satellite({0})".format(sat_host))
+                raise FailException(
+                    "Failed to satellite-installer --scenario satellite({0})".format(
+                        sat_host
+                    )
+                )
+        logger.info(
+            "Succeeded to run satellite-installer --scenario satellite({0})".format(
+                sat_host
+            )
+        )
         upload_manifest = "hammer -u {0} -p {1} subscription upload --organization-label Default_Organization --file {2}".format(
-                admin_user, admin_passwd, manifest_filename)
+            admin_user, admin_passwd, manifest_filename
+        )
         delete_manifest = "hammer -u {0} -p {1} subscription delete-manifest --organization-label Default_Organization".format(
-                admin_user, admin_passwd)
-        is_uploaded = ''
+            admin_user, admin_passwd
+        )
+        is_uploaded = ""
         for i in range(3):
             ret, output = self.runcmd(upload_manifest, ssh_sat)
             if ret == 0:
-                is_uploaded = 'yes'
-                logger.info("Succeeded to upload manifest to satellite({0})".format(sat_host))
+                is_uploaded = "yes"
+                logger.info(
+                    "Succeeded to upload manifest to satellite({0})".format(sat_host)
+                )
                 break
             time.sleep(15)
             self.runcmd(delete_manifest, ssh_sat)
-        if is_uploaded != 'yes':
+        if is_uploaded != "yes":
             raise FailException("Failed to upload manifest")
-        cmd = 'hammer -u {0} -p {1} subscription refresh-manifest --organization="Default Organization"'.format(admin_user, admin_passwd)
+        cmd = 'hammer -u {0} -p {1} subscription refresh-manifest --organization="Default Organization"'.format(
+            admin_user, admin_passwd
+        )
         status, output = self.run_loop(cmd, ssh_sat, desc="manifest refresh")
         if status != "Yes":
-            raise FailException("Failed to refresh satellite manifest({0})".format(sat_host))
+            raise FailException(
+                "Failed to refresh satellite manifest({0})".format(sat_host)
+            )
         logger.info("Succeeded to refresh satellite manifest({0})".format(sat_host))
         logger.info("Succeeded to deploy satellite({0})".format(sat_host))
 
     def satellite_nightly_deploy(self, ssh_sat, admin_user, admin_passwd, manifest_url):
-        sat_host = ssh_sat['host']
+        sat_host = ssh_sat["host"]
         manifest_path = "/tmp/manifest"
         self.runcmd("rm -rf {0}; mkdir -p {0}".format(manifest_path), ssh_sat)
         self.runcmd("wget {0} -P {1}".format(manifest_url, manifest_path), ssh_sat)
         ret, output = self.runcmd("ls {0}".format(manifest_path), ssh_sat)
         if output is not None:
             manifest_filename = "{0}/{1}".format(manifest_path, output.strip())
         else:
             raise FailException("No manifest file found")
         self.rhel_epel_repo(ssh_sat)
-        self.runcmd("yum install -y ntp;systemctl enable ntpd;systemctl start ntpd", ssh_sat)
+        self.runcmd(
+            "yum install -y ntp;systemctl enable ntpd;systemctl start ntpd", ssh_sat
+        )
         self.runcmd("yum install -y ansible git", ssh_sat)
         self.runcmd("git clone -q https://github.com/theforeman/forklift.git", ssh_sat)
         ansible_playbook = (
-            'cd forklift; '
-            'ansible-playbook -c local -i,$(hostname) '
-            '-e katello_version=nightly '
-            '-e foreman_installer_skip_installer=True playbooks/katello.yml'
+            "cd forklift; "
+            "ansible-playbook -c local -i,$(hostname) "
+            "-e katello_version=nightly "
+            "-e foreman_installer_skip_installer=True playbooks/katello.yml"
         )
         plugin_install = (
-            'yum install -y '
-            'foreman-{ec2,gce,libvirt,openstack,ovirt,rackspace,vmware} '
-            'tfm-rubygem-hammer_cli_{csv,foreman_admin,foreman_discovery,'
-            'foreman_openscap,foreman_remote_execution} *virt_who_configure')
+            "yum install -y "
+            "foreman-{ec2,gce,libvirt,openstack,ovirt,rackspace,vmware} "
+            "tfm-rubygem-hammer_cli_{csv,foreman_admin,foreman_discovery,"
+            "foreman_openscap,foreman_remote_execution} *virt_who_configure"
+        )
         foreman_install = (
-            'foreman-installer --scenario katello  -v '
+            "foreman-installer --scenario katello  -v "
             '--foreman-initial-admin-password="{0}" '
-            '--disable-system-checks '
+            "--disable-system-checks "
             '--foreman-proxy-dns="true" '
             '--foreman-proxy-dns-interface="eth0" '
             '--foreman-proxy-dns-zone="{1}" '
             '--foreman-proxy-dhcp="true" '
             '--foreman-proxy-dhcp-interface="eth0" '
@@ -1573,32 +1812,33 @@
             '--foreman-proxy-puppet="true"  '
             '--katello-proxy-url="{3}" '
             '--katello-proxy-port="3128" '
             '--katello-proxy-username="{4}" '
             '--katello-proxy-password="{5}" '
-            '--enable-foreman-plugin-remote-execution '
-            '--enable-foreman-proxy-plugin-remote-execution-ssh '
-            '--enable-foreman-plugin-discovery '
-            '--enable-foreman-proxy-plugin-discovery '
-            '--enable-foreman-plugin-openscap '
-            '--enable-foreman-proxy-plugin-openscap '
-            '--enable-foreman-plugin-ansible '
-            '--enable-foreman-proxy-plugin-ansible'
+            "--enable-foreman-plugin-remote-execution "
+            "--enable-foreman-proxy-plugin-remote-execution-ssh "
+            "--enable-foreman-plugin-discovery "
+            "--enable-foreman-proxy-plugin-discovery "
+            "--enable-foreman-plugin-openscap "
+            "--enable-foreman-proxy-plugin-openscap "
+            "--enable-foreman-plugin-ansible "
+            "--enable-foreman-proxy-plugin-ansible"
         ).format(
             admin_passwd,
             deploy.satellite.foreman_proxy_dns,
             deploy.satellite.foreman_proxy_tftp,
             deploy.satellite.katello_proxy_url,
             deploy.satellite.katello_proxy_username,
-            deploy.satellite.katello_proxy_password)
+            deploy.satellite.katello_proxy_password,
+        )
         upload_manifest = (
-            'hammer -u {0} -p {1} subscription upload '
-            '--organization-label Default_Organization '
-            '--file {2}'
+            "hammer -u {0} -p {1} subscription upload "
+            "--organization-label Default_Organization "
+            "--file {2}"
         ).format(admin_user, admin_passwd, manifest_filename)
         refresh_manifest = (
-            'hammer -u {0} -p {1} subscription refresh-manifest '
+            "hammer -u {0} -p {1} subscription refresh-manifest "
             '--organization="Default Organization"'
         ).format(admin_user, admin_passwd)
         self.runcmd(ansible_playbook, ssh_sat)
         self.runcmd(plugin_install, ssh_sat)
         ret, output = self.runcmd(foreman_install, ssh_sat)
@@ -1618,26 +1858,28 @@
         default_org = deploy.satellite.default_org
         extra_org = deploy.satellite.extra_org
         env = deploy.satellite.default_env
         activation_key = deploy.satellite.activation_key
         manifest_url = deploy.satellite.manifest
-        ssh_sat = {"host": sat_host, "username":ssh_user,"password":ssh_passwd}
-        register_config={
-                'type':sat_type,
-                'server':sat_host,
-                'username':admin_user,
-                'password':admin_passwd,
-                'owner':default_org,
-                'env':env,
-                'ssh_user':ssh_user,
-                'ssh_passwd':ssh_passwd,
-                'api':api,
-                'ssh_sat':ssh_sat
+        ssh_sat = {"host": sat_host, "username": ssh_user, "password": ssh_passwd}
+        register_config = {
+            "type": sat_type,
+            "server": sat_host,
+            "username": admin_user,
+            "password": admin_passwd,
+            "owner": default_org,
+            "env": env,
+            "ssh_user": ssh_user,
+            "ssh_passwd": ssh_passwd,
+            "api": api,
+            "ssh_sat": ssh_sat,
         }
         self.system_init("ci-host-satellite", ssh_sat)
         sat_ver, rhel_ver = self.satellite_version(sat_type)
-        logger.info('Satellite version: {0}, RHEL version: {1}'.format(sat_ver, rhel_ver))
+        logger.info(
+            "Satellite version: {0}, RHEL version: {1}".format(sat_ver, rhel_ver)
+        )
         if "dogfood" in sat_type:
             self.employee_sku_attach(ssh_sat)
             self.satellite_repo_enable(ssh_sat, sat_ver, rhel_ver)
         if "cdn" in sat_type:
             self.employee_sku_attach(ssh_sat)
@@ -1649,68 +1891,85 @@
                 self.satellite_cdn_repo_enable(ssh_sat, sat_ver, rhel_ver)
         self.satellite_pkg_install(ssh_sat)
         self.satellite_deploy(ssh_sat, admin_user, admin_passwd, manifest_url, sat_ver)
         self.satellite_host_setting(ssh_sat, register_config)
         self.satellite_org_create(ssh_sat, register_config, extra_org)
-        default_org_id = self.satellite_org_id_get(ssh_sat, register_config, default_org)
-        self.satellite_active_key_create(ssh_sat, register_config, activation_key, default_org_id)
+        default_org_id = self.satellite_org_id_get(
+            ssh_sat, register_config, default_org
+        )
+        self.satellite_active_key_create(
+            ssh_sat, register_config, activation_key, default_org_id
+        )
         sat_queue.put((sat_type, sat_host))
 
-    #*********************************************
+    # *********************************************
     # Virtwho compose host by docker and beaker
-    #*********************************************
+    # *********************************************
     def docker_image_exist(self, image_name, ssh_docker):
-        host = ssh_docker['host']
+        host = ssh_docker["host"]
         cmd = "docker images | grep %s" % image_name
         ret, output = self.runcmd(cmd, ssh_docker, desc="docker image check")
         if ret != 0:
-            logger.info("docker image %s is not exist(%s)" % (image_name,host))
+            logger.info("docker image %s is not exist(%s)" % (image_name, host))
             return False
         else:
-            logger.info("docker image %s is ready on %s" % (image_name,host))
+            logger.info("docker image %s is ready on %s" % (image_name, host))
             return True
 
     def docker_image_delete(self, image_name, ssh_docker):
-        host = ssh_docker['host']
+        host = ssh_docker["host"]
         if self.docker_image_exist(image_name, ssh_docker) is True:
-            logger.info("Start to delete docker image %s(%s)" % (image_name,host))
-            cmd = "docker ps -a | grep '%s' | awk '{print $1 }'|xargs -I {} docker stop {}" % image_name
+            logger.info("Start to delete docker image %s(%s)" % (image_name, host))
+            cmd = (
+                "docker ps -a | grep '%s' | awk '{print $1 }'|xargs -I {} docker stop {}"
+                % image_name
+            )
             self.runcmd(cmd, ssh_docker, desc="docker container stop")
-            cmd = "docker ps -a | grep '%s' | awk '{print $1 }'|xargs -I {} docker rm -f {}" % image_name
+            cmd = (
+                "docker ps -a | grep '%s' | awk '{print $1 }'|xargs -I {} docker rm -f {}"
+                % image_name
+            )
             self.runcmd(cmd, ssh_docker, desc="docker container delete")
             cmd = "docker images | grep none | awk '{print $3 }'|xargs -I {} docker rmi -f {}"
             self.runcmd(cmd, ssh_docker, desc="docker delete none tag image")
-            cmd = "docker images | grep '%s' | awk '{print $3 }' |xargs -I {} docker rmi -f {}" % image_name
+            cmd = (
+                "docker images | grep '%s' | awk '{print $3 }' |xargs -I {} docker rmi -f {}"
+                % image_name
+            )
             self.runcmd(cmd, ssh_docker, desc="docker delete image")
 
     def docker_image_create(self, ssh_docker, compose_id):
         image_name = compose_id.lower()
         if self.docker_image_exist(image_name, ssh_docker) is False:
             logger.info("Start to create docker image {0}".format(image_name))
             compose_repo = "/tmp/docker/compose.repo"
             self.rhel_compose_repo(ssh_docker, compose_id, compose_repo)
-            cmd = "sh /tmp/docker/mk_image.sh -y {0} {1}".format(compose_repo, image_name)
+            cmd = "sh /tmp/docker/mk_image.sh -y {0} {1}".format(
+                compose_repo, image_name
+            )
             logger.info("Command to create docker image: {0}".format(cmd))
             ret, output = self.runcmd(cmd, ssh_docker)
             if ret == 0:
                 logger.info("Succeeded to create compose image {0}".format(image_name))
             else:
-                raise FailException("Failed to create compose image {0}".format(image_name))
+                raise FailException(
+                    "Failed to create compose image {0}".format(image_name)
+                )
 
     def docker_container_exist(self, ssh_docker, keyword):
         keyword = str(keyword)
         cmd = "docker ps -a | grep '{0}'".format(keyword)
         ret, output = self.runcmd(cmd, ssh_docker)
-        if ret == 0 and keyword in output: 
+        if ret == 0 and keyword in output:
             return True
         else:
             return False
 
     def docker_container_clean(self, ssh_docker):
-        ret, output = self.runcmd('sh /tmp/docker/rm_containers.sh -d 5', ssh_docker)
+        ret, output = self.runcmd("sh /tmp/docker/rm_containers.sh -d 5", ssh_docker)
         logger.info("Delete all the containers which created above 5 days")
-        ret, output = self.runcmd('docker ps -a |wc -l', ssh_docker)
+        ret, output = self.runcmd("docker ps -a |wc -l", ssh_docker)
         if int(output) > 10:
             cmd = "docker ps -a | awk '{print $1 }'|xargs -I {} docker stop {}"
             self.runcmd(cmd, ssh_docker, desc="Stop all containers")
             cmd = "docker ps -a | awk '{print $1 }'|xargs -I {} docker rm -f {}"
             self.runcmd(cmd, ssh_docker, desc="Delete all containers")
@@ -1719,19 +1978,28 @@
         port = random.randint(53220, 60000)
         while self.docker_container_exist(ssh_docker, port):
             port = random.randint(53220, 60000)
         return str(port)
 
-    def docker_container_create(self, ssh_docker, image_name, cont_name, cont_user, cont_passwd, cont_port):
-        host = ssh_docker['host']
-        cmd = "sh /tmp/docker/mk_container.sh -i {0} -c {1} -o {2} -u {3} -p {4}"\
-                .format(image_name, cont_name, cont_port, cont_user, cont_passwd)
+    def docker_container_create(
+        self, ssh_docker, image_name, cont_name, cont_user, cont_passwd, cont_port
+    ):
+        host = ssh_docker["host"]
+        cmd = (
+            "sh /tmp/docker/mk_container.sh -i {0} -c {1} -o {2} -u {3} -p {4}".format(
+                image_name, cont_name, cont_port, cont_user, cont_passwd
+            )
+        )
         self.runcmd(cmd, ssh_docker)
         is_created = ""
-        if self.docker_container_exist(ssh_docker, cont_port) and self.docker_container_exist(ssh_docker, cont_name):
+        if self.docker_container_exist(
+            ssh_docker, cont_port
+        ) and self.docker_container_exist(ssh_docker, cont_name):
             is_created = "Yes"
-            logger.info("Succeeded to create container: {0}:{1}".format(cont_name, cont_port))
+            logger.info(
+                "Succeeded to create container: {0}:{1}".format(cont_name, cont_port)
+            )
         else:
             logger.info("Command to create docker container: {0}".format(cmd))
             logger.error("Failed to create container: {0}".format(cont_name))
         if is_created == "Yes":
             return True
@@ -1741,42 +2009,66 @@
     def docker_compose_setup(self, compose_id, remote_modes):
         conf_hosts = dict()
         server = deploy.docker.server
         server_user = deploy.docker.server_user
         server_passwd = deploy.docker.server_passwd
-        ssh_docker ={"host":server,"username":server_user,"password":server_passwd}
+        ssh_docker = {
+            "host": server,
+            "username": server_user,
+            "password": server_passwd,
+        }
         container_user = deploy.docker.container_user
         container_passwd = deploy.docker.container_passwd
         image_name = compose_id.lower()
         self.runcmd("docker system prune -f", ssh_docker, desc="clean docker cache")
         root_path = os.path.abspath(os.path.join(os.getcwd(), "../"))
-        local_dir = os.path.join(root_path,'docker/')
+        local_dir = os.path.join(root_path, "docker/")
         remote_dir = "/tmp/docker/"
-        self.runcmd("rm -rf /tmp/docker/; rm -rf /tmp/mkimage*; rm -f /etc/yum.repos.d/*.repo", ssh_docker)
+        self.runcmd(
+            "rm -rf /tmp/docker/; rm -rf /tmp/mkimage*; rm -f /etc/yum.repos.d/*.repo",
+            ssh_docker,
+        )
         self.runcmd("subscription-manager unregister", ssh_docker)
         self.runcmd("subscription-manager clean", ssh_docker)
         self.paramiko_putdir(ssh_docker, local_dir, remote_dir)
         self.docker_image_create(ssh_docker, compose_id)
         self.docker_container_clean(ssh_docker)
         for mode in remote_modes:
             container_port = self.docker_container_port(ssh_docker)
-            container_name = image_name.replace('.', '-') + "-" + mode.strip() + "-" + container_port + ".redhat.com"
+            container_name = (
+                image_name.replace(".", "-")
+                + "-"
+                + mode.strip()
+                + "-"
+                + container_port
+                + ".redhat.com"
+            )
             if self.docker_container_create(
-                    ssh_docker, image_name, container_name, container_user, container_passwd, container_port):
+                ssh_docker,
+                image_name,
+                container_name,
+                container_user,
+                container_passwd,
+                container_port,
+            ):
                 ip_value = "{0}:{1}".format(server, container_port)
                 ip_name = "virtwho-host-{0}-ip".format(mode)
                 conf_hosts[ip_name] = ip_value
-                ssh_container = {"host":ip_value,"username":container_user,"password":container_passwd}
+                ssh_container = {
+                    "host": ip_value,
+                    "username": container_user,
+                    "password": container_passwd,
+                }
                 self.rhsm_override_uuid(ssh_container)
                 if mode == "libvirt-remote":
                     self.ssh_no_passwd_access(ssh_container)
             time.sleep(60)
         return conf_hosts
 
-    #*********************************************
+    # *********************************************
     # Hypervisor guests setup
-    #*********************************************
+    # *********************************************
     def guest_esx_setup(self, mode_queue, mode_type):
         # get deploy settings for esx mode
         vcenter_ip = deploy.vcenter.ip
         cli_ssh_ip = deploy.vcenter.ssh_ip
         cli_ssh_user = deploy.vcenter.ssh_user
@@ -1789,19 +2081,29 @@
         guest_name = deploy.vcenter.guest_name
         guest_user = deploy.vcenter.guest_user
         guest_passwd = deploy.vcenter.guest_passwd
         image_path = deploy.vcenter.image_path
         # set ssh env for vcenter, master
-        ssh_cli = {"host":cli_ssh_ip,"username":cli_ssh_user,"password":cli_ssh_passwd}
+        ssh_cli = {
+            "host": cli_ssh_ip,
+            "username": cli_ssh_user,
+            "password": cli_ssh_passwd,
+        }
         cert = self.vcenter_cert(vcenter_ip, vcenter_admin_user, vcenter_admin_passwd)
         guest_ip = self.vcenter_guest_ip(cert, ssh_cli, guest_name)
         if not guest_ip:
-            ssh_master = {"host":master,"username":master_user,"password":master_passwd}
+            ssh_master = {
+                "host": master,
+                "username": master_user,
+                "password": master_passwd,
+            }
             self.vcenter_host_ready(cert, ssh_cli, ssh_master)
-            guest_ip = self.vcenter_guest_add(cert, ssh_cli, ssh_master, guest_name, image_path)
+            guest_ip = self.vcenter_guest_add(
+                cert, ssh_cli, ssh_master, guest_name, image_path
+            )
         logger.info("Succeeded to get vcenter guest ip: {0}".format(guest_ip))
-        ssh_guest = {"host":guest_ip, "username":guest_user, "password":guest_passwd}
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         self.system_init("ci-guest-esx", ssh_guest)
         mode_queue.put((mode_type, guest_ip))
 
     def guest_hyperv_setup(self, mode_queue, mode_type):
         # get deploy settings for hyperv mode
@@ -1811,26 +2113,30 @@
         guest_name = deploy.hyperv.guest_name
         guest_user = deploy.hyperv.guest_user
         guest_passwd = deploy.hyperv.guest_passwd
         image_path = deploy.hyperv.image_path
         # set ssh env for hyperv master
-        ssh_hyperv ={"host":master,"username":master_user,"password":master_passwd}
+        ssh_hyperv = {
+            "host": master,
+            "username": master_user,
+            "password": master_passwd,
+        }
         guest_ip = self.hyperv_guest_ip(ssh_hyperv, guest_name)
         if not guest_ip:
             guest_ip = self.hyperv_guest_add(ssh_hyperv, guest_name, image_path)
         logger.info("Succeeded to get hyperv guest ip: {0}".format(guest_ip))
-        ssh_guest = {"host":guest_ip, "username":guest_user, "password":guest_passwd}
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         self.system_init("ci-guest-hyperv", ssh_guest)
         mode_queue.put((mode_type, guest_ip))
 
     def guest_ahv_setup(self, mode_queue, mode_type):
         guest_name = deploy.ahv.guest_name
         guest_user = deploy.ahv.guest_user
         guest_passwd = deploy.ahv.guest_passwd
         guest_ip = self.ahv_guest_ip()
         logger.info("Succeeded to get ahv guest ip: {0}".format(guest_ip))
-        ssh_guest = {"host":guest_ip, "username":guest_user, "password":guest_passwd}
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         self.system_init("ci-guest-ahv", ssh_guest)
         mode_queue.put((mode_type, guest_ip))
 
     def guest_xen_setup(self, mode_queue, mode_type):
         # get deploy settings for xen mode
@@ -1843,26 +2149,30 @@
         sr_name = deploy.xen.sr_name
         sr_server = deploy.xen.sr_server
         sr_path = deploy.xen.sr_path
         image_path = deploy.xen.image_path
         # set ssh env for xen master
-        ssh_master ={"host":master,"username":master_user,"password":master_passwd}
+        ssh_master = {
+            "host": master,
+            "username": master_user,
+            "password": master_passwd,
+        }
         guest_ip = self.xen_guest_ip(ssh_master, guest_name)
         if not guest_ip:
             self.xen_host_ready(ssh_master, sr_name, sr_server, sr_path)
             guest_ip = self.xen_guest_add(ssh_master, guest_name, sr_name, image_path)
         logger.info("Succeeded to get xen guest ip: {0}".format(guest_ip))
-        ssh_guest = {"host":guest_ip, "username":guest_user, "password":guest_passwd}
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         self.system_init("ci-guest-xen", ssh_guest)
         mode_queue.put((mode_type, guest_ip))
 
     def guest_kubevirt_setup(self, mode_queue, mode_type):
         guest_name = deploy.kubevirt.guest_name
         guest_user = deploy.kubevirt.guest_user
         guest_passwd = deploy.kubevirt.guest_passwd
         guest_ip = self.kubevirt_guest_ip(guest_name)
-        ssh_guest = {"host":guest_ip, "username":guest_user, "password":guest_passwd}
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         self.system_init("ci-guest-kubvirt", ssh_guest)
         logger.info("Succeeded to get kubevirt guest ip: {0}".format(guest_ip))
         mode_queue.put((mode_type, guest_ip))
 
     def guest_rhevm_setup(self, mode_queue, mode_type):
@@ -1872,30 +2182,38 @@
         rhevm_ssh_passwd = deploy.rhevm.rhevm_ssh_passwd
         guest_name = deploy.rhevm.guest_name
         guest_user = deploy.rhevm.guest_user
         guest_passwd = deploy.rhevm.guest_passwd
         # set ssh env for rhevm, master
-        ssh_rhevm = {"host": rhevm_ip, "username": rhevm_ssh_user,
-                     "password": rhevm_ssh_passwd}
+        ssh_rhevm = {
+            "host": rhevm_ip,
+            "username": rhevm_ssh_user,
+            "password": rhevm_ssh_passwd,
+        }
         guest_ip = self.rhevm_guest_ip(ssh_rhevm, guest_name)
         logger.info(
             "Succeeded to get rhevm({0}) guest ip: {1} for rhevm mode".format(
-                rhevm_ip, guest_ip))
-        ssh_guest = {"host": guest_ip, "username": guest_user,
-                     "password": guest_passwd}
+                rhevm_ip, guest_ip
+            )
+        )
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         self.system_init("ci-guest-rhevm", ssh_guest)
         mode_queue.put((mode_type, guest_ip))
 
     def guest_libvirt_remote_setup(self, mode_queue, mode_type):
         remote_host = deploy.libvirt.remote
         remote_user = deploy.libvirt.remote_user
         remote_passwd = deploy.libvirt.remote_passwd
         guest_name = deploy.libvirt.guest_name
         guest_user = deploy.libvirt.guest_user
         guest_passwd = deploy.libvirt.guest_passwd
-        ssh_libvirt = {"host":remote_host,"username":remote_user,"password":remote_passwd}
-        '''remote libvirt is stable env'''
+        ssh_libvirt = {
+            "host": remote_host,
+            "username": remote_user,
+            "password": remote_passwd,
+        }
+        """remote libvirt is stable env"""
         # self.stop_firewall(ssh_libvirt)
         # self.employee_sku_attach(ssh_libvirt)
         # self.rhel_repo_enable(ssh_libvirt)
         # self.libvirt_pkg_install(ssh_libvirt)
         # self.bridge_setup("br0", ssh_libvirt)
@@ -1903,12 +2221,16 @@
         ret, output = self.runcmd(cmd, ssh_libvirt)
         guest_ip = self.libvirt_guest_ip(guest_name, ssh_libvirt)
         if not guest_ip:
             self.libvirt_guests_all_clean(ssh_libvirt)
             guest_ip = self.libvirt_guest_add(guest_name, ssh_libvirt)
-        logger.info("Succeeded to get remote libvirt({0})'s guest ip: ({1})".format(remote_host, guest_ip))
-        ssh_guest = {"host":guest_ip, "username":guest_user, "password":guest_passwd}
+        logger.info(
+            "Succeeded to get remote libvirt({0})'s guest ip: ({1})".format(
+                remote_host, guest_ip
+            )
+        )
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         self.system_init("ci-guest-libvirt-remote", ssh_guest)
         mode_queue.put((mode_type, guest_ip))
 
     def guest_libvirt_local_setup(self, ssh_libvirt):
         guest_name = deploy.libvirt.guest_name
@@ -1916,12 +2238,16 @@
         guest_passwd = deploy.libvirt.guest_passwd
         self.libvirt_pkg_install(ssh_libvirt)
         self.bridge_setup("br0", ssh_libvirt)
         self.libvirt_guests_all_clean(ssh_libvirt)
         guest_ip = self.libvirt_guest_add(guest_name, ssh_libvirt)
-        logger.info("Succeeded to get local libvirt({0})'s guest ip: ({1})".format(ssh_libvirt['host'], guest_ip))
-        ssh_guest = {"host":guest_ip, "username":guest_user, "password":guest_passwd}
+        logger.info(
+            "Succeeded to get local libvirt({0})'s guest ip: ({1})".format(
+                ssh_libvirt["host"], guest_ip
+            )
+        )
+        ssh_guest = {"host": guest_ip, "username": guest_user, "password": guest_passwd}
         self.system_init("ci-guest-libvirt-local", ssh_guest)
         return guest_ip
 
     # def guest_vdsm_setup(self, ssh_vdsm):
     #     rhevm_ip = deploy.vdsm.rhevm_ip
@@ -1952,44 +2278,53 @@
     #     logger.info("Succeeded to get rhevm({0}) guest ip: {1} for vdsm mode".format(rhevm_ip, guest_ip))
     #     ssh_guest = {"host":guest_ip, "username":guest_user, "password":guest_passwd}
     #     self.system_init("ci-guest-vdsm", ssh_guest)
     #     return guest_ip
 
-    #*********************************************
+    # *********************************************
     # Hypervisor ESXi Function
-    #*********************************************
+    # *********************************************
     def vcenter_cert(self, admin_server, admin_user, admin_passwd):
-        cert = "powershell Connect-VIServer -Server %s -Protocol https -User %s -Password %s;" \
-                % (admin_server, admin_user, admin_passwd)
-        return cert 
+        cert = (
+            "powershell Connect-VIServer -Server %s -Protocol https -User %s -Password %s;"
+            % (admin_server, admin_user, admin_passwd)
+        )
+        return cert
 
     def vcenter_host_get(self, cert, ssh_cli, guest_name):
         cmd = "%s Get-VM %s | select *" % (cert, guest_name)
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0:
             for line in output.splitlines():
                 if re.match(r"^VMHost .*:", line):
-                    host = line.split(':')[1].strip()
+                    host = line.split(":")[1].strip()
                     return host
         else:
             raise FailException("Failed to get vcenter host")
 
     def vcenter_fqdn_set(self, cert, ssh_cli, esx_host, fqdn):
-        cmd = "%s (Get-EsxCli -VMhost %s).system.hostname.set($null, '%s', $null)" % (cert, esx_host, fqdn)
+        cmd = "%s (Get-EsxCli -VMhost %s).system.hostname.set($null, '%s', $null)" % (
+            cert,
+            esx_host,
+            fqdn,
+        )
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0:
             return self.vcenter_fqdn_get(cert, ssh_cli, esx_host)
         else:
             raise FailException("Failed to set vcenter host fqdn")
 
     def vcenter_fqdn_get(self, cert, ssh_cli, esx_host):
-        cmd = "%s (Get-EsxCli -VMhost %s).system.hostname.get()|select FullyQualifiedDomainName" % (cert, esx_host)
+        cmd = (
+            "%s (Get-EsxCli -VMhost %s).system.hostname.get()|select FullyQualifiedDomainName"
+            % (cert, esx_host)
+        )
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0:
             for line in output.splitlines():
                 if re.match(r"^FullyQualifiedDomainName .*:", line):
-                    fqdn = line.split(':')[1].strip()
+                    fqdn = line.split(":")[1].strip()
                     return fqdn
         else:
             raise FailException("Failed to get vcenter host fqdn")
 
     def vcenter_host_exist(self, cert, ssh_cli, esx_host):
@@ -1999,22 +2334,25 @@
             return True
         else:
             return False
 
     def vcenter_host_ready(self, cert, ssh_cli, ssh_esx):
-        if self.vcenter_host_exist(cert, ssh_cli, ssh_esx['host']):
+        if self.vcenter_host_exist(cert, ssh_cli, ssh_esx["host"]):
             return "ready"
         else:
             self.vcenter_host_add(cert, ssh_cli, ssh_esx)
 
     def vcenter_host_uuid(self, cert, ssh_cli, esx_host):
-        cmd = "%s Get-VMHost -Name %s | %%{(Get-View $_.Id).Hardware.SystemInfo}" % (cert, esx_host)
+        cmd = "%s Get-VMHost -Name %s | %%{(Get-View $_.Id).Hardware.SystemInfo}" % (
+            cert,
+            esx_host,
+        )
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0:
             for line in output.splitlines():
                 if re.match(r"^Uuid.*:", line):
-                    uuid = line.split(':')[1].strip()
+                    uuid = line.split(":")[1].strip()
                     logger.info("Succeeded to get esxi host uuid: {0}".format(uuid))
                     return uuid
         else:
             raise FailException("Failed to get esx host uuid")
 
@@ -2022,11 +2360,11 @@
         cmd = "%s Get-VMHost -Name %s | %%{(Get-View $_.Id).MoRef}" % (cert, esx_host)
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0 and "HostSystem" in output:
             for line in output.splitlines():
                 if re.match(r"^Value.*:", line):
-                    hwuuid = line.split(':')[1].strip()
+                    hwuuid = line.split(":")[1].strip()
                     logger.info("Succeeded to get esxi host hwuuid: {0}".format(hwuuid))
                     return hwuuid
         else:
             raise FailException("Failed to get esx host hwuuid")
 
@@ -2034,21 +2372,23 @@
         cmd = "%s Get-Datastore -VMHost %s | %%{(Get-View $_.Id)}" % (cert, esx_host)
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0:
             for line in output.splitlines():
                 if re.match(r"^Name.*:", line):
-                    datastore = line.split(':')[1].strip()
+                    datastore = line.split(":")[1].strip()
                     return datastore
         else:
             raise FailException("Failed to get esx host datastore")
 
     def vcenter_host_add(self, cert, ssh_cli, ssh_esx):
-        esx_host = ssh_esx['host']
-        esx_host_user = ssh_esx['username']
-        esx_host_passwd = ssh_esx['password']
-        cmd = "%s Add-VMHost %s -Location Datacenter -User %s -Password %s -confirm:$false" \
-                % (cert, esx_host, esx_host_user, esx_host_passwd)
+        esx_host = ssh_esx["host"]
+        esx_host_user = ssh_esx["username"]
+        esx_host_passwd = ssh_esx["password"]
+        cmd = (
+            "%s Add-VMHost %s -Location Datacenter -User %s -Password %s -confirm:$false"
+            % (cert, esx_host, esx_host_user, esx_host_passwd)
+        )
         ret, output = self.runcmd(cmd, ssh_cli)
         if self.vcenter_host_exist(cert, ssh_cli, esx_host) is False:
             raise FailException("Failed to add esx host {0}".format(esx_host))
 
     def vcenter_host_delete(self, cert, ssh_cli, esx_host):
@@ -2057,16 +2397,18 @@
         if self.vcenter_host_exist(cert, ssh_cli, esx_host):
             raise FailException("Failed to delete esx host")
 
     def vcenter_guest_images(self, ssh_esx, guest_name, image_path):
         cmd = "rm -rf /vmfs/volumes/datastore*/{0}*; wget -P /vmfs/volumes/datastore* {1}".format(
-                guest_name,image_path)
+            guest_name, image_path
+        )
         ret, output = self.runcmd(cmd, ssh_esx)
         if ret != 0:
             raise FailException("Failed to download guest image")
         cmd = "tar -zxvf /vmfs/volumes/datastore*/{0}.tar.gz -C /vmfs/volumes/datastore*/".format(
-                guest_name)
+            guest_name
+        )
         ret, output = self.runcmd(cmd, ssh_esx)
         if ret != 0:
             raise FailException("Failed to uncompress guest image")
         cmd = "rm -f /vmfs/volumes/datastore*/*.tar.gz"
         ret, output = self.runcmd(cmd, ssh_esx)
@@ -2081,20 +2423,33 @@
 
     def vcenter_guest_uuid(self, cert, ssh_cli, guest_name):
         cmd = "%s Get-VM %s | %%{(Get-View $_.Id).config}" % (cert, guest_name)
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0:
-            version = ''
-            uuid = ''
+            version = ""
+            uuid = ""
             for line in output.splitlines():
                 if re.match(r"^Version.*:", line):
-                    version = line.split(':')[1].strip()
+                    version = line.split(":")[1].strip()
                 if re.match(r"^Uuid.*:", line):
-                    uuid = line.split(':')[1].strip()
+                    uuid = line.split(":")[1].strip()
             if uuid:
                 if version > "vmx-13":
-                    uuid = uuid[6:8] + uuid[4:6] + uuid[2:4] + uuid[0:2] + "-" + uuid[11:13] + uuid[9:11] + "-" + uuid[16:18] + uuid[14:16] + "-" + uuid[19:]
+                    uuid = (
+                        uuid[6:8]
+                        + uuid[4:6]
+                        + uuid[2:4]
+                        + uuid[0:2]
+                        + "-"
+                        + uuid[11:13]
+                        + uuid[9:11]
+                        + "-"
+                        + uuid[16:18]
+                        + uuid[14:16]
+                        + "-"
+                        + uuid[19:]
+                    )
                 logger.info("Succeeded to get vcenter guest uuid: {0}".format(uuid))
                 return uuid
             else:
                 raise FailException("Failed to get vcenter guest uuid")
         else:
@@ -2104,11 +2459,11 @@
         cmd = "%s Get-VM -Name %s" % (cert, guest_name)
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0:
             for line in output.splitlines():
                 if re.match(r"^PowerState.*:", line):
-                    status = line.split(':')[1].strip()
+                    status = line.split(":")[1].strip()
                     return status
         else:
             raise FailException("Failed to get esx guest status")
 
     def vcenter_guest_ip(self, cert, ssh_cli, guest_name):
@@ -2118,17 +2473,21 @@
             if ret == 0 and "IpAddress" in output:
                 datalines = output.splitlines()
                 for line in datalines:
                     if re.match(r"^IpAddress.*:", line):
                         guest_ip = line.split(":")[1].strip()
-                        if guest_ip != "" and guest_ip is not None and self.ping_is_connected(guest_ip):
+                        if (
+                            guest_ip != ""
+                            and guest_ip is not None
+                            and self.ping_is_connected(guest_ip)
+                        ):
                             return guest_ip
             logger.info("No guest ip found for vcenter, try again after 30s...")
             time.sleep(30)
 
     def vcenter_guest_add(self, cert, ssh_cli, ssh_esx, guest_name, image_path):
-        esx_host = ssh_esx['host']
+        esx_host = ssh_esx["host"]
         if self.vcenter_guest_exist(cert, ssh_cli, guest_name):
             self.vcenter_guest_delete(cert, ssh_cli, guest_name)
         self.vcenter_guest_images(ssh_esx, guest_name, image_path)
         datastore = self.vcenter_host_datastore(cert, ssh_cli, esx_host)
         vmxFile = "'[{0}] {1}/{1}.vmx'".format(datastore, guest_name)
@@ -2142,13 +2501,16 @@
 
     def vcenter_guest_delete(self, cert, ssh_cli, guest_name):
         if self.vcenter_guest_status(cert, ssh_cli, guest_name) == "PoweredOn":
             self.vcenter_guest_stop(cert, ssh_cli, guest_name)
         for i in range(5):
-            cmd = "%s Remove-VM -VM %s -DeletePermanently -Confirm:$false" % (cert, guest_name)
+            cmd = "%s Remove-VM -VM %s -DeletePermanently -Confirm:$false" % (
+                cert,
+                guest_name,
+            )
             ret, output = self.runcmd(cmd, ssh_cli)
-            if ret !=0 and "Powered on" in output:
+            if ret != 0 and "Powered on" in output:
                 logger.info("guest still power on, try again")
                 self.vcenter_guest_stop(cert, ssh_cli, guest_name)
             elif self.vcenter_guest_exist(cert, ssh_cli, guest_name):
                 logger.info("guest still exist, try again")
             else:
@@ -2159,102 +2521,133 @@
 
     def vcenter_guest_start(self, cert, ssh_cli, guest_name):
         cmd = "%s Start-VM -VM %s -Confirm:$false" % (cert, guest_name)
         ret, output = self.runcmd(cmd, ssh_cli)
         for i in range(10):
-            cmd = '%s Get-VM %s | Get-VMQuestion | Set-VMQuestion -Option "button.uuid.copiedTheVM" -Confirm:$false' \
-                    % (cert, guest_name)
+            cmd = (
+                '%s Get-VM %s | Get-VMQuestion | Set-VMQuestion -Option "button.uuid.copiedTheVM" -Confirm:$false'
+                % (cert, guest_name)
+            )
             ret, output = self.runcmd(cmd, ssh_cli, desc="vcenter guest question check")
             time.sleep(30)
             if self.vcenter_guest_status(cert, ssh_cli, guest_name) == "PoweredOn":
                 logger.info("Succeeded to start vcenter guest")
                 guest_ip = self.vcenter_guest_ip(cert, ssh_cli, guest_name)
                 return guest_ip
-            logger.warning("vcenter guest status is not PoweredOn, check again after 15s...")
+            logger.warning(
+                "vcenter guest status is not PoweredOn, check again after 15s..."
+            )
         raise FailException("Failed to start vcenter guest")
 
     def vcenter_guest_stop(self, cert, ssh_cli, guest_name):
         cmd = "%s Stop-VM -VM %s -Kill -Confirm:$false" % (cert, guest_name)
         ret, output = self.runcmd(cmd, ssh_cli)
         for i in range(10):
             if self.vcenter_guest_status(cert, ssh_cli, guest_name) == "PoweredOff":
                 logger.info("Succeeded to stop vcenter guest")
                 return True
-            logger.warning("vcenter guest status is not PoweredOff, check again after 15s...")
+            logger.warning(
+                "vcenter guest status is not PoweredOff, check again after 15s..."
+            )
             time.sleep(15)
         raise FailException("Failed to stop vcenter guest")
 
     def vcenter_guest_suspend(self, cert, ssh_cli, guest_name):
         cmd = "%s Suspend-VM -VM %s -Confirm:$false" % (cert, guest_name)
         ret, output = self.runcmd(cmd, ssh_cli)
         for i in range(10):
             if self.vcenter_guest_status(cert, ssh_cli, guest_name) == "Suspended":
                 logger.info("Succeeded to suspend vcenter guest")
                 return True
-            logger.warning("vcenter guest status is not Suspended, check again after 15s...")
+            logger.warning(
+                "vcenter guest status is not Suspended, check again after 15s..."
+            )
             time.sleep(15)
         raise FailException("Failed to suspend vcenter guest")
 
     def vcenter_guest_resume(self, cert, ssh_cli, guest_name):
         cmd = "%s Start-VM -VM %s -Confirm:$false" % (cert, guest_name)
         ret, output = self.runcmd(cmd, ssh_cli)
         for i in range(10):
             if self.vcenter_guest_status(cert, ssh_cli, guest_name) == "PoweredOn":
                 logger.info("Succeeded to resume vcenter guest")
                 return True
-            logger.warning("vcenter guest status is not PoweredOn, check again after 15s...")
+            logger.warning(
+                "vcenter guest status is not PoweredOn, check again after 15s..."
+            )
             time.sleep(15)
         raise FailException("Failed to resume vcenter guest")
 
-    def vcenter_cluster_get(self, cert, ssh_cli, option='Name'):
+    def vcenter_cluster_get(self, cert, ssh_cli, option="Name"):
         cmd = "%s Get-Cluster | select *" % (cert)
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0:
             name_list = []
             for line in output.splitlines():
                 if re.match(r"^{} .*:".format(option), line):
-                    cluster_name = line.split(':')[1].strip()
+                    cluster_name = line.split(":")[1].strip()
                     name_list.append(cluster_name)
             return name_list
         else:
             raise FailException("Failed to get cluster {}".format(option))
 
     def vcenter_cluster_name_set(self, cert, ssh_cli, old_name, new_name):
         if new_name in self.vcenter_cluster_get(cert, ssh_cli):
-            logger.info("The cluster name {} is already exist, no need to reset".format(new_name))
+            logger.info(
+                "The cluster name {} is already exist, no need to reset".format(
+                    new_name
+                )
+            )
             return
         cmd = "{0} Set-Cluster -Cluster {1} -Name {2} -Confirm:$false".format(
-            cert, old_name, new_name)
+            cert, old_name, new_name
+        )
         ret, output = self.runcmd(cmd, ssh_cli)
         if ret == 0 and new_name in self.vcenter_cluster_get(cert, ssh_cli):
-            logger.info("Succeeded to set the cluster name {0} to {1}".format(old_name, new_name))
+            logger.info(
+                "Succeeded to set the cluster name {0} to {1}".format(
+                    old_name, new_name
+                )
+            )
             return
         else:
             raise FailException("Failed to set the cluster name")
 
-    #*********************************************
+    # *********************************************
     # Hypervisor Hyper-V Function
-    #*********************************************
-    #*********************************************
+    # *********************************************
+    # *********************************************
     def hyperv_host_uuid(self, ssh_hyperv):
         # Windows UUID needs to be decoded
         cmd = '''powershell "gwmi -namespace 'root/cimv2' Win32_ComputerSystemProduct | select *"'''
         ret, output = self.runcmd(cmd, ssh_hyperv, desc="hyperv host uuid check")
-        if ret == 0 and "UUID" in output: 
+        if ret == 0 and "UUID" in output:
             for line in output.splitlines():
                 if re.match(r"^UUID.*:", line):
-                    s = line.split(':')[1].strip()
-                    uuid = s[6:8] + s[4:6] + s[2:4] + s[0:2] + "-" + s[11:13] + s[9:11] + "-" + s[16:18] + s[14:16] + s[18:]
+                    s = line.split(":")[1].strip()
+                    uuid = (
+                        s[6:8]
+                        + s[4:6]
+                        + s[2:4]
+                        + s[0:2]
+                        + "-"
+                        + s[11:13]
+                        + s[9:11]
+                        + "-"
+                        + s[16:18]
+                        + s[14:16]
+                        + s[18:]
+                    )
                     logger.info("Succeeded to get hyperv host uuid: %s" % uuid)
                     return uuid
         else:
             raise FailException("Failed to get hyperv host uuid")
 
     def hyperv_host_name(self, ssh_hyperv):
         cmd = "powershell (Get-WMIObject  Win32_ComputerSystem).DNSHostName"
         ret, output = self.runcmd(cmd, ssh_hyperv, desc="hyperv host name check")
-        if ret == 0 and output.strip() is not None: 
+        if ret == 0 and output.strip() is not None:
             hostname = output.strip()
             logger.info("Succeeded to get hyperv hostname: {0}".format(hostname))
             return hostname
         else:
             raise FailException("Failed to get hyperv hostname")
@@ -2265,12 +2658,14 @@
         cmd = "powershell Get-ChildItem C:\hyperv_img"
         ret, output = self.runcmd(cmd, ssh_hyperv, desc="hyperv image list")
         if ret == 0 and guest_name in output:
             logger.info("hyperv image is exist")
         else:
-            cmd = "powershell (New-Object System.Net.WebClient).DownloadFile('%s', 'C:\hyperv_img\%s.vhdx')" \
-                    % (image_path, guest_name)
+            cmd = (
+                "powershell (New-Object System.Net.WebClient).DownloadFile('%s', 'C:\hyperv_img\%s.vhdx')"
+                % (image_path, guest_name)
+            )
             ret, output = self.runcmd(cmd, ssh_hyperv, desc="hyperv image download")
             if ret == 0:
                 logger.info("succeeded to download hyperv image")
             else:
                 raise FailException("Failed to download hyperv image")
@@ -2284,15 +2679,27 @@
             return False
 
     def hyperv_guest_uuid(self, ssh_hyperv, guest_name):
         cmd = "powershell (gwmi -Namespace Root\Virtualization\V2 -ClassName Msvm_VirtualSystemSettingData).BiosGUID"
         ret, output = self.runcmd(cmd, ssh_hyperv)
-        if ret == 0 and output.strip() is not None: 
+        if ret == 0 and output.strip() is not None:
             s = output.strip()
-            if s.startswith('{') and s.endswith('}'):
+            if s.startswith("{") and s.endswith("}"):
                 s = s[1:-1]
-            uuid = s[6:8] + s[4:6] + s[2:4] + s[0:2] + "-" + s[11:13] + s[9:11] + "-" + s[16:18] + s[14:16] + s[18:]
+            uuid = (
+                s[6:8]
+                + s[4:6]
+                + s[2:4]
+                + s[0:2]
+                + "-"
+                + s[11:13]
+                + s[9:11]
+                + "-"
+                + s[16:18]
+                + s[14:16]
+                + s[18:]
+            )
             logger.info("Succeeded to get hyperv guest uuid: {0}".format(uuid))
             return uuid
         else:
             raise FailException("Failed to get hyperv guest uuid")
 
@@ -2300,11 +2707,11 @@
         cmd = '''powershell "Get-VM %s | select *"''' % (guest_name)
         ret, output = self.runcmd(cmd, ssh_hyperv)
         if ret == 0 and output != "":
             for line in output.splitlines():
                 if re.match(r"^State", line):
-                    status = line.split(':')[1].strip()
+                    status = line.split(":")[1].strip()
                     return status
         else:
             raise FailException("Failed to check hyperv guest status")
 
     def hyperv_guest_ip(self, ssh_hyperv, guest_name):
@@ -2318,28 +2725,34 @@
                     if ":" not in line and re.match(r"^10", line):
                         guest_ip = line.strip()
                         if self.ping_is_connected(guest_ip):
                             return guest_ip
             logger.info("No guest ip found for hyperv, try again after 30s...")
-            
+
     def hyperv_guest_add(self, ssh_hyperv, guest_name, image_path):
         if self.hyperv_guest_exist(ssh_hyperv, guest_name):
             self.hyperv_guest_delete(ssh_hyperv, guest_name)
         self.hyperv_image_ready(ssh_hyperv, guest_name, image_path)
-        if '8.' in guest_name:
+        if "8." in guest_name:
             options = "-MemoryStartupBytes 2GB -SwitchName virtual_switch -Generation 2"
         else:
             options = "-MemoryStartupBytes 1GB -SwitchName virtual_switch -Generation 1"
-        cmd = "powershell New-VM -Name %s -VHDPath \"C:\hyperv_img\%s.vhdx\" %s" \
-                % (guest_name, guest_name, options)
+        cmd = 'powershell New-VM -Name %s -VHDPath "C:\hyperv_img\%s.vhdx" %s' % (
+            guest_name,
+            guest_name,
+            options,
+        )
         ret, output = self.runcmd(cmd, ssh_hyperv, desc="hyperv guest add")
         if self.hyperv_guest_exist(ssh_hyperv, guest_name):
             logger.info("Succeeded to add hyperv guest")
         else:
             raise FailException("Failed to add hyperv guest")
-        if '8.' in guest_name:
-            cmd = "powershell Set-VMFirmware -VMName %s -EnableSecureBoot off" % guest_name
+        if "8." in guest_name:
+            cmd = (
+                "powershell Set-VMFirmware -VMName %s -EnableSecureBoot off"
+                % guest_name
+            )
             ret, output = self.runcmd(cmd, ssh_hyperv, desc="disable secure boot")
         return self.hyperv_guest_start(ssh_hyperv, guest_name)
 
     def hyperv_guest_delete(self, ssh_hyperv, guest_name):
         if self.hyperv_guest_status(ssh_hyperv, guest_name) != "Off":
@@ -2357,11 +2770,13 @@
         for i in range(10):
             if self.hyperv_guest_status(ssh_hyperv, guest_name) == "Running":
                 logger.info("Succeeded to start hyperv guest")
                 guest_ip = self.hyperv_guest_ip(ssh_hyperv, guest_name)
                 return guest_ip
-            logger.warning("hyperv guest status is not Running, check again after 15s...")
+            logger.warning(
+                "hyperv guest status is not Running, check again after 15s..."
+            )
             time.sleep(15)
         raise FailException("Failed to start hyper guest")
 
     def hyperv_guest_stop(self, ssh_hyperv, guest_name):
         cmd = "powershell Stop-VM -Name %s" % (guest_name)
@@ -2379,58 +2794,74 @@
         ret, output = self.runcmd(cmd, ssh_hyperv)
         for i in range(10):
             if self.hyperv_guest_status(ssh_hyperv, guest_name) == "Paused":
                 logger.info("Succeeded to suspend hyperv guest")
                 return True
-            logger.warning("hyperv guest status is not Paused, check again after 15s...")
+            logger.warning(
+                "hyperv guest status is not Paused, check again after 15s..."
+            )
             time.sleep(15)
         raise FailException("Failed to suspend hyperv guest")
 
     def hyperv_guest_resume(self, ssh_hyperv, guest_name):
         cmd = "powershell Resume-VM -Name %s" % (guest_name)
         ret, output = self.runcmd(cmd, ssh_hyperv)
         for i in range(10):
             if self.hyperv_guest_status(ssh_hyperv, guest_name) == "Running":
                 logger.info("Succeeded to resume hyperv guest")
                 return True
-            logger.warning("hyperv guest status is not Running, check again after 15s...")
+            logger.warning(
+                "hyperv guest status is not Running, check again after 15s..."
+            )
             time.sleep(15)
         raise FailException("Failed to resume hyperv guest")
 
-    #*********************************************
+    # *********************************************
     # Hypervisor XEN Function
-    #*********************************************
+    # *********************************************
     def xen_host_ready(self, ssh_xen, sr_name, sr_server, sr_path):
         hostname = self.get_hostname(ssh_xen)
         ret, output = self.runcmd("xe host-list", ssh_xen)
         if ret == 0 and hostname in output:
-            ret, output = self.runcmd("xe sr-list name-label={0}".format(sr_name), ssh_xen)
+            ret, output = self.runcmd(
+                "xe sr-list name-label={0}".format(sr_name), ssh_xen
+            )
             if ret == 0 and sr_name in output:
                 logger.info("xen sr is ready")
             else:
-                nfs_options = "type=nfs name-label={0} content-type=user shared=true".format(sr_name)
-                nfs_server = "device-config:nfsversion=4 device-config:server={0}".format(sr_server)
+                nfs_options = (
+                    "type=nfs name-label={0} content-type=user shared=true".format(
+                        sr_name
+                    )
+                )
+                nfs_server = (
+                    "device-config:nfsversion=4 device-config:server={0}".format(
+                        sr_server
+                    )
+                )
                 nfs_path = "device-config:serverpath={0}".format(sr_path)
-                cmd = "xe sr-create {0} {1} {2}".format(nfs_options, nfs_server, nfs_path)
+                cmd = "xe sr-create {0} {1} {2}".format(
+                    nfs_options, nfs_server, nfs_path
+                )
                 ret, output = self.runcmd(cmd, ssh_xen)
         else:
             raise FailException("xen host is not ready")
 
     def xen_host_uuid(self, ssh_xen):
-        cmd = "xe host-list address={0} | grep '^uuid'".format(ssh_xen['host'])
+        cmd = "xe host-list address={0} | grep '^uuid'".format(ssh_xen["host"])
         ret, output = self.runcmd(cmd, ssh_xen)
         if ret == 0 and "uuid" in output:
-            uuid = output.strip().split(':')[1].strip()
+            uuid = output.strip().split(":")[1].strip()
             return uuid
         else:
             raise FailException("Failed to get xen host uuid")
 
     def xen_sr_uuid(self, ssh_xen, sr_name):
         cmd = "xe sr-list name-label={0} |grep '^uuid'".format(sr_name)
         ret, output = self.runcmd(cmd, ssh_xen)
         if ret == 0 and "uuid" in output:
-            uuid = output.strip().split(':')[1].strip()
+            uuid = output.strip().split(":")[1].strip()
             return uuid
         else:
             raise FailException("Failed to check xen sr uuid")
 
     def xen_guest_exist(self, ssh_xen, guest_name):
@@ -2443,29 +2874,29 @@
 
     def xen_guest_status(self, ssh_xen, guest_name):
         cmd = "xe vm-list name-label={0} | grep 'power-state'".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_xen)
         if ret == 0 and "power-state" in output:
-            status = output.strip().split(':')[1].strip()
+            status = output.strip().split(":")[1].strip()
             return status
         else:
             raise FailException("Failed to check xen guest status")
 
     def xen_guest_uuid(self, ssh_xen, guest_name):
         cmd = "xe vm-list name-label={0} | grep '^uuid'".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_xen)
         if ret == 0 and "uuid" in output:
-            uuid = output.strip().split(':')[1].strip()
+            uuid = output.strip().split(":")[1].strip()
             return uuid
         else:
             raise FailException("Failed to check xen guest uuid")
 
     def xen_guest_mac(self, ssh_xen, guest_name):
         cmd = "xe vm-vif-list vm={0} |grep 'MAC'".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_xen)
         if ret == 0 and "MAC" in output:
-            mac_addr = output.strip().split('MAC ( RO):')[1].strip()
+            mac_addr = output.strip().split("MAC ( RO):")[1].strip()
             return mac_addr
         else:
             raise FailException("Failed to check xen guest mac addr")
 
     def xen_guest_ip(self, ssh_xen, guest_name):
@@ -2474,11 +2905,16 @@
                 break
             if self.xen_guest_status(ssh_xen, guest_name) != "running":
                 break
             mac_addr = self.xen_guest_mac(ssh_xen, guest_name)
             guest_ip = self.get_ipaddr_bymac(mac_addr, ssh_xen)
-            if guest_ip is not False and guest_ip is not None and guest_ip != "" and self.ping_is_connected(guest_ip):
+            if (
+                guest_ip is not False
+                and guest_ip is not None
+                and guest_ip != ""
+                and self.ping_is_connected(guest_ip)
+            ):
                 return guest_ip
             logger.info("No guest ip found for xen, try again after 15s...")
             time.sleep(15)
 
     def xen_guest_add(self, ssh_xen, guest_name, sr_name, image_path):
@@ -2538,11 +2974,13 @@
         ret, output = self.runcmd(cmd, ssh_xen)
         for i in range(10):
             if self.xen_guest_status(ssh_xen, guest_name) == "suspended":
                 logger.info("Succeeded to suspend xen guest")
                 return True
-            logger.warning("xen guest status is not suspended, check again after 15s... ")
+            logger.warning(
+                "xen guest status is not suspended, check again after 15s... "
+            )
             time.sleep(15)
         raise FailException("Failed to suspend guest")
 
     def xen_guest_resume(self, ssh_xen, guest_name):
         cmd = "xe vm-resume vm={0}".format(guest_name)
@@ -2553,72 +2991,74 @@
                 return True
             logger.warning("xen guest status is not running, check again after 15s... ")
             time.sleep(15)
         raise FailException("Failed to resume xen guest")
 
-    #*********************************************
+    # *********************************************
     # Hypervisor Kubvirt Function
-    #*********************************************
+    # *********************************************
 
     def kubevirt_request(self, path):
         header_params = {}
-        header_params['Accept'] = 'application/json'
-        header_params['Content-Type'] = 'application/json'
-        header_params['Authorization'] = 'Bearer {0}'.format(deploy.kubevirt.token)
+        header_params["Accept"] = "application/json"
+        header_params["Content-Type"] = "application/json"
+        header_params["Authorization"] = "Bearer {0}".format(deploy.kubevirt.token)
         url = deploy.kubevirt.endpoint + path
         http = urllib3.PoolManager(
-            cert_reqs='CERT_NONE',
+            cert_reqs="CERT_NONE",
             num_pools=4,
             maxsize=4,
         )
-        r = http.request('GET', url, headers=header_params, retries=5)
+        r = http.request("GET", url, headers=header_params, retries=5)
         if PY3:
-            data = r.data.decode('utf8')
+            data = r.data.decode("utf8")
         else:
             data = r.data
 
         try:
             data = json.loads(data)
         except ValueError:
             data = r.data
         return data
 
     def kubevirt_version(self):
-        versions = self.kubevirt_request('/apis/kubevirt.io')
-        return versions['preferredVersion']['version']
+        versions = self.kubevirt_request("/apis/kubevirt.io")
+        return versions["preferredVersion"]["version"]
 
     def kubevirt_guest_attrs(self, guest_name):
         version = self.kubevirt_version()
-        vms = self.kubevirt_request('/apis/kubevirt.io/' + version + '/virtualmachineinstances')
+        vms = self.kubevirt_request(
+            "/apis/kubevirt.io/" + version + "/virtualmachineinstances"
+        )
         guest_attrs = {}
-        for vm in vms['items']:
-            if vm['metadata']['name'] == guest_name:
-                guest_attrs['guest_id'] = vm['spec']['domain']['firmware']['uuid']
-                guest_attrs['guest_node'] = vm['status']['nodeName']
-                guest_attrs['guest_status'] = vm['status']['phase']
+        for vm in vms["items"]:
+            if vm["metadata"]["name"] == guest_name:
+                guest_attrs["guest_id"] = vm["spec"]["domain"]["firmware"]["uuid"]
+                guest_attrs["guest_node"] = vm["status"]["nodeName"]
+                guest_attrs["guest_status"] = vm["status"]["phase"]
         return guest_attrs
 
     def kubevirt_host_attrs(self, node_name):
-        nodes = self.kubevirt_request('/api/v1/nodes')
+        nodes = self.kubevirt_request("/api/v1/nodes")
         host_attrs = {}
-        for node in nodes['items']:
-            if node['metadata']['name'] == node_name:
-                host_attrs['host_uuid'] = node['status']['nodeInfo']['machineID']
-                for addr in node['status']['addresses']:
-                    if addr['type'] == 'Hostname':
-                        host_attrs['host_name'] = addr['address']
+        for node in nodes["items"]:
+            if node["metadata"]["name"] == node_name:
+                host_attrs["host_uuid"] = node["status"]["nodeInfo"]["machineID"]
+                for addr in node["status"]["addresses"]:
+                    if addr["type"] == "Hostname":
+                        host_attrs["host_name"] = addr["address"]
         return host_attrs
 
     def kubevirt_guest_ip(self, guest_name):
         guest_attrs = self.kubevirt_guest_attrs(guest_name)
         guest_port = deploy.kubevirt.guest_port
-        guest_ip = "{0}:{1}".format(guest_attrs['guest_node'], guest_port)
+        guest_ip = "{0}:{1}".format(guest_attrs["guest_node"], guest_port)
         return guest_ip
 
-    #*********************************************
+    # *********************************************
     # Hypervisor Nutanix Function
-    #*********************************************
+    # *********************************************
 
     def ahv_guest_ip(self):
         return deploy.ahv.guest_ip
 
     def ahv_guest_uuid(self):
@@ -2628,47 +3068,53 @@
         return deploy.ahv.host_uuid
 
     def ahv_host_name(self):
         return deploy.ahv.host_name
 
-    #*********************************************
+    # *********************************************
     # Hypervisor Libvirt Function
-    #*********************************************
+    # *********************************************
     def libvirt_host_uuid(self, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh capabilities |grep '<uuid>'"
         ret, output = self.runcmd(cmd, ssh_libvirt)
         if ret == 0 and "uuid" in output:
             uuid = re.findall(r"<uuid>(.*?)</uuid>", output)[-1].strip()
-            logger.info("Succeeded to get libvirt host({0}) uuid is: {1}".format(host, uuid))
+            logger.info(
+                "Succeeded to get libvirt host({0}) uuid is: {1}".format(host, uuid)
+            )
             return uuid
         else:
             raise FailException("Failed to check libvirt host({0}) uuid".format(host))
 
     def libvirt_pkg_install(self, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "yum clean all; yum install -y \
                 @virtualization-client @virtualization-hypervisor @virtualization-platform @virtualization-tools \
                 nmap libguestfs-tools net-tools iproute rpcbind libvirt virt-manager"
-        status, output = self.run_loop(cmd, ssh_libvirt, desc="install libvirt and related packages")
+        status, output = self.run_loop(
+            cmd, ssh_libvirt, desc="install libvirt and related packages"
+        )
         if status != "Yes":
-            raise FailException("Failed to install libvirt packages in {0}".format(host))
+            raise FailException(
+                "Failed to install libvirt packages in {0}".format(host)
+            )
         logger.info("Succeeded to install libvirt packages in {0}".format(host))
         cmd = "service libvirtd start"
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="restart libvirtd service")
         if ret == 0:
             logger.info("Succeeded to start libvirtd service in {0}".format(host))
         else:
             raise FailException("Failed to start libvirtd service in {0}".format(host))
 
     def libvirt_image_exist(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         image_path = deploy.libvirt.image_path
         xml_path = deploy.libvirt.xml_path
         guest_image = "{0}/{1}.qcow2".format(image_path, guest_name)
         guest_xml = "{0}/{1}.xml".format(xml_path, guest_name)
-        cmd = "ls {0}; ls {1}".format(guest_image, guest_xml) 
+        cmd = "ls {0}; ls {1}".format(guest_image, guest_xml)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt image and xml check")
         if ret == 0 and "No such file or directory" not in output:
             logger.info("libvirt image and xml exist in {0}".format(host))
             return True
         else:
@@ -2685,93 +3131,113 @@
         if self.url_validation(image_url) is False:
             raise FailException("image_url is not available")
         if self.url_validation(xml_url) is False:
             raise FailException("xml_url is not available")
         if self.libvirt_image_exist(guest_name, ssh_libvirt) is False:
-            cmd = "rm -f {0}; rm -rf {1}; mkdir -p {1}; chmod a+rwx {1}".format(guest_xml, image_path)
+            cmd = "rm -f {0}; rm -rf {1}; mkdir -p {1}; chmod a+rwx {1}".format(
+                guest_xml, image_path
+            )
             self.runcmd(cmd, ssh_libvirt, desc="libvirt image path clean and create")
             for i in range(5):
                 cmd = "curl -L {0} -o {1}".format(image_url, guest_image)
-                ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt image download")
+                ret, output = self.runcmd(
+                    cmd, ssh_libvirt, desc="libvirt image download"
+                )
                 if ret == 0:
                     break
                 logger.warning("Failed to download libvirt image, try again...")
             for i in range(5):
                 cmd = "curl -L {0} -o {1}".format(xml_url, guest_xml)
                 ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt xml download")
                 if ret == 0:
                     break
                 logger.warning("Failed to download libvirt xml file, try again...")
-            cmd = "sed -i -e 's|<name>.*</name>|<name>{0}</name>|g' {1}".format(guest_name, guest_xml)
+            cmd = "sed -i -e 's|<name>.*</name>|<name>{0}</name>|g' {1}".format(
+                guest_name, guest_xml
+            )
             self.runcmd(cmd, ssh_libvirt, desc="libvirt xml guest_name update")
-            cmd = "sed -i -e 's|<source file=.*/>|<source file=\"{0}\"/>|g' {1}".format(guest_image, guest_xml)
+            cmd = "sed -i -e 's|<source file=.*/>|<source file=\"{0}\"/>|g' {1}".format(
+                guest_image, guest_xml
+            )
             self.runcmd(cmd, ssh_libvirt, desc="libvirt xml source file update")
             guest_mac = self.randomMAC()
-            cmd = "sed -i -e 's|<mac address=.*/>|<mac address=\"{0}\"/>|g' {1}".format(guest_mac, guest_xml)
+            cmd = "sed -i -e 's|<mac address=.*/>|<mac address=\"{0}\"/>|g' {1}".format(
+                guest_mac, guest_xml
+            )
             self.runcmd(cmd, ssh_libvirt, desc="libvirt xml mac address update")
             if self.rhel_version(ssh_libvirt) == "9":
-                cmd = "sed -i -e 's|<graphics type=.* |<graphics type=\"vnc\" |g' {0}".format(guest_xml)
+                cmd = "sed -i -e 's|<graphics type=.* |<graphics type=\"vnc\" |g' {0}".format(
+                    guest_xml
+                )
                 self.runcmd(cmd, ssh_libvirt, desc="libvirt graphics type update")
         cmd = "virsh define {0}".format(guest_xml)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt define guest")
-        logger.info("Succeeded to download libvirt image to {0}".format(ssh_libvirt['host']))
+        logger.info(
+            "Succeeded to download libvirt image to {0}".format(ssh_libvirt["host"])
+        )
 
     def libvirt_guest_exist(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh  dominfo {0} | grep '^Name'".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt guest exist check")
         if ret == 0 and guest_name in output:
             logger.info("libvirt({0}) guest {1} is exist".format(host, guest_name))
             return True
         else:
             logger.info("libvirt({0}) guest {1} is not exist".format(host, guest_name))
             return False
 
     def libvirt_guest_uuid(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh domuuid {0}".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt guest uuid check")
         if ret == 0 and output is not None:
             uuid = output.strip()
-            logger.info("Succeeded to get libvirt({0}) guest uuid: {1}".format(host, uuid))
+            logger.info(
+                "Succeeded to get libvirt({0}) guest uuid: {1}".format(host, uuid)
+            )
             return uuid
         else:
             raise FailException("Failed to check libvirt({0}) guest uuid".format(host))
 
     def libvirt_guest_status(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh  domstate {0}".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt guest status check")
-        if ret == 0 and output.strip() is not None and output.strip() !="":
+        if ret == 0 and output.strip() is not None and output.strip() != "":
             status = output.strip()
             logger.info("libvirt({0}) guest status is: {1}".format(host, status))
             return status
         else:
             logger.info("Failed to check libvirt({0}) guest status".format(host))
             return "false"
 
     def libvirt_guests_all_clean(self, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh list --name  --all"
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt all guests list")
         if ret == 0 and output is not None and output != "":
-            vms = output.strip().split('\n')
+            vms = output.strip().split("\n")
             if len(vms) > 0:
                 for guest_name in vms:
                     self.libvirt_guest_delete(guest_name, ssh_libvirt)
         cmd = "sync;sync;sync;echo 1 > /proc/sys/vm/drop_caches"
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="clean memory cache")
         logger.info("Finished to clean all the libvirt({0}) guests".format(host))
 
     def libvirt_guest_mac(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh dumpxml {0} | grep 'mac address'".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="virsh dumpxml for mac")
         if ret == 0:
             mac_addr = re.findall(r"mac address='(.*?)'", output)[0]
             if mac_addr is not None or mac_addr != "":
-                logger.info("Succeeded to get libvirt({0}) guest mac: {1}".format(host, mac_addr))
+                logger.info(
+                    "Succeeded to get libvirt({0}) guest mac: {1}".format(
+                        host, mac_addr
+                    )
+                )
                 return mac_addr
         raise FailException("Failed to get libvirt({0}) guest mac address".format(host))
 
     def libvirt_guest_ip(self, guest_name, ssh_libvirt):
         for i in range(3):
@@ -2785,11 +3251,11 @@
                 return guest_ip
             logger.info("No guest ip found for libvirt, try again after 15s...")
             time.sleep(15)
 
     def libvirt_guest_add(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         if self.libvirt_guest_exist(guest_name, ssh_libvirt):
             self.libvirt_guest_delete(guest_name, ssh_libvirt)
         self.libvirt_image_download(guest_name, ssh_libvirt)
         for i in range(5):
             if self.libvirt_guest_exist(guest_name, ssh_libvirt):
@@ -2798,11 +3264,11 @@
             logger.warning("no libvirt guest found, try to search again...")
             time.sleep(15)
         raise FailException("Failed to create libvirt guest")
 
     def libvirt_guest_delete(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         logger.info("Start to delete libvirt({0}) guest".format(host))
         cmd = "virsh destroy {0}; virsh undefine {0}".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt guest delete")
         if self.libvirt_guest_exist(guest_name, ssh_libvirt):
             raise FailException("Failed to delete libvirt({0}) guest".format(host))
@@ -2813,13 +3279,17 @@
         for i in range(3):
             cmd = "virsh --connect qemu:///system start {0}".format(guest_name)
             ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt start guest ")
             if "Failed to connect socket to '/var/run/libvirt/virtlogd-sock'" in output:
                 cmd = "systemctl start virtlogd.socket"
-                ret, output = self.runcmd(cmd, ssh_libvirt, desc="start virtlogd.socket")
+                ret, output = self.runcmd(
+                    cmd, ssh_libvirt, desc="start virtlogd.socket"
+                )
                 cmd = "virsh --connect qemu:///system start {0}".format(guest_name)
-                ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt start guest again")
+                ret, output = self.runcmd(
+                    cmd, ssh_libvirt, desc="libvirt start guest again"
+                )
             elif "already active" in output:
                 cmd = "virsh resume {0}".format(guest_name)
                 ret, output = self.runcmd(cmd, ssh_libvirt, desc="libvirt resume guest")
             for i in range(10):
                 time.sleep(30)
@@ -2829,14 +3299,16 @@
             if guest_ip is not False and guest_ip is not None and guest_ip != "":
                 return guest_ip
             logger.warning("Failed to start libirt guest and try again after 15s...")
             self.libvirt_guest_stop(guest_name, ssh_libvirt)
             time.sleep(15)
-        raise FailException("Failed to start libvirt({0}) guest".format(ssh_libvirt['host']))
+        raise FailException(
+            "Failed to start libvirt({0}) guest".format(ssh_libvirt["host"])
+        )
 
     def libvirt_guest_stop(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh shutdown {0}".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="virsh shutdown")
         for i in range(10):
             if self.libvirt_guest_status(guest_name, ssh_libvirt) == "shut off":
                 logger.info("Succeeded to shutdown libvirt({0}) guest".format(host))
@@ -2844,11 +3316,11 @@
             logger.warning("libvirt guest is not shut off, check again after 15s...")
             time.sleep(15)
         raise FailException("Failed to shutdown libvirt({0}) guest".format(host))
 
     def libvirt_guest_suspend(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh suspend {0}".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="virsh suspend")
         for i in range(10):
             if self.libvirt_guest_status(guest_name, ssh_libvirt) == "paused":
                 logger.info("Succeeded to pause libvirt({0}) guest".format(host))
@@ -2856,73 +3328,74 @@
             logger.warning("libvirt guest is not paused, check again after 15s...")
             time.sleep(15)
         raise FailException("Failed to pause libvirt({0}) guest".format(host))
 
     def libvirt_guest_resume(self, guest_name, ssh_libvirt):
-        host = ssh_libvirt['host']
+        host = ssh_libvirt["host"]
         cmd = "virsh resume {0}".format(guest_name)
         ret, output = self.runcmd(cmd, ssh_libvirt, desc="virsh resume")
         for i in range(10):
             if self.libvirt_guest_status(guest_name, ssh_libvirt) == "running":
                 logger.info("Succeeded to resume libvirt({0}) guest".format(host))
                 return True
             logger.warning("libvirt guest is not running, check again after 15s...")
             time.sleep(15)
         raise FailException("Failed to resume libvirt({0}) guest".format(host))
 
-    #*********************************************
+    # *********************************************
     # Hypervisor VDSM and RHEVM function
-    #*********************************************
+    # *********************************************
     def rhevm_admin_get(self, ssh_rhevm):
         hostname = self.get_hostname(ssh_rhevm)
         admin_server = "https://{0}:443/ovirt-engine".format(hostname)
         return admin_server
 
     def rhevm_config_get(self):
         config = dict()
-        config['admin_user'] = deploy.rhevm.rhevm_admin_user
-        config['admin_passwd'] = deploy.rhevm.rhevm_admin_passwd
-        config['master'] = deploy.rhevm.master
-        config['master_user'] = deploy.rhevm.master_user
-        config['master_passwd'] = deploy.rhevm.master_passwd
-        config['slave'] = deploy.rhevm.slave
-        config['slave_user'] = deploy.rhevm.slave_user
-        config['slave_passwd'] = deploy.rhevm.slave_passwd
-        config['datacenter'] = deploy.rhevm.datacenter
-        config['cluster'] = deploy.rhevm.cluster
-        config['cputype'] = deploy.rhevm.cputype
-        config['storage'] = deploy.rhevm.storage
-        config['guest_name'] = deploy.rhevm.guest_name
-        config['guest_user'] = deploy.rhevm.guest_user
-        config['guest_passwd'] = deploy.rhevm.guest_passwd
-        config['template'] = deploy.rhevm.template
-        config['disk'] = deploy.rhevm.disk
-        config['nfs_path'] = deploy.rhevm.nfs_path
+        config["admin_user"] = deploy.rhevm.rhevm_admin_user
+        config["admin_passwd"] = deploy.rhevm.rhevm_admin_passwd
+        config["master"] = deploy.rhevm.master
+        config["master_user"] = deploy.rhevm.master_user
+        config["master_passwd"] = deploy.rhevm.master_passwd
+        config["slave"] = deploy.rhevm.slave
+        config["slave_user"] = deploy.rhevm.slave_user
+        config["slave_passwd"] = deploy.rhevm.slave_passwd
+        config["datacenter"] = deploy.rhevm.datacenter
+        config["cluster"] = deploy.rhevm.cluster
+        config["cputype"] = deploy.rhevm.cputype
+        config["storage"] = deploy.rhevm.storage
+        config["guest_name"] = deploy.rhevm.guest_name
+        config["guest_user"] = deploy.rhevm.guest_user
+        config["guest_passwd"] = deploy.rhevm.guest_passwd
+        config["template"] = deploy.rhevm.template
+        config["disk"] = deploy.rhevm.disk
+        config["nfs_path"] = deploy.rhevm.nfs_path
         return config
 
     def rhevm_api_data(self, ssh_rhevm):
         rhevm_config = self.rhevm_config_get()
         rhevm_url = self.rhevm_admin_get(ssh_rhevm)
-        api_url = f'{rhevm_url}/api'
-        curl_header = f'-H "Accept: application/xml" ' \
-                      f'-H "Content-Type: application/xml" ' \
-                      f'-H "Version: 4" ' \
-                      f'-s -k -u {rhevm_config["admin_user"]}:{rhevm_config["admin_passwd"]}'
+        api_url = f"{rhevm_url}/api"
+        curl_header = (
+            f'-H "Accept: application/xml" '
+            f'-H "Content-Type: application/xml" '
+            f'-H "Version: 4" '
+            f'-s -k -u {rhevm_config["admin_user"]}:{rhevm_config["admin_passwd"]}'
+        )
         return api_url, curl_header
 
     def rhevm_host_info_by_guest(self, ssh_rhevm, guest):
         api_url, curl_header = self.rhevm_api_data(ssh_rhevm)
         guest_info = self.rhevm_guest_info(ssh_rhevm, guest)
         host = re.findall(r"<address>(.+?)</address>", guest_info)[0]
         if not host:
-            raise FailException(f'Failed to get the host address of {guest}.')
+            raise FailException(f"Failed to get the host address of {guest}.")
         for i in range(3):
             ret, output = self.runcmd(
-                f'curl -X GET {curl_header} {api_url}/hosts?search={host}',
-                ssh_rhevm
-            )
-            if output and '/ovirt-engine/api/hosts/' in output:
+                f"curl -X GET {curl_header} {api_url}/hosts?search={host}", ssh_rhevm
+            )
+            if output and "/ovirt-engine/api/hosts/" in output:
                 return output
             logger.warning(f"no results found for {host}, try again after 15s...")
             time.sleep(15)
         raise FailException(f"Failed to get host info of {host}.")
 
@@ -2947,14 +3420,14 @@
             return host_hwuuid
         raise FailException(f"Failed to get the host hwuuid of {guest}")
 
     def rhevm_guest_info(self, ssh_rhevm, guest):
         api_url, curl_header = self.rhevm_api_data(ssh_rhevm)
-        cmd = f'curl -X GET {curl_header} {api_url}/vms?search={guest}'
+        cmd = f"curl -X GET {curl_header} {api_url}/vms?search={guest}"
         for i in range(3):
             ret, output = self.runcmd(cmd, ssh_rhevm)
-            if output and '/ovirt-engine/api/vms/' in output:
+            if output and "/ovirt-engine/api/vms/" in output:
                 return output
             logger.warning(f"no results found for {guest}, try again after 15s...")
             time.sleep(15)
         raise FailException(f"Failed to get guest info of {guest}")
 
@@ -2966,16 +3439,18 @@
         raise FailException(f"Failed to get the guest uuid for {guest}")
 
     def rhevm_guest_nic_info(self, ssh_rhevm, guest):
         guest_uuid = self.rhevm_guest_uuid(ssh_rhevm, guest)
         api_url, curl_header = self.rhevm_api_data(ssh_rhevm)
-        cmd = f'curl -X GET {curl_header} {api_url}/vms/{guest_uuid}/nics'
+        cmd = f"curl -X GET {curl_header} {api_url}/vms/{guest_uuid}/nics"
         for i in range(3):
             ret, output = self.runcmd(cmd, ssh_rhevm)
-            if output and '/ovirt-engine/api/vms/' in output:
+            if output and "/ovirt-engine/api/vms/" in output:
                 return output
-            logger.warning(f"no results found for nics of {guest}, try again after 15s...")
+            logger.warning(
+                f"no results found for nics of {guest}, try again after 15s..."
+            )
             time.sleep(15)
         raise FailException(f"Failed to get nics info of {guest}")
 
     def rhevm_guest_mac(self, ssh_rhevm, guest):
         nic_info = self.rhevm_guest_nic_info(ssh_rhevm, guest)
@@ -2987,59 +3462,63 @@
     def rhevm_guest_ip(self, ssh_rhevm, guest):
         mac_addr = self.rhevm_guest_mac(ssh_rhevm, guest)
         guest_ip = self.get_ipaddr_bymac(mac_addr, ssh_rhevm)
         if guest_ip:
             return guest_ip
-        raise FailException(f'Failed to get the guest ip of {guest}.')
+        raise FailException(f"Failed to get the guest ip of {guest}.")
 
     def rhevm_guest_status(self, ssh_rhevm, guest):
         guest_info = self.rhevm_guest_info(ssh_rhevm, guest)
         guest_status = re.findall(r"<status>(.+?)</status>", guest_info)[0]
         if guest_status:
-            logger.info(f'Succeeded to get the guest status({guest_status}) of {guest}.')
+            logger.info(
+                f"Succeeded to get the guest status({guest_status}) of {guest}."
+            )
             return guest_status
-        raise FailException(f'Failed to get the guest status of {guest}.')
+        raise FailException(f"Failed to get the guest status of {guest}.")
 
     def rhevm_guest_start(self, ssh_rhevm, guest):
         api_url, curl_header = self.rhevm_api_data(ssh_rhevm)
         guest_uuid = self.rhevm_guest_uuid(ssh_rhevm, guest)
         post_data = '"<action/>"'
-        cmd = f'curl -X POST -d {post_data} {curl_header} {api_url}/vms/{guest_uuid}/start'
+        cmd = f"curl -X POST -d {post_data} {curl_header} {api_url}/vms/{guest_uuid}/start"
         for i in range(3):
             self.runcmd(cmd, ssh_rhevm)
             time.sleep(30)
             guest_status = self.rhevm_guest_status(ssh_rhevm, guest)
-            if guest_status == 'up' and self.rhevm_guest_ip(ssh_rhevm, guest):
-                logger.info(f'Succeeded to start {guest}.')
+            if guest_status == "up" and self.rhevm_guest_ip(ssh_rhevm, guest):
+                logger.info(f"Succeeded to start {guest}.")
                 return True
             logger.warning(f"Failed to start {guest}, try again.")
-        raise FailException(f'Failed to start {guest}.')
+        raise FailException(f"Failed to start {guest}.")
 
     def rhevm_guest_stop(self, ssh_rhevm, guest):
         api_url, curl_header = self.rhevm_api_data(ssh_rhevm)
         guest_uuid = self.rhevm_guest_uuid(ssh_rhevm, guest)
         post_data = '"<action><force>true</force></action>"'
-        cmd = f'curl -X POST -d {post_data} {curl_header} {api_url}/vms/{guest_uuid}/stop'
+        cmd = (
+            f"curl -X POST -d {post_data} {curl_header} {api_url}/vms/{guest_uuid}/stop"
+        )
         for i in range(3):
             self.runcmd(cmd, ssh_rhevm)
             time.sleep(30)
             guest_status = self.rhevm_guest_status(ssh_rhevm, guest)
-            if guest_status == 'down':
-                logger.info(f'Succeeded to stop {guest}.')
+            if guest_status == "down":
+                logger.info(f"Succeeded to stop {guest}.")
                 return True
             logger.warning(f"Failed to stop {guest}, try again.")
-        raise FailException(f'Failed to stop {guest}.')
+        raise FailException(f"Failed to stop {guest}.")
 
     def rhevm_guest_suspend(self, ssh_rhevm, guest):
         api_url, curl_header = self.rhevm_api_data(ssh_rhevm)
         guest_uuid = self.rhevm_guest_uuid(ssh_rhevm, guest)
         post_data = '"<action/>"'
-        cmd = f'curl -X POST -d {post_data} {curl_header} {api_url}/vms/{guest_uuid}/suspend'
+        cmd = f"curl -X POST -d {post_data} {curl_header} {api_url}/vms/{guest_uuid}/suspend"
         for i in range(3):
             self.runcmd(cmd, ssh_rhevm)
             time.sleep(30)
             guest_status = self.rhevm_guest_status(ssh_rhevm, guest)
-            if guest_status == 'suspended':
-                logger.info(f'Succeeded to suspend {guest}.')
+            if guest_status == "suspended":
+                logger.info(f"Succeeded to suspend {guest}.")
                 return True
             logger.warning(f"Failed to suspend {guest}, try again.")
-        raise FailException(f'Failed to suspend {guest}.')
+        raise FailException(f"Failed to suspend {guest}.")
would reformat /tmp/lint/virt_who/provision.py

Oh no! üí• üíî üí•
193 files would be reformatted, 9 files would be left unchanged.

