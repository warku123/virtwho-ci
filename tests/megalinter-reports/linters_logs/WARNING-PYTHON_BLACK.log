Results of black linter (version 23.1.0)
See documentation on https://megalinter.io/0d699a348a2c104040efd78f2d2970e6ae8e5769/descriptors/python_black/
-----------------------------------------------

‚ùå [ERROR] for workspace /tmp/lint
Linter raw log:
--- /tmp/lint/sca/test_virtwho_sca.py	2023-03-06 05:02:18.572378 +0000
+++ /tmp/lint/sca/test_virtwho_sca.py	2023-03-06 06:16:06.932449 +0000
@@ -4,68 +4,77 @@
 from virt_who.register import Register
 from virt_who.testing import Testing
 
 
 class VirtWhoSCATestCase(Testing):
-
     @classmethod
     def setUpClass(cls):
         super(VirtWhoSCATestCase, cls).setUpClass()
         register_config = cls.get_register_config(cls())
-        if 'satellite' in register_config['type']:
-            cls.satellite_sca_set(cls(), cls.ssh_host(cls()), register_config, enable=True)
+        if "satellite" in register_config["type"]:
+            cls.satellite_sca_set(
+                cls(), cls.ssh_host(cls()), register_config, enable=True
+            )
         else:
             cls.stage_sca_set(cls(), cls.ssh_host(cls()), register_config, enable=True)
-        cls.register_owner = register_config['owner']
+        cls.register_owner = register_config["owner"]
         cls.vw_case_init(cls())
         cls.vw_etc_conf_disable_all(cls())
         cls.vw_etc_sys_disable_all(cls())
         cls.vw_etc_d_delete_all(cls())
-        cls.vw_etc_d_mode_create(cls(), 'virtwho-config', '/etc/virt-who.d/virtwo_sca.conf')
-        cls.vw_option_enable(cls(), '[global]', '/etc/virt-who.conf')
-        cls.vw_option_enable(cls(), 'debug', '/etc/virt-who.conf')
-        cls.vw_option_update_value(cls(), 'debug', 'True', '/etc/virt-who.conf')
+        cls.vw_etc_d_mode_create(
+            cls(), "virtwho-config", "/etc/virt-who.d/virtwo_sca.conf"
+        )
+        cls.vw_option_enable(cls(), "[global]", "/etc/virt-who.conf")
+        cls.vw_option_enable(cls(), "debug", "/etc/virt-who.conf")
+        cls.vw_option_update_value(cls(), "debug", "True", "/etc/virt-who.conf")
         cls.host_uuid = cls.get_hypervisor_hostuuid(cls())
         cls.host_name = cls.get_hypervisor_hostname(cls())
         cls.guest_name = cls.get_guest_name(cls())
         cls.guest_uuid = cls.get_hypervisor_guestuuid(cls())
 
     @classmethod
     def tearDownClass(cls):
         register_config = cls.get_register_config(cls())
-        if 'satellite' in register_config['type']:
-            cls.satellite_sca_set(cls(), cls.ssh_host(cls()), register_config, enable=False)
+        if "satellite" in register_config["type"]:
+            cls.satellite_sca_set(
+                cls(), cls.ssh_host(cls()), register_config, enable=False
+            )
         else:
             cls.stage_sca_set(cls(), cls.ssh_host(cls()), register_config, enable=False)
 
     def get_guest_name(self):
         return self.get_hostname(self.ssh_guest())
 
     def test_vw_report_mapping_with_sca_enabled(self):
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         logger.info(f"---data is: {data}---")
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert (self.register_owner in data.keys())
-        assert (self.host_uuid in data[self.register_owner].keys())
-        assert (self.guest_uuid in data[self.register_owner].keys())
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.register_owner in data.keys()
+        assert self.host_uuid in data[self.register_owner].keys()
+        assert self.guest_uuid in data[self.register_owner].keys()
 
         # test hypervisor facts
-        facts_items = ['socket', 'type', 'dmi', 'version']
-        if self.get_config('hypervisor_type') in ('esx', 'rhevm', 'ahv'):
-            facts_items.append('cluster')
+        facts_items = ["socket", "type", "dmi", "version"]
+        if self.get_config("hypervisor_type") in ("esx", "rhevm", "ahv"):
+            facts_items.append("cluster")
         facts_dic = data[self.register_owner][self.host_uuid]
         for item in facts_items:
-            assert (item in facts_dic.keys())
-            assert (facts_dic[item] is not None)
+            assert item in facts_dic.keys()
+            assert facts_dic[item] is not None
 
     def test_vw_host_to_guest_association(self):
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert (self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid))
-        assert (self.vw_web_associate(self.host_name, self.host_uuid, self.guest_name, self.guest_uuid))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid)
+        assert self.vw_web_associate(
+            self.host_name, self.host_uuid, self.guest_name, self.guest_uuid
+        )
 
     def test_guest_entilement_with_sca_enabled(self):
-        ret, output = self.runcmd(cmd='subscription-manager status', ssh=self.ssh_guest())
-        assert ('Content Access Mode is set to Simple Content Access' in output)
+        ret, output = self.runcmd(
+            cmd="subscription-manager status", ssh=self.ssh_guest()
+        )
+        assert "Content Access Mode is set to Simple Content Access" in output
 
     def test_hypervisor_in_web(self):
         pass
would reformat /tmp/lint/sca/test_virtwho_sca.py
--- /tmp/lint/tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py	2023-03-06 05:02:18.572378 +0000
+++ /tmp/lint/tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py	2023-03-06 06:16:06.959838 +0000
@@ -2,50 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133652')
-        trigger_type = self.get_config('trigger_type')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133652")
+        trigger_type = self.get_config("trigger_type")
+        compose_id = self.get_config("rhel_compose")
         if "trigger-rhel" not in trigger_type:
             self.vw_case_skip(trigger_type)
 
         # case config
         results = dict()
-        pkg = self.pkg_check(self.ssh_host(), 'virt-who')
+        pkg = self.pkg_check(self.ssh_host(), "virt-who")
         if pkg is False:
             raise FailException("virt-who pkg is not found")
         if compose_id is None or compose_id == "":
             raise FailException("compose_id is not defined")
         repo_base, repo_extra = self.rhel_compose_url(compose_id)
 
         baseurl = repo_extra.split("/x86_64/")[0]
-        arch_list = [
-                'x86_64',
-                'ppc64le',
-                'aarch64',
-                's390x']
+        arch_list = ["x86_64", "ppc64le", "aarch64", "s390x"]
         if "RHEL-7" in compose_id:
             baseurl = repo_base.split("/Server/x86_64/")[0]
             arch_list = [
-                    'Client/x86_64',
-                    'Server/x86_64',
-                    'Server/ppc64',
-                    'Server/ppc64le', 
-                    'Server/s390x', 
-                    'Workstation/x86_64']
+                "Client/x86_64",
+                "Server/x86_64",
+                "Server/ppc64",
+                "Server/ppc64le",
+                "Server/s390x",
+                "Workstation/x86_64",
+            ]
 
         # case steps
         for arch in arch_list:
             pkg_url = f"{baseurl}/{arch}/os/Packages/{pkg}"
             if self.url_validation(pkg_url):
-                results.setdefault('step1', []).append(True)
+                results.setdefault("step1", []).append(True)
                 logger.info("{0} is exist in arch: {1}".format(pkg, arch))
             else:
-                results.setdefault('step1', []).append(False)
+                results.setdefault("step1", []).append(False)
                 logger.info("{0} is not exist in arch: {1}".format(pkg, arch))
 
         # case results
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py
--- /tmp/lint/gating/test_virtwho_gating.py	2023-03-06 05:02:18.572378 +0000
+++ /tmp/lint/gating/test_virtwho_gating.py	2023-03-06 06:16:07.026306 +0000
@@ -4,17 +4,16 @@
 from virt_who.register import Register
 from virt_who.testing import Testing
 
 
 class VirtWhoGatingTestCase(Testing):
-
     @classmethod
     def setUpClass(cls):
         super(VirtWhoGatingTestCase, cls).setUpClass()
         cls.config_name = "virtwho-config"
         cls.config_file = "/etc/virt-who.d/virtwo_gating.conf"
-        cls.global_file = '/etc/virt-who.conf'
+        cls.global_file = "/etc/virt-who.conf"
         cls.vw_case_init(cls())
         cls.host_name = cls.get_hypervisor_hostname(cls())
         cls.host_uuid = cls.get_hypervisor_hostuuid(cls())
         cls.host_hwuuid = cls.get_hypervisor_hwuuid(cls())
         cls.guest_name = cls.get_guest_name(cls())
@@ -23,93 +22,107 @@
     def setUp(self):
         self.vw_etc_conf_disable_all()
         self.vw_etc_sys_disable_all()
         self.vw_etc_d_delete_all()
         self.vw_etc_d_mode_create(self.config_name, self.config_file)
-        self.vw_option_enable('[global]', self.global_file)
-        self.vw_option_enable('debug', self.global_file)
-        self.vw_option_update_value('debug', 'True', self.global_file)
+        self.vw_option_enable("[global]", self.global_file)
+        self.vw_option_enable("debug", self.global_file)
+        self.vw_option_update_value("debug", "True", self.global_file)
 
     def get_guest_name(self):
         return self.get_hostname(self.ssh_guest())
 
     def test_virtwho_debug(self):
-        self.vw_option_update_value('debug', 'False', self.global_file)
+        self.vw_option_update_value("debug", "False", self.global_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert(self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=False))
-        self.vw_option_update_value('debug', 'True', self.global_file)
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
+        self.vw_option_update_value("debug", "True", self.global_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert(self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=True))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
 
     def test_virtwho_oneshot(self):
         data, tty_output, rhsm_output = self.vw_start(
-            'virt-who -o', exp_send=1, oneshot=True)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1))
+            "virt-who -o", exp_send=1, oneshot=True
+        )
+        assert self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
         data, tty_output, rhsm_output = self.vw_start(
-            'virt-who', exp_send=1, oneshot=False)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+            "virt-who", exp_send=1, oneshot=False
+        )
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
 
     def test_virtwho_interval(self):
         self.vw_option_enable("interval", self.global_file)
-        self.vw_option_update_value("interval", '60', self.global_file)
+        self.vw_option_update_value("interval", "60", self.global_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        assert(self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60,
-            exp_loopnum=1, exp_looptime=60))
+        assert self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
 
     def test_virtwho_hypervisor_id(self):
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
-        hypervisor_type = self.get_config('hypervisor_type')
-        steps = {'step1':'uuid', 'step2':'hostname'}
-        if hypervisor_type in ('esx', 'rhevm'):
-            steps['step3'] = 'hwuuid'
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
+        hypervisor_type = self.get_config("hypervisor_type")
+        steps = {"step1": "uuid", "step2": "hostname"}
+        if hypervisor_type in ("esx", "rhevm"):
+            steps["step3"] = "hwuuid"
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             self.vw_option_add("hypervisor_id", option, self.config_file)
             data, tty_output, rhsm_output = self.vw_start()
-            assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+            assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             if option == "hwuuid":
                 hypervisorId = self.host_hwuuid
             elif option == "hostname":
                 hypervisorId = self.host_name
             else:
                 hypervisorId = self.host_uuid
-            assert(hypervisorId in data[register_owner].keys())
+            assert hypervisorId in data[register_owner].keys()
             self.vw_option_del("hypervisor_id", self.config_file)
 
     def test_virtwho_rhsm_options(self):
         self.system_unregister(self.ssh_host())
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        self.vw_option_add("rhsm_hostname", register_config['server'], self.config_file)
+        register_type = register_config["type"]
+        self.vw_option_add("rhsm_hostname", register_config["server"], self.config_file)
         self.vw_option_add("rhsm_port", "443", self.config_file)
-        self.vw_option_add("rhsm_prefix", register_config['prefix'], self.config_file)
-        self.vw_option_add("rhsm_username", register_config['username'], self.config_file)
-        self.vw_option_add("rhsm_password", register_config['password'], self.config_file)
+        self.vw_option_add("rhsm_prefix", register_config["prefix"], self.config_file)
+        self.vw_option_add(
+            "rhsm_username", register_config["username"], self.config_file
+        )
+        self.vw_option_add(
+            "rhsm_password", register_config["password"], self.config_file
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         self.system_register(self.ssh_host(), register_type, register_config)
 
     def test_virtwho_vdc_subscription(self):
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        register_type = register_config["type"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
         data, tty_output, rhsm_output = self.vw_start()
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
         output = self.system_sku_consumed(self.ssh_guest())
-        assert(self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True))
-        ret, output = self.runcmd('subscription-manager repos --list', self.ssh_guest())
+        assert self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
+        ret, output = self.runcmd("subscription-manager repos --list", self.ssh_guest())
         if "stage" in register_type:
-            assert(self.vw_msg_search(output, "Available Repositories" , exp_exist=True))
+            assert self.vw_msg_search(output, "Available Repositories", exp_exist=True)
         else:
-            assert(self.vw_msg_search(output, "no repositories available" , exp_exist=True))
-        ret, output = self.runcmd('subscription-manager status', self.ssh_guest())
-        assert(self.vw_msg_search(output, "Overall Status: Current" , exp_exist=True))
-        assert(self.vw_msg_search(output, "Invalid" , exp_exist=False))
+            assert self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+        ret, output = self.runcmd("subscription-manager status", self.ssh_guest())
+        assert self.vw_msg_search(output, "Overall Status: Current", exp_exist=True)
+        assert self.vw_msg_search(output, "Invalid", exp_exist=False)
would reformat /tmp/lint/gating/test_virtwho_gating.py
--- /tmp/lint/tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py	2023-03-06 06:16:07.031127 +0000
@@ -2,42 +2,51 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133654')
-        trigger_type = self.get_config('trigger_type')
-        if trigger_type in ('trigger-rhev', 'trigger-brew', 'trigger-multiarch'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133654")
+        trigger_type = self.get_config("trigger_type")
+        if trigger_type in ("trigger-rhev", "trigger-brew", "trigger-multiarch"):
             self.vw_case_skip(trigger_type)
 
         # case config
         results = dict()
-        pkg = self.pkg_check(self.ssh_host(), 'virt-who')
+        pkg = self.pkg_check(self.ssh_host(), "virt-who")
 
         # case steps
         # If the virt-who package is installed
         if pkg:
-            logger.info(">>>step1: uninstall virt-who package and verify it was removed")
-            res = self.pkg_uninstall(self.ssh_host(), 'virt-who')
-            results.setdefault('step1', []).append(res)
+            logger.info(
+                ">>>step1: uninstall virt-who package and verify it was removed"
+            )
+            res = self.pkg_uninstall(self.ssh_host(), "virt-who")
+            results.setdefault("step1", []).append(res)
 
-            logger.info(">>>step2: install virt-who package and verify it was installed")
-            res = self.pkg_install(self.ssh_host(), 'virt-who')
-            results.setdefault('step2', []).append(res)
+            logger.info(
+                ">>>step2: install virt-who package and verify it was installed"
+            )
+            res = self.pkg_install(self.ssh_host(), "virt-who")
+            results.setdefault("step2", []).append(res)
         # The virt-who package is not installed
         else:
-            logger.info(">>>step1: install virt-who package and verify it was installed")
-            res = self.pkg_install(self.ssh_host(), 'virt-who')
-            results.setdefault('step1', []).append(res)
-            logger.info(">>>step2: uninstall virt-who package and verify it was removed")
-            res = self.pkg_uninstall(self.ssh_host(), 'virt-who')
-            results.setdefault('step2', []).append(res)
+            logger.info(
+                ">>>step1: install virt-who package and verify it was installed"
+            )
+            res = self.pkg_install(self.ssh_host(), "virt-who")
+            results.setdefault("step1", []).append(res)
+            logger.info(
+                ">>>step2: uninstall virt-who package and verify it was removed"
+            )
+            res = self.pkg_uninstall(self.ssh_host(), "virt-who")
+            results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: at last, make sure virt-who package is installed")
-        if self.pkg_check(self.ssh_host(), 'virt-who') is False:
-            res = self.pkg_install(self.ssh_host(), 'virt-who')
-            results.setdefault('step3', []).append(res)
+        if self.pkg_check(self.ssh_host(), "virt-who") is False:
+            res = self.pkg_install(self.ssh_host(), "virt-who")
+            results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py
--- /tmp/lint/tier1/tc_1003_check_virtwho_package_info.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tier1/tc_1003_check_virtwho_package_info.py	2023-03-06 06:16:07.069078 +0000
@@ -5,53 +5,61 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133656')
-        pkg_info = self.pkg_info(self.ssh_host(), 'virt-who')
-        compose_id = self.get_config('rhel_compose')
-        trigger_type = self.get_config('trigger_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133656")
+        pkg_info = self.pkg_info(self.ssh_host(), "virt-who")
+        compose_id = self.get_config("rhel_compose")
+        trigger_type = self.get_config("trigger_type")
         results = dict()
 
         logger.info(">>>step1: 'rpm -qi virt-who' contains valid 'Group' info")
-        results.setdefault('step1', []).append(
-            pkg_info.get("Group") == "System Environment/Base")
+        results.setdefault("step1", []).append(
+            pkg_info.get("Group") == "System Environment/Base"
+        )
 
         logger.info(">>>step2: 'rpm -qi virt-who' contains valid 'License' info")
         if "RHEL-9" in compose_id:
-            results.setdefault('step2', []).append(
-                pkg_info.get("License") == "GPLv2+ and LGPLv3+")
+            results.setdefault("step2", []).append(
+                pkg_info.get("License") == "GPLv2+ and LGPLv3+"
+            )
         else:
-            results.setdefault('step2', []).append(
-                pkg_info.get("License") == "GPLv2+")
+            results.setdefault("step2", []).append(pkg_info.get("License") == "GPLv2+")
 
         logger.info(">>>step3: 'rpm -qi virt-who' contains valid 'URL' info")
-        urls = ['https://github.com/virt-who/virt-who',
-                'https://github.com/candlepin/virt-who']
-        results.setdefault('step3', []).append(
-            any(url in pkg_info.get("URL") for url in urls))
+        urls = [
+            "https://github.com/virt-who/virt-who",
+            "https://github.com/candlepin/virt-who",
+        ]
+        results.setdefault("step3", []).append(
+            any(url in pkg_info.get("URL") for url in urls)
+        )
 
         logger.info(">>>step4: 'rpm -qi virt-who' contains valid 'Packager' info")
         msg = "Red Hat, Inc. <http://bugzilla.redhat.com/bugzilla>"
-        results.setdefault('step4', []).append(pkg_info.get("Packager") == msg)
+        results.setdefault("step4", []).append(pkg_info.get("Packager") == msg)
 
         logger.info(">>>step5: 'rpm -qi virt-who' contains valid 'Vendor' info")
-        results.setdefault('step5', []).append(pkg_info.get("Vendor") == "Red Hat, Inc.")
+        results.setdefault("step5", []).append(
+            pkg_info.get("Vendor") == "Red Hat, Inc."
+        )
 
         logger.info(">>>step6: 'rpm -qi virt-who' contains Signature info")
-        if trigger_type in ('trigger-brew'):
-            results.setdefault('step6', []).append("none" in pkg_info.get("Signature"))
+        if trigger_type in ("trigger-brew"):
+            results.setdefault("step6", []).append("none" in pkg_info.get("Signature"))
         else:
-            results.setdefault('step6', []).append("Key ID" in pkg_info.get("Signature"))
+            results.setdefault("step6", []).append(
+                "Key ID" in pkg_info.get("Signature")
+            )
         logger.info(">>>step7: 'virt-who --version' to check version")
-        vw_pkg = self.pkg_check(self.ssh_host(), 'virt-who')[9:15]
+        vw_pkg = self.pkg_check(self.ssh_host(), "virt-who")[9:15]
         logger.info("virt-who version should be {0}".format(vw_pkg))
-        ret, output = self.runcmd('virt-who --version', self.ssh_host())
+        ret, output = self.runcmd("virt-who --version", self.ssh_host())
         logger.info("'virt-who --version' output is {0}".format(output))
         if ret == 0 and vw_pkg in output:
-            results.setdefault('step7', []).append(True)
+            results.setdefault("step7", []).append(True)
         else:
-            results.setdefault('step7', []).append(False)
+            results.setdefault("step7", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1003_check_virtwho_package_info.py
--- /tmp/lint/tier1/tc_1005_check_virtwho_service_function.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tier1/tc_1005_check_virtwho_service_function.py	2023-03-06 06:16:07.120478 +0000
@@ -2,39 +2,44 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133659')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133659")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         steps = {
-                'step1':'restart',
-                'step2':'stop',
-                'step3':'start',
-                'step4':'try-restart',
-                'step5':'force-reload'
-                }
+            "step1": "restart",
+            "step2": "stop",
+            "step3": "start",
+            "step4": "try-restart",
+            "step5": "force-reload",
+        }
         if self.rhel_version(self.ssh_host()) == 6:
-            steps['step6'] = "condrestart"
+            steps["step6"] = "condrestart"
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: {1} virt-who service".format(step, option))
             ret, output = self.run_service(self.ssh_host(), "virt-who", option)
             if ret == 0:
                 if option == "stop":
-                    results.setdefault(step, []).append("running" != self.vw_service_status())
+                    results.setdefault(step, []).append(
+                        "running" != self.vw_service_status()
+                    )
                 else:
-                    results.setdefault(step, []).append("running" == self.vw_service_status())
+                    results.setdefault(step, []).append(
+                        "running" == self.vw_service_status()
+                    )
             else:
                 logger.error("failed to run '{0}' option".format(option))
                 results.setdefault(step, []).append(False)
 
         # case result
would reformat /tmp/lint/tier1/tc_1005_check_virtwho_service_function.py
--- /tmp/lint/tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py	2023-03-06 06:16:07.113289 +0000
@@ -2,40 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133657')
-        trigger_type = self.get_config('trigger_type')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133657")
+        trigger_type = self.get_config("trigger_type")
+        compose_id = self.get_config("rhel_compose")
         if "trigger-rhev" in trigger_type:
             self.vw_case_skip(trigger_type)
 
         results = dict()
         logger.info(">>>step1: virt-who have correct man page")
         msg = "Agent for reporting virtual guest IDs to Subscription"
         if "RHEL-9" in compose_id:
-            msg = "Agent  for  reporting  virtual guest IDs to an entitlement.*\n.*server"
-        ret, output = self.runcmd("man virt-who", self.ssh_host(), desc="run man virt-who")
-        results.setdefault('step1', []).append(self.vw_msg_search(output, msg))
+            msg = (
+                "Agent  for  reporting  virtual guest IDs to an entitlement.*\n.*server"
+            )
+        ret, output = self.runcmd(
+            "man virt-who", self.ssh_host(), desc="run man virt-who"
+        )
+        results.setdefault("step1", []).append(self.vw_msg_search(output, msg))
 
         logger.info(">>>step2: virt-who-config have correct man page")
         ret, output = self.runcmd("man virt-who-config", self.ssh_host())
-        results.setdefault('step2', []).append("configuration for virt-who" in output)
+        results.setdefault("step2", []).append("configuration for virt-who" in output)
         if "RHEL-8.4" in compose_id:
             msg = "backend names: libvirt, esx, rhevm, hyperv, fake, xen, or kube.*\n.*virt."
         elif "RHEL-9" in compose_id:
             msg = "backend names: ahv, libvirt, esx, hyperv, fake, or kubevirt."
             if "RHEL-9.0" in compose_id or "RHEL-9.1" in compose_id:
                 msg = "backend names: ahv, libvirt, esx, rhevm, hyperv, fake, or kube.*\n.*virt."
         else:
             msg = "backend names: ahv, libvirt, esx, rhevm, hyperv, fake, xen, or.*\n.*kubevirt"
-        results.setdefault('step2', []).append(self.vw_msg_search(output, msg))
+        results.setdefault("step2", []).append(self.vw_msg_search(output, msg))
 
         logger.info(">>>step3: virt-who have correct help page")
         ret, output = self.runcmd("virt-who --help", self.ssh_host())
-        results.setdefault('step3', []).append("optional arguments:" in output)
+        results.setdefault("step3", []).append("optional arguments:" in output)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py
--- /tmp/lint/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py	2023-03-06 05:02:18.574378 +0000
+++ /tmp/lint/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py	2023-03-06 06:16:07.154693 +0000
@@ -2,33 +2,34 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133789')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133789")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
         config_file = "/etc/sysconfig/virt-who"
         self.vw_etc_sys_mode_enable()
         self.vw_option_enable("VIRTWHO_DEBUG", filename=config_file)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', filename=config_file)
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=config_file)
 
         # case steps
         logger.info(">>>step1: run virt-who by /etc/sysconfig/virt-who")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py
--- /tmp/lint/tier1/tc_1006_run_virtwho_with_default_config.py	2023-03-06 05:02:18.573378 +0000
+++ /tmp/lint/tier1/tc_1006_run_virtwho_with_default_config.py	2023-03-06 06:16:07.158973 +0000
@@ -2,38 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133660')
-        trigger_type = self.get_config('trigger_type')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if trigger_type in ('trigger-rhev', 'trigger-brew', 'trigger-multiarch'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133660")
+        trigger_type = self.get_config("trigger_type")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if trigger_type in ("trigger-rhev", "trigger-brew", "trigger-multiarch"):
             self.vw_case_skip(trigger_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.pkg_uninstall(self.ssh_host(), 'virt-who')
-        self.pkg_install(self.ssh_host(), 'virt-who')
-        steps = {'step1':'service', 'step2':'cli'}
+        self.pkg_uninstall(self.ssh_host(), "virt-who")
+        self.pkg_install(self.ssh_host(), "virt-who")
+        steps = {"step1": "service", "step2": "cli"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who {1} by default".format(step, option))
             if option == "service":
                 data, tty_output, rhsm_output = self.vw_start()
             else:
                 data, tty_output, rhsm_output = self.vw_start(cli="virt-who")
-            if hypervisor_type in ('libvirt-local', 'vdsm'):
+            if hypervisor_type in ("libvirt-local", "vdsm"):
                 res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                res2 = self.vw_msg_search(rhsm_output, 'Error in libvirt backend', exp_exist=False)
+                res2 = self.vw_msg_search(
+                    rhsm_output, "Error in libvirt backend", exp_exist=False
+                )
             else:
                 res1 = self.op_normal_value(data, exp_error=2, exp_thread=1, exp_send=0)
-                res2 = self.vw_msg_search(rhsm_output, 'Error in libvirt backend', exp_exist=True)
+                res2 = self.vw_msg_search(
+                    rhsm_output, "Error in libvirt backend", exp_exist=True
+                )
             results.setdefault(step, []).append(res1)
             results.setdefault(step, []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1006_run_virtwho_with_default_config.py
--- /tmp/lint/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py	2023-03-06 05:02:18.574378 +0000
+++ /tmp/lint/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py	2023-03-06 06:16:07.190066 +0000
@@ -2,33 +2,34 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134107')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134107")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # case steps
         logger.info(">>>step1: run virt-who for {0}".format(config_file))
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py
--- /tmp/lint/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py	2023-03-06 05:02:18.574378 +0000
+++ /tmp/lint/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py	2023-03-06 06:16:07.209535 +0000
@@ -5,33 +5,33 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134108')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134108")
         self.vw_case_init()
 
         # case config
         results = dict()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
-            cmd = self.vw_cli_base() + '-d'
+            cmd = self.vw_cli_base() + "-d"
         else:
             config_name = "virtwho-config"
             config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
             self.vw_etc_d_mode_create(config_name, config_file)
             cmd = "virt-who -d"
 
         # case steps
         logger.info(">>>step1: run virt-who by cli")
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py
--- /tmp/lint/smoke/test_virtwho_smoke.py	2023-03-06 05:02:18.572378 +0000
+++ /tmp/lint/smoke/test_virtwho_smoke.py	2023-03-06 06:16:07.238669 +0000
@@ -4,17 +4,16 @@
 from virt_who.register import Register
 from virt_who.testing import Testing
 
 
 class VirtWhoSmokeTestCase(Testing):
-
     @classmethod
     def setUpClass(cls):
         super(VirtWhoSmokeTestCase, cls).setUpClass()
         cls.config_name = "virtwho-config"
         cls.config_file = "/etc/virt-who.d/virtwo_smoke.conf"
-        cls.global_file = '/etc/virt-who.conf'
+        cls.global_file = "/etc/virt-who.conf"
         cls.vw_case_init(cls())
         cls.register_config = cls.get_register_config(cls())
         cls.host_name = cls.get_hypervisor_hostname(cls())
         cls.host_uuid = cls.get_hypervisor_hostuuid(cls())
         cls.host_hwuuid = cls.get_hypervisor_hwuuid(cls())
@@ -24,66 +23,78 @@
     def setUp(self):
         self.vw_etc_conf_disable_all()
         self.vw_etc_sys_disable_all()
         self.vw_etc_d_delete_all()
         self.vw_etc_d_mode_create(self.config_name, self.config_file)
-        self.vw_option_enable('[global]', self.global_file)
-        self.vw_option_enable('debug', self.global_file)
-        self.vw_option_update_value('debug', 'True', self.global_file)
+        self.vw_option_enable("[global]", self.global_file)
+        self.vw_option_enable("debug", self.global_file)
+        self.vw_option_update_value("debug", "True", self.global_file)
 
     def get_guest_name(self):
         return self.get_hostname(self.ssh_guest())
 
     def test_vw_host_to_guest_association(self):
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-        assert (self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid))
-        assert (self.vw_web_associate(self.host_name, self.host_uuid, self.guest_name, self.guest_uuid))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+        assert self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid)
+        assert self.vw_web_associate(
+            self.host_name, self.host_uuid, self.guest_name, self.guest_uuid
+        )
 
     def test_vw_rhsm_options(self):
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.system_unregister(self.ssh_host())
-        register_type = self.register_config['type']
-        self.vw_option_add("rhsm_hostname", self.register_config['server'], self.config_file)
+        register_type = self.register_config["type"]
+        self.vw_option_add(
+            "rhsm_hostname", self.register_config["server"], self.config_file
+        )
         self.vw_option_add("rhsm_port", "443", self.config_file)
-        self.vw_option_add("rhsm_prefix", self.register_config['prefix'], self.config_file)
-        self.vw_option_add("rhsm_username", self.register_config['username'], self.config_file)
-        self.vw_option_add("rhsm_password", self.register_config['password'], self.config_file)
+        self.vw_option_add(
+            "rhsm_prefix", self.register_config["prefix"], self.config_file
+        )
+        self.vw_option_add(
+            "rhsm_username", self.register_config["username"], self.config_file
+        )
+        self.vw_option_add(
+            "rhsm_password", self.register_config["password"], self.config_file
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         self.system_register(self.ssh_host(), register_type, self.register_config)
 
     def test_vw_http_proxy(self):
         proxy_server = "{0}:{1}".format(deploy.proxy.server, deploy.proxy.port)
-        steps = {'step1':'http_proxy', 'step2':'https_proxy'}
+        steps = {"step1": "http_proxy", "step2": "https_proxy"}
         self.vw_option_enable("[system_environment]", self.global_file)
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who to check {1}".format(step, option))
             if option == "http_proxy":
                 value = "http://{0}".format(proxy_server)
             if option == "https_proxy":
                 value = "https://{0}".format(proxy_server)
             self.vw_option_enable(option, self.global_file)
             self.vw_option_update_value(option, value, self.global_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-            assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-            assert (self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server)))
+            assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+            assert self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server)
+            )
             self.vw_option_disable(option, self.global_file)
 
     def test_vw_hypervisor_id(self):
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        register_owner = self.register_config['owner']
-        if hypervisor_type in ('esx', 'rhevm'):
-            hypervisor_ids = ['uuid', 'hostname', 'hwuuid']
+        register_owner = self.register_config["owner"]
+        if hypervisor_type in ("esx", "rhevm"):
+            hypervisor_ids = ["uuid", "hostname", "hwuuid"]
         else:
-            hypervisor_ids = ['uuid', 'hostname']
+            hypervisor_ids = ["uuid", "hostname"]
         for hypervisor_id in hypervisor_ids:
-            if 'hwuuid' in hypervisor_ids:
+            if "hwuuid" in hypervisor_ids:
                 if hypervisor_id == "uuid":
                     ids = [self.host_uuid, self.host_name, self.host_hwuuid]
                 elif hypervisor_id == "hostname":
                     ids = [self.host_name, self.host_uuid, self.host_hwuuid]
                 else:
@@ -94,137 +105,146 @@
                 else:
                     ids = [self.host_name, self.host_uuid]
             logger.info(">>> check hypervisor_id in rhsm.log")
             self.vw_option_add("hypervisor_id", hypervisor_id, self.config_file)
             data, tty_output, rhsm_output = self.vw_start()
-            assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
-            assert (ids[0] in data[register_owner].keys())
+            assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
+            assert ids[0] in data[register_owner].keys()
             logger.info(">>> check only single hypervisor name on Satellite WebUI")
             ssh_sat = self.register_config["ssh_sat"]
-            admin_user = self.register_config['username']
-            admin_passwd = self.register_config['password']
+            admin_user = self.register_config["username"]
+            admin_passwd = self.register_config["password"]
             cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(
-                admin_user, admin_passwd)
+                admin_user, admin_passwd
+            )
             ret, result = self.runcmd(cmd, ssh_sat)
             assert (self.vw_msg_search(result, "virt-who-" + ids[0]), True)
-            assert (self.vw_msg_search(result, "virt-who-" + ids[1], False))
-            if 'hwuuid' in hypervisor_ids:
-                assert (self.vw_msg_search(result, "virt-who-" + ids[2], False))
+            assert self.vw_msg_search(result, "virt-who-" + ids[1], False)
+            if "hwuuid" in hypervisor_ids:
+                assert self.vw_msg_search(result, "virt-who-" + ids[2], False)
             self.vw_option_del("hypervisor_id", self.config_file)
 
     def test_vw_vdc_subscription(self):
-        vdc_physical_sku = self.register_config['vdc']
-        vdc_virtual_sku = self.register_config['vdc_bonus']
+        vdc_physical_sku = self.register_config["vdc"]
+        vdc_virtual_sku = self.register_config["vdc_bonus"]
         data, tty_output, rhsm_output = self.vw_start()
-        assert(self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         logger.info(">>> attach virtual vdc pool for guest")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert(self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True))
-        ret, output = self.runcmd('subscription-manager repos --list', self.ssh_guest())
-        assert(self.vw_msg_search(output, "no repositories available" , exp_exist=True))
-        ret, output = self.runcmd('subscription-manager status', self.ssh_guest())
-        assert(self.vw_msg_search(output, "Overall Status: Current" , exp_exist=True))
-        assert(self.vw_msg_search(output, "Invalid" , exp_exist=False))
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
+        ret, output = self.runcmd("subscription-manager repos --list", self.ssh_guest())
+        assert self.vw_msg_search(output, "no repositories available", exp_exist=True)
+        ret, output = self.runcmd("subscription-manager status", self.ssh_guest())
+        assert self.vw_msg_search(output, "Overall Status: Current", exp_exist=True)
+        assert self.vw_msg_search(output, "Invalid", exp_exist=False)
         logger.info(">>> virtual vdc pool is revoked after unattach physical sku")
         self.vw_web_unattach(self.host_name, self.host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-        assert (self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False))
+        assert self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False)
 
     def test_virtwho_limited_subscription(self):
-        limited_sku = self.register_config['limit']
+        limited_sku = self.register_config["limit"]
         data, tty_output, rhsm_output = self.vw_start()
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         logger.info(">>> attach virtual limited pool for guest")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_host(), limited_sku, "physical")
-        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limited_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, limited_sku))
-        ret, output = self.runcmd('subscription-manager repos --list', self.ssh_guest())
-        assert (self.vw_msg_search(output, "no repositories available"))
-        ret, output = self.runcmd('subscription-manager status', self.ssh_guest())
-        assert (self.vw_msg_search(output, "Overall Status: Current"))
-        assert (self.vw_msg_search(output, "Invalid", exp_exist=False))
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, limited_sku)
+        ret, output = self.runcmd("subscription-manager repos --list", self.ssh_guest())
+        assert self.vw_msg_search(output, "no repositories available")
+        ret, output = self.runcmd("subscription-manager status", self.ssh_guest())
+        assert self.vw_msg_search(output, "Overall Status: Current")
+        assert self.vw_msg_search(output, "Invalid", exp_exist=False)
         logger.info(">>> no virtual limit pool for guest any more")
-        output = self.system_sku_attr(self.ssh_guest(), limited_sku, "virtual", exp_exist=False)
-        assert (self.vw_msg_search(str(output), limited_sku, exp_exist=False))
+        output = self.system_sku_attr(
+            self.ssh_guest(), limited_sku, "virtual", exp_exist=False
+        )
+        assert self.vw_msg_search(str(output), limited_sku, exp_exist=False)
         logger.info(">>> limit bonus pool is revoked after unattach physical sku")
         self.vw_web_unattach(self.host_name, self.host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-        assert (self.vw_msg_search(output, limited_sku, exp_exist=False))
+        assert self.vw_msg_search(output, limited_sku, exp_exist=False)
 
     def test_virtwho_unlimited_subscription(self):
-        unlimited_sku = self.register_config['unlimit']
+        unlimited_sku = self.register_config["unlimit"]
         data, tty_output, rhsm_output = self.vw_start()
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         logger.info(">>> attach virtual unlimit pool for guest")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, unlimited_sku))
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, unlimited_sku)
         logger.info(">>>  virtual unlimit sku can be listed in guest ")
         output = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        assert (self.vw_msg_search(str(output), unlimited_sku))
+        assert self.vw_msg_search(str(output), unlimited_sku)
         logger.info(">>> virtual unlimit pool is revoked after unattach physical sku")
         self.vw_web_unattach(self.host_name, self.host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-        assert (self.vw_msg_search(output, unlimited_sku, exp_exist=False))
+        assert self.vw_msg_search(output, unlimited_sku, exp_exist=False)
 
     def test_virtwho_instance_subscription(self):
-        instance_sku = self.register_config['instance']
+        instance_sku = self.register_config["instance"]
         logger.info(">>> set cpu.cpu_socket(s) to 8 in guest")
-        assert (self.system_custom_facts_create(self.ssh_guest(), 'cpu.cpu_socket(s)', '8'))
+        assert self.system_custom_facts_create(
+            self.ssh_guest(), "cpu.cpu_socket(s)", "8"
+        )
         logger.info(">>> attach physical instance sku for guest without quantity")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        self.system_sku_attach(self.ssh_guest(), sku_attrs['pool_id'])
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, instance_sku))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*1'))
-        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))
+        self.system_sku_attach(self.ssh_guest(), sku_attrs["pool_id"])
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, instance_sku)
+        assert self.vw_msg_search(output, "Quantity Used:.*1")
+        assert self.vw_msg_search(output, "Status Details:.*Subscription is current")
         logger.info(">>> attach physical instance sku for guest with quantity=1")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        self.system_sku_attach(self.ssh_guest(), sku_attrs['pool_id'], quantity=1)
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, instance_sku))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*1'))
-        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))
+        self.system_sku_attach(self.ssh_guest(), sku_attrs["pool_id"], quantity=1)
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, instance_sku)
+        assert self.vw_msg_search(output, "Quantity Used:.*1")
+        assert self.vw_msg_search(output, "Status Details:.*Subscription is current")
         logger.info(">>> attach physical instance sku for guest with quantity=2")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        self.system_sku_attach(self.ssh_guest(), sku_attrs['pool_id'], quantity=2)
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, instance_sku))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*2'))
-        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))
+        self.system_sku_attach(self.ssh_guest(), sku_attrs["pool_id"], quantity=2)
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, instance_sku)
+        assert self.vw_msg_search(output, "Quantity Used:.*2")
+        assert self.vw_msg_search(output, "Status Details:.*Subscription is current")
         logger.info(">>> attach physical instance sku for guest with quantity=6")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        self.system_sku_attach(self.ssh_guest(), sku_attrs['pool_id'], quantity=6)
-        output = self.system_sku_consumed(self.ssh_guest())
-        assert (self.vw_msg_search(output, instance_sku, exp_exist=True))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*2'))
-        assert (self.vw_msg_search(output, 'Quantity Used:.*6'))
-        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))
+        self.system_sku_attach(self.ssh_guest(), sku_attrs["pool_id"], quantity=6)
+        output = self.system_sku_consumed(self.ssh_guest())
+        assert self.vw_msg_search(output, instance_sku, exp_exist=True)
+        assert self.vw_msg_search(output, "Quantity Used:.*2")
+        assert self.vw_msg_search(output, "Quantity Used:.*6")
+        assert self.vw_msg_search(output, "Status Details:.*Subscription is current")
         self.system_custom_facts_remove(self.ssh_guest())
 
     def test_temporary_sku(self):
         logger.info(">>> check virtual temporary sku exist in guest")
         self.system_sku_refresh(self.ssh_guest())
         ret, output = self.runcmd("subscription-manager list --av", self.ssh_guest())
-        assert (self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=True))
+        assert self.vw_msg_search(
+            output, "Subscription Type: .*Temporary", exp_exist=True
+        )
         logger.info(">>> run virt-who service and check temporary sku disappear")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))
+        assert self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         self.system_sku_refresh(self.ssh_guest())
         ret, output = self.runcmd("subscription-manager list --av", self.ssh_guest())
-        assert (self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=False))
+        assert self.vw_msg_search(
+            output, "Subscription Type: .*Temporary", exp_exist=False
+        )
would reformat /tmp/lint/smoke/test_virtwho_smoke.py
--- /tmp/lint/tier1/tc_1010_check_virtwho_debug_function_by_cli.py	2023-03-06 05:02:18.574378 +0000
+++ /tmp/lint/tier1/tc_1010_check_virtwho_debug_function_by_cli.py	2023-03-06 06:16:07.228730 +0000
@@ -5,19 +5,19 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133661')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133661")
         self.vw_case_init()
 
         # case config
         results = dict()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
             cmd = self.vw_cli_base()
-            cmd_debug = self.vw_cli_base() + '-d'
+            cmd_debug = self.vw_cli_base() + "-d"
         else:
             config_name = "virtwho-config"
             config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
             self.vw_etc_d_mode_create(config_name, config_file)
             cmd = "virt-who"
@@ -26,22 +26,22 @@
         # case steps
         logger.info(">>>step1: Run virt-who by cli with -d option")
         data, tty_output, rhsm_output = self.vw_start(cmd_debug, exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=tty_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         logger.info(">>>step2: Run virt-who by cli without -d option")
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=tty_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1010_check_virtwho_debug_function_by_cli.py
--- /tmp/lint/tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py	2023-03-06 06:16:07.279434 +0000
@@ -5,16 +5,16 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133649')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133649")
         self.vw_case_init()
 
         # case config
         results = dict()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
             cmd = self.vw_cli_base()
             cmd_oneshot = self.vw_cli_base() + "-o"
         else:
             config_name = "virtwho-config"
@@ -23,22 +23,23 @@
             cmd = "virt-who"
             cmd_oneshot = "virt-who -o"
 
         # case step
         logger.info(">>>step1: Run virt-who by cli with -o option")
-        data, tty_output, rhsm_output = self.vw_start(cmd_oneshot, exp_send=1,
-                                                      oneshot=True)
+        data, tty_output, rhsm_output = self.vw_start(
+            cmd_oneshot, exp_send=1, oneshot=True
+        )
         res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: Run virt-who by cli without -o option")
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py
--- /tmp/lint/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py	2023-03-06 06:16:07.292029 +0000
@@ -5,12 +5,12 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133662')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133662")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
@@ -24,26 +24,30 @@
         self.vw_option_enable("VIRTWHO_DEBUG", filename=sysconf_file)
         self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         logger.info('>>>step2: Run virt-who with "VIRTWHO_DEBUG=0"')
         self.vw_option_update_value("VIRTWHO_DEBUG", "0", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        res2 = self.vw_msg_search(
+            output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info('>>>step3: Run virt-who with "VIRTWHO_DEBUG" disabled')
         self.vw_option_disable("VIRTWHO_DEBUG", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(
+            output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py
--- /tmp/lint/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py	2023-03-06 06:16:07.320268 +0000
@@ -5,12 +5,12 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133651')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133651")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
@@ -23,21 +23,21 @@
         logger.info('>>>step1: Run virt-who with "VIRTWHO_ONE_SHOT=1"')
         self.vw_option_enable("VIRTWHO_ONE_SHOT", filename=sysconf_file)
         self.vw_option_update_value("VIRTWHO_ONE_SHOT", "1", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=True)
         res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info('>>>step2: Run virt-who with "VIRTWHO_ONE_SHOT=0"')
         self.vw_option_update_value("VIRTWHO_ONE_SHOT", "0", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info('>>>step3: Run virt-who with "VIRTWHO_ONE_SHOT" disabled')
         self.vw_option_disable("VIRTWHO_ONE_SHOT", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py
--- /tmp/lint/tier1/tc_1016_check_print_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1016_check_print_function_by_cli.py	2023-03-06 06:16:07.364321 +0000
@@ -5,51 +5,48 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133653')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133653")
         self.vw_case_init()
 
         # case config
         results = dict()
         json_file = "/tmp/file.json"
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
-        compose_id = self.get_config('rhel_compose')
-        hypervisor_type = self.get_config('hypervisor_type')
+        compose_id = self.get_config("rhel_compose")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "RHEL-7" in compose_id:
             cmd = self.vw_cli_base() + "-p > {0}".format(json_file)
             cmd_debug = self.vw_cli_base() + "-d -p > {0}".format(json_file)
         else:
             config_name = "virtwho-config"
             config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
             self.vw_etc_d_mode_create(config_name, config_file)
             cmd = "virt-who -p > {0}".format(json_file)
             cmd_debug = "virt-who -d -p > {0}".format(json_file)
-        steps = {
-            'step1': cmd,
-            'step2': cmd_debug
-        }
+        steps = {"step1": cmd, "step2": cmd_debug}
 
         # case steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check print option".format(step))
-            data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=0,
-                                                          web_check=False)
+            data, tty_output, rhsm_output = self.vw_start(
+                cmd, exp_send=0, web_check=False
+            )
             res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=0)
             results.setdefault(step, []).append(res)
-            ret, output = self.runcmd("cat {0}".format(json_file),
-                                      self.ssh_host())
+            ret, output = self.runcmd("cat {0}".format(json_file), self.ssh_host())
             res = self.vw_msg_search(output, guest_uuid, exp_exist=True)
             results.setdefault(step, []).append(res)
-            if hypervisor_type not in ('libvirt-local', 'vdsm'):
+            if hypervisor_type not in ("libvirt-local", "vdsm"):
                 res = self.vw_msg_search(output, host_uuid, exp_exist=True)
                 results.setdefault(step, []).append(res)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1016_check_print_function_by_cli.py
--- /tmp/lint/tier1/tc_1014_check_interval_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1014_check_interval_function_by_cli.py	2023-03-06 06:16:07.376293 +0000
@@ -5,16 +5,16 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133650')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133650")
         self.vw_case_init()
 
         # case config
         results = dict()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
             cmd = self.vw_cli_base() + "-d"
             cmd_i_10 = self.vw_cli_base() + "-d -i 10"
             cmd_i_60 = self.vw_cli_base() + "-d -i 60"
             cmd_i_120 = self.vw_cli_base() + "-d -i 120"
@@ -28,39 +28,60 @@
             cmd_i_120 = "virt-who -d -i 120"
 
         # case steps
         logger.info(">>>step1: run virt-who without -i option")
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1,
-                                   exp_send=1, exp_interval=3600)
-        results.setdefault('step1', []).append(res)
+        res = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with -i 10 option")
-        msg = "Interval value can't be lower than 60 seconds. " \
-              "Default value of 3600 seconds will be used"
+        msg = (
+            "Interval value can't be lower than 60 seconds. "
+            "Default value of 3600 seconds will be used"
+        )
         data, tty_output, rhsm_output = self.vw_start(cmd_i_10, exp_send=1)
-        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1,
-                                    exp_send=1, exp_interval=3600)
+        res1 = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
         res2 = self.vw_msg_search(tty_output, msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: run virt-who with -i 60 option")
-        data, tty_output, rhsm_output = self.vw_start(cmd_i_60, exp_send=1, exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1,
-                                   exp_interval=60, exp_loopnum=1, exp_looptime=60)
-        results.setdefault('step3', []).append(res)
+        data, tty_output, rhsm_output = self.vw_start(
+            cmd_i_60, exp_send=1, exp_loopnum=1
+        )
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: run virt-who with -i 120 option")
-        data, tty_output, rhsm_output = self.vw_start(cmd_i_120, exp_send=1,
-                                                      exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1,
-                                   exp_interval=120, exp_loopnum=1, exp_looptime=120)
-        results.setdefault('step4', []).append(res)
+        data, tty_output, rhsm_output = self.vw_start(
+            cmd_i_120, exp_send=1, exp_loopnum=1
+        )
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=120,
+            exp_loopnum=1,
+            exp_looptime=120,
+        )
+        results.setdefault("step4", []).append(res)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2,3,4) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1014_check_interval_function_by_cli.py
--- /tmp/lint/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py	2023-03-06 06:16:07.375590 +0000
@@ -5,54 +5,68 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133655')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133655")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         option_tested = "VIRTWHO_INTERVAL"
         sysconf_file = "/etc/sysconfig/virt-who"
         self.vw_option_enable("VIRTWHO_DEBUG", filename=sysconf_file)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', filename=sysconf_file)
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=sysconf_file)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: disable VIRTWHO_INTERVAL option")
         self.vw_option_disable(option_tested, filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)
-        results.setdefault('step1', []).append(res)
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: enable VIRTWHO_INTERVAL and set to 10")
         self.vw_option_enable(option_tested, filename=sysconf_file)
-        self.vw_option_update_value(option_tested, '10', filename=sysconf_file)
+        self.vw_option_update_value(option_tested, "10", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)
-        results.setdefault('step2', []).append(res)
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: enable VIRTWHO_INTERVAL and set to 60")
-        self.vw_option_update_value(option_tested, '60', filename=sysconf_file)
+        self.vw_option_update_value(option_tested, "60", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
         res = self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1,
-            exp_interval=60, exp_loopnum=1, exp_looptime=60)
-        results.setdefault('step3', []).append(res)
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: enable VIRTWHO_INTERVAL and set to 120")
-        self.vw_option_update_value(option_tested, '120', filename=sysconf_file)
+        self.vw_option_update_value(option_tested, "120", filename=sysconf_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
         res = self.op_normal_value(
-            data, exp_error=0, exp_thread=1, exp_send=1,
-            exp_interval=120, exp_loopnum=1, exp_looptime=120)
-        results.setdefault('step4', []).append(res)
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=120,
+            exp_loopnum=1,
+            exp_looptime=120,
+        )
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1015_check_interval_function_by_etc_sysconfig.py
--- /tmp/lint/tier1/tc_1017_check_config_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1017_check_config_function_by_cli.py	2023-03-06 06:16:07.384320 +0000
@@ -2,14 +2,15 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133658')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133658")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "libvirt-local" in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
@@ -21,15 +22,15 @@
         # case steps
         logger.info(">>>step1: run virt-who with -c option")
         cmd = "virt-who -c {0} -d".format(config_file)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with --config option")
         cmd = "virt-who --config {0} -d".format(config_file)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1017_check_config_function_by_cli.py
--- /tmp/lint/tier1/tc_1019_check_log_dir_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1019_check_log_dir_function_by_cli.py	2023-03-06 06:16:07.436645 +0000
@@ -5,12 +5,12 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134121')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134121")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
@@ -18,11 +18,11 @@
         log_dir = "/var/log/rhsm/virtwho/"
         log_file = "/var/log/rhsm/virtwho/rhsm.log"
         guest_uuid = self.get_hypervisor_guestuuid()
         cmd1 = self.vw_cli_base() + "-d -l {0}".format(log_dir)
         cmd2 = self.vw_cli_base() + "-d --log-dir {0}".format(log_dir)
-        steps = {'step1': cmd1, 'step2': cmd2}
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # case steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check log-dir".format(step))
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
@@ -39,10 +39,10 @@
                 logger.error("{0} is not exist".format(log_file))
                 results.setdefault(step, []).append(False)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1019_check_log_dir_function_by_cli.py
--- /tmp/lint/tier1/tc_1020_check_log_file_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1020_check_log_file_function_by_cli.py	2023-03-06 06:16:07.469266 +0000
@@ -2,29 +2,32 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134122')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134122")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
         log_dir = "/var/log/rhsm/virtwho"
         log_file = "/var/log/rhsm/virtwho/virtwho.log"
         guest_uuid = self.get_hypervisor_guestuuid()
-        cmd1 = self.vw_cli_base() + "-d -l {0} -f {1}".format(log_dir,log_file)
-        cmd2 = self.vw_cli_base() + "-d --log-dir {0} --log-file {1}".format(log_dir,log_file)
-        steps = {'step1':cmd1, 'step2':cmd2}
+        cmd1 = self.vw_cli_base() + "-d -l {0} -f {1}".format(log_dir, log_file)
+        cmd2 = self.vw_cli_base() + "-d --log-dir {0} --log-file {1}".format(
+            log_dir, log_file
+        )
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # case steps
-        for step, cmd in sorted(steps.items(),key=lambda item:item[0]):
+        for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check log-file".format(step))
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
             ret, output = self.runcmd("ls {0}".format(log_file), self.ssh_host())
@@ -38,10 +41,10 @@
                 logger.error("{0} is not exist".format(log_file))
                 results.setdefault(step, []).append(False)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1020_check_log_file_function_by_cli.py
--- /tmp/lint/tier1/tc_1018_check_log_per_config_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1018_check_log_per_config_function_by_cli.py	2023-03-06 06:16:07.474421 +0000
@@ -5,51 +5,51 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133696')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133696")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         guest_uuid = self.get_hypervisor_guestuuid()
         cmd1 = self.vw_cli_base() + "-d -m"
         cmd2 = self.vw_cli_base() + "-d --log-per-config"
-        steps = {'step1': cmd1, 'step2': cmd2}
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # Case Steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check log-per-config".format(step))
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
-            ret, output = self.runcmd('ls /var/log/rhsm/virtwho*', self.ssh_host())
+            ret, output = self.runcmd("ls /var/log/rhsm/virtwho*", self.ssh_host())
             if ret != 0 or output is None:
                 logger.error("Failed to find /var/log/rhsm/virtwho* files")
                 results.setdefault(step, []).append(False)
-            files = output.split('\n') 
-            ''' check files exist or not'''
+            files = output.split("\n")
+            """ check files exist or not"""
             if any("destination" in fd for fd in files):
                 logger.info("Succeeded to find virtwho.destination file")
-            else: 
+            else:
                 logger.error("Failed to find virtwho.destination file")
                 results.setdefault(step, []).append(False)
             if any("main" in fd for fd in files):
                 logger.info("Succeeded to find virtwho.main file")
-            else: 
+            else:
                 logger.error("Failed to find virtwho.main file")
                 results.setdefault(step, []).append(False)
             if any("rhsm_log" in fd for fd in files):
                 logger.info("Succeeded to find virtwho.rhsm_log file")
             else:
                 logger.error("Failed to find virtwho.rhsm_log file")
                 results.setdefault(step, []).append(False)
-            ''' check message is expected or not'''
+            """ check message is expected or not"""
             for fd in files:
                 fd = fd.strip()
                 ret, output = self.runcmd("cat {0}".format(fd), self.ssh_host())
                 if "destination" in fd:
                     d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)
@@ -62,17 +62,19 @@
                     m2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                     if m1 is False or m2 is False:
                         logger.error("Failed to validate virtwho.main file")
                         results.setdefault(step, []).append(False)
                 if "rhsm_log" in fd:
-                    r1 = self.vw_msg_search(output, "Using reporter_id=", exp_exist=True)
+                    r1 = self.vw_msg_search(
+                        output, "Using reporter_id=", exp_exist=True
+                    )
                     r2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                     if r1 is False or r2 is False:
                         logger.error("Failed to validate virtwho.rhsm_log file")
                         results.setdefault(step, []).append(False)
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
--- /tmp/lint/tier1/tc_1021_check_reporter_id_function_by_cli.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1021_check_reporter_id_function_by_cli.py	2023-03-06 06:16:07.486833 +0000
@@ -5,40 +5,44 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134123')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134123")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
         reporter_id = "virtwho_reporter_id_tc1021"
         cmd1 = self.vw_cli_base() + "-d -r {0}".format(reporter_id)
         cmd2 = self.vw_cli_base() + "-d --reporter-id {0}".format(reporter_id)
-        steps = {'step1': cmd1, 'step2': cmd2}
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # case steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who cli to check reporter_id".format(step))
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
-            if data['reporter_id'] == reporter_id:
-                logger.info("Succeeded to find the expected reporter_id: {0}"
-                            .format(reporter_id))
+            if data["reporter_id"] == reporter_id:
+                logger.info(
+                    "Succeeded to find the expected reporter_id: {0}".format(
+                        reporter_id
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.error("Failed to find the expected reporter_id: {0}"
-                             .format(reporter_id))
+                logger.error(
+                    "Failed to find the expected reporter_id: {0}".format(reporter_id)
+                )
                 results.setdefault(step, []).append(False)
 
         # case result
         notes = list()
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1018_check_log_per_config_function_by_cli.py
would reformat /tmp/lint/tier1/tc_1021_check_reporter_id_function_by_cli.py
--- /tmp/lint/tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py	2023-03-06 05:02:18.575378 +0000
+++ /tmp/lint/tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py	2023-03-06 06:16:07.515887 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133732')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133732")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
@@ -22,14 +23,14 @@
         t1 = threading.Thread(target=self.runcmd, args=(cmd, self.ssh_host()))
         t1.start()
         time.sleep(15)
         if self.vw_callback_thread_num() == 1:
             logger.info("Succeeded to start virt-who by cli")
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             logger.error("Failed to start virt-who by cli")
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: kill virt-who by 'kill -2'")
         for i in range(5):
             cmd = "ps -ef | grep virt-who -i | grep -v grep | awk '{print $2}' | xargs -I {} kill -2 {}"
             ret, output = self.runcmd(cmd, self.ssh_host())
@@ -40,12 +41,12 @@
             else:
                 is_killed = "No"
                 logger.warning("Failed to kill virt-who, try again ...")
         if is_killed == "Yes":
             logger.info("Succeeded to kill virt-who")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.info("Failed to kill virt-who")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py
--- /tmp/lint/tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py	2023-03-06 06:16:07.538165 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133734')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133734")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
@@ -17,22 +18,22 @@
 
         # case steps
         logger.info(">>>step1: restart virt-who service to keep it running")
         self.run_service(self.ssh_host(), "virt-who", "restart")
         if self.vw_service_status() == "running":
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             logger.error("Failed to start virt-who")
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: run virt-who by cli, will failed as 'already running'")
         cmd = "virt-who"
         ret, output = self.runcmd(cmd, self.ssh_host())
         if "already running" in output:
             logger.info("Succeeded to check, return 'already running' as expected")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.error("Failed to check, not return 'already running'")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py
--- /tmp/lint/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py	2023-03-06 06:16:07.559298 +0000
@@ -2,43 +2,44 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133736')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133736")
         self.vw_case_init()
 
         # case config
         results = dict()
 
         # case steps
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '1.31.0':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "1.31.0":
             logger.info(">>>step1: stop virt-who to check virt-who file permission")
             config_file = "/etc/sysconfig/virt-who"
             self.run_service(self.ssh_host(), "virt-who", "stop")
             cmd = "ls -l {0}".format(config_file)
             ret, output = self.runcmd(cmd, self.ssh_host())
             logger.info(output)
             if ret == 0 and output is not None and output != "":
                 res = self.vw_msg_search(output, "-rw-------")
-                results.setdefault('step1', []).append(res)
+                results.setdefault("step1", []).append(res)
             else:
                 logger.error("Failed to get virt-who file properties")
-                results.setdefault('step1', []).append(False)
+                results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: start virt-who to check virt-who.pid file permission")
         pid_file = "/var/run/virt-who.pid"
         self.run_service(self.ssh_host(), "virt-who", "start")
         cmd = "ls -l {0}".format(pid_file)
         ret, output = self.runcmd(cmd, self.ssh_host())
         logger.info(output)
         if ret == 0 and output is not None and output != "":
             res = self.vw_msg_search(output, "-rw-------")
-            results.setdefault('step2', []).append(res)
+            results.setdefault("step2", []).append(res)
         else:
             logger.error("Failed to get virt-who.pid properties")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py
--- /tmp/lint/tier1/tc_1025_start_virtwho_service_by_ssh.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1025_start_virtwho_service_by_ssh.py	2023-03-06 06:16:07.562625 +0000
@@ -2,46 +2,47 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133738')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133738")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.ssh_no_passwd_access(self.ssh_guest(), self.ssh_host())
-        host = self.ssh_host()['host']
+        host = self.ssh_host()["host"]
         port = 22
         if ":" in host:
-            var = host.split(':')
+            var = host.split(":")
             host = var[0]
             port = int(var[1])
 
         # case steps
         logger.info(">>>step1: ssh restart virt-who and check status")
         cmd = "ssh {0} -p {1} 'service virt-who restart'".format(host, port)
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if self.vw_service_status() == "running":
             logger.info("Succeeded to restart virt-who by ssh")
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             logger.error("Failed to restart virt-who by ssh")
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: ssh stop virt-who and check status")
         cmd = "ssh {0} -p {1} 'service virt-who stop'".format(host, port)
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if self.vw_service_status() != "running":
             logger.info("Succeeded to stop virt-who by ssh")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.error("Failed to stop virt-who by ssh")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1025_start_virtwho_service_by_ssh.py
--- /tmp/lint/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py	2023-03-06 06:16:07.612063 +0000
@@ -2,30 +2,33 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133730')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133730")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "libvirt-local" in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
-        logger.info(">>>step1: run virt-who service with one config file in /etc/virt-who.d/")
+        logger.info(
+            ">>>step1: run virt-who service with one config file in /etc/virt-who.d/"
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py	2023-03-06 06:16:07.619859 +0000
@@ -2,43 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133741')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133741")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         keywords = "test virt-who instead or not"
-        steps = {'step1':'/root/virt-who.py', 'step2':'/root/virt-who'}
+        steps = {"step1": "/root/virt-who.py", "step2": "/root/virt-who"}
         self.vw_thread_clean()
 
         # Case Steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to check {1} instead or not".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to check {1} instead or not".format(step, option)
+            )
             if "RHEL-7" in compose_id:
-                cmd = ('cat <<EOF > %s\n'
-                        '#!/usr/bin/python\n'
-                        'print "%s"\n'
-                        'EOF'
-                      ) % (option, keywords)
+                cmd = (
+                    "cat <<EOF > %s\n" "#!/usr/bin/python\n" 'print "%s"\n' "EOF"
+                ) % (option, keywords)
                 ret, output = self.runcmd(cmd, self.ssh_host())
                 cmd = "python {0}".format(option)
                 ret, output = self.runcmd(cmd, self.ssh_host())
             else:
-                cmd = ('cat <<EOF > %s\n'
-                        '#!/usr/libexec/platform-python\n'
-                        'print("%s")\n'
-                        'EOF'
-                      ) % (option, keywords)
+                cmd = (
+                    "cat <<EOF > %s\n"
+                    "#!/usr/libexec/platform-python\n"
+                    'print("%s")\n'
+                    "EOF"
+                ) % (option, keywords)
                 ret, output = self.runcmd(cmd, self.ssh_host())
                 cmd = "/usr/libexec/platform-python {0}".format(option)
                 ret, output = self.runcmd(cmd, self.ssh_host())
             if ret == 0 and keywords in output:
                 logger.info("Succeeded to run {0}".format(option))
--- /tmp/lint/tier1/tc_1028_check_guest_attr_by_curl.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1028_check_guest_attr_by_curl.py	2023-03-06 06:16:07.613889 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133745')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133745")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
@@ -21,40 +22,46 @@
         # case steps
         logger.info(">>>step1: config mode, check report send and no error msg ")
         self.vw_etc_d_mode_create(config_name, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check guest attributes by curl")
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        username = register_config['username']
-        password = register_config['password']
-        owner = register_config['owner']
-        api = register_config['api']
+        register_type = register_config["type"]
+        username = register_config["username"]
+        password = register_config["password"]
+        owner = register_config["owner"]
+        api = register_config["api"]
         if "stage" in register_type:
-            registered_id = self.stage_consumer_uuid(self.ssh_host(), register_config, host_name, host_uuid)
+            registered_id = self.stage_consumer_uuid(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
             cmd = "curl -s -k -u {0}:{1} {2}/consumers/{3}/guestids/{4}".format(
-                    username, password, api, registered_id, guest_uuid)
+                username, password, api, registered_id, guest_uuid
+            )
             ret, output = self.runcmd(cmd, self.ssh_host())
             if guest_uuid in output and "guestId" in output and "attributes" in output:
                 logger.info("Succeeded to check the guest attributes by curl")
-                results.setdefault('step2', []).append(True)
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("Failed to check the guest attributes by curl")
-                results.setdefault('step2', []).append(False)
+                results.setdefault("step2", []).append(False)
         if "satellite" in register_type:
-            guest_registered_id = self.satellite_host_id(self.ssh_host(), register_config, guest_name, guest_uuid)
+            guest_registered_id = self.satellite_host_id(
+                self.ssh_host(), register_config, guest_name, guest_uuid
+            )
             cmd = "curl -X GET -s -k -u {0}:{1} {2}/api/v2/hosts/{3}".format(
-                    username, password, api, guest_registered_id)
+                username, password, api, guest_registered_id
+            )
             ret, output = self.runcmd(cmd, self.ssh_host())
             attr1 = '"id":{0}'.format(guest_registered_id)
             if attr1 in output and guest_name in output:
                 logger.info("Succeeded to check the guest attributes by curl")
-                results.setdefault('step2', []).append(True)
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("Failed to check the guest attributes by curl")
-                results.setdefault('step2', []).append(False)
+                results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py
would reformat /tmp/lint/tier1/tc_1028_check_guest_attr_by_curl.py
--- /tmp/lint/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py	2023-03-06 06:16:07.639570 +0000
@@ -2,42 +2,47 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133746')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133746")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: restart virt-who service, check status and thread")
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "start")
         thread_num = self.vw_callback_thread_num()
-        results.setdefault('step1', []).append(thread_num == 1)
-        results.setdefault('step1', []).append(self.vw_service_status() == "running")
+        results.setdefault("step1", []).append(thread_num == 1)
+        results.setdefault("step1", []).append(self.vw_service_status() == "running")
         logger.info("virt-who thread number is: {0}".format(thread_num))
 
-        logger.info(">>>step2: restart rhsmcertd service , check virt-who status and thread")
+        logger.info(
+            ">>>step2: restart rhsmcertd service , check virt-who status and thread"
+        )
         ret, output = self.run_service(self.ssh_host(), "rhsmcertd", "restart")
         thread_num = self.vw_callback_thread_num()
-        results.setdefault('step2', []).append(thread_num == 1)
-        results.setdefault('step2', []).append(self.vw_service_status() == "running")
+        results.setdefault("step2", []).append(thread_num == 1)
+        results.setdefault("step2", []).append(self.vw_service_status() == "running")
         logger.info("virt-who thread number is: {0}".format(thread_num))
 
-        logger.info(">>>step3: restart virt-who service again , check virt-who status and thread")
+        logger.info(
+            ">>>step3: restart virt-who service again , check virt-who status and thread"
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py
--- /tmp/lint/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py	2023-03-06 06:16:07.666129 +0000
@@ -2,43 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133739')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133739")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         swap_file = "/etc/virt-who.d/.test.conf.swp"
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_etc_d_mode_create(config_name, swap_file)
 
         # case steps
         logger.info(">>>step1: check the swp file is ignored or not ")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, "test.conf.swp", exp_exist=False)
-        results.setdefault('step1', []).append(s2)
+        results.setdefault("step1", []).append(s2)
 
         logger.info(">>>step2: check how many modes in rhsm.log")
         modes = re.findall(r'Using configuration.*\("(.*?)" mode\)', rhsm_output)
         if len(modes) == 1:
-            logger.info("Succeeded to check, only one mode in rhsm.log: {0}".format(modes))
-            results.setdefault('step2', []).append(True)
+            logger.info(
+                "Succeeded to check, only one mode in rhsm.log: {0}".format(modes)
+            )
+            results.setdefault("step2", []).append(True)
         else:
-            logger.error("Failed to check, the modes number is not matched: {0}".format(modes))
-            results.setdefault('step2', []).append(False)
+            logger.error(
+                "Failed to check, the modes number is not matched: {0}".format(modes)
+            )
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py	2023-03-06 06:16:07.669231 +0000
@@ -2,46 +2,49 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133735')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133735")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # case steps
-        logger.info(">>>step1: enable mode in /etc/sysconfig/virt-who and config same mode in /etc/virt-who.d/")
+        logger.info(
+            ">>>step1: enable mode in /etc/sysconfig/virt-who and config same mode in /etc/virt-who.d/"
+        )
         self.vw_etc_sys_mode_enable()
         self.vw_etc_d_mode_create(config_name, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info duplicated or not")
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
         if "satellite62" in register_type:
             logger.info("Expected mapping info num: 1 for sat62")
-            results.setdefault('step2', []).append(num == 1)
+            results.setdefault("step2", []).append(num == 1)
         else:
             logger.info("Expected mapping info num: 2 for sat63 above and stage")
-            results.setdefault('step2', []).append(num == 2)
+            results.setdefault("step2", []).append(num == 2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py
--- /tmp/lint/tier1/tc_1037_check_sam_satellite_options_by_cli.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1037_check_sam_satellite_options_by_cli.py	2023-03-06 06:16:07.676624 +0000
@@ -5,34 +5,35 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133748')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133748")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
         cmd1 = self.vw_cli_base() + "--sam -d"
         cmd2 = self.vw_cli_base() + "--satellite6 -d"
-        steps = {'step1': cmd1, 'step2': cmd2}
+        steps = {"step1": cmd1, "step2": cmd2}
 
         # case steps
         for step, cmd in sorted(steps.items(), key=lambda item: item[0]):
-            logger.info(">>>{0}: run virt-who cli to check sam/satellite options"
-                        .format(step))
+            logger.info(
+                ">>>{0}: run virt-who cli to check sam/satellite options".format(step)
+            )
             data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s1)
 
         # case result
         notes = list()
         notes.append("Bug 1760175 - Remove --sam/--satellite6 or repair them?")
         notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1760175")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type == 'kubevirt':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1037_check_sam_satellite_options_by_cli.py
--- /tmp/lint/tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py	2023-03-06 06:16:07.703413 +0000
@@ -2,34 +2,37 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133701')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133701")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_file = "/etc/sysconfig/virt-who"
         self.vw_etc_sys_mode_enable()
         self.vw_option_enable("VIRTWHO_DEBUG", filename=config_file)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', filename=config_file)
-        steps = {'step1':'VIRTWHO_SAM', 'step2':'VIRTWHO_SATELLITE6'}
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=config_file)
+        steps = {"step1": "VIRTWHO_SAM", "step2": "VIRTWHO_SATELLITE6"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who to check {1}".format(step, option))
             self.vw_option_enable(option, filename=config_file)
-            self.vw_option_update_value(option, '1', filename=config_file)
+            self.vw_option_update_value(option, "1", filename=config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s1)
             self.vw_option_disable(option, filename=config_file)
 
         # case result
         notes = list()
-        notes.append("This case will be deprecated as bug https://bugzilla.redhat.com/show_bug.cgi?id=1368341")
+        notes.append(
+            "This case will be deprecated as bug https://bugzilla.redhat.com/show_bug.cgi?id=1368341"
+        )
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py
--- /tmp/lint/tier1/tc_1040_check_virt_who_password_function.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1040_check_virt_who_password_function.py	2023-03-06 06:16:07.712840 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133706')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133706")
         self.vw_case_init()
 
         # case config
         results = dict()
         password = "redhat"
would reformat /tmp/lint/tier1/tc_1040_check_virt_who_password_function.py
--- /tmp/lint/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 06:16:07.749588 +0000
@@ -1,41 +1,42 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133708')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133708")
         config = self.get_hypervisor_config()
-        hypervisor_type = config['type']
-        hypervisor_password = config['password']
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        hypervisor_type = config["type"]
+        hypervisor_password = config["password"]
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        
+
         # case steps
         logger.info(">>>step1: run virt-who without encrypted_password")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with encrypted_password")
         encrypted_value = self.vw_encrypted(hypervisor_password)
         self.vw_option_disable("password", config_file)
         self.vw_option_add("encrypted_password", encrypted_value, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
         self.vw_option_del("encrypted_password", config_file)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py	2023-03-06 05:02:18.576378 +0000
+++ /tmp/lint/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py	2023-03-06 06:16:07.783321 +0000
@@ -2,32 +2,37 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133704')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133704")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_file = "/etc/sysconfig/virt-who"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
-        self.vw_etc_d_mode_create('virtwho-config', '/etc/virt-who.d/virtwho-config.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
+        self.vw_etc_d_mode_create(
+            "virtwho-config", "/etc/virt-who.d/virtwho-config.conf"
+        )
 
         proxy_server = "{0}:{1}".format(deploy.proxy.server, deploy.proxy.port)
         bad_proxy_server = "10.73.3.24:9999"
-        steps = {'step1':'http_proxy', 'step2':'https_proxy'}
-        error_msg = ["Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"]
+        steps = {"step1": "http_proxy", "step2": "https_proxy"}
+        error_msg = [
+            "Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"
+        ]
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who to check {1}".format(step, option))
             if option == "http_proxy":
                 value = "http://{0}".format(proxy_server)
                 bad_value = "http://{0}".format(bad_proxy_server)
             if option == "https_proxy":
@@ -35,12 +40,18 @@
                 bad_value = "https://{0}".format(bad_proxy_server)
             logger.info("> run virt-who with good {0}".format(option))
             self.vw_option_add(option, value, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            s2 = self.vw_msg_search(rhsm_output, "Connection built.*{0}".format(proxy_server), exp_exist=True)
-            s3 = self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True)
+            s2 = self.vw_msg_search(
+                rhsm_output,
+                "Connection built.*{0}".format(proxy_server),
+                exp_exist=True,
+            )
+            s3 = self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True
+            )
             results.setdefault(step, []).append(s1)
             results.setdefault(step, []).append(s2)
             results.setdefault(step, []).append(s3)
 
             logger.info("> run virt-who with bad {0}".format(option))
would reformat /tmp/lint/tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py
--- /tmp/lint/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 06:16:07.785659 +0000
@@ -2,49 +2,54 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133712')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133712")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_type = register_config["type"]
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
 
         # case steps
-        logger.info(">>>step1: run virt-who with rhsm_username and rhsm_password good value")
+        logger.info(
+            ">>>step1: run virt-who with rhsm_username and rhsm_password good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: run virt-who with rhsm_username and rhsm_encrypted_password good value")
+        logger.info(
+            ">>>step2: run virt-who with rhsm_username and rhsm_encrypted_password good value"
+        )
         encrypted_value = self.vw_encrypted(register_password)
         self.vw_option_disable("rhsm_password", config_file)
         self.vw_option_add("rhsm_encrypted_password", encrypted_value, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py	2023-03-06 06:16:07.799207 +0000
@@ -2,60 +2,67 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133710')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133710")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_type = register_config["type"]
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
 
         # case steps
         logger.info(">>>step1: run virt-who without rhsm_username and rhsm_password")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: run virt-who with rhsm_username and rhsm_password good value")
+        logger.info(
+            ">>>step2: run virt-who with rhsm_username and rhsm_password good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
-        logger.info(">>>step3: run virt-who with rhsm_username and rhsm_password null value")
+        logger.info(
+            ">>>step3: run virt-who with rhsm_username and rhsm_password null value"
+        )
         self.vw_option_update_value("rhsm_username", "", config_file)
         self.vw_option_update_value("rhsm_password", "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: run virt-who with rhsm_username and rhsm_password disable")
+        logger.info(
+            ">>>step4: run virt-who with rhsm_username and rhsm_password disable"
+        )
         self.vw_option_disable("rhsm_username", config_file)
         self.vw_option_disable("rhsm_password", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py	2023-03-06 06:16:07.859399 +0000
@@ -2,62 +2,65 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133713')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133713")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_type = register_config["type"]
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
 
         # case steps
-        logger.info(">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value")
+        logger.info(
+            ">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with rhsm_hostname disable")
         self.vw_option_disable("rhsm_hostname", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
         self.vw_option_enable("rhsm_hostname", config_file)
 
         logger.info(">>>step3: run virt-who with rhsm_port disable")
         self.vw_option_disable("rhsm_port", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
         self.vw_option_enable("rhsm_port", config_file)
 
         logger.info(">>>step4: run virt-who with rhsm_prefix disable")
         self.vw_option_disable("rhsm_prefix", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
         self.vw_option_enable("rhsm_prefix", config_file)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:16:07.872335 +0000
@@ -2,56 +2,57 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133697')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133697")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_str = '"hypervisorId": "{0}"'.format(host_uuid)
 
         # case steps
         logger.info(">>>step1: run virt-who without filter_hosts")
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
 
         logger.info(">>>step2: run virt-who with filter_hosts=[host_uuid]")
         self.vw_option_add("filter_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=True)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with filter_hosts=*")
         self.vw_option_update_value("filter_hosts", "*", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=True)
-        results.setdefault('step3', []).append(s2)
+        results.setdefault("step3", []).append(s2)
 
         logger.info(">>>step4: run virt-who with filter_hosts=")
         self.vw_option_update_value("filter_hosts", "", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=False)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:16:07.906902 +0000
@@ -2,56 +2,57 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133694')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133694")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_str = '"hypervisorId": "{0}"'.format(host_uuid)
 
         # case steps
         logger.info(">>>step1: run virt-who without exclude_hosts")
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
 
         logger.info(">>>step2: run virt-who with exclude_hosts=[host_uuid]")
         self.vw_option_add("exclude_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=False)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with exclude_hosts=*")
         self.vw_option_update_value("exclude_hosts", "*", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=False)
-        results.setdefault('step3', []).append(s2)
+        results.setdefault("step3", []).append(s2)
 
         logger.info(">>>step4: run virt-who with exclude_hosts=")
         self.vw_option_update_value("exclude_hosts", "", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(rhsm_output, host_str, exp_exist=True)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py	2023-03-06 06:16:07.961456 +0000
@@ -5,109 +5,134 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133691')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133691")
+        hypervisor_type = self.get_config("hypervisor_type")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
+        register_server = register_config["server"]
         if "libvirt-local" in hypervisor_type:
-            owner = register_config['owner']
+            owner = register_config["owner"]
             cmd = "echo -e '[{0}]\ntype=libvirt\nowner={1}' > {2}".format(
-                config_name, owner, config_file)
+                config_name, owner, config_file
+            )
             ret, output = self.runcmd(cmd, self.ssh_host())
         proxy_server = deploy.proxy.server
         proxy_port = deploy.proxy.port
         bad_proxy_server = "10.73.3.24"
         bad_proxy_port = "9999"
-        error_msg = ["Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"]
+        error_msg = [
+            "Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"
+        ]
 
         # Case Steps
         try:
-            logger.info(">>>step1: set /etc/rhsm/rhsm.conf with good proxy_hostname and proxy_port")
-            self.vw_option_update_value("proxy_hostname", proxy_server, '/etc/rhsm/rhsm.conf')
-            self.vw_option_update_value("proxy_port", proxy_port, '/etc/rhsm/rhsm.conf')
+            logger.info(
+                ">>>step1: set /etc/rhsm/rhsm.conf with good proxy_hostname and proxy_port"
+            )
+            self.vw_option_update_value(
+                "proxy_hostname", proxy_server, "/etc/rhsm/rhsm.conf"
+            )
+            self.vw_option_update_value("proxy_port", proxy_port, "/etc/rhsm/rhsm.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(s1)
-            s2 = self.vw_msg_search(rhsm_output, "Connection built.*{0}".format(proxy_server))
-            results.setdefault('step1', []).append(s2)
-            s3 = self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server))
-            results.setdefault('step1', []).append(s3)
+            results.setdefault("step1", []).append(s1)
+            s2 = self.vw_msg_search(
+                rhsm_output, "Connection built.*{0}".format(proxy_server)
+            )
+            results.setdefault("step1", []).append(s2)
+            s3 = self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server)
+            )
+            results.setdefault("step1", []).append(s3)
 
             logger.info(">>>step2: set wrong proxy in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("proxy_hostname", bad_proxy_server, '/etc/rhsm/rhsm.conf')
-            self.vw_option_update_value("proxy_port", bad_proxy_port, '/etc/rhsm/rhsm.conf')
+            self.vw_option_update_value(
+                "proxy_hostname", bad_proxy_server, "/etc/rhsm/rhsm.conf"
+            )
+            self.vw_option_update_value(
+                "proxy_port", bad_proxy_port, "/etc/rhsm/rhsm.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
-            s1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
+            s1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             s2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step2', []).append(s1)
-            results.setdefault('step2', []).append(s2)
+            results.setdefault("step2", []).append(s1)
+            results.setdefault("step2", []).append(s2)
 
-            logger.info(">>>step3: set no_proxy=[register_server] in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("no_proxy", register_server, '/etc/rhsm/rhsm.conf')
+            logger.info(
+                ">>>step3: set no_proxy=[register_server] in /etc/rhsm/rhsm.conf"
+            )
+            self.vw_option_update_value(
+                "no_proxy", register_server, "/etc/rhsm/rhsm.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(s1)
+            results.setdefault("step3", []).append(s1)
 
             logger.info(">>>step4: set no_proxy=* in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("no_proxy", '*', '/etc/rhsm/rhsm.conf')
+            self.vw_option_update_value("no_proxy", "*", "/etc/rhsm/rhsm.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(s1)
-            self.vw_option_update_value("no_proxy", '', '/etc/rhsm/rhsm.conf')
+            results.setdefault("step4", []).append(s1)
+            self.vw_option_update_value("no_proxy", "", "/etc/rhsm/rhsm.conf")
 
-            logger.info(">>>step5: set rhsm_no_proxy=[register_server] in /etc/virt-who.conf")
-            self.vw_option_enable('[defaults]', '/etc/virt-who.conf')
-            self.vw_option_enable('rhsm_no_proxy', '/etc/virt-who.conf')
-            self.vw_option_update_value('rhsm_no_proxy', register_server, '/etc/virt-who.conf')
+            logger.info(
+                ">>>step5: set rhsm_no_proxy=[register_server] in /etc/virt-who.conf"
+            )
+            self.vw_option_enable("[defaults]", "/etc/virt-who.conf")
+            self.vw_option_enable("rhsm_no_proxy", "/etc/virt-who.conf")
+            self.vw_option_update_value(
+                "rhsm_no_proxy", register_server, "/etc/virt-who.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(s1)
+            results.setdefault("step5", []).append(s1)
 
             logger.info(">>>step6: set rhsm_no_proxy=* in /etc/virt-who.conf")
-            self.vw_option_update_value('rhsm_no_proxy', '*', '/etc/virt-who.conf')
+            self.vw_option_update_value("rhsm_no_proxy", "*", "/etc/virt-who.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(s1)
-            self.vw_option_disable('rhsm_no_proxy', '/etc/virt-who.conf')
+            results.setdefault("step6", []).append(s1)
+            self.vw_option_disable("rhsm_no_proxy", "/etc/virt-who.conf")
 
-            if hypervisor_type not in ('libvirt-local', 'vdsm'):
+            if hypervisor_type not in ("libvirt-local", "vdsm"):
                 # frequently start virt-who will get 429 error, sleep 15s to fix
                 time.sleep(15)
-                logger.info(">>>step7: set rhsm_no_proxy=[register_server] in /etc/virt-who.d/x.conf")
-                self.vw_option_add('rhsm_no_proxy', register_server, config_file)
+                logger.info(
+                    ">>>step7: set rhsm_no_proxy=[register_server] in /etc/virt-who.d/x.conf"
+                )
+                self.vw_option_add("rhsm_no_proxy", register_server, config_file)
                 data, tty_output, rhsm_output = self.vw_start()
                 s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step7', []).append(s1)
+                results.setdefault("step7", []).append(s1)
 
                 time.sleep(15)
                 logger.info(">>>step8: set rhsm_no_proxy=* in /etc/virt-who.d/x.conf")
-                self.vw_option_update_value('rhsm_no_proxy', '*', config_file)
+                self.vw_option_update_value("rhsm_no_proxy", "*", config_file)
                 data, tty_output, rhsm_output = self.vw_start()
                 s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step8', []).append(s1)
-                self.vw_option_del('rhsm_no_proxy', config_file)
+                results.setdefault("step8", []).append(s1)
+                self.vw_option_del("rhsm_no_proxy", config_file)
             else:
-                logger.info('Skip step7 and step8 for {0}'.format(hypervisor_type))
+                logger.info("Skip step7 and step8 for {0}".format(hypervisor_type))
         except:
-            results.setdefault('step except', []).append(False)
+            results.setdefault("step except", []).append(False)
             pass
 
         finally:
-            self.vw_option_update_value('proxy_hostname', '', '/etc/rhsm/rhsm.conf')
-            self.vw_option_update_value('proxy_port', '', '/etc/rhsm/rhsm.conf')
-            self.vw_option_update_value('no_proxy', '', "/etc/rhsm/rhsm.conf")
+            self.vw_option_update_value("proxy_hostname", "", "/etc/rhsm/rhsm.conf")
+            self.vw_option_update_value("proxy_port", "", "/etc/rhsm/rhsm.conf")
+            self.vw_option_update_value("no_proxy", "", "/etc/rhsm/rhsm.conf")
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py
--- /tmp/lint/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py	2023-03-06 06:16:07.976144 +0000
@@ -2,53 +2,63 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133702')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133702")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "esx" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
 
         # case steps
-        logger.info(">>>step1: run virt-who with filter_host_parents='' to get domain_id")
+        logger.info(
+            ">>>step1: run virt-who with filter_host_parents='' to get domain_id"
+        )
         self.vw_option_add("filter_host_parents", "", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step1', []).append(s2)
-        domain_id = re.findall(r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid), rhsm_output)[-1]
-        logger.info("Succeeded to find: {0}:{1}:{2}".format(host_hwuuid, domain_id, host_uuid))
+        results.setdefault("step1", []).append(s2)
+        domain_id = re.findall(
+            r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid),
+            rhsm_output,
+        )[-1]
+        logger.info(
+            "Succeeded to find: {0}:{1}:{2}".format(host_hwuuid, domain_id, host_uuid)
+        )
 
         logger.info(">>>step2: run virt-who with filter_host_parents=[domain_id]")
-        self.vw_option_update_value("filter_host_parents", domain_id, filename=config_file)
+        self.vw_option_update_value(
+            "filter_host_parents", domain_id, filename=config_file
+        )
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with filter_host_parents=*")
         self.vw_option_update_value("filter_host_parents", "*", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step3', []).append(s2)
+        results.setdefault("step3", []).append(s2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py	2023-03-06 06:16:07.979302 +0000
@@ -2,54 +2,62 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133700')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133700")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "esx" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
 
         # case steps
-        logger.info(">>>step1: run virt-who with exlude_host_parents=* to get domain_id")
+        logger.info(
+            ">>>step1: run virt-who with exlude_host_parents=* to get domain_id"
+        )
         self.vw_option_add("exclude_host_parents", "*", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step1', []).append(s2)
-        domain_id = re.findall(r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid), rhsm_output)[-1]
-        logger.info("Succeeded to find: {0}:{1}:{2}".format(host_hwuuid, domain_id, host_uuid))
+        results.setdefault("step1", []).append(s2)
+        domain_id = re.findall(
+            r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid),
+            rhsm_output,
+        )[-1]
+        logger.info(
+            "Succeeded to find: {0}:{1}:{2}".format(host_hwuuid, domain_id, host_uuid)
+        )
         self.vw_option_del("filter_host_parents", filename=config_file)
 
         logger.info(">>>step2: run virt-who with exclude_host_parents=[domain_id]")
         self.vw_option_add("exclude_host_parents", domain_id, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with exclude_host_parents=")
         self.vw_option_update_value("exclude_host_parents", "", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py	2023-03-06 06:16:08.055129 +0000
@@ -2,64 +2,71 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133707')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133707")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
 
         # case steps
         logger.info(">>>step1: run virt-who without filter_hosts and exclude_hosts")
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
 
-        logger.info(">>>step2: run virt-who with filter_hosts=[host_uuid] and exclude_hosts=[host_uuid]")
+        logger.info(
+            ">>>step2: run virt-who with filter_hosts=[host_uuid] and exclude_hosts=[host_uuid]"
+        )
         self.vw_option_add("filter_hosts", host_uuid, filename=config_file)
         self.vw_option_add("exclude_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
         self.vw_option_del("filter_hosts", filename=config_file)
         self.vw_option_del("exclude_hosts", filename=config_file)
 
-        logger.info(">>>step3: run virt-who with filter_hosts=* and exclude_hosts=[host_uuid]")
+        logger.info(
+            ">>>step3: run virt-who with filter_hosts=* and exclude_hosts=[host_uuid]"
+        )
         self.vw_option_add("filter_hosts", "*", filename=config_file)
         self.vw_option_add("exclude_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step3', []).append(s2)
+        results.setdefault("step3", []).append(s2)
         self.vw_option_del("filter_hosts", filename=config_file)
         self.vw_option_del("exclude_hosts", filename=config_file)
 
-        logger.info(">>>step4: run virt-who with exclude_hosts= and filter_hosts=[host_uuid]")
+        logger.info(
+            ">>>step4: run virt-who with exclude_hosts= and filter_hosts=[host_uuid]"
+        )
         self.vw_option_add("exclude_hosts", "", filename=config_file)
         self.vw_option_add("filter_hosts", host_uuid, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
         self.vw_option_del("exclude_hosts", filename=config_file)
         self.vw_option_del("filter_hosts", filename=config_file)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py	2023-03-06 06:16:08.064449 +0000
@@ -2,44 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133705')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133705")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "esx" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
 
         # case steps
         logger.info(">>>step1: run virt-who with without simplified_vim option")
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
 
         logger.info(">>>step2: run virt-who with simplified_vim=true")
         self.vw_option_add("simplified_vim", "true", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
 
         logger.info(">>>step3: run virt-who with simplified_vim=false")
         self.vw_option_update_value("simplified_vim", "false", filename=config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(s1)
+        results.setdefault("step3", []).append(s1)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.577378 +0000
+++ /tmp/lint/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py	2023-03-06 06:16:08.090998 +0000
@@ -2,40 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133705')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133705")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who with hypervisor_id={1}".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who with hypervisor_id={1}".format(step, option)
+            )
             self.vw_option_add("hypervisor_id", option, filename=config_file)
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s1)
             if option == "hwuuid":
@@ -51,24 +54,37 @@
                 logger.info("Succeeded to search hypervisorId:{0}".format(hypervisorId))
                 results.setdefault(step, []).append(True)
             else:
                 logger.error("Failed to search hypervisorId:{0}".format(hypervisorId))
                 results.setdefault(step, []).append(False)
-            if 'satellite' in register_type:
-                host_display = self.satellite_hosts_get(self.ssh_host(), register_config,
-                                        host_name, host_uuid, host_hwuuid, desc="get host display name")
-                host_display_name = host_display['name']
+            if "satellite" in register_type:
+                host_display = self.satellite_hosts_get(
+                    self.ssh_host(),
+                    register_config,
+                    host_name,
+                    host_uuid,
+                    host_hwuuid,
+                    desc="get host display name",
+                )
+                host_display_name = host_display["name"]
             else:
                 hypervisor_display = host_name
-                host_display = self.stage_consumer_get(self.ssh_host(), register_config,
-                                        host_name, host_uuid)
-                host_display_name = host_display['name']
+                host_display = self.stage_consumer_get(
+                    self.ssh_host(), register_config, host_name, host_uuid
+                )
+                host_display_name = host_display["name"]
             if hypervisor_display or hypervisor_display.lower() in host_display_name:
-                logger.info("Succeeded to search hypervisorDisplay:{0}".format(hypervisor_display))
+                logger.info(
+                    "Succeeded to search hypervisorDisplay:{0}".format(
+                        hypervisor_display
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.error("Failed to search hypervisorDisplay:{0}".format(hypervisor_display))
+                logger.error(
+                    "Failed to search hypervisorDisplay:{0}".format(hypervisor_display)
+                )
                 results.setdefault(step, []).append(False)
             self.vw_option_del("hypervisor_id", filename=config_file)
             self.vw_web_host_delete(host_name, hypervisorId)
         if "stage" in register_type:
             self.stage_consumer_clean(self.ssh_host(), register_config)
would reformat /tmp/lint/tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py	2023-03-06 06:16:08.127788 +0000
@@ -2,13 +2,14 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133682')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133682")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
@@ -18,14 +19,14 @@
 
         # case steps
         logger.info(">>>step1: enable global header in /etc/virt-who.conf")
         self.vw_option_enable("[global]", filename=virtwho_conf)
         self.vw_option_enable("debug", filename=virtwho_conf)
-        self.vw_option_update_value("debug", 'True', filename=virtwho_conf)
+        self.vw_option_update_value("debug", "True", filename=virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:16:08.129453 +0000
@@ -2,40 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133709')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133709")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts".format(
+                    step, option
+                )
+            )
             self.vw_option_add("hypervisor_id", option, filename=config_file)
             if option == "hwuuid":
                 hypervisorId = host_hwuuid
             elif option == "hostname":
                 hypervisorId = host_name
@@ -43,16 +48,24 @@
                 hypervisorId = host_uuid
             self.vw_option_add("filter_hosts", hypervisorId, filename=config_file)
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s1)
-            hypervisor_num = data[register_owner]['hypervisor_num']
+            hypervisor_num = data[register_owner]["hypervisor_num"]
             if hypervisorId in data[register_owner].keys() and hypervisor_num == 1:
-                logger.info("Succeeded to search, {0} hypervisorId({1}) found".format(hypervisor_num, hypervisorId))
+                logger.info(
+                    "Succeeded to search, {0} hypervisorId({1}) found".format(
+                        hypervisor_num, hypervisorId
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.error("Failed to search, {0} hypervisorId({1}) found".format(hypervisor_num, hypervisorId))
+                logger.error(
+                    "Failed to search, {0} hypervisorId({1}) found".format(
+                        hypervisor_num, hypervisorId
+                    )
+                )
                 results.setdefault(step, []).append(False)
             self.vw_option_del("hypervisor_id", filename=config_file)
             self.vw_option_del("filter_hosts", filename=config_file)
             self.vw_web_host_delete(host_name, hypervisorId)
         if "stage" in register_type:
would reformat /tmp/lint/tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:16:08.146498 +0000
@@ -2,40 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133714')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133714")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # case steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to with hypervisor_id={1} and set exclude_hosts".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to with hypervisor_id={1} and set exclude_hosts".format(
+                    step, option
+                )
+            )
             self.vw_option_add("hypervisor_id", option, filename=config_file)
             if option == "hwuuid":
                 hypervisorId = host_hwuuid
             elif option == "hostname":
                 hypervisorId = host_name
would reformat /tmp/lint/tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.213966 +0000
@@ -2,42 +2,61 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133685')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133685")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: enable interval and set to 10 in /etc/virt-who.conf")
         self.vw_option_enable("interval", virtwho_conf)
-        self.vw_option_update_value("interval", '10', virtwho_conf)
+        self.vw_option_update_value("interval", "10", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)
-        results.setdefault('step1', []).append(res)
+        res = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: enable interval and set to 60 in /etc/virt-who.conf")
-        self.vw_option_update_value("interval", '60', virtwho_conf)
+        self.vw_option_update_value("interval", "60", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_loopnum=1, exp_looptime=60)
-        results.setdefault('step2', []).append(res)
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: enable interval and set to 120 in /etc/virt-who.conf")
-        self.vw_option_update_value("interval", '120', virtwho_conf)
+        self.vw_option_update_value("interval", "120", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120, exp_loopnum=1, exp_looptime=120)
-        results.setdefault('step3', []).append(res)
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=120,
+            exp_loopnum=1,
+            exp_looptime=120,
+        )
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.241479 +0000
@@ -2,46 +2,51 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133687')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133687")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info('>>>step1: Run virt-who with "debug=True"')
         self.vw_option_enable("debug", virtwho_conf)
-        self.vw_option_update_value("debug", 'True', virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         logger.info('>>>step2: Run virt-who with "debug=False"')
-        self.vw_option_update_value("debug", 'False', virtwho_conf)
+        self.vw_option_update_value("debug", "False", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        res2 = self.vw_msg_search(
+            output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
-        logger.info('>>>step3: Run virt-who with debug option disabled')
+        logger.info(">>>step3: Run virt-who with debug option disabled")
         self.vw_option_disable("debug", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(
+            output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=False
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.289139 +0000
@@ -2,41 +2,52 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133684')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133684")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         default_reporter_id = self.get_hostname(self.ssh_host())
         expected_reporter_id = "virtwho_reporter_id_tc1057"
-        steps = {'step1':default_reporter_id, 'step2':expected_reporter_id}
+        steps = {"step1": default_reporter_id, "step2": expected_reporter_id}
 
         # case steps
-        for step, value in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to check reporter_id({1})".format(step, value))
+        for step, value in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to check reporter_id({1})".format(step, value)
+            )
             if step == "step2":
                 self.vw_option_enable("reporter_id", virtwho_conf)
                 self.vw_option_update_value("reporter_id", value, virtwho_conf)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
-            if value in data['reporter_id']:
-                logger.info("Succeeded to check, reporter_id({0}) is expected".format(data['reporter_id']))
+            if value in data["reporter_id"]:
+                logger.info(
+                    "Succeeded to check, reporter_id({0}) is expected".format(
+                        data["reporter_id"]
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.info("Failed to check, reporter_id({0}) is not expected".format(data['reporter_id']))
+                logger.info(
+                    "Failed to check, reporter_id({0}) is not expected".format(
+                        data["reporter_id"]
+                    )
+                )
                 results.setdefault(step, []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.302224 +0000
@@ -2,42 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133686')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133686")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info('>>>step1: Run virt-who with "onestho=True"')
         self.vw_option_enable("oneshot", virtwho_conf)
-        self.vw_option_update_value("oneshot", 'True', virtwho_conf)
+        self.vw_option_update_value("oneshot", "True", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=True)
         res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info('>>>step2: Run virt-who with "oneshot=False"')
-        self.vw_option_update_value("oneshot", 'False', virtwho_conf)
+        self.vw_option_update_value("oneshot", "False", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info('>>>step3: Run virt-who with "oneshot" disabled')
         self.vw_option_disable("oneshot", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.308630 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133688')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133688")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         log_dir = "/var/log/rhsm/virtwho/"
@@ -26,20 +27,20 @@
         logger.info(">>>step1: Run virt-who with log-dir setting in /etc/virt-who.conf")
         self.vw_option_enable("log_dir", virtwho_conf)
         self.vw_option_update_value("log_dir", log_dir, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
         ret, output = self.runcmd("ls {0}".format(log_file), self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to find file: {0}".format(log_file))
             ret, output = self.runcmd("cat {0}".format(log_file), self.ssh_host())
             d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)
             d2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
             if d1 is False or d2 is False:
-                results.setdefault('step1', []).append(False)
+                results.setdefault("step1", []).append(False)
         else:
             logger.error("{0} is not exist".format(log_file))
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.363941 +0000
@@ -2,24 +2,25 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133690')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133690")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/tmp/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
 
@@ -28,10 +29,10 @@
         self.vw_option_enable("configs", virtwho_conf)
         self.vw_option_update_value("configs", config_file, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.401887 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133693')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133693")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         log_dir = "/var/log/rhsm/virtwho/"
@@ -28,20 +29,20 @@
         self.vw_option_enable("log_file", virtwho_conf)
         self.vw_option_update_value("log_dir", log_dir, virtwho_conf)
         self.vw_option_update_value("log_file", log_file, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
         ret, output = self.runcmd("ls {0}".format(log_file), self.ssh_host())
         if ret == 0:
             logger.info("Succeeded to find file: {0}".format(log_file))
             ret, output = self.runcmd("cat {0}".format(log_file), self.ssh_host())
             d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)
             d2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
             if d1 is False or d2 is False:
-                results.setdefault('step1', []).append(False)
+                results.setdefault("step1", []).append(False)
         else:
             logger.error("{0} is not exist".format(log_file))
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py	2023-03-06 06:16:08.416999 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133692')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133692")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
 
@@ -24,10 +25,10 @@
         logger.info(">>>step1: Enable [defaults] header in /etc/virt-who.conf")
         self.vw_option_enable("[defaults]", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.423606 +0000
@@ -2,85 +2,94 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133689')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133689")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # case steps
-        logger.info(">>>step1: Run virt-who with log-per-config=False in /etc/virt-who.conf")
+        logger.info(
+            ">>>step1: Run virt-who with log-per-config=False in /etc/virt-who.conf"
+        )
         self.vw_option_enable("log_per_config", virtwho_conf)
-        self.vw_option_update_value("log_per_config", 'False', virtwho_conf)
+        self.vw_option_update_value("log_per_config", "False", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
-        ret, output = self.runcmd('ls /var/log/rhsm/virtwho*', self.ssh_host())
+        results.setdefault("step1", []).append(res)
+        ret, output = self.runcmd("ls /var/log/rhsm/virtwho*", self.ssh_host())
         if ret == 0:
-            logger.error("Failed to search, unexpected /var/log/rhsm/virtwho* files exist")
-            results.setdefault('step1', []).append(False)
+            logger.error(
+                "Failed to search, unexpected /var/log/rhsm/virtwho* files exist"
+            )
+            results.setdefault("step1", []).append(False)
         else:
-            logger.info("Succeeded to search, unexpected /var/log/rhsm/virtwho* files not exist")
-            results.setdefault('step1', []).append(True)
+            logger.info(
+                "Succeeded to search, unexpected /var/log/rhsm/virtwho* files not exist"
+            )
+            results.setdefault("step1", []).append(True)
 
-        logger.info(">>>step2: Run virt-who with log-per-config=True in /etc/virt-who.conf")
-        self.vw_option_update_value("log_per_config", 'True', virtwho_conf)
+        logger.info(
+            ">>>step2: Run virt-who with log-per-config=True in /etc/virt-who.conf"
+        )
+        self.vw_option_update_value("log_per_config", "True", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
-        ret, output = self.runcmd('ls /var/log/rhsm/virtwho*', self.ssh_host())
+        results.setdefault("step2", []).append(res)
+        ret, output = self.runcmd("ls /var/log/rhsm/virtwho*", self.ssh_host())
         if ret != 0 or output is None:
             logger.error("Failed to find /var/log/rhsm/virtwho* files")
-            results.setdefault('step2', []).append(False)
-        files = output.split('\n')
+            results.setdefault("step2", []).append(False)
+        files = output.split("\n")
         if any("destination" in fd for fd in files):
             logger.info("Succeeded to find virtwho.destination file")
         else:
             logger.error("Failed to find virtwho.destination file")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
         if any("main" in fd for fd in files):
             logger.info("Succeeded to find virtwho.main file")
         else:
             logger.error("Failed to find virtwho.main file")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
         if any("rhsm_log" in fd for fd in files):
             logger.info("Succeeded to find virtwho.rhsm_log file")
         else:
             logger.error("Failed to find virtwho.rhsm_log file")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
         for fd in files:
             fd = fd.strip()
             ret, output = self.runcmd("cat {0}".format(fd), self.ssh_host())
             if "destination" in fd:
                 d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)
                 d2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                 if d1 is False or d2 is False:
                     logger.error("Failed to validate virtwho.destination file")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
             if "main" in fd:
                 m1 = self.vw_msg_search(output, "Report for config", exp_exist=True)
                 m2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                 if m1 is False or m2 is False:
                     logger.error("Failed to validate virtwho.main file")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
             if "rhsm_log" in fd:
                 r1 = self.vw_msg_search(output, "Using reporter_id=", exp_exist=True)
                 r2 = self.vw_msg_search(output, "ERROR", exp_exist=False)
                 if r1 is False or r2 is False:
                     logger.error("Failed to validate virtwho.rhsm_log file")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.433350 +0000
@@ -2,36 +2,37 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133698')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133698")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
+        register_owner = register_config["owner"]
 
         # case steps
         logger.info(">>>step1: Run virt-who with owner setting in /etc/virt-who.conf")
         self.vw_option_enable("[defaults]", virtwho_conf)
         self.vw_option_enable("owner", virtwho_conf)
         self.vw_option_update_value("owner", register_owner, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py	2023-03-06 06:16:08.490758 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133681')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133681")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
         json_file = "/tmp/fake.json"
         conf_file = "/etc/virt-who.d/fake.conf"
 
@@ -32,10 +33,10 @@
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start(cli="virt-who -d")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.495621 +0000
@@ -2,43 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133703')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133703")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
         self.vw_option_enable("[defaults]", virtwho_conf)
         self.vw_option_enable("hypervisor_id", virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # Case Steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: Run virt-who with hypervisor_id={1} in /etc/virt-who.conf".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: Run virt-who with hypervisor_id={1} in /etc/virt-who.conf".format(
+                    step, option
+                )
+            )
             self.vw_option_update_value("hypervisor_id", option, virtwho_conf)
             data, tty_output, rhsm_output = self.vw_start()
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
             if option == "hwuuid":
would reformat /tmp/lint/tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.578378 +0000
+++ /tmp/lint/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py	2023-03-06 06:16:08.503690 +0000
@@ -2,49 +2,52 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133695')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133695")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
-        register_env = register_config['env']
+        register_owner = register_config["owner"]
+        register_env = register_config["env"]
 
         # case steps
         logger.info(">>>step1: Run virt-who with env setting in /etc/virt-who.conf")
         self.vw_option_enable("[defaults]", virtwho_conf)
         self.vw_option_enable("env", virtwho_conf)
         self.vw_option_update_value("env", register_env, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
-        logger.info(">>>step2: Run virt-who with owner and env setting in /etc/virt-who.conf")
+        logger.info(
+            ">>>step2: Run virt-who with owner and env setting in /etc/virt-who.conf"
+        )
         self.vw_option_enable("owner", virtwho_conf)
         self.vw_option_update_value("owner", register_owner, virtwho_conf)
         self.vw_option_update_value("env", register_env, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py	2023-03-06 06:16:08.528393 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133680')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133680")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_name = self.get_hostname(self.ssh_guest())
         guest_uuid = self.get_hypervisor_guestuuid()
         json_file = "/tmp/fake.json"
@@ -34,23 +35,23 @@
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start(cli="virt-who -d")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), "RH00002", "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step4: attach bonus sku for guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), "RH00050", "virtual")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
-        res = self.vw_msg_search(output, 'RH00050', exp_exist=True)
-        results.setdefault('step4', []).append(res)
+        res = self.vw_msg_search(output, "RH00050", exp_exist=True)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py	2023-03-06 06:16:08.571983 +0000
@@ -5,40 +5,46 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133683')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133683")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
+        register_owner = register_config["owner"]
 
         # case steps
         logger.info(">>>step1: Run virt-who service to check the rhsm.log")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
         if register_owner in data.keys() and guest_uuid in data[register_owner].keys():
-            logger.info("Succeeded to check, mapping info is specified to {0}".format(
-                register_owner))
-            results.setdefault('step1', []).append(True)
+            logger.info(
+                "Succeeded to check, mapping info is specified to {0}".format(
+                    register_owner
+                )
+            )
+            results.setdefault("step1", []).append(True)
         else:
-            logger.error("Failed to check, mapping info is not specified to {0}".format(
-                register_owner))
-            results.setdefault('step1', []).append(False)
+            logger.error(
+                "Failed to check, mapping info is not specified to {0}".format(
+                    register_owner
+                )
+            )
+            results.setdefault("step1", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1073_check_mapping_info_point_to_specified_owner.py
--- /tmp/lint/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py	2023-03-06 06:16:08.589046 +0000
@@ -2,59 +2,73 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133747')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133747")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
 
         # case steps
         logger.info(">>>step1: Run virt-who servie when virt-who host is registered")
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "start")
         time.sleep(30)
         status = self.vw_service_status()
         thread_num = self.vw_callback_thread_num()
         error_num, error_list = self.vw_callback_error_num()
-        results.setdefault('step1', []).append(error_num == 0)
-        results.setdefault('step1', []).append(thread_num == 1)
-        results.setdefault('step1', []).append(status == "running")
-        logger.info("error_num: {0}, thread_num: {1}, status: {2}".format(error_num, thread_num, status))
+        results.setdefault("step1", []).append(error_num == 0)
+        results.setdefault("step1", []).append(thread_num == 1)
+        results.setdefault("step1", []).append(status == "running")
+        logger.info(
+            "error_num: {0}, thread_num: {1}, status: {2}".format(
+                error_num, thread_num, status
+            )
+        )
 
         logger.info(">>>step2: Run virt-who servie when virt-who host is un_registered")
-        ret, output = self.runcmd('subscription-manager unregister', self.ssh_host())
+        ret, output = self.runcmd("subscription-manager unregister", self.ssh_host())
         logger.info("Succeeded to unregister host")
         time.sleep(15)
         status = self.vw_service_status()
         thread_num = self.vw_callback_thread_num()
         error_num, error_list = self.vw_callback_error_num()
-        results.setdefault('step2', []).append(error_num != 0)
-        results.setdefault('step2', []).append(thread_num == 1)
-        results.setdefault('step2', []).append(status == "running")
-        logger.info("error_num: {0}, thread_num: {1}, status: {2}".format(error_num, thread_num, status))
-        ret, rhsm_output = self.runcmd('cat /var/log/rhsm/rhsm.log', self.ssh_host())
-        res = self.vw_msg_search(rhsm_output, 'system is not registered', exp_exist=True)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(error_num != 0)
+        results.setdefault("step2", []).append(thread_num == 1)
+        results.setdefault("step2", []).append(status == "running")
+        logger.info(
+            "error_num: {0}, thread_num: {1}, status: {2}".format(
+                error_num, thread_num, status
+            )
+        )
+        ret, rhsm_output = self.runcmd("cat /var/log/rhsm/rhsm.log", self.ssh_host())
+        res = self.vw_msg_search(
+            rhsm_output, "system is not registered", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: Run virt-who servie when virt-who host is re_registered")
-        if self.system_isregister(self.ssh_host(), register_type, register_config) is False:
+        if (
+            self.system_isregister(self.ssh_host(), register_type, register_config)
+            is False
+        ):
             self.system_register(self.ssh_host(), register_type, register_config)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py
--- /tmp/lint/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py	2023-03-06 06:16:08.574260 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133744')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133744")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_name = self.get_hostname(self.ssh_guest())
         guest_uuid = self.get_hypervisor_guestuuid()
         json_file = "/tmp/fake.json"
@@ -34,29 +35,31 @@
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start(cli="virt-who -d")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), "RH00002", "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step4: attach bonus sku for guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), "RH00050", "virtual")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
-        res = self.vw_msg_search(output, 'RH00050', exp_exist=True)
-        results.setdefault('step4', []).append(res)
+        res = self.vw_msg_search(output, "RH00050", exp_exist=True)
+        results.setdefault("step4", []).append(res)
 
-        logger.info(">>>step5: unregister host/hypervisor, check consumed bonus is removed")
+        logger.info(
+            ">>>step5: unregister host/hypervisor, check consumed bonus is removed"
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-        res = self.vw_msg_search(output, 'RH00050', exp_exist=False)
-        results.setdefault('step5', []).append(res)
+        res = self.vw_msg_search(output, "RH00050", exp_exist=False)
+        results.setdefault("step5", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py	2023-03-06 06:16:08.609646 +0000
@@ -5,43 +5,43 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134056')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134056")
+        hypervisor_type = self.get_config("hypervisor_type")
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "satellite62" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
 
         # case steps
         logger.info(">>>step1: Run virt-who servie to check hypervisor's facts")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         facts = data[register_owner][host_uuid]
-        results.setdefault('step1', []).append(res)
-        results.setdefault('step1', []).append(data['is_async'] == "hypervisors_async")
-        results.setdefault('step1', []).append('type' in facts.keys())
-        results.setdefault('step1', []).append('version' in facts.keys())
-        results.setdefault('step1', []).append('socket' in facts.keys())
-        logger.info("hypervisor.type: {0} ".format(facts['type']))
-        logger.info("cpu.cpu_socket(s): {0}".format(facts['socket']))
-        logger.info("hypervisor.version: {0}".format(facts['version']))
+        results.setdefault("step1", []).append(res)
+        results.setdefault("step1", []).append(data["is_async"] == "hypervisors_async")
+        results.setdefault("step1", []).append("type" in facts.keys())
+        results.setdefault("step1", []).append("version" in facts.keys())
+        results.setdefault("step1", []).append("socket" in facts.keys())
+        logger.info("hypervisor.type: {0} ".format(facts["type"]))
+        logger.info("cpu.cpu_socket(s): {0}".format(facts["socket"]))
+        logger.info("hypervisor.version: {0}".format(facts["version"]))
 
         # case result
         self.vw_case_result(results)
--- /tmp/lint/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py	2023-03-06 06:16:08.609874 +0000
@@ -2,30 +2,31 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134059')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134059")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: Run virt-who to check 'rhsm.connection' info")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(rhsm_output, '[rhsm.connection INFO]', exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        res2 = self.vw_msg_search(rhsm_output, "[rhsm.connection INFO]", exp_exist=True)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py
would reformat /tmp/lint/tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py
--- /tmp/lint/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py	2023-03-06 06:16:08.654454 +0000
@@ -2,42 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134065')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134065")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        unlimited_sku = register_config['unlimit']
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku is created or not in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        results.setdefault('step3', []).append(sku_attrs['sku_id'] == unlimited_sku)
+        results.setdefault("step3", []).append(sku_attrs["sku_id"] == unlimited_sku)
 
         # case result
         self.vw_case_result(results)
--- /tmp/lint/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py	2023-03-06 06:16:08.667320 +0000
@@ -2,55 +2,60 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134083')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134083")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
 
         # case steps
-        logger.info(">>>step1: stop virt-who, re-register guest again to create temporary bonus")
+        logger.info(
+            ">>>step1: stop virt-who, re-register guest again to create temporary bonus"
+        )
         self.vw_thread_clean()
         self.vw_web_host_delete(host_name, host_uuid)
         self.system_unregister(self.ssh_guest())
         self.system_register(self.ssh_guest(), register_type, register_config)
 
         logger.info(">>>step2: check temporary bonus pool exist in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        sub_type = sku_attrs['sub_type']
+        sub_type = sku_attrs["sub_type"]
         if "Temporary" in sub_type:
             logger.info("{0}, Temporary pool is exist in guest".format(sub_type))
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.error("{0}, Temporary pool is not exist in guest".format(sub_type))
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         logger.info(">>>step3: attach temporary bonus pool in guest")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, "using a temporary unmapped guest subscription", exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(
+            output, "using a temporary unmapped guest subscription", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py
--- /tmp/lint/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py	2023-03-06 06:16:08.668161 +0000
@@ -2,21 +2,22 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134063')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134063")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
@@ -25,19 +26,19 @@
 
         # case steps
         logger.info(">>>step1: run virt-who service")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: check host-to-guest association in webui")
         res = self.vw_web_associate(host_name, host_uuid, guest_name, guest_uuid)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         notes = list()
         notes.append("Bug(Step3):  Missing h/g association in satellite webUI")
         notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1644969")
would reformat /tmp/lint/tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py
would reformat /tmp/lint/tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py
--- /tmp/lint/tier1/tc_1076_check_guest_facts_by_subscription_manager.py	2023-03-06 05:02:18.579378 +0000
+++ /tmp/lint/tier1/tc_1076_check_guest_facts_by_subscription_manager.py	2023-03-06 06:16:08.683376 +0000
@@ -2,61 +2,65 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134061')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134061")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         virt_type = {
-                'libvirt-local'     :'kvm',
-                'libvirt-remote'    :'kvm',
-                'rhevm'             :'kvm',
-                'esx'               :'vmware',
-                'hyperv'            :'hyperv',
-                'xen'               :'xen',
-                'kubevirt'          :'kvm',
-                'ahv'               :'nutanix_ahv'
-                }
+            "libvirt-local": "kvm",
+            "libvirt-remote": "kvm",
+            "rhevm": "kvm",
+            "esx": "vmware",
+            "hyperv": "hyperv",
+            "xen": "xen",
+            "kubevirt": "kvm",
+            "ahv": "nutanix_ahv",
+        }
 
         # case steps
         logger.info(">>>step1: check virt.uuid fact by subscription-manager in guest")
         cmd = "subscription-manager facts --list | grep virt.uuid"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         logger.info(output)
-        virt_uuid = output.split(':')[1].strip()
-        results.setdefault('step1', []).append(virt_uuid.lower() == guest_uuid.lower())
+        virt_uuid = output.split(":")[1].strip()
+        results.setdefault("step1", []).append(virt_uuid.lower() == guest_uuid.lower())
 
-        logger.info(">>>step2: check virt.host_type fact by subscription-manager in guest")
-        hypervisor_type = self.get_config('hypervisor_type')
-        _, output1 = self.runcmd("virt-what",
-                                 self.ssh_guest())
-        _, output2 = self.runcmd("subscription-manager facts --list | grep virt.host_type",
-                                 self.ssh_guest())
+        logger.info(
+            ">>>step2: check virt.host_type fact by subscription-manager in guest"
+        )
+        hypervisor_type = self.get_config("hypervisor_type")
+        _, output1 = self.runcmd("virt-what", self.ssh_guest())
+        _, output2 = self.runcmd(
+            "subscription-manager facts --list | grep virt.host_type", self.ssh_guest()
+        )
         logger.info(output2)
-        results.setdefault('step2', []).append(
+        results.setdefault("step2", []).append(
             virt_type[hypervisor_type.lower()] in output1
-            and
-            virt_type[hypervisor_type.lower()] in output2
+            and virt_type[hypervisor_type.lower()] in output2
         )
 
-        logger.info(">>>step3: check virt.is_guest fact by subscription-manager in guest")
+        logger.info(
+            ">>>step3: check virt.is_guest fact by subscription-manager in guest"
+        )
         cmd = "subscription-manager facts --list | grep virt.is_guest"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         logger.info(output)
-        virt_is_guest = output.split(':')[1].strip()
-        results.setdefault('step3', []).append(virt_is_guest == "True")
+        virt_is_guest = output.split(":")[1].strip()
+        results.setdefault("step3", []).append(virt_is_guest == "True")
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1076_check_guest_facts_by_subscription_manager.py
--- /tmp/lint/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 06:16:08.735730 +0000
@@ -2,52 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134071')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134071")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        unlimited_sku = register_config['unlimit']
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: unattach physical sku from host/hypervisor and check virtual pool")
+        logger.info(
+            ">>>step4: unattach physical sku from host/hypervisor and check virtual pool"
+        )
         self.vw_web_unattach(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
--- /tmp/lint/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 06:16:08.736348 +0000
@@ -2,51 +2,52 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134069')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134069")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        unlimited_sku = register_config['unlimit']
+        register_type = register_config["type"]
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         try:
             logger.info(">>>step3: attach virtual sku by auto in guest")
             sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-            results.setdefault('step3', []).append(sku_attrs['sku_id'] == unlimited_sku)
+            results.setdefault("step3", []).append(sku_attrs["sku_id"] == unlimited_sku)
             self.system_sku_attach(self.ssh_guest())
             ins_attrs = self.system_sku_installed(self.ssh_guest())
-            results.setdefault('step3', []).append(ins_attrs['status'] == 'Subscribed')
+            results.setdefault("step3", []).append(ins_attrs["status"] == "Subscribed")
         except:
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
             pass
 
         # case result
         notes = list()
         if "satellite" in register_type:
would reformat /tmp/lint/tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py
would reformat /tmp/lint/tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py
--- /tmp/lint/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 06:16:08.779039 +0000
@@ -2,68 +2,75 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134067')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134067")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        unlimited_sku = register_config['unlimit']
+        register_type = register_config["type"]
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: check repo status in guest")
         cmd = "subscription-manager repos --list"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if "stage" in register_type:
-            res = self.vw_msg_search(output, "Available Repositories" , exp_exist=True)
+            res = self.vw_msg_search(output, "Available Repositories", exp_exist=True)
         else:
-            res = self.vw_msg_search(output, "no repositories available" , exp_exist=True)
-        results.setdefault('step4', []).append(res)
+            res = self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+        results.setdefault("step4", []).append(res)
 
         logger.info(">>>step5: check subscription status in guest")
         cmd = "subscription-manager status"
         ret, output = self.runcmd(cmd, self.ssh_guest())
-        res1 = self.vw_msg_search(output, "Invalid" , exp_exist=True)
-        logger.warning("{0} is not available for: Red Hat Enterprise Linux Server".format(unlimited_sku))
-        results.setdefault('step5', []).append(res1)
+        res1 = self.vw_msg_search(output, "Invalid", exp_exist=True)
+        logger.warning(
+            "{0} is not available for: Red Hat Enterprise Linux Server".format(
+                unlimited_sku
+            )
+        )
+        results.setdefault("step5", []).append(res1)
 
         logger.info(">>>step6: available virtual unlimit sku can be listed in guest ")
         output = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
         res = self.vw_msg_search(str(output), unlimited_sku, exp_exist=True)
-        results.setdefault('step6', []).append(res)
+        results.setdefault("step6", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py
--- /tmp/lint/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 06:16:08.790009 +0000
@@ -2,52 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134072')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134072")
         self.vw_case_skip("unlimited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        unlimited_sku = register_config['unlimit']
+        unlimited_sku = register_config["unlimit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: unregister host/hypervisor and check virtual pool revoked or not")
+        logger.info(
+            ">>>step4: unregister host/hypervisor and check virtual pool revoked or not"
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, unlimited_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py
--- /tmp/lint/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 06:16:08.828383 +0000
@@ -2,56 +2,61 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134060')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134060")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        pool_id = sku_attrs['pool_id'] 
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: no available virtual vdc sku listed in guest ")
-        output = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual", exp_exist=False)
+        output = self.system_sku_attr(
+            self.ssh_guest(), vdc_virtual_sku, "virtual", exp_exist=False
+        )
         res = self.vw_msg_search(str(output), vdc_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         notes = list()
-        server_type = self.get_config('register_type')
-        if 'stage' in server_type:
-            notes.append("Bug(Step*): Failed to synchronize cache for repo 'rhel-8-for-x86_64-baseos-rpms'")
+        server_type = self.get_config("register_type")
+        if "stage" in server_type:
+            notes.append(
+                "Bug(Step*): Failed to synchronize cache for repo 'rhel-8-for-x86_64-baseos-rpms'"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1719177")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py
--- /tmp/lint/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py	2023-03-06 06:16:08.822523 +0000
@@ -2,42 +2,43 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134062')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134062")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus'] 
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku is created or not in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        results.setdefault('step3', []).append(sku_attrs['sku_id'] == vdc_virtual_sku)
+        results.setdefault("step3", []).append(sku_attrs["sku_id"] == vdc_virtual_sku)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py
--- /tmp/lint/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 06:16:08.859583 +0000
@@ -2,52 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134064')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134064")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: unattach physical sku from host/hypervisor and check virtual pool")
+        logger.info(
+            ">>>step4: unattach physical sku from host/hypervisor and check virtual pool"
+        )
         self.vw_web_unattach(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py
--- /tmp/lint/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 05:02:18.589378 +0000
+++ /tmp/lint/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 06:16:08.881128 +0000
@@ -2,51 +2,56 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134066')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134066")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        register_type = register_config["type"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         try:
             logger.info(">>>step3: attach virtual sku by auto in guest")
-            sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-            results.setdefault('step3', []).append(sku_attrs['sku_id'] == vdc_virtual_sku)
+            sku_attrs = self.system_sku_attr(
+                self.ssh_guest(), vdc_virtual_sku, "virtual"
+            )
+            results.setdefault("step3", []).append(
+                sku_attrs["sku_id"] == vdc_virtual_sku
+            )
             self.system_sku_attach(self.ssh_guest())
             ins_attrs = self.system_sku_installed(self.ssh_guest())
-            results.setdefault('step3', []).append(ins_attrs['status'] == 'Subscribed')
+            results.setdefault("step3", []).append(ins_attrs["status"] == "Subscribed")
         except:
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
             pass
 
         # case result
         notes = list()
         if "satellite" in register_type:
would reformat /tmp/lint/tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py
--- /tmp/lint/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 06:16:08.903533 +0000
@@ -2,52 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134070')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134070")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
-        logger.info(">>>step4: unregister host/hypervisor and check virtual pool revoked or not")
+        logger.info(
+            ">>>step4: unregister host/hypervisor and check virtual pool revoked or not"
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py
--- /tmp/lint/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py	2023-03-06 06:16:08.926875 +0000
@@ -2,65 +2,72 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134052')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134052")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 4 in host")
-        res = self.system_custom_facts_create(self.ssh_host(), 'cpu.cpu_socket(s)', '4')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(self.ssh_host(), "cpu.cpu_socket(s)", "4")
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
-        logger.info(">>>step3: attach physical sku for host/hypervisor without quantity")
+        logger.info(
+            ">>>step3: attach physical sku for host/hypervisor without quantity"
+        )
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, vdc_physical_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for host/hypervisor with quantity=1")
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=1)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, vdc_physical_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Only supports 2 of 4 sockets', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
-        results.setdefault('step4', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Only supports 2 of 4 sockets", exp_exist=True
+        )
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
+        results.setdefault("step4", []).append(res3)
         self.system_custom_facts_remove(self.ssh_host())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py
--- /tmp/lint/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py	2023-03-06 06:16:08.961018 +0000
@@ -2,64 +2,73 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134057')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134057")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 4 in guest")
-        res = self.system_custom_facts_create(self.ssh_guest(), 'cpu.cpu_socket(s)', '4')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(
+            self.ssh_guest(), "cpu.cpu_socket(s)", "4"
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step4: attach virtual sku for guest without quantity")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
-        results.setdefault('step4', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
+        results.setdefault("step4", []).append(res3)
 
         logger.info(">>>step5: attach virtual sku for guest with quantity=2")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
-        output = self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id, quantity=2)
-        res1 = self.vw_msg_search(output, 'Multi-entitlement not supported for pool', exp_exist=True)
-        results.setdefault('step5', []).append(res1)
+        virtual_pool_id = sku_attrs["pool_id"]
+        output = self.system_sku_attach(
+            self.ssh_guest(), pool_id=virtual_pool_id, quantity=2
+        )
+        res1 = self.vw_msg_search(
+            output, "Multi-entitlement not supported for pool", exp_exist=True
+        )
+        results.setdefault("step5", []).append(res1)
         self.system_custom_facts_remove(self.ssh_guest())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py
--- /tmp/lint/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py	2023-03-06 06:16:08.981881 +0000
@@ -2,44 +2,47 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134068')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134068")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku is created or not in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        results.setdefault('step3', []).append(sku_attrs['sku_id'] == limit_virtual_sku)
+        results.setdefault("step3", []).append(sku_attrs["sku_id"] == limit_virtual_sku)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py
--- /tmp/lint/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py	2023-03-06 06:16:08.991011 +0000
@@ -2,74 +2,83 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134055')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134055")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        register_type = register_config["type"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: check repo status in host")
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         if "libvirt-local" in hypervisor_type or "vdsm" in hypervisor_type:
             cmd = "subscription-manager repos --list"
             ret, output = self.runcmd(cmd, self.ssh_host())
-            res = self.vw_msg_search(output, "no repositories available" , exp_exist=True)
-            results.setdefault('step4', []).append(res)
+            res = self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+            results.setdefault("step4", []).append(res)
         else:
-            logger.warning("skip this step, it's not available for mode {0}".format(hypervisor_type))
+            logger.warning(
+                "skip this step, it's not available for mode {0}".format(
+                    hypervisor_type
+                )
+            )
 
         logger.info(">>>step5: check repo status in guest")
         cmd = "subscription-manager repos --list"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if "stage" in register_type:
-            res = self.vw_msg_search(output, "Available Repositories" , exp_exist=True)
+            res = self.vw_msg_search(output, "Available Repositories", exp_exist=True)
         else:
-            res = self.vw_msg_search(output, "no repositories available" , exp_exist=True)
-        results.setdefault('step5', []).append(res)
+            res = self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+        results.setdefault("step5", []).append(res)
 
         logger.info(">>>step6: check subscription status in guest")
         cmd = "subscription-manager status"
         ret, output = self.runcmd(cmd, self.ssh_guest())
-        res1 = self.vw_msg_search(output, "Overall Status: Current" , exp_exist=True)
-        res2 = self.vw_msg_search(output, "Invalid" , exp_exist=False)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        res1 = self.vw_msg_search(output, "Overall Status: Current", exp_exist=True)
+        res2 = self.vw_msg_search(output, "Invalid", exp_exist=False)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py
--- /tmp/lint/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py	2023-03-06 06:16:09.054371 +0000
@@ -2,82 +2,97 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134073')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134073")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        register_type = register_config["type"]
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku attrs in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        available = sku_attrs['available']
+        available = sku_attrs["available"]
         if available == "1":
-            logger.info("Succeeded to check, vitual sku({0}) Available({1})".format(limit_virtual_sku, available))
-            results.setdefault('step3', []).append(True)
+            logger.info(
+                "Succeeded to check, vitual sku({0}) Available({1})".format(
+                    limit_virtual_sku, available
+                )
+            )
+            results.setdefault("step3", []).append(True)
         else:
-            logger.error("Failed to check, vitual sku({0}) Available({1})".format(limit_virtual_sku, available))
-            results.setdefault('step3', []).append(False)
+            logger.error(
+                "Failed to check, vitual sku({0}) Available({1})".format(
+                    limit_virtual_sku, available
+                )
+            )
+            results.setdefault("step3", []).append(False)
 
         logger.info(">>>step4: attach virtual sku by pool_id in guest")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: check repo status in guest")
         cmd = "subscription-manager repos --list"
         ret, output = self.runcmd(cmd, self.ssh_guest())
         if "stage" in register_type:
-            res = self.vw_msg_search(output, "Available Repositories" , exp_exist=True)
+            res = self.vw_msg_search(output, "Available Repositories", exp_exist=True)
         else:
-            res = self.vw_msg_search(output, "no repositories available" , exp_exist=True)
-        results.setdefault('step5', []).append(res)
+            res = self.vw_msg_search(
+                output, "no repositories available", exp_exist=True
+            )
+        results.setdefault("step5", []).append(res)
 
         logger.info(">>>step6: check subscription status in guest")
         cmd = "subscription-manager status"
         ret, output = self.runcmd(cmd, self.ssh_guest())
-        res1 = self.vw_msg_search(output, "Overall Status: Current" , exp_exist=True)
-        res2 = self.vw_msg_search(output, "Invalid" , exp_exist=False)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        res1 = self.vw_msg_search(output, "Overall Status: Current", exp_exist=True)
+        res2 = self.vw_msg_search(output, "Invalid", exp_exist=False)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: no available virtual limit sku listed in guest ")
-        output = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual", exp_exist=False)
+        output = self.system_sku_attr(
+            self.ssh_guest(), limit_virtual_sku, "virtual", exp_exist=False
+        )
         res = self.vw_msg_search(str(output), limit_virtual_sku, exp_exist=False)
-        results.setdefault('step7', []).append(res)
+        results.setdefault("step7", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py
--- /tmp/lint/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py	2023-03-06 06:16:09.058928 +0000
@@ -2,65 +2,76 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134054')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134054")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        register_type = register_config["type"]
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id)
 
         logger.info(">>>step3: check virtual sku attrs in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        available = sku_attrs['available']
+        available = sku_attrs["available"]
         if available == "1":
-            logger.info("Succeeded to check, vitual sku({0}) Available({1})".format(limit_virtual_sku, available))
-            results.setdefault('step3', []).append(True)
+            logger.info(
+                "Succeeded to check, vitual sku({0}) Available({1})".format(
+                    limit_virtual_sku, available
+                )
+            )
+            results.setdefault("step3", []).append(True)
         else:
-            logger.error("Failed to check, vitual sku({0}) Available({1})".format(limit_virtual_sku, available))
-            results.setdefault('step3', []).append(False)
+            logger.error(
+                "Failed to check, vitual sku({0}) Available({1})".format(
+                    limit_virtual_sku, available
+                )
+            )
+            results.setdefault("step3", []).append(False)
 
         try:
             logger.info(">>>step4: attach virtual sku by auto in guest")
-            pool_id = sku_attrs['pool_id']
+            pool_id = sku_attrs["pool_id"]
             self.system_sku_attach(self.ssh_guest())
             output = self.system_sku_consumed(self.ssh_guest())
             res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
         except:
-            results.setdefault('step4', []).append(False)
+            results.setdefault("step4", []).append(False)
             pass
 
         # case result
         notes = list()
         if "satellite" in register_type:
would reformat /tmp/lint/tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py
--- /tmp/lint/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py	2023-03-06 06:16:09.096624 +0000
@@ -2,56 +2,61 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134058')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134058")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
-        logger.info(">>>step4: unregister host/hypervisor and check virtual pool revoked or not")
+        logger.info(
+            ">>>step4: unregister host/hypervisor and check virtual pool revoked or not"
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, limit_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py
--- /tmp/lint/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py	2023-03-06 06:16:09.104392 +0000
@@ -2,56 +2,61 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134053')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134053")
         self.vw_case_skip("limited sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        limit_physical_sku = register_config['limit']
-        limit_virtual_sku = register_config['limit']
+        limit_physical_sku = register_config["limit"]
+        limit_virtual_sku = register_config["limit"]
 
         # Case Steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         self.vw_web_unattach(host_name, host_uuid)
-        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        sku_attrs = self.system_sku_attr(
+            self.ssh_host(), limit_physical_sku, "physical"
+        )
+        physical_pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
 
         logger.info(">>>step3: attach virtual sku by pool_id in guest")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, "virtual")
-        virtual_pool_id = sku_attrs['pool_id']
+        virtual_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
-        logger.info(">>>step4: unattach physical sku from host/hypervisor and check virtual pool")
+        logger.info(
+            ">>>step4: unattach physical sku from host/hypervisor and check virtual pool"
+        )
         self.vw_web_unattach(host_name, host_uuid)
         output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
         res = self.vw_msg_search(output, limit_virtual_sku, exp_exist=False)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py
--- /tmp/lint/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py	2023-03-06 06:16:09.129381 +0000
@@ -2,47 +2,50 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134075')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134075")
         self.vw_case_skip("instance sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
 
         # case steps
         logger.info(">>>step1: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for host/hypervisor")
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, pool_id, quantity=2)
 
         logger.info(">>>step3: check no virtual sku is created or not in guest")
-        sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "virtual", exp_exist=False)
+        sku_attrs = self.system_sku_attr(
+            self.ssh_guest(), instance_sku, "virtual", exp_exist=False
+        )
         if sku_attrs:
             logger.error("failed to check, virtual instance sku is exist")
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
         else:
             logger.info("succeeded to check, virtual instance sku is not exist")
-            results.setdefault('step3', []).append(True)
+            results.setdefault("step3", []).append(True)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py
--- /tmp/lint/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py	2023-03-06 06:16:09.206446 +0000
@@ -2,76 +2,81 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134076')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134076")
         self.vw_case_skip("instance sku")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 1 in host")
-        res = self.system_custom_facts_create(self.ssh_host(), 'cpu.cpu_socket(s)', '1')
-        results.setdefault('step1', []).append(res)
- 
+        res = self.system_custom_facts_create(self.ssh_host(), "cpu.cpu_socket(s)", "1")
+        results.setdefault("step1", []).append(res)
+
         logger.info(">>>step2: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
- 
+        results.setdefault("step2", []).append(res)
+
         logger.info(">>>step3: attach physical sku for host without quantity")
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for host with quantity=1")
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         cmd = "subscription-manager attach --pool=%s --quantity=1" % (physical_pool_id)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="subscription attach")
-        error_msg = 'must be attached using a quantity evenly divisible by 2'
+        error_msg = "must be attached using a quantity evenly divisible by 2"
         res = self.vw_msg_search(output, error_msg, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
         self.system_custom_facts_remove(self.ssh_host())
 
         logger.info(">>>step5: attach physical sku for host/hypervisor with quantity=2")
         self.system_sku_unattach(self.ssh_host())
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
-        results.setdefault('step5', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
+        results.setdefault("step5", []).append(res3)
         self.system_custom_facts_remove(self.ssh_host())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py
--- /tmp/lint/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py	2023-03-06 06:16:09.266497 +0000
@@ -2,70 +2,79 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134079')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134079")
         self.vw_case_skip("instance sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 1 in guest")
-        res = self.system_custom_facts_create(self.ssh_guest(), 'cpu.cpu_socket(s)', '1')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(
+            self.ssh_guest(), "cpu.cpu_socket(s)", "1"
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for guest without quantity")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
-        results.setdefault('step2', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
+        results.setdefault("step2", []).append(res3)
 
         logger.info(">>>step3: attach physical sku for guest with quantity=1")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=1)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for guest with quantity=2")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=2)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
-        results.setdefault('step4', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
+        results.setdefault("step4", []).append(res3)
         self.system_custom_facts_remove(self.ssh_guest())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py
--- /tmp/lint/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py	2023-03-06 06:16:09.293589 +0000
@@ -5,87 +5,94 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134077')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134077")
         self.vw_case_skip("instance sku")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
 
         # case steps
         try:
             logger.info(">>>step1: set cpu.cpu_socket(s) to 8 in host")
-            cpu_socket = 'cpu.cpu_socket(s)'
-            res = self.system_custom_facts_create(self.ssh_host(), cpu_socket, '8')
-            results.setdefault('step1', []).append(res)
+            cpu_socket = "cpu.cpu_socket(s)"
+            res = self.system_custom_facts_create(self.ssh_host(), cpu_socket, "8")
+            results.setdefault("step1", []).append(res)
 
             logger.info(">>>step2: run virt-who to report mapping")
             data, tty_output, rhsm_output = self.vw_start()
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res)
+            results.setdefault("step2", []).append(res)
 
             logger.info(">>>step3: attach physical sku for host without quantity")
             self.system_sku_unattach(self.ssh_host())
             self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)
             output = self.system_sku_consumed(self.ssh_host())
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*8', exp_exist=True)
-            res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current')
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
-            results.setdefault('step3', []).append(res3)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*8", exp_exist=True)
+            res3 = self.vw_msg_search(
+                output, "Status Details:.*Subscription is current"
+            )
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
+            results.setdefault("step3", []).append(res3)
 
             logger.info(">>>step4: attach physical sku for host with quantity=1")
             self.system_sku_unattach(self.ssh_host())
-            cmd = ("subscription-manager attach --pool={0} --quantity=1"
-                   .format(physical_pool_id))
+            cmd = "subscription-manager attach --pool={0} --quantity=1".format(
+                physical_pool_id
+            )
             ret, output = self.runcmd(cmd, self.ssh_host(), desc="subscription attach")
-            error_msg = 'must be attached using a quantity evenly divisible by 2'
+            error_msg = "must be attached using a quantity evenly divisible by 2"
             res = self.vw_msg_search(output, error_msg, exp_exist=True)
-            results.setdefault('step4', []).append(res)
+            results.setdefault("step4", []).append(res)
 
             logger.info(">>>step5: attach physical sku for host with quantity=2")
             self.system_sku_unattach(self.ssh_host())
-            self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)
+            self.system_sku_attach(
+                self.ssh_host(), pool_id=physical_pool_id, quantity=2
+            )
             output = self.system_sku_consumed(self.ssh_host())
-            msg = 'Status Details:.*Only supports 2 of 8 sockets'
+            msg = "Status Details:.*Only supports 2 of 8 sockets"
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
             res3 = self.vw_msg_search(output, msg, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
-            results.setdefault('step5', []).append(res3)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
+            results.setdefault("step5", []).append(res3)
 
             logger.info(">>>step6: attach physical sku for host with quantity=6")
-            self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=6)
+            self.system_sku_attach(
+                self.ssh_host(), pool_id=physical_pool_id, quantity=6
+            )
             output = self.system_sku_consumed(self.ssh_host())
-            msg = 'Status Details:.*Subscription is current'
+            msg = "Status Details:.*Subscription is current"
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-            res3 = self.vw_msg_search(output, 'Quantity Used:.*6', exp_exist=True)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+            res3 = self.vw_msg_search(output, "Quantity Used:.*6", exp_exist=True)
             res4 = self.vw_msg_search(output, msg, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
-            results.setdefault('step6', []).append(res3)
-            results.setdefault('step6', []).append(res4)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
+            results.setdefault("step6", []).append(res3)
+            results.setdefault("step6", []).append(res4)
 
         finally:
             self.system_custom_facts_remove(self.ssh_host())
 
         # case result
would reformat /tmp/lint/tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py
--- /tmp/lint/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py	2023-03-06 05:02:18.590378 +0000
+++ /tmp/lint/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py	2023-03-06 06:16:09.321366 +0000
@@ -5,102 +5,108 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134078')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134078")
         self.vw_case_skip("instance sku")
-        hypervisor_type = self.get_config('hypervisor_type')
-        trigger_type = self.get_config('trigger_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        trigger_type = self.get_config("trigger_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "trigger-rhev" in trigger_type:
             self.vw_case_skip(trigger_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        instance_sku = register_config['instance']
+        register_type = register_config["type"]
+        instance_sku = register_config["instance"]
         sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 8 in host")
-        res = self.system_custom_facts_create(self.ssh_host(), 'cpu.cpu_socket(s)', '8')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(self.ssh_host(), "cpu.cpu_socket(s)", "8")
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who and check the mapping info is sent or not")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: attach physical sku for host without quantity")
         self.system_sku_unattach(self.ssh_host())
         self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_host())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*8', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current')
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*8", exp_exist=True)
+        res3 = self.vw_msg_search(output, "Status Details:.*Subscription is current")
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for host with quantity=1")
         self.system_sku_unattach(self.ssh_host())
-        cmd = ("subscription-manager attach --pool={0} --quantity=1"
-               .format(physical_pool_id))
+        cmd = "subscription-manager attach --pool={0} --quantity=1".format(
+            physical_pool_id
+        )
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="subscription attach")
-        error_msg = 'must be attached using a quantity evenly divisible by 2'
+        error_msg = "must be attached using a quantity evenly divisible by 2"
         res = self.vw_msg_search(output, error_msg, exp_exist=True)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step5: attach physical sku for host with quantity=2")
         # Sometimes, Status Details is not Only supports 2 of 8 sockets, try it 5 loops
         res1 = res2 = res3 = False
         for i in range(5):
             self.system_sku_unattach(self.ssh_host())
             sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, "physical")
-            physical_pool_id = sku_attrs['pool_id']
-            self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)
+            physical_pool_id = sku_attrs["pool_id"]
+            self.system_sku_attach(
+                self.ssh_host(), pool_id=physical_pool_id, quantity=2
+            )
             output = self.system_sku_consumed(self.ssh_host())
-            msg = 'Status Details:.*Only supports 2 of 8 sockets'
+            msg = "Status Details:.*Only supports 2 of 8 sockets"
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
             res3 = self.vw_msg_search(output, msg, exp_exist=True)
             if res1 and res2 and res3:
                 break
-            wait_time = 60*(i+3)
-            logger.warning("attach result is not expected, try again after {0}"
-                           .format(wait_time))
+            wait_time = 60 * (i + 3)
+            logger.warning(
+                "attach result is not expected, try again after {0}".format(wait_time)
+            )
             time.sleep(wait_time)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
-        results.setdefault('step5', []).append(res3)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
+        results.setdefault("step5", []).append(res3)
 
         try:
             logger.info(">>>step6: attach sku for host by auto")
             self.system_sku_attach(self.ssh_host())
             output = self.system_sku_consumed(self.ssh_host())
             res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-            res2 = self.vw_msg_search(output, 'Quantity Used:.*6', exp_exist=True)
-            res4 = self.vw_msg_search(output, 'Status Details:.*Subscription is current')
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
-            results.setdefault('step6', []).append(res3)
-            results.setdefault('step6', []).append(res4)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+            res2 = self.vw_msg_search(output, "Quantity Used:.*6", exp_exist=True)
+            res4 = self.vw_msg_search(
+                output, "Status Details:.*Subscription is current"
+            )
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
+            results.setdefault("step6", []).append(res3)
+            results.setdefault("step6", []).append(res4)
         except:
-            results.setdefault('step6', []).append(False)
+            results.setdefault("step6", []).append(False)
             pass
         finally:
             self.system_custom_facts_remove(self.ssh_host())
 
         # case result
would reformat /tmp/lint/tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py
--- /tmp/lint/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py	2023-03-06 06:16:09.361979 +0000
@@ -2,84 +2,95 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134080')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134080")
         self.vw_case_skip("instance sku")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        instance_sku = register_config['instance']
+        instance_sku = register_config["instance"]
 
         # case steps
         logger.info(">>>step1: set cpu.cpu_socket(s) to 8 in guest")
-        res = self.system_custom_facts_create(self.ssh_guest(), 'cpu.cpu_socket(s)', '8')
-        results.setdefault('step1', []).append(res)
+        res = self.system_custom_facts_create(
+            self.ssh_guest(), "cpu.cpu_socket(s)", "8"
+        )
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: attach physical sku for guest without quantity")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
-        results.setdefault('step2', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
+        results.setdefault("step2", []).append(res3)
 
         logger.info(">>>step3: attach physical sku for guest with quantity=1")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=1)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*1", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step4: attach physical sku for guest with quantity=2")
         self.system_sku_unattach(self.ssh_guest())
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=2)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
-        results.setdefault('step4', []).append(res3)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
+        results.setdefault("step4", []).append(res3)
 
         logger.info(">>>step5: attach physical sku for guest with quantity=6")
         sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, "physical")
-        physical_pool_id = sku_attrs['pool_id']
+        physical_pool_id = sku_attrs["pool_id"]
         self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=6)
         output = self.system_sku_consumed(self.ssh_guest())
         res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)
-        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)
-        res3 = self.vw_msg_search(output, 'Quantity Used:.*6', exp_exist=True)
-        res4 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
-        results.setdefault('step5', []).append(res3)
-        results.setdefault('step5', []).append(res4)
+        res2 = self.vw_msg_search(output, "Quantity Used:.*2", exp_exist=True)
+        res3 = self.vw_msg_search(output, "Quantity Used:.*6", exp_exist=True)
+        res4 = self.vw_msg_search(
+            output, "Status Details:.*Subscription is current", exp_exist=True
+        )
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
+        results.setdefault("step5", []).append(res3)
+        results.setdefault("step5", []).append(res4)
         self.system_custom_facts_remove(self.ssh_guest())
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py
--- /tmp/lint/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py	2023-03-06 06:16:09.380850 +0000
@@ -2,66 +2,79 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134081')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134081")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "libvirt-local" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         libvirt_conf = "/etc/libvirt/libvirtd.conf"
 
         # case steps
         logger.info(">>>step1: run virt-who service to check the thread number")
         ret, output = self.run_service(self.ssh_host(), "virt-who", "restart")
         thread_before = self.vw_callback_thread_num()
-        logger.info("Succeeded to start virt-who service and the thread_num is {0}".format(thread_before))
+        logger.info(
+            "Succeeded to start virt-who service and the thread_num is {0}".format(
+                thread_before
+            )
+        )
 
         logger.info(">>>step2: update libvirt config, and restart libvirtd service")
         self.vw_option_enable("listen_tls", filename=libvirt_conf)
         self.vw_option_enable("listen_tcp", filename=libvirt_conf)
         self.vw_option_enable("auth_tcp", filename=libvirt_conf)
         self.vw_option_enable("tcp_port", filename=libvirt_conf)
         ret, output = self.run_service(self.ssh_host(), "libvirtd", "restart")
         ret, output = self.run_service(self.ssh_host(), "libvirtd", "status")
         if "is running" in output or "Active: active (running)" in output:
             logger.info("Succeeded to restart libvirt service")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         else:
             logger.error("Failed to restart libvirt service")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         logger.info(">>>step3: check virt-who thread_num is changed or not")
         thread_after = self.vw_callback_thread_num()
         if thread_before == thread_after:
-            logger.info("Succeeded to check, thread_num({0}) is not changed".format(thread_after))
-            results.setdefault('step3', []).append(True)
+            logger.info(
+                "Succeeded to check, thread_num({0}) is not changed".format(
+                    thread_after
+                )
+            )
+            results.setdefault("step3", []).append(True)
         else:
-            logger.error("Failed to check, thread_num({0}) is changed to {1}".format(thread_before, thread_after))
-            results.setdefault('step3', []).append(False)
+            logger.error(
+                "Failed to check, thread_num({0}) is changed to {1}".format(
+                    thread_before, thread_after
+                )
+            )
+            results.setdefault("step3", []).append(False)
 
         logger.info(">>>step4: recovery libvirt config")
         self.vw_option_disable("listen_tls", filename=libvirt_conf)
         self.vw_option_disable("listen_tcp", filename=libvirt_conf)
         self.vw_option_disable("auth_tcp", filename=libvirt_conf)
         self.vw_option_disable("tcp_port", filename=libvirt_conf)
         ret, output = self.run_service(self.ssh_host(), "libvirtd", "restart")
         ret, output = self.run_service(self.ssh_host(), "libvirtd", "status")
         if "is running" in output or "Active: active (running)" in output:
             logger.info("Succeeded to restart libvirt service")
-            results.setdefault('step4', []).append(True)
+            results.setdefault("step4", []).append(True)
         else:
             logger.error("Failed to restart libvirt service")
-            results.setdefault('step4', []).append(False)
+            results.setdefault("step4", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py
--- /tmp/lint/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py	2023-03-06 06:16:09.386259 +0000
@@ -2,16 +2,17 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134082')
-        hypervisor_type = self.get_config('hypervisor_type')
-        trigger_type = self.get_config('trigger_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-134082")
+        hypervisor_type = self.get_config("hypervisor_type")
+        trigger_type = self.get_config("trigger_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "trigger-rhel" not in trigger_type:
             self.vw_case_skip(trigger_type)
         self.vw_case_init()
 
@@ -21,34 +22,47 @@
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
 
         # case steps
         logger.info(">>>step1: create virt-who config")
-        self.vw_option_enable('[global]', conf_etc)
-        self.vw_option_enable('debug', conf_etc)
-        self.vw_option_update_value('debug', 'True', conf_etc)
+        self.vw_option_enable("[global]", conf_etc)
+        self.vw_option_enable("debug", conf_etc)
+        self.vw_option_update_value("debug", "True", conf_etc)
         self.vw_option_enable("interval", filename=conf_etc)
-        self.vw_option_update_value("interval", '60', filename=conf_etc)
+        self.vw_option_update_value("interval", "60", filename=conf_etc)
 
         logger.info("setting options in /etc/virt-who.d/")
         self.vw_etc_d_mode_create(config_name, config_file)
-        
+
         logger.info(">>>step2: start virt-who service to check")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_looptime=60)
+        res1 = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_looptime=60,
+        )
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: start to reboot virt-who host")
         self.system_reboot(self.ssh_host())
 
         logger.info(">>>step4: start virt-who service to check again")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_looptime=60)
+        res1 = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_looptime=60,
+        )
         res2 = self.vw_msg_search(output=rhsm_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         # case result
         self.vw_case_result(results)
-
would reformat /tmp/lint/tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py
--- /tmp/lint/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py	2023-03-06 06:16:09.464239 +0000
@@ -2,52 +2,73 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-171210')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-171210")
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_virtual_sku = register_config["vdc_bonus"]
 
         # case steps
         logger.info(">>>step1: check virtual temporary sku exist in guest")
         self.vw_thread_clean()
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        sku_type = sku_attrs['sub_type']
-        sku_id = sku_attrs['sku_id']
-        pool_id = sku_attrs['pool_id']
-        results.setdefault('step1', []).append('Temporary' in sku_type)
-        results.setdefault('step1', []).append(vdc_virtual_sku in sku_id)
+        sku_type = sku_attrs["sub_type"]
+        sku_id = sku_attrs["sku_id"]
+        pool_id = sku_attrs["pool_id"]
+        results.setdefault("step1", []).append("Temporary" in sku_type)
+        results.setdefault("step1", []).append(vdc_virtual_sku in sku_id)
 
         logger.info(">>>step2: attach virtual temporary sku in guest")
         self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)
         output = self.system_sku_consumed(self.ssh_guest())
-        results.setdefault('step2', []).append(self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True))
-        results.setdefault('step2', []).append(self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=True))
-        results.setdefault('step2', []).append(self.vw_msg_search(output, "Status Details: .*temporary unmapped guest subscription", exp_exist=True))
+        results.setdefault("step2", []).append(
+            self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
+        )
+        results.setdefault("step2", []).append(
+            self.vw_msg_search(output, "Subscription Type: .*Temporary", exp_exist=True)
+        )
+        results.setdefault("step2", []).append(
+            self.vw_msg_search(
+                output,
+                "Status Details: .*temporary unmapped guest subscription",
+                exp_exist=True,
+            )
+        )
 
         logger.info(">>>step3: start virt-who service")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         logger.info(">>>step4: check temporary sku is changed to stable in guest")
         output = self.system_sku_consumed(self.ssh_guest())
         virtual_sku = ["RH00049|RH00050"]
-        results.setdefault('step4', []).append(self.msg_validation(output, virtual_sku, exp_exist=True))
-        results.setdefault('step4', []).append(self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=False))
-        results.setdefault('step4', []).append(self.vw_msg_search(output, "Status Details: .*Subscription is current", exp_exist=True))
+        results.setdefault("step4", []).append(
+            self.msg_validation(output, virtual_sku, exp_exist=True)
+        )
+        results.setdefault("step4", []).append(
+            self.vw_msg_search(
+                output, "Subscription Type: .*Temporary", exp_exist=False
+            )
+        )
+        results.setdefault("step4", []).append(
+            self.vw_msg_search(
+                output, "Status Details: .*Subscription is current", exp_exist=True
+            )
+        )
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py
--- /tmp/lint/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py	2023-03-06 06:16:09.499672 +0000
@@ -2,108 +2,129 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-170860')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-170860")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.24.5':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.24.5":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_type = register_config['type']
+        register_server = register_config["server"]
+        register_type = register_config["type"]
         if "satellite" in register_type:
-            ssh_sat = register_config['ssh_sat']
+            ssh_sat = register_config["ssh_sat"]
             register_server = self.get_hostname(ssh_sat)
         proxy_server = deploy.proxy.server
         proxy_port = deploy.proxy.port
         bad_proxy_server = "xxx.eng.pek2.redhat.com"
         bad_proxy_port = "0000"
-        error_msg = "Connection refused|Unable to connect to: .*{0}|Proxy error at .*{0}".format(bad_proxy_server)
+        error_msg = "Connection refused|Unable to connect to: .*{0}|Proxy error at .*{0}".format(
+            bad_proxy_server
+        )
 
         # Case Steps
         try:
             logger.info(">>>step1: set /etc/virt-who.d/x.conf with good proxy")
             self.vw_option_add("rhsm_proxy_hostname", proxy_server, config_file)
             self.vw_option_add("rhsm_proxy_port", proxy_port, config_file)
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(s1)
-            s2 = self.vw_msg_search(rhsm_output, "Connection built.*{0}".format(proxy_server), exp_exist=True)
-            results.setdefault('step1', []).append(s2)
-            s3 = self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True)
-            results.setdefault('step1', []).append(s3)
+            results.setdefault("step1", []).append(s1)
+            s2 = self.vw_msg_search(
+                rhsm_output,
+                "Connection built.*{0}".format(proxy_server),
+                exp_exist=True,
+            )
+            results.setdefault("step1", []).append(s2)
+            s3 = self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True
+            )
+            results.setdefault("step1", []).append(s3)
 
             logger.info(">>>step2: set wrong proxy in /etc/virt-who.d/x.conf")
-            self.vw_option_update_value("rhsm_proxy_hostname", bad_proxy_server, config_file)
+            self.vw_option_update_value(
+                "rhsm_proxy_hostname", bad_proxy_server, config_file
+            )
             self.vw_option_update_value("rhsm_proxy_port", bad_proxy_port, config_file)
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
             s2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step2', []).append(s1)
-            results.setdefault('step2', []).append(s2)
+            results.setdefault("step2", []).append(s1)
+            results.setdefault("step2", []).append(s2)
 
-            logger.info(">>>step3: set no_proxy=[server_hostname] in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("no_proxy", register_server, '/etc/rhsm/rhsm.conf')
+            logger.info(
+                ">>>step3: set no_proxy=[server_hostname] in /etc/rhsm/rhsm.conf"
+            )
+            self.vw_option_update_value(
+                "no_proxy", register_server, "/etc/rhsm/rhsm.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(s1)
+            results.setdefault("step3", []).append(s1)
 
             logger.info(">>>step4: set no_proxy=* in /etc/rhsm/rhsm.conf")
-            self.vw_option_update_value("no_proxy", '*', '/etc/rhsm/rhsm.conf')
+            self.vw_option_update_value("no_proxy", "*", "/etc/rhsm/rhsm.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(s1)
-            self.vw_option_update_value("no_proxy", '', '/etc/rhsm/rhsm.conf')
+            results.setdefault("step4", []).append(s1)
+            self.vw_option_update_value("no_proxy", "", "/etc/rhsm/rhsm.conf")
 
-            logger.info(">>>step5: set rhsm_no_proxy=[server_hostname] in /etc/virt-who.conf")
-            self.vw_option_enable('[defaults]', '/etc/virt-who.conf')
-            self.vw_option_enable('rhsm_no_proxy', '/etc/virt-who.conf')
-            self.vw_option_update_value('rhsm_no_proxy', register_server, '/etc/virt-who.conf')
+            logger.info(
+                ">>>step5: set rhsm_no_proxy=[server_hostname] in /etc/virt-who.conf"
+            )
+            self.vw_option_enable("[defaults]", "/etc/virt-who.conf")
+            self.vw_option_enable("rhsm_no_proxy", "/etc/virt-who.conf")
+            self.vw_option_update_value(
+                "rhsm_no_proxy", register_server, "/etc/virt-who.conf"
+            )
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(s1)
+            results.setdefault("step5", []).append(s1)
 
             logger.info(">>>step6: set rhsm_no_proxy=* in /etc/virt-who.conf")
-            self.vw_option_update_value('rhsm_no_proxy', '*', '/etc/virt-who.conf')
+            self.vw_option_update_value("rhsm_no_proxy", "*", "/etc/virt-who.conf")
             data, tty_output, rhsm_output = self.vw_start()
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(s1)
-            self.vw_option_disable('rhsm_no_proxy', '/etc/virt-who.conf')
+            results.setdefault("step6", []).append(s1)
+            self.vw_option_disable("rhsm_no_proxy", "/etc/virt-who.conf")
 
-            if hypervisor_type not in ('libvirt-local', 'vdsm'):
-                logger.info(">>>step7: set rhsm_no_proxy=[server_hostname] in /etc/virt-who.d/x.conf")
-                self.vw_option_add('rhsm_no_proxy', register_server, config_file)
+            if hypervisor_type not in ("libvirt-local", "vdsm"):
+                logger.info(
+                    ">>>step7: set rhsm_no_proxy=[server_hostname] in /etc/virt-who.d/x.conf"
+                )
+                self.vw_option_add("rhsm_no_proxy", register_server, config_file)
                 data, tty_output, rhsm_output = self.vw_start()
                 s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step7', []).append(s1)
+                results.setdefault("step7", []).append(s1)
 
                 logger.info(">>>step8: set rhsm_no_proxy=* in /etc/virt-who.d/x.conf")
-                self.vw_option_update_value('rhsm_no_proxy', '*', config_file)
+                self.vw_option_update_value("rhsm_no_proxy", "*", config_file)
                 data, tty_output, rhsm_output = self.vw_start()
                 s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step8', []).append(s1)
-                self.vw_option_del('rhsm_no_proxy', config_file)
+                results.setdefault("step8", []).append(s1)
+                self.vw_option_del("rhsm_no_proxy", config_file)
             else:
-                logger.info('Skip step7 and step8 for {0}'.format(hypervisor_type))
+                logger.info("Skip step7 and step8 for {0}".format(hypervisor_type))
         except:
-            results.setdefault('step except', []).append(False)
+            results.setdefault("step except", []).append(False)
             pass
 
         finally:
             self.vw_option_update_value("no_proxy", "", "/etc/rhsm/rhsm.conf")
 
would reformat /tmp/lint/tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py
--- /tmp/lint/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py	2023-03-06 06:16:09.517560 +0000
@@ -2,14 +2,15 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-171135')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.24.6':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-171135")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.24.6":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
@@ -21,58 +22,58 @@
 
         # case steps
         logger.info('>>>step1: Run virt-who without debug"')
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
         logger.info('>>>step2: Configure "print_=false" then run virt-who by cli')
         self.vw_option_enable("[global]", virtwho_conf)
         self.vw_option_enable("print_", virtwho_conf)
-        self.vw_option_update_value("print_", 'false', virtwho_conf)
+        self.vw_option_update_value("print_", "false", virtwho_conf)
         self.vw_stop()
         cmd = "virt-who"
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=False)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info('>>>step3: Configure "print_=false" then start virt-who service')
         self.vw_stop()
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=False)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info('>>>step4: Configure "print_=true" then run virt-who by cli')
-        self.vw_option_update_value("print_", 'true', virtwho_conf)
+        self.vw_option_update_value("print_", "true", virtwho_conf)
         self.vw_stop()
         cmd = "virt-who"
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=0)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(tty_output, guest_uuid, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info('>>>step5: Configure "print_=true" then start virt-who service')
         self.vw_stop()
         data, tty_output, rhsm_output = self.vw_start("virt-who")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=False)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info('>>>step6: Configure "print_=xxx" then start virt-who service')
         msg = "print_ must be a valid boolean"
-        self.vw_option_update_value("print_", 'xxx', virtwho_conf)
+        self.vw_option_update_value("print_", "xxx", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=False)
         res3 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
-        results.setdefault('step6', []).append(res3)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
+        results.setdefault("step6", []).append(res3)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py
--- /tmp/lint/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py	2023-03-06 06:16:09.546059 +0000
@@ -2,38 +2,39 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-183803')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-183803")
         configs = self.get_hypervisor_config()
-        hypervisor_type = configs['type']
-        if hypervisor_type != 'esx':
+        hypervisor_type = configs["type"]
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        self.vw_option_update_value('username', 'tester@vsphere.local', config_file)
+        self.vw_option_update_value("username", "tester@vsphere.local", config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # case steps
         logger.info(">>>step1: run virt-who for {0}".format(config_file))
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check host-to-guest association in rhsm.log")
         res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py
--- /tmp/lint/tier1/tc_1111_template_conf_validation.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1111_template_conf_validation.py	2023-03-06 06:16:09.564881 +0000
@@ -5,42 +5,43 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195889')
-        trigger_type = self.get_config('trigger_type')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if trigger_type != 'trigger-rhel':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-195889")
+        trigger_type = self.get_config("trigger_type")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if trigger_type != "trigger-rhel":
             self.vw_case_skip(trigger_type)
-        if hypervisor_type != 'esx':
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
 
         results = dict()
         options = [
-                '#[config name]',
-                '#type=',
-                '#server=',
-                '#username=',
-                '#password=',
-                '#encrypted_password=',
-                '#owner=',
-                '#hypervisor_id=',
-                '#rhsm_hostname=',
-                '#rhsm_port=',
-                '#rhsm_username=',
-                '#rhsm_password=',
-                '#rhsm_encrypted_password=',
-                '#rhsm_prefix=/rhsm',
-                '#kubeconfig=',
-                '#kubeversion=',]    
-        self.pkg_uninstall(self.ssh_host(), 'virt-who')
-        self.pkg_install(self.ssh_host(), 'virt-who')
-        _, output = self.runcmd('cat /etc/virt-who.d/template.conf', self.ssh_host())
+            "#[config name]",
+            "#type=",
+            "#server=",
+            "#username=",
+            "#password=",
+            "#encrypted_password=",
+            "#owner=",
+            "#hypervisor_id=",
+            "#rhsm_hostname=",
+            "#rhsm_port=",
+            "#rhsm_username=",
+            "#rhsm_password=",
+            "#rhsm_encrypted_password=",
+            "#rhsm_prefix=/rhsm",
+            "#kubeconfig=",
+            "#kubeversion=",
+        ]
+        self.pkg_uninstall(self.ssh_host(), "virt-who")
+        self.pkg_install(self.ssh_host(), "virt-who")
+        _, output = self.runcmd("cat /etc/virt-who.d/template.conf", self.ssh_host())
         for option in options:
             if len(re.findall(option, output)) < 0:
-                logger.warning('{0} is not defined in the template.conf'.format(option))
+                logger.warning("{0} is not defined in the template.conf".format(option))
                 results.setdefault(option, []).append(False)
             else:
-                logger.info('{0} is defined'.format(option))
+                logger.info("{0} is defined".format(option))
                 results.setdefault(option, []).append(True)
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1111_template_conf_validation.py
--- /tmp/lint/tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py	2023-03-06 06:16:09.571113 +0000
@@ -5,33 +5,37 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195888')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.30.0':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-195888")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.30.0":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
-        logger.info('>>>step1: set the environment in the virt-who host and run virt-who service')
-        cmd = ('export SUBMAN_DEBUG_PRINT_REQUEST=1;'
-               'export SUBMAN_DEBUG_PRINT_REQUEST_HEADER=1')
+        logger.info(
+            ">>>step1: set the environment in the virt-who host and run virt-who service"
+        )
+        cmd = (
+            "export SUBMAN_DEBUG_PRINT_REQUEST=1;"
+            "export SUBMAN_DEBUG_PRINT_REQUEST_HEADER=1"
+        )
         cmd = "{0}; virt-who -o".format(cmd)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
-        logger.info('>>>step2: check the message from console')
-        pkg = self.pkg_check(self.ssh_host(), 'virt-who')[9:17]
-        msg = 'virt-who/{}'.format(pkg)
+        logger.info(">>>step2: check the message from console")
+        pkg = self.pkg_check(self.ssh_host(), "virt-who")[9:17]
+        msg = "virt-who/{}".format(pkg)
         res2 = self.vw_msg_search(output=tty_output, msg=msg, exp_exist=True)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res2)
 
         # case results
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py
--- /tmp/lint/tier1/tc_1108_check_hypervisor_facts.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1108_check_hypervisor_facts.py	2023-03-06 06:16:09.583460 +0000
@@ -5,104 +5,108 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-174862')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-174862")
         configs = self.get_hypervisor_config()
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.24.6':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.24.6":
             self.vw_case_skip("virt-who version")
-        hypervisor_type = configs['type']
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        hypervisor_type = configs["type"]
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        self.vw_option_add('hypervisor_id', 'uuid', config_file)
+        self.vw_option_add("hypervisor_id", "uuid", config_file)
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
+        register_owner = register_config["owner"]
         host_uuid = self.get_hypervisor_hostuuid()
-        facts_items = ['socket', 'type', 'dmi', 'version']
-        if hypervisor_type in ('esx', 'rhevm', 'ahv'):
-            facts_items.append('cluster')
+        facts_items = ["socket", "type", "dmi", "version"]
+        if hypervisor_type in ("esx", "rhevm", "ahv"):
+            facts_items.append("cluster")
         type_values = {
-            'kubevirt': 'qemu',
-            'xen': 'XenServer',
-            'hyperv': 'hyperv',
-            'esx': 'VMware ESXi',
-            'libvirt-remote': 'QEMU',
-            'rhevm': 'qemu',
-            'ahv': 'AHV'
+            "kubevirt": "qemu",
+            "xen": "XenServer",
+            "hyperv": "hyperv",
+            "esx": "VMware ESXi",
+            "libvirt-remote": "QEMU",
+            "rhevm": "qemu",
+            "ahv": "AHV",
         }
-        if hypervisor_type == 'ahv' and deploy.ahv.api_version == 'v2':
-            type_values['ahv'] = 'kKvm'
+        if hypervisor_type == "ahv" and deploy.ahv.api_version == "v2":
+            type_values["ahv"] = "kKvm"
 
         cluster_values = {
-            'esx': deploy.vcenter.cluster,
-            'rhevm': deploy.rhevm.cluster,
-            'ahv': deploy.ahv.cluster
+            "esx": deploy.vcenter.cluster,
+            "rhevm": deploy.rhevm.cluster,
+            "ahv": deploy.ahv.cluster,
         }
 
         # Case Steps
         logger.info(">>>step1: run virt-who to get facts from mapping")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
         if host_uuid in data[register_owner].keys():
             facts_dic = data[register_owner][host_uuid]
             logger.info("succeeded to get hypervisor facts dict: {0}".format(facts_dic))
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             raise FailException("failed to get hypervisor facts")
 
         logger.info(">>>step2: check all facts item exiting")
         for item in facts_items:
             if item in facts_dic.keys() and facts_dic[item] is not None:
-                logger.info("succeeded to check {0}={1} in {2} facts"
-                            .format(item, facts_dic[item], hypervisor_type))
-                results.setdefault('step2', []).append(True)
+                logger.info(
+                    "succeeded to check {0}={1} in {2} facts".format(
+                        item, facts_dic[item], hypervisor_type
+                    )
+                )
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("no '{0}' in {1} facts".format(item, hypervisor_type))
-                results.setdefault('step2', []).append(False)
+                results.setdefault("step2", []).append(False)
 
         logger.info(">>>step3: check hypervisor.type value")
         type_value = type_values[hypervisor_type]
-        if facts_dic['type'] == type_value:
+        if facts_dic["type"] == type_value:
             logger.info("succeeded to check hypervisor.type={0}".format(type_value))
-            results.setdefault('step3', []).append(True)
+            results.setdefault("step3", []).append(True)
         else:
             logger.error("hypervisor.type is not {0}".format(type_value))
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
 
         logger.info(">>>step4: check dmi.system.uuid value")
         if hypervisor_type == "rhevm":
             host_hwuuid = self.get_hypervisor_hwuuid()
             dmi = host_hwuuid
         else:
             dmi = host_uuid
-        if facts_dic['dmi'] == dmi:
+        if facts_dic["dmi"] == dmi:
             logger.info("succeeded to check dmi.system.uuid={0}".format(host_uuid))
-            results.setdefault('step4', []).append(True)
+            results.setdefault("step4", []).append(True)
         else:
             logger.error("dmi.system.uuid is not {0}".format(host_uuid))
-            results.setdefault('step4', []).append(False)
+            results.setdefault("step4", []).append(False)
 
-        if hypervisor_type in ('esx', 'rhevm', 'ahv'):
+        if hypervisor_type in ("esx", "rhevm", "ahv"):
             logger.info(">>>step5: check hypervisor.cluster value")
             cluster_value = cluster_values[hypervisor_type]
-            if facts_dic['cluster'] == cluster_value:
-                logger.info("succeeded to check hypervisor.cluster={0}"
-                            .format(cluster_value))
-                results.setdefault('step5', []).append(True)
+            if facts_dic["cluster"] == cluster_value:
+                logger.info(
+                    "succeeded to check hypervisor.cluster={0}".format(cluster_value)
+                )
+                results.setdefault("step5", []).append(True)
             else:
                 logger.error("hypervisor.cluster is not {0}".format(cluster_value))
-                results.setdefault('step5', []).append(False)
+                results.setdefault("step5", []).append(False)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1108_check_hypervisor_facts.py
--- /tmp/lint/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py	2023-03-06 05:02:18.591378 +0000
+++ /tmp/lint/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py	2023-03-06 06:16:09.658941 +0000
@@ -2,35 +2,40 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196077')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-196077")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_file = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', config_file)
-        self.vw_option_enable('debug', config_file)
-        self.vw_option_update_value('debug', 'True', config_file)
-        self.vw_etc_d_mode_create('virtwho-config', '/etc/virt-who.d/virtwho-config.conf')
+        self.vw_option_enable("[global]", config_file)
+        self.vw_option_enable("debug", config_file)
+        self.vw_option_update_value("debug", "True", config_file)
+        self.vw_etc_d_mode_create(
+            "virtwho-config", "/etc/virt-who.d/virtwho-config.conf"
+        )
         proxy_server = "{0}:{1}".format(deploy.proxy.server, deploy.proxy.port)
         bad_proxy_server = "10.73.3.24:9999"
-        steps = {'step2':'http_proxy', 'step3':'https_proxy'}
-        error_msg = ["Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"]
+        steps = {"step2": "http_proxy", "step3": "https_proxy"}
+        error_msg = [
+            "Connection refused|Cannot connect to proxy|Connection timed out|Unable to connect"
+        ]
 
         # case steps
         logger.info(">>>step1: enable [system_environment] in /etc/virt-who.conf")
         self.vw_option_enable("[system_environment]", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run virt-who to check {1}".format(step, option))
             if option == "http_proxy":
                 value = "http://{0}".format(proxy_server)
                 bad_value = "http://{0}".format(bad_proxy_server)
             if option == "https_proxy":
@@ -39,12 +44,18 @@
             logger.info("> run virt-who with good {0}".format(option))
             self.vw_option_enable(option, config_file)
             self.vw_option_update_value(option, value, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            s2 = self.vw_msg_search(rhsm_output, "Connection built.*{0}".format(proxy_server), exp_exist=True)
-            s3 = self.vw_msg_search(rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True)
+            s2 = self.vw_msg_search(
+                rhsm_output,
+                "Connection built.*{0}".format(proxy_server),
+                exp_exist=True,
+            )
+            s3 = self.vw_msg_search(
+                rhsm_output, "Using proxy.*{0}".format(proxy_server), exp_exist=True
+            )
             results.setdefault(step, []).append(s1)
             results.setdefault(step, []).append(s2)
             results.setdefault(step, []).append(s3)
 
             logger.info("> run virt-who with bad {0}".format(option))
@@ -54,12 +65,12 @@
             s5 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
             results.setdefault(step, []).append(s4)
             results.setdefault(step, []).append(s5)
 
             logger.info(">>> run virt-who with bad proxy, but no_proxy=*")
-            self.vw_option_enable('no_proxy', config_file)
-            self.vw_option_update_value('no_proxy', '*', config_file)
+            self.vw_option_enable("no_proxy", config_file)
+            self.vw_option_update_value("no_proxy", "*", config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             s6 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(s6)
             self.vw_option_disable(option, config_file)
             self.vw_option_disable("no_proxy", config_file)
would reformat /tmp/lint/tier1/tc_1112_check_http_proxy_option_by_etc_conf.py
--- /tmp/lint/tier1/tc_1113_check_virtwho_status.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier1/tc_1113_check_virtwho_status.py	2023-03-06 06:16:09.668625 +0000
@@ -5,95 +5,96 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196077')
-        compose_id = self.get_config('rhel_compose')
-        if 'RHEL-9' not in compose_id:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-196077")
+        compose_id = self.get_config("rhel_compose")
+        if "RHEL-9" not in compose_id:
             self.vw_case_skip(compose_id)
         configs = self.get_hypervisor_config()
-        hypervisor_type = configs['type']
-        if 'libvirt-local' in hypervisor_type:
+        hypervisor_type = configs["type"]
+        if "libvirt-local" in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
-        hypervisor_server = configs['server']
+        hypervisor_server = configs["server"]
         register = self.get_register_config()
-        register_server = register['server']
+        register_server = register["server"]
         self.vw_case_init()
 
         # case config
         results = dict()
-        config_name = 'virtwho-config'
-        config_file = f'/etc/virt-who.d/{config_name}.conf'
+        config_name = "virtwho-config"
+        config_file = f"/etc/virt-who.d/{config_name}.conf"
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: Run virt-who to report the mapping")
-        data, tty_output, rhsm_output = self.vw_start(cli='virt-who -do')
+        data, tty_output, rhsm_output = self.vw_start(cli="virt-who -do")
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
         logger.info(">>>step2: Check '#virt-who --status' with good configuration")
         status = self.vw_status()
-        results.setdefault('step2', []).append(
-            'success' in status[config_name]['source_status'] and
-            'success' in status[config_name]['destination_status']
+        results.setdefault("step2", []).append(
+            "success" in status[config_name]["source_status"]
+            and "success" in status[config_name]["destination_status"]
         )
 
         logger.info(">>>step3: Check '#virt-who -s' with good configuration")
-        status = self.vw_status(cmd='virt-who -s')
-        results.setdefault('step3', []).append(
-            'success' in status[config_name]['source_status'] and
-            'success' in status[config_name]['destination_status']
+        status = self.vw_status(cmd="virt-who -s")
+        results.setdefault("step3", []).append(
+            "success" in status[config_name]["source_status"]
+            and "success" in status[config_name]["destination_status"]
         )
 
         logger.info(">>>step4: Check #virt-who --status --json")
         json = self.vw_status(if_json=True)
-        source = json[config_name]['source']
-        destination = json[config_name]['destination']
-        if 'libvirt' in hypervisor_type:
-            source_conn = f'qemu+ssh://root@{hypervisor_server}/system?no_tty=1'
-        elif 'esx' in hypervisor_type:
-            source_conn = f'https://{hypervisor_server}'
-        elif 'rhevm' in hypervisor_type:
-            source_conn = hypervisor_server.split('ovirt-engine')[0].strip()
-        elif 'kubevirt' in hypervisor_type:
+        source = json[config_name]["source"]
+        destination = json[config_name]["destination"]
+        if "libvirt" in hypervisor_type:
+            source_conn = f"qemu+ssh://root@{hypervisor_server}/system?no_tty=1"
+        elif "esx" in hypervisor_type:
+            source_conn = f"https://{hypervisor_server}"
+        elif "rhevm" in hypervisor_type:
+            source_conn = hypervisor_server.split("ovirt-engine")[0].strip()
+        elif "kubevirt" in hypervisor_type:
             source_conn = deploy.kubevirt.endpoint
         else:
             source_conn = hypervisor_server
-        results.setdefault('step4', []).append(
-            source['connection'] == source_conn and
-            source['status'] == 'success' and
-            source['last_successful_retrieve'].split(' ')[2] == 'UTC' and
-            source['hypervisors'] >= 1 and
-            source['guests'] >= 1 and
-            destination['connection'] == register_server and
-            destination['status'] == 'success' and
-            destination['last_successful_send'].split(' ')[2] == 'UTC' and
-            destination['last_successful_send_job_status'] == 'FINISHED'
+        results.setdefault("step4", []).append(
+            source["connection"] == source_conn
+            and source["status"] == "success"
+            and source["last_successful_retrieve"].split(" ")[2] == "UTC"
+            and source["hypervisors"] >= 1
+            and source["guests"] >= 1
+            and destination["connection"] == register_server
+            and destination["status"] == "success"
+            and destination["last_successful_send"].split(" ")[2] == "UTC"
+            and destination["last_successful_send_job_status"] == "FINISHED"
         )
 
         logger.info(">>>step5: Check '#virt-who -s' with bad configuration")
-        option = 'password'
-        if 'kubevirt' in hypervisor_type:
-            option = 'kubeconfig'
-        if 'libvirt-remote' in hypervisor_type:
-            option = 'server'
-        self.vw_option_update_value(f'{option}', 'xxx', config_file)
-        self.vw_option_update_value('owner', 'xxx', config_file)
-        status = self.vw_status(cmd='virt-who -s')
-        results.setdefault('step5', []).append(
-            'failure' in status[config_name]['source_status'] and
-            'failure' in status[config_name]['destination_status']
+        option = "password"
+        if "kubevirt" in hypervisor_type:
+            option = "kubeconfig"
+        if "libvirt-remote" in hypervisor_type:
+            option = "server"
+        self.vw_option_update_value(f"{option}", "xxx", config_file)
+        self.vw_option_update_value("owner", "xxx", config_file)
+        status = self.vw_status(cmd="virt-who -s")
+        results.setdefault("step5", []).append(
+            "failure" in status[config_name]["source_status"]
+            and "failure" in status[config_name]["destination_status"]
         )
 
-        logger.info(">>>step6: Check '#virt-who --status --json' with bad configuration")
+        logger.info(
+            ">>>step6: Check '#virt-who --status --json' with bad configuration"
+        )
         json = self.vw_status(if_json=True)
-        source = json[config_name]['source']
-        destination = json[config_name]['destination']
-        results.setdefault('step6', []).append(
-            source['status'] == 'failure' and
-            destination['status'] == 'failure'
+        source = json[config_name]["source"]
+        destination = json[config_name]["destination"]
+        results.setdefault("step6", []).append(
+            source["status"] == "failure" and destination["status"] == "failure"
         )
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier1/tc_1113_check_virtwho_status.py
--- /tmp/lint/tier2/tc_2001_validate_owner_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2001_validate_owner_option_by_cli.py	2023-03-06 06:16:09.706962 +0000
@@ -5,45 +5,46 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136568')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136568")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
-        msg_list = ["owner not in|"
-                      "owner.* not set|"
-                      "virt-who can't be started"]
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
+        msg_list = ["owner not in|" "owner.* not set|" "virt-who can't be started"]
 
         # Case Steps
         logger.info(">>>step1: owner option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
- 
+        results.setdefault("step1", []).append(res)
+
         logger.info(">>>step2: owner option is wrong value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      '--{0}-owner=.*'.format(hypervisor_type),
-                                      '--{0}-owner=xxxxx'.format(hypervisor_type))
-        msg_list_2 = ["owner.* is different|"
-                      "Communication with subscription manager failed"]
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-owner=.*".format(hypervisor_type),
+            "--{0}-owner=xxxxx".format(hypervisor_type),
+        )
+        msg_list_2 = [
+            "owner.* is different|" "Communication with subscription manager failed"
+        ]
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list_2, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: skip this step because owner cannot be set to no-ascci")
         # cli = self.vw_cli_base_update(base_cli,
         #                               '--{0}-owner=.*'.format(hypervisor_type),
         #                               '--{0}-owner=Á∫¢Â∏Ω‚Ç¨467aa'.format(hypervisor_type))
@@ -56,30 +57,32 @@
         # res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         # results.setdefault('step3', []).append(res1)
         # results.setdefault('step3', []).append(res2)
 
         logger.info(">>>step4: owner option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      '--{0}-owner=.*'.format(hypervisor_type),
-                                      '--{0}-owner= '.format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-owner=.*".format(hypervisor_type),
+            "--{0}-owner= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: owner option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      '--{0}-owner=.*'.format(hypervisor_type),
-                                      ' ')
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-owner=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         notes = list()
-        if hypervisor_type == 'kubevirt':
+        if hypervisor_type == "kubevirt":
             notes.append("(step1,2) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2001_validate_owner_option_by_cli.py
--- /tmp/lint/tier2/tc_2002_validate_env_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2002_validate_env_option_by_cli.py	2023-03-06 06:16:09.747638 +0000
@@ -5,84 +5,96 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136571')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136571")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
 
         # Case Steps
         logger.info(">>>step1: env option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: env option is wrong value")
-        cli = self.vw_cli_base_update(base_cli, "--{0}-env=.*".format(hypervisor_type),
-                                      "--{0}-env=xxxxx".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-env=.*".format(hypervisor_type),
+            "--{0}-env=xxxxx".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        msg_list = ["env.*differs|"
-                    "env.* is different|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|"
+            "env.* is different|"
+            "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: env option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-env=.*".format(hypervisor_type),
-                                      "--{0}-env=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-env=.*".format(hypervisor_type),
+            "--{0}-env=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        msg_list = ["codec can't decode|"
-                    "Communication with subscription manager failed|"
-                    "env.*differs"]
+        msg_list = [
+            "codec can't decode|"
+            "Communication with subscription manager failed|"
+            "env.*differs"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: env option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-env=.*".format(hypervisor_type),
-                                      "--{0}-env= ".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-env=.*".format(hypervisor_type),
+            "--{0}-env= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        msg_list = ["env not in|env.* not set|"
-                    "virt-who can't be started"]
+        msg_list = ["env not in|env.* not set|" "virt-who can't be started"]
         res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: env option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-env=.*".format(hypervisor_type),
-                                      " ")
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-env=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         msg_list = ["env not in|env.* not set|virt-who can't be started"]
         res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         notes = list()
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         if "stage" in register_type:
-            notes.append("Bug(Step2,Step3): Set env to wrong or special value,"
-                         " still can sent report normally for stage")
+            notes.append(
+                "Bug(Step2,Step3): Set env to wrong or special value,"
+                " still can sent report normally for stage"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530426")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2002_validate_env_option_by_cli.py
--- /tmp/lint/tier2/tc_2003_validate_server_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2003_validate_server_option_by_cli.py	2023-03-06 06:16:09.796834 +0000
@@ -5,92 +5,110 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136572')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136572")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
-        msg_list = ["Name or service not known|"
-                    "Connection timed out|"
-                    "Failed to connect|"
-                    "Error in .* backend"]
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
+        msg_list = [
+            "Name or service not known|"
+            "Connection timed out|"
+            "Failed to connect|"
+            "Error in .* backend"
+        ]
 
         # Case Steps
         logger.info(">>>step1: server option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: server option is wrong value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-server=.*".format(hypervisor_type),
-                                      "--{0}-server=xxxxx".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-server=.*".format(hypervisor_type),
+            "--{0}-server=xxxxx".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: server option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-server=.*".format(hypervisor_type),
-                                      "--{0}-server=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-server=.*".format(hypervisor_type),
+            "--{0}-server=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        msg_list_3 = ["Name or service not known|"
-                      "Connection timed out|"
-                      "Failed to connect|"
-                      "Error in .* backend|"
-                      "Unable to connect|"
-                      "codec can't encode"]
+        msg_list_3 = [
+            "Name or service not known|"
+            "Connection timed out|"
+            "Failed to connect|"
+            "Error in .* backend|"
+            "Unable to connect|"
+            "codec can't encode"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list_3, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: server option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-server=.*".format(hypervisor_type),
-                                      "--{0}-server= ".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-server=.*".format(hypervisor_type),
+            "--{0}-server= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead "
-                           "when server option is null for libvirt-remote")
+            logger.warning(
+                "libvirt-local mode will be used to instead "
+                "when server option is null for libvirt-remote"
+            )
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
         else:
             msg_list = ["server.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: server option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-server=.*".format(hypervisor_type),
-                                      " ")
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-server=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead "
-                           "when server option is disabled for libvirt-remote")
+            logger.warning(
+                "libvirt-local mode will be used to instead "
+                "when server option is disabled for libvirt-remote"
+            )
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
         else:
             msg_list = ["server.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2003_validate_server_option_by_cli.py
--- /tmp/lint/tier2/tc_2004_validate_username_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2004_validate_username_option_by_cli.py	2023-03-06 06:16:09.837812 +0000
@@ -5,95 +5,113 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136573')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136573")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
-        msg_list = ["Unable to login|"
-                    "incorrect user.*|"
-                    "Authentication failure|"
-                    "Incorrect.*username|"
-                    "Unauthorized|"
-                    "Error.* backend|"
-                    "Permission denied"]
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
+        msg_list = [
+            "Unable to login|"
+            "incorrect user.*|"
+            "Authentication failure|"
+            "Incorrect.*username|"
+            "Unauthorized|"
+            "Error.* backend|"
+            "Permission denied"
+        ]
 
         # Case Steps
         logger.info(">>>step1: username option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: username option is wrong value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-username=.*".format(hypervisor_type),
-                                      "--{0}-username=xxxxx".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-username=.*".format(hypervisor_type),
+            "--{0}-username=xxxxx".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: username option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        pkg = self.pkg_check(self.ssh_host(), 'python-requests').split('-')[2]
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-username=.*".format(hypervisor_type),
-                                      "--{0}-username=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type))
+        pkg = self.pkg_check(self.ssh_host(), "python-requests").split("-")[2]
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-username=.*".format(hypervisor_type),
+            "--{0}-username=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
-        if pkg[16:21] >= '2.20':
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+        if pkg[16:21] >= "2.20":
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg = "not in latin1 encoding"
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=0, exp_send=0
+            )
             res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: username option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-username=.*".format(hypervisor_type),
-                                      "--{0}-username= ".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-username=.*".format(hypervisor_type),
+            "--{0}-username= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, " "username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: username option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-username=.*".format(hypervisor_type),
-                                      " ")
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-username=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, " "username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2004_validate_username_option_by_cli.py
--- /tmp/lint/tier2/tc_2007_validate_parameters_consistency_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2007_validate_parameters_consistency_by_cli.py	2023-03-06 06:16:09.866646 +0000
@@ -5,46 +5,48 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136710')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136710")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-            wrong_mode = 'xen'
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+            wrong_mode = "xen"
         else:
-            wrong_mode = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
+            wrong_mode = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
 
         # Case Steps
         logger.info(">>>step1: run virt-who by cli with all valid parameters")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who by cli with unconsistent parameters")
-        cli = re.sub("--{0}-owner=".format(hypervisor_type),
-                     "--{0}-owner=".format(wrong_mode),
-                     base_cli)
+        cli = re.sub(
+            "--{0}-owner=".format(hypervisor_type),
+            "--{0}-owner=".format(wrong_mode),
+            base_cli,
+        )
         data, tty_output, rhsm_output = self.vw_start(cli, exp_send=1)
         msg = "does not match virtualization backend"
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(tty_output, msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # Case Result
         notes = list()
-        if hypervisor_type == 'kubevirt':
+        if hypervisor_type == "kubevirt":
             notes.append("(step1) No kubeconfig option for cli")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2007_validate_parameters_consistency_by_cli.py
--- /tmp/lint/tier2/tc_2006_validate_config_function_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2006_validate_config_function_by_cli.py	2023-03-06 06:16:09.896133 +0000
@@ -2,81 +2,87 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136710')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136710")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         guest_uuid = self.get_hypervisor_guestuuid()
         self.vw_option_enable("[global]", filename="/etc/virt-who.conf")
         self.vw_option_enable("interval", filename="/etc/virt-who.conf")
-        self.vw_option_update_value("interval", '120', filename="/etc/virt-who.conf")
+        self.vw_option_update_value("interval", "120", filename="/etc/virt-who.conf")
         self.vw_option_enable("debug", filename="/etc/virt-who.conf")
-        self.vw_option_update_value("debug", 'True', filename="/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", filename="/etc/virt-who.conf")
         self.vw_option_enable("[defaults]", filename="/etc/virt-who.conf")
         self.vw_option_enable("owner", filename="/etc/virt-who.conf")
-        self.vw_option_update_value("owner", 'xxx', filename="/etc/virt-who.conf")
+        self.vw_option_update_value("owner", "xxx", filename="/etc/virt-who.conf")
         self.vw_option_enable("env", filename="/etc/virt-who.conf")
-        self.vw_option_update_value("env", 'xxx', filename="/etc/virt-who.conf")
+        self.vw_option_update_value("env", "xxx", filename="/etc/virt-who.conf")
 
         # Case Steps
-        logger.info(">>>step1: configure two same mode in different path then run virt-who -c")
+        logger.info(
+            ">>>step1: configure two same mode in different path then run virt-who -c"
+        )
         config_name_1 = "virtwho-config-1"
         config_name_2 = "virtwho-config-2"
         config_file_1 = "/etc/virt-who.d/{0}.conf".format(config_name_1)
         config_file_2 = "/root/{0}.conf".format(config_name_2)
         self.vw_etc_d_mode_create(config_name_1, config_file_1)
         self.vw_etc_d_mode_create(config_name_2, config_file_2)
         cmd = "virt-who -c {0} -i 60".format(config_file_2)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
-        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60)
+        res1 = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60
+        )
         res2 = self.vw_msg_search(output=tty_output, msg="\[.*DEBUG\]", exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         logger.info(">>>step2: check virt-who didn't run config_file_1")
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
         logger.info("Expected mapping info num: 1 for sat63 above and stage")
-        results.setdefault('step2', []).append(num == 1)
+        results.setdefault("step2", []).append(num == 1)
 
         logger.info(">>>step3: check '#virt-who -o -c' with wrong config file")
         wrong_file = "xxx"
         error_msg = "No valid configuration file provided using -c/--config"
         cmd = "virt-who -d -o -c {0}".format(wrong_file)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=0)
         res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(tty_output, error_msg, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: run virt-who with -c option multiple times")
         self.vw_etc_d_delete_all()
         config_file_1 = "/root/{0}.conf".format(config_name_1)
         self.vw_etc_d_mode_create(config_name_1, config_file_1)
         cmd = "virt-who -c {0} -c {1}".format(config_file_1, config_file_2)
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120)
-        results.setdefault('step4', []).append(res)
+        res = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120
+        )
+        results.setdefault("step4", []).append(res)
 
         logger.info(">>>step5: check virt-who has run both config")
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
-        register_type = self.get_config('hypervisor_type')
+        register_type = self.get_config("hypervisor_type")
         if "satellite62" in register_type:
             logger.info("Expected mapping info num: 1 for sat62")
-            results.setdefault('step5', []).append(num == 1)
+            results.setdefault("step5", []).append(num == 1)
         else:
             logger.info("Expected mapping info num: 2 for sat63 above and stage")
-            results.setdefault('step5', []).append(num == 2)
-
+            results.setdefault("step5", []).append(num == 2)
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2006_validate_config_function_by_cli.py
--- /tmp/lint/tier2/tc_2005_validate_password_option_by_cli.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2005_validate_password_option_by_cli.py	2023-03-06 06:16:09.895420 +0000
@@ -5,103 +5,124 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136574')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136574")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        base_cli = self.vw_cli_base() + '-d'
-        msg_list = ["Unable to login|"
-                    "incorrect user.*|"
-                    "Authentication failure|"
-                    "Incorrect.*username|"
-                    "Unauthorized|"
-                    "Error.* backend|"
-                    "Permission denied"]
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        base_cli = self.vw_cli_base() + "-d"
+        msg_list = [
+            "Unable to login|"
+            "incorrect user.*|"
+            "Authentication failure|"
+            "Incorrect.*username|"
+            "Unauthorized|"
+            "Error.* backend|"
+            "Permission denied"
+        ]
 
         # Case Steps
         logger.info(">>>step1: password option is good value")
         data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: password option is wrong value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-password=.*".format(hypervisor_type),
-                                      "--{0}-password=xxxxx".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-password=.*".format(hypervisor_type),
+            "--{0}-password=xxxxx".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, "
+                "password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: password option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-password=.*".format(hypervisor_type),
-                                      "--{0}-password=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-password=.*".format(hypervisor_type),
+            "--{0}-password=Á∫¢Â∏Ω‚Ç¨467aa".format(hypervisor_type),
+        )
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, "
+                "password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res1)
+            results.setdefault("step3", []).append(res1)
         else:
             msg = "'password': is not in latin1 encoding"
             data, tty_output, rhsm_output = self.vw_start(cli)
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=0, exp_send=0
+            )
             res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: password option is null value")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-password=.*".format(hypervisor_type),
-                                      "--{0}-password= ".format(hypervisor_type))
+        cli = self.vw_cli_base_update(
+            base_cli,
+            "--{0}-password=.*".format(hypervisor_type),
+            "--{0}-password= ".format(hypervisor_type),
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, " "username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: password option is disable")
-        cli = self.vw_cli_base_update(base_cli,
-                                      "--{0}-password=.*".format(hypervisor_type),
-                                      " ")
+        cli = self.vw_cli_base_update(
+            base_cli, "--{0}-password=.*".format(hypervisor_type), " "
+        )
         data, tty_output, rhsm_output = self.vw_start(cli)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, " "username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
-
would reformat /tmp/lint/tier2/tc_2005_validate_password_option_by_cli.py
--- /tmp/lint/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py	2023-03-06 06:16:10.023754 +0000
@@ -2,97 +2,112 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136577')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136577")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_OWNER".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: owner option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: owner option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "owner.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: owner option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["codec can't decode|codec can't encode|Communication with subscription manager failed|owner.* is different"]
+        msg_list = [
+            "codec can't decode|codec can't encode|Communication with subscription manager failed|owner.* is different"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: owner option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: owner option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: owner option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["owner not in|owner.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|owner.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: owner option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["owner not in|owner.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|owner.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "libvirt" not in hypervisor_type:
-            notes.append("Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log")
+            notes.append(
+                "Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530254")
-        self.vw_case_result(results, notes)
\ No newline at end of file
+        self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py
--- /tmp/lint/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py	2023-03-06 06:16:10.045434 +0000
@@ -2,109 +2,128 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136579')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136579")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_SERVER".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: server option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: server option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Name or service not known|Connection timed out|Failed to connect|Error in .* backend"]
+        msg_list = [
+            "Name or service not known|Connection timed out|Failed to connect|Error in .* backend"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: server option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Name or service not known|Connection timed out|Failed to connect|Error in .* backend|Unable to connect"]
+        msg_list = [
+            "Name or service not known|Connection timed out|Failed to connect|Error in .* backend|Unable to connect"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: server option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead when server option is null for libvirt-remote")
-            msg_list = ["Name or service not known|Connection timed out|Failed to connect|Error in .* backend"]
+            logger.warning(
+                "libvirt-local mode will be used to instead when server option is null for libvirt-remote"
+            )
+            msg_list = [
+                "Name or service not known|Connection timed out|Failed to connect|Error in .* backend"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg_list = ["SERVER.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: server option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead when server option is disabled for libvirt-remote")
-            msg_list = ["Name or service not known|Connection timed out|Failed to connect|Error in .* backend"]
+            logger.warning(
+                "libvirt-local mode will be used to instead when server option is disabled for libvirt-remote"
+            )
+            msg_list = [
+                "Name or service not known|Connection timed out|Failed to connect|Error in .* backend"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg_list = ["SERVER.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: server option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["SERVER.* not set|Error in .* backend|No host supplied"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: server option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["SERVER.* not set|Error in .* backend|No host supplied"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "libvirt" not in hypervisor_type:
-            notes.append("Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log")
+            notes.append(
+                "Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530557")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2010_validate_server_option_in_etc_sysconfig.py
--- /tmp/lint/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py	2023-03-06 06:16:10.101883 +0000
@@ -2,101 +2,118 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136578')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136578")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_ENV".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: env option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
- 
+        results.setdefault("step1", []).append(res)
+
         logger.info(">>>step2: env option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env.*differs|env.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|env.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: env option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["codec can't decode|Communication with subscription manager failed|env.*differs"]
+        msg_list = [
+            "codec can't decode|Communication with subscription manager failed|env.*differs"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: env option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: env option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: env option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["env not in|env.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: env option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["env not in|env.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         if "stage" in register_type:
-            notes.append("Bug(Step2, Step3): Set env to wrong or special value, still can sent report normally for stage")
+            notes.append(
+                "Bug(Step2, Step3): Set env to wrong or special value, still can sent report normally for stage"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530426")
         if "libvirt" not in hypervisor_type:
-            notes.append("Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log")
+            notes.append(
+                "Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530254")
-        self.vw_case_result(results, notes)
\ No newline at end of file
+        self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2009_validate_env_option_in_etc_sysconfig.py
--- /tmp/lint/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py	2023-03-06 05:02:18.592378 +0000
+++ /tmp/lint/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py	2023-03-06 06:16:10.155147 +0000
@@ -2,117 +2,140 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136580')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136580")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_USERNAME".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: username option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: username option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"]
+        msg_list = [
+            "Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: username option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"]
+        msg_list = [
+            "Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: username option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: username option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: username option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(res1)
+            results.setdefault("step6", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: username option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step7', []).append(res1)
+            results.setdefault("step7", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step7', []).append(res1)
-            results.setdefault('step7', []).append(res2)
+            results.setdefault("step7", []).append(res1)
+            results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "libvirt" not in hypervisor_type:
-            notes.append("Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log")
+            notes.append(
+                "Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530841")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2011_validate_username_option_in_etc_sysconfig.py
--- /tmp/lint/tier2/tc_2013_validate_unreachable_proxy_by_config.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2013_validate_unreachable_proxy_by_config.py	2023-03-06 06:16:10.279350 +0000
@@ -5,40 +5,39 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136709')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.25.7':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136709")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.25.7":
             self.vw_case_skip("virt-who version")
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        '''http_proxy, no_proxy are moved to /etc/virt-who.conf, will not test this exception for rhel9'''
+        """http_proxy, no_proxy are moved to /etc/virt-who.conf, will not test this exception for rhel9"""
         if "RHEL-9" in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         sysconfig_file = "/etc/sysconfig/virt-who"
         vw_conf = "/etc/virt-who.conf"
         conf_file = "/etc/virt-who.d/virtwho-config.conf"
-        self.vw_option_enable('[global]', vw_conf)
-        self.vw_option_enable('debug', vw_conf)
-        self.vw_option_update_value('debug', 'True', vw_conf)
-        self.vw_option_enable('[defaults]', vw_conf)
-        self.vw_etc_d_mode_create('virtwho-config', conf_file)
+        self.vw_option_enable("[global]", vw_conf)
+        self.vw_option_enable("debug", vw_conf)
+        self.vw_option_update_value("debug", "True", vw_conf)
+        self.vw_option_enable("[defaults]", vw_conf)
+        self.vw_etc_d_mode_create("virtwho-config", conf_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
+        register_server = register_config["server"]
         hypervisor_config = self.get_hypervisor_config()
-        hypervisor_server = hypervisor_config['server']
+        hypervisor_server = hypervisor_config["server"]
         good_squid_server = "{0}:{1}".format(deploy.proxy.server, deploy.proxy.port)
         wrong_squid_server = "10.73.3.24:9999"
-        types = {'type1': 'http_proxy',
-                 'type2': 'https_proxy'}
+        types = {"type1": "http_proxy", "type2": "https_proxy"}
 
         # Case Steps
         logger.info(">>>step1: run with good proxy server")
         for name, option in sorted(types.items(), key=lambda item: item[0]):
             logger.info("+++ {0}: run virt-who to check {1} +++".format(name, option))
@@ -48,16 +47,18 @@
                 value = "https://{0}".format(good_squid_server)
             self.vw_option_add(option, value, filename=sysconfig_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             res2 = self.vw_msg_search(
-                rhsm_output, "Connection built.*{0}".format(good_squid_server))
+                rhsm_output, "Connection built.*{0}".format(good_squid_server)
+            )
             res3 = self.vw_msg_search(
-                rhsm_output, "Using proxy.*{0}".format(good_squid_server))
-            results.setdefault('step1', []).append(res1)
-            results.setdefault('step1', []).append(res2)
-            results.setdefault('step1', []).append(res3)
+                rhsm_output, "Using proxy.*{0}".format(good_squid_server)
+            )
+            results.setdefault("step1", []).append(res1)
+            results.setdefault("step1", []).append(res2)
+            results.setdefault("step1", []).append(res3)
             self.vw_option_del(option, filename=sysconfig_file)
 
         logger.info(">>>step2: run with bad proxy server and no_proxy")
         for name, option in sorted(types.items(), key=lambda item: item[0]):
             logger.info("=== {0}: bad {1} test ===".format(name, option))
@@ -66,43 +67,45 @@
                 value = "http://{0}".format(wrong_squid_server)
             if option == "https_proxy":
                 value = "https://{0}".format(wrong_squid_server)
             self.vw_option_add(option, value, filename=sysconfig_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=0, exp_error=True)
-            error_msg = ["Connection refused|"
-                         "Cannot connect to proxy|"
-                         "Connection timed out"]
-            res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
+            error_msg = [
+                "Connection refused|" "Cannot connect to proxy|" "Connection timed out"
+            ]
+            res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, error_msg)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
-            logger.info("+++ Configure no_proxy=[hypervisor_server] "
-                        "and rhsm_no_proxy=[register_server] +++")
+            logger.info(
+                "+++ Configure no_proxy=[hypervisor_server] "
+                "and rhsm_no_proxy=[register_server] +++"
+            )
             self.vw_option_add("no_proxy", register_server, sysconfig_file)
             self.vw_option_update_value("no_proxy", hypervisor_server, sysconfig_file)
             self.vw_option_enable("rhsm_no_proxy", vw_conf)
             self.vw_option_update_value("rhsm_no_proxy", register_server, vw_conf)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-            if hypervisor_type == 'xen':
+            if hypervisor_type == "xen":
                 res3 = self.op_normal_value(data, exp_error=2, exp_thread=1, exp_send=1)
             else:
                 res3 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res3)
-            self.vw_option_del('no_proxy', sysconfig_file)
+            results.setdefault("step2", []).append(res3)
+            self.vw_option_del("no_proxy", sysconfig_file)
             self.vw_option_del(option, sysconfig_file)
-            self.vw_option_disable('rhsm_no_proxy', vw_conf)
+            self.vw_option_disable("rhsm_no_proxy", vw_conf)
 
         # Case Result
         self.vw_case_result(results)
 
-        '''WONTFIX bz1739358 - [XEN] virt-who can send mapping to server but always print 
-        errors when bad http(s)_proxy and good no_proxy values are configured'''
+        """WONTFIX bz1739358 - [XEN] virt-who can send mapping to server but always print 
+        errors when bad http(s)_proxy and good no_proxy values are configured"""
 
-        '''WONTFIX bz1716337 - virt-who doesn't connect all hypervisors by proxy'''
+        """WONTFIX bz1716337 - virt-who doesn't connect all hypervisors by proxy"""
 
-        '''
+        """
         For below scenarios, virt-who connect hypervisor not by proxy.
         "RHEL-8" + ('libvirt-remote', 'hyperv', 'kubevirt')
         "RHEL-7" + "http_proxy" + ('esx', 'libvirt-remote', 'xen', 'rhevm', 'kubevirt')
         "RHEL-7" + "http_proxy" + ('libvirt-remote', 'hyperv', 'kubevirt')
-        '''
+        """
would reformat /tmp/lint/tier2/tc_2013_validate_unreachable_proxy_by_config.py
--- /tmp/lint/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py	2023-03-06 06:16:10.282131 +0000
@@ -2,127 +2,158 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136581')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136581")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        if hypervisor_type == 'libvirt-remote':
-            hypervisor_type = 'libvirt'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        if hypervisor_type == "libvirt-remote":
+            hypervisor_type = "libvirt"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         sysconfig_file = "/etc/sysconfig/virt-who"
         guest_uuid = self.get_hypervisor_guestuuid()
         option_tested = "VIRTWHO_{0}_PASSWORD".format(hypervisor_type.upper())
         self.vw_etc_sys_mode_enable()
 
         # Case Steps
         logger.info(">>>step1: password option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: password option is wrong value")
-        self.vw_option_update_value(option_tested, 'xxxxx', sysconfig_file)
+        self.vw_option_update_value(option_tested, "xxxxx", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
         else:
-            msg_list = ["Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            msg_list = [
+                "Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"
+            ]
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: password option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', sysconfig_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
         else:
-            msg_list = ["Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            msg_list = [
+                "Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied"
+            ]
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: password option is null value")
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: password option is disable")
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: password option is disable but another config is ok")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_disable(option_tested, sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(res1)
+            results.setdefault("step6", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: password option is null but another config is ok")
         self.vw_option_enable(option_tested, sysconfig_file)
-        self.vw_option_update_value(option_tested, '', sysconfig_file)
+        self.vw_option_update_value(option_tested, "", sysconfig_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step7', []).append(res1)
+            results.setdefault("step7", []).append(res1)
         else:
             msg_list = ["PASSWORD.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step7', []).append(res1)
-            results.setdefault('step7', []).append(res2)
+            results.setdefault("step7", []).append(res1)
+            results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "rhevm" in hypervisor_type or "hyperv" in hypervisor_type:
-            notes.append("Bug(Step3): password unsupport unicode characters for rhevm and hyperv")
+            notes.append(
+                "Bug(Step3): password unsupport unicode characters for rhevm and hyperv"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1581022")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2012_validate_password_option_in_etc_sysconfig.py
--- /tmp/lint/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.354339 +0000
@@ -2,80 +2,88 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136586')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136586")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "type"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: type option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        steps = {'step2': 'xxx', 'step3': 'Á∫¢Â∏Ω‚Ç¨467aa', 'step4': ''}
+        steps = {"step2": "xxx", "step3": "Á∫¢Â∏Ω‚Ç¨467aa", "step4": ""}
         for step, value in sorted(steps.items(), key=lambda item: item[0]):
             logger.info(f">>>{step}: type option is wrong '{value}'")
             self.vw_option_update_value(option_tested, f"{value}", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=0, exp_send=0)
             res2 = self.msg_validation(rhsm_output, ["virt-who can't be started"])
-            results.setdefault(f'{step}', []).append(res1)
-            results.setdefault(f'{step}', []).append(res2)
+            results.setdefault(f"{step}", []).append(res1)
+            results.setdefault(f"{step}", []).append(res2)
             if "RHEL-9" in compose_id:
-                res3 = self.msg_validation(rhsm_output,
-                                           [f"Unsupported virtual type '{value}' is set"])
-                results.setdefault(f'{step}', []).append(res3)
+                res3 = self.msg_validation(
+                    rhsm_output, [f"Unsupported virtual type '{value}' is set"]
+                )
+                results.setdefault(f"{step}", []).append(res3)
 
         logger.info(">>>step5: type option is disable")
-        logger.warning("libvirt-local mode will be used to instead when type option is disabled")
+        logger.warning(
+            "libvirt-local mode will be used to instead when type option is disabled"
+        )
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         msg_list = ["Error in .* backend"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: type option is disable but another config is ok")
-        logger.warning("libvirt-local mode will be used to instead when type option is disabled")
+        logger.warning(
+            "libvirt-local mode will be used to instead when type option is disabled"
+        )
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["Error in .* backend"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: type option is null but another config is ok")
-        logger.warning("invalid config will be ignored, and run the valid config normally")
+        logger.warning(
+            "invalid config will be ignored, and run the valid config normally"
+        )
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         error_num = 0
         if "RHEL-9" in compose_id:
             error_num = 1
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=1)
-        results.setdefault('step7', []).append(res1)
+        results.setdefault("step7", []).append(res1)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.376153 +0000
@@ -5,101 +5,109 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136585')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136585")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "[.*]"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        vw_pkg = self.pkg_check(self.ssh_host(), 'virt-who')
-        msg_list = ["no section headers|"
-                    "Error in .* backend|"
-                    "do not have any valid section headers"]
+        vw_pkg = self.pkg_check(self.ssh_host(), "virt-who")
+        msg_list = [
+            "no section headers|"
+            "Error in .* backend|"
+            "do not have any valid section headers"
+        ]
 
         # Case Steps
         logger.info(">>>step1: header option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: header option is space value")
         self.vw_option_update_name(option_tested, "[ ]", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        if vw_pkg[9:15] >= '0.25.7':
+        if vw_pkg[9:15] >= "0.25.7":
             res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
         else:
             logger.warning("Sapce value[ ] is acceptable for header option")
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
 
         logger.info(">>>step3: header option is Á∫¢Â∏Ω‚Ç¨467aa value")
         logger.info("Special value is acceptable for header option")
-        self.vw_option_update_name(option_tested, '[Á∫¢Â∏Ω‚Ç¨467aa]', config_file)
+        self.vw_option_update_name(option_tested, "[Á∫¢Â∏Ω‚Ç¨467aa]", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res1)
+        results.setdefault("step3", []).append(res1)
 
         logger.info(">>>step4: header option is null value")
-        self.vw_option_update_name(option_tested, '[]', config_file)
+        self.vw_option_update_name(option_tested, "[]", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        if vw_pkg[9:15] >= '0.25.7':
+        if vw_pkg[9:15] >= "0.25.7":
             res1 = self.op_normal_value(data, exp_error=3, exp_thread=0, exp_send=0)
         else:
             logger.warning(
-                "libvirt-local mode will be used to instead when header option is null")
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                "libvirt-local mode will be used to instead when header option is null"
+            )
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
         res2 = self.msg_validation(rhsm_output, msg_list)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: header option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        if vw_pkg[9:15] >= '0.25.7':
+        if vw_pkg[9:15] >= "0.25.7":
             res1 = self.op_normal_value(data, exp_error=3, exp_thread=0, exp_send=0)
         else:
             logger.warning(
-                "libvirt-local mode will be used when run without header option")
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                "libvirt-local mode will be used when run without header option"
+            )
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
         res2 = self.msg_validation(rhsm_output, msg_list)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: owner option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["no section headers"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: owner option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_name(option_tested, '[]', config_file)
+        self.vw_option_update_name(option_tested, "[]", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["no section headers"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.441087 +0000
@@ -5,91 +5,97 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136587')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136587")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "owner"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: owner option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: owner option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner.* is different|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner.* is different|" "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: skip this step because owner cannot be set to no-ascci")
         # logger.info(">>>step3: owner option is Á∫¢Â∏Ω‚Ç¨467aa value")
         # self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
         # data, tty_output, rhsm_output = self.vw_start()
         # res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
         # results.setdefault('step3', []).append(res1)
 
         logger.info(">>>step4: owner option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner not in|"
-                    "owner.* not set|"
-                    "virt-who can't be started|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|"
+            "owner.* not set|"
+            "virt-who can't be started|"
+            "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: owner option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: owner option is disable but another config is ok")
         logger.warning(
-            "libvirt-local mode will be used to instead when type option is disabled")
+            "libvirt-local mode will be used to instead when type option is disabled"
+        )
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["owner not in|"
-                    "owner.* not set|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|"
+            "owner.* not set|"
+            "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: owner option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.490169 +0000
@@ -2,103 +2,120 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136588')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136588")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
             self.vw_case_skip("virt-who version")
-        '''env was not supported by rhel8 and rhel9 any more'''
+        """env was not supported by rhel8 and rhel9 any more"""
         if "RHEL-7" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "env"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: env option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: env option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env.*differs|env.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|env.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: env option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["codec can't decode|Communication with subscription manager failed|env.*differs"]
+        msg_list = [
+            "codec can't decode|Communication with subscription manager failed|env.*differs"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: env option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: env option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: env option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["env not in|env.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: env option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["env not in|env.* not set|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         if "stage" in register_type:
-            notes.append("Bug(Step2,Step3,Step4,Step7): Set env to wrong or special or null value, still can sent report normally for stage")
+            notes.append(
+                "Bug(Step2,Step3,Step4,Step7): Set env to wrong or special or null value, still can sent report normally for stage"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530426")
         else:
-            notes.append("Bug(Step4,Step7): Set env to null value, still can sent report normally for sat62/sat63")
+            notes.append(
+                "Bug(Step4,Step7): Set env to null value, still can sent report normally for sat62/sat63"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530290")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.548046 +0000
@@ -2,137 +2,166 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136589')
-        compose_id = self.get_config('rhel_compose')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136589")
+        compose_id = self.get_config("rhel_compose")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "server"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: server option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
- 
+        results.setdefault("step1", []).append(res)
+
         logger.info(">>>step2: server option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["Name or service not known|"
-                    "Connection timed out|"
-                    "Failed to connect|"
-                    "Error in .* backend|"
-                    "Invalid server IP address"]
+        msg_list = [
+            "Name or service not known|"
+            "Connection timed out|"
+            "Failed to connect|"
+            "Error in .* backend|"
+            "Invalid server IP address"
+        ]
         if "ahv" in hypervisor_type:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=0, exp_send=0
+            )
         else:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: server option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        if hypervisor_type in ['esx', 'ahv']:
+        if hypervisor_type in ["esx", "ahv"]:
             msg = "Option server needs to be ASCII characters only"
             if "ahv" in hypervisor_type:
                 msg = "Invalid server IP address provided"
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=0, exp_send=0
+            )
             res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
         else:
-            msg_list = ["Name or service not known|"
-                        "Connection timed out|"
-                        "Failed to connect|"
-                        "Error in .* backend|"
-                        "Unable to connect|"
-                        "Unable to login"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            msg_list = [
+                "Name or service not known|"
+                "Connection timed out|"
+                "Failed to connect|"
+                "Error in .* backend|"
+                "Unable to connect|"
+                "Unable to login"
+            ]
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
- 
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+
         logger.info(">>>step4: server option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead when server option is null for libvirt-remote")
-            msg_list = ["Name or service not known|"
-                        "Connection timed out|"
-                        "Failed to connect|"
-                        "Error in .* backend"]
+            logger.warning(
+                "libvirt-local mode will be used to instead when server option is null for libvirt-remote"
+            )
+            msg_list = [
+                "Name or service not known|"
+                "Connection timed out|"
+                "Failed to connect|"
+                "Error in .* backend"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg_list = ["SERVER.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: server option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-local mode will be used to instead when server option is disabled for libvirt-remote")
-            msg_list = ["Name or service not known|"
-                        "Connection timed out|"
-                        "Failed to connect|"
-                        "Error in .* backend"]
+            logger.warning(
+                "libvirt-local mode will be used to instead when server option is disabled for libvirt-remote"
+            )
+            msg_list = [
+                "Name or service not known|"
+                "Connection timed out|"
+                "Failed to connect|"
+                "Error in .* backend"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
         else:
             msg_list = ["SERVER.* not set|virt-who can't be started|No host supplied"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
- 
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
+
         logger.info(">>>step6: server option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         msg_list = ["SERVER.* not set|Error in .* backend|No host supplied"]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step6', []).append(res1)
-        results.setdefault('step6', []).append(res2)
- 
+        results.setdefault("step6", []).append(res1)
+        results.setdefault("step6", []).append(res2)
+
         logger.info(">>>step7: server option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
-        msg_list = ["SERVER.* not set|"
-                    "Error in .* backend|"
-                    "No host supplied|"
-                    "server needs to be set"]
+        msg_list = [
+            "SERVER.* not set|"
+            "Error in .* backend|"
+            "No host supplied|"
+            "server needs to be set"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step7', []).append(res1)
-        results.setdefault('step7', []).append(res2)
+        results.setdefault("step7", []).append(res1)
+        results.setdefault("step7", []).append(res2)
 
         # Case Result
         notes = list()
         if "esx" in hypervisor_type:
             notes.append("Bug(Step3): server not support non-ascii character")
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1727203")
         if hypervisor_type in ("rhevm", "xen", "hyperv"):
-            notes.append("Bug(Step4): Set server to null value, virt-who still can be started")
+            notes.append(
+                "Bug(Step4): Set server to null value, virt-who still can be started"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1516209")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.608339 +0000
@@ -5,130 +5,143 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136590')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136590")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "username"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        error_msg = ["Unable to login|"
-                     "incorrect user.*|"
-                     "Authentication failure|"
-                     "Authentication failed|"
-                     "Incorrect.*username|"
-                     "Unauthorized|"
-                     "Error.* backend|"
-                     "Permission denied|"
-                     "HTTP Auth Failed"]
+        error_msg = [
+            "Unable to login|"
+            "incorrect user.*|"
+            "Authentication failure|"
+            "Authentication failed|"
+            "Incorrect.*username|"
+            "Unauthorized|"
+            "Error.* backend|"
+            "Permission denied|"
+            "HTTP Auth Failed"
+        ]
 
         # Case Steps
         logger.info(">>>step1: username option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: username option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: username option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
-            pkg = self.pkg_check(self.ssh_host(), 'python-requests').split('-')[2]
-            if pkg[16:21] >= '2.20':
+            pkg = self.pkg_check(self.ssh_host(), "python-requests").split("-")[2]
+            if pkg[16:21] >= "2.20":
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                    data, exp_error="1|2|3", exp_thread=1, exp_send=0
+                )
                 res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
             else:
                 msg = "not in latin1 encoding"
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+                    data, exp_error="1|2|3", exp_thread=0, exp_send=0
+                )
                 res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
         else:
             res1 = self.op_normal_value(
-                data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: username option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
             logger.warning(
-                "libvirt-remote can use sshkey to connect, username is not necessary")
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: username option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
             logger.warning(
-                "libvirt-remote can use sshkey to connect, username is not necessary")
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: username option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt-remote" in hypervisor_type:
             logger.warning(
-                "libvirt-remote can use sshkey to connect, username is not necessary")
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(res1)
+            results.setdefault("step6", []).append(res1)
         else:
             msg_list = ["USERNAME.* not set"]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=1)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: username option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt-remote" in hypervisor_type:
             logger.warning(
-                "libvirt-remote can use sshkey to connect, username is not necessary")
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step7', []).append(res1)
+            results.setdefault("step7", []).append(res1)
         else:
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=1)
             res2 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step7', []).append(res1)
-            results.setdefault('step7', []).append(res2)
+            results.setdefault("step7", []).append(res1)
+            results.setdefault("step7", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py	2023-03-06 06:16:10.637801 +0000
@@ -2,68 +2,77 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136592')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136592")
         config = self.get_hypervisor_config()
-        hypervisor_type = config['type']
-        hypervisor_password = config['password']
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        hypervisor_type = config["type"]
+        hypervisor_password = config["password"]
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         msg_list = '"encrypted_password" cannot be decrypted|'
-        encrypted_pwd_null = ''
-        encrypted_pwd_wrong = 'xxxxxx'
-        steps = {'step2': encrypted_pwd_null, 'step3': encrypted_pwd_wrong}
+        encrypted_pwd_null = ""
+        encrypted_pwd_wrong = "xxxxxx"
+        steps = {"step2": encrypted_pwd_null, "step3": encrypted_pwd_wrong}
 
         # Case Steps
         logger.info(">>>step1: encrypted_password is good value")
         encrypted_pwd = self.vw_encrypted(hypervisor_password, "-p")
         self.vw_option_disable("password", filename=config_file)
         self.vw_option_add("encrypted_password", encrypted_pwd, filename=config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
-        
-        for step, value in sorted(steps.items(), key=lambda item:item[0]):
-            logger.info(">>>%s: run virt-who with encrypted_password='%s'" % (step, value))
-            self.vw_option_update_value("encrypted_password", '%s' % value, config_file)
-            if 'libvirt-remote' in hypervisor_type:
+        results.setdefault("step1", []).append(res)
+
+        for step, value in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>%s: run virt-who with encrypted_password='%s'" % (step, value)
+            )
+            self.vw_option_update_value("encrypted_password", "%s" % value, config_file)
+            if "libvirt-remote" in hypervisor_type:
                 data, tty_output, rhsm_output = self.vw_start(exp_send=1)
                 res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                res2 = 'True'
+                res2 = "True"
             else:
-                data, tty_output, rhsm_output = self.vw_start(exp_send=0, exp_error=True)
-                res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=0, exp_send=0)
+                data, tty_output, rhsm_output = self.vw_start(
+                    exp_send=0, exp_error=True
+                )
+                res1 = self.op_normal_value(
+                    data, exp_error="1|2", exp_thread=0, exp_send=0
+                )
                 res2 = self.vw_msg_search(rhsm_output, msg_list, exp_exist=True)
             logger.info(">>>add another valid extra config")
             config_name_ok = "virtwho-config-ok"
             config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
             self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
-            if 'libvirt-remote' in hypervisor_type:
+            if "libvirt-remote" in hypervisor_type:
                 data, tty_output, rhsm_output = self.vw_start(exp_send=1)
                 res3 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                res4 = 'True'
+                res4 = "True"
             else:
-                data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_error=True)
+                data, tty_output, rhsm_output = self.vw_start(
+                    exp_send=1, exp_error=True
+                )
                 res3 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=1)
                 res4 = self.vw_msg_search(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('{0}'.format(step), []).append(res1)
-            results.setdefault('{0}'.format(step), []).append(res2)
-            results.setdefault('{0}'.format(step), []).append(res3)
-            results.setdefault('{0}'.format(step), []).append(res4)
+            results.setdefault("{0}".format(step), []).append(res1)
+            results.setdefault("{0}".format(step), []).append(res2)
+            results.setdefault("{0}".format(step), []).append(res3)
+            results.setdefault("{0}".format(step), []).append(res4)
             self.fd_delete(self.ssh_host(), config_file_ok)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py
--- /tmp/lint/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.594378 +0000
+++ /tmp/lint/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.646050 +0000
@@ -2,131 +2,160 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136591')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136591")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm", "kubevirt"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         option_tested = "password"
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        msg_list = ["Unable to login|"
-                    "incorrect user.*|"
-                    "Authentication failure|"
-                    "Authentication failed|"
-                    "Incorrect.*username|"
-                    "Unauthorized|"
-                    "Error.* backend|"
-                    "Permission denied|"
-                    "HTTP Auth Failed"]
+        msg_list = [
+            "Unable to login|"
+            "incorrect user.*|"
+            "Authentication failure|"
+            "Authentication failed|"
+            "Incorrect.*username|"
+            "Unauthorized|"
+            "Error.* backend|"
+            "Permission denied|"
+            "HTTP Auth Failed"
+        ]
 
         # Case Steps
         logger.info(">>>step1: password option is good value")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: password option is wrong value")
         self.vw_option_update_value(option_tested, "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: password option is Á∫¢Â∏Ω‚Ç¨467aa value")
-        self.vw_option_update_value(option_tested, 'Á∫¢Â∏Ω‚Ç¨467aa', config_file)
+        self.vw_option_update_value(option_tested, "Á∫¢Â∏Ω‚Ç¨467aa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, "
-                           "password value is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, "
+                "password value is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res1)
+            results.setdefault("step3", []).append(res1)
         else:
             if "RHEL-7" in compose_id:
                 msg = "'password': is not in latin1 encoding"
-                res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=0, exp_send=0)
+                res1 = self.op_normal_value(
+                    data, exp_error="1|2|3", exp_thread=0, exp_send=0
+                )
                 res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
             else:
-                res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
+                res1 = self.op_normal_value(
+                    data, exp_error="1|2|3", exp_thread=1, exp_send=0
+                )
                 res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: password option is null value")
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=1, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: password option is disable")
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step5', []).append(res1)
+            results.setdefault("step5", []).append(res1)
         else:
             msg_list_s5 = ["PASSWORD.* not set|virt-who can't be started"]
-            res1 = self.op_normal_value(data, exp_error="0|1|2", exp_thread=0, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error="0|1|2", exp_thread=0, exp_send=0
+            )
             res2 = self.msg_validation(rhsm_output, msg_list_s5, exp_exist=True)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         logger.info(">>>step6: password option is disable but another config is ok")
         config_name_ok = "virtwho-config-ok"
         config_file_ok = "/etc/virt-who.d/{0}.conf".format(config_name_ok)
         self.vw_etc_d_mode_create(config_name_ok, config_file_ok)
         self.vw_option_disable(option_tested, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step6', []).append(res1)
+            results.setdefault("step6", []).append(res1)
         else:
             msg_list_s6 = ["PASSWORD.* not set"]
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list_s6, exp_exist=True)
-            results.setdefault('step6', []).append(res1)
-            results.setdefault('step6', []).append(res2)
+            results.setdefault("step6", []).append(res1)
+            results.setdefault("step6", []).append(res2)
 
         logger.info(">>>step7: password option is null but another config is ok")
         self.vw_option_enable(option_tested, config_file)
-        self.vw_option_update_value(option_tested, '', config_file)
+        self.vw_option_update_value(option_tested, "", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_error=True)
         if "libvirt-remote" in hypervisor_type:
-            logger.warning("libvirt-remote can use sshkey to connect, username is not necessary")
+            logger.warning(
+                "libvirt-remote can use sshkey to connect, username is not necessary"
+            )
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step7', []).append(res1)
+            results.setdefault("step7", []).append(res1)
         else:
-            res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=1)
+            res1 = self.op_normal_value(
+                data, exp_error="1|2|3", exp_thread=1, exp_send=1
+            )
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-            results.setdefault('step7', []).append(res1)
-            results.setdefault('step7', []).append(res2)
+            results.setdefault("step7", []).append(res1)
+            results.setdefault("step7", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.678508 +0000
@@ -5,79 +5,85 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136627')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136627")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
         self.vw_option_disable("hostname", "/etc/rhsm/rhsm.conf")
 
         # Case Steps
         try:
-            logger.info(">>>step1: run virt-who with rhsm_hostname, rhsm_port, "
-                        "rhsm_prefix good value")
+            logger.info(
+                ">>>step1: run virt-who with rhsm_hostname, rhsm_port, "
+                "rhsm_prefix good value"
+            )
             self.vw_option_add("rhsm_hostname", register_server, config_file)
             self.vw_option_add("rhsm_port", "443", config_file)
             self.vw_option_add("rhsm_prefix", register_prefix, config_file)
             self.vw_option_add("rhsm_username", register_username, config_file)
             self.vw_option_add("rhsm_password", register_password, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(res)
+            results.setdefault("step1", []).append(res)
 
             logger.info(">>>step2: run virt-who with rhsm_hostname=xxxxxx")
             self.vw_option_update_value("rhsm_hostname", "xxxxxx", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             error_num = 1
-            if 'RHEL-9' in compose_id:
+            if "RHEL-9" in compose_id:
                 error_num = 2
-            res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(
+                data, exp_error=error_num, exp_thread=1, exp_send=0
+            )
             res2 = self.vw_msg_search(rhsm_output, "Name or service not known")
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
             logger.info(">>>step3: run virt-who with rhsm_hostname null value")
-            msg_list = ["Server error attempting a GET to /rhsm/status/|"
-                        "Communication with subscription manager failed"]
+            msg_list = [
+                "Server error attempting a GET to /rhsm/status/|"
+                "Communication with subscription manager failed"
+            ]
             self.vw_option_update_value("rhsm_hostname", " ", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
             logger.info(">>>step4: run virt-who with rhsm_hostname disable")
             self.vw_option_disable("rhsm_hostname", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
         except:
-            results.setdefault('step', []).append(False)
+            results.setdefault("step", []).append(False)
             pass
 
         finally:
             self.vw_option_enable("hostname", "/etc/rhsm/rhsm.conf")
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.719334 +0000
@@ -2,71 +2,73 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136628')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136628")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
         self.vw_option_disable("port", "/etc/rhsm/rhsm.conf")
 
         # Case Steps
         try:
-            logger.info(">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value")
+            logger.info(
+                ">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value"
+            )
             self.vw_option_add("rhsm_hostname", register_server, config_file)
             self.vw_option_add("rhsm_port", "443", config_file)
             self.vw_option_add("rhsm_prefix", register_prefix, config_file)
             self.vw_option_add("rhsm_username", register_username, config_file)
             self.vw_option_add("rhsm_password", register_password, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(res)
+            results.setdefault("step1", []).append(res)
 
             logger.info(">>>step2: run virt-who with rhsm_port=123")
             self.vw_option_update_value("rhsm_port", "123", config_file)
             data, tty_output, rhsm_output = self.vw_start()
-            res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
-            error_msg = ["Connection refused|"
-                         "Connection timed out"]
+            res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
+            error_msg = ["Connection refused|" "Connection timed out"]
             res2 = self.msg_validation(rhsm_output, error_msg)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
             logger.info(">>>step3: run virt-who with rhsm_port null value")
             self.vw_option_update_value("rhsm_port", " ", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res1)
+            results.setdefault("step3", []).append(res1)
 
             logger.info(">>>step4: run virt-who with rhsm_port disable")
             self.vw_option_disable("rhsm_port", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step4', []).append(res1)
+            results.setdefault("step4", []).append(res1)
 
         except:
-            results.setdefault('step', []).append(False)
+            results.setdefault("step", []).append(False)
             pass
 
         finally:
             self.vw_option_enable("port", "/etc/rhsm/rhsm.conf")
 
would reformat /tmp/lint/tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.739246 +0000
@@ -5,77 +5,81 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137169')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137169")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
         self.vw_option_disable("prefix", "/etc/rhsm/rhsm.conf")
-        server_type = self.get_config('register_type')
+        server_type = self.get_config("register_type")
 
         # Case Steps
         try:
-            logger.info(">>>step1: run virt-who with rhsm_hostname, "
-                        "rhsm_port, rhsm_prefix good value")
+            logger.info(
+                ">>>step1: run virt-who with rhsm_hostname, "
+                "rhsm_port, rhsm_prefix good value"
+            )
             self.vw_option_add("rhsm_hostname", register_server, config_file)
             self.vw_option_add("rhsm_port", "443", config_file)
             self.vw_option_add("rhsm_prefix", register_prefix, config_file)
             self.vw_option_add("rhsm_username", register_username, config_file)
             self.vw_option_add("rhsm_password", register_password, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(res)
+            results.setdefault("step1", []).append(res)
 
             logger.info(">>>step2: run virt-who with rhsm_prefix=/xxx")
             self.vw_option_update_value("rhsm_prefix", "/xxx", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
 
             logger.info(">>>step3: run virt-who with rhsm_prefix null value")
             self.vw_option_update_value("rhsm_prefix", " ", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             if "stage" in server_type:
                 res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step3', []).append(res1)
+                results.setdefault("step3", []).append(res1)
             else:
                 res1 = self.op_normal_value(
-                        data, exp_error="1|2", exp_thread=1, exp_send=0)
-                res2 = self.vw_msg_search(rhsm_output, 'HTTP error', exp_exist=True)
-                results.setdefault('step3', []).append(res1)
-                results.setdefault('step3', []).append(res2)
+                    data, exp_error="1|2", exp_thread=1, exp_send=0
+                )
+                res2 = self.vw_msg_search(rhsm_output, "HTTP error", exp_exist=True)
+                results.setdefault("step3", []).append(res1)
+                results.setdefault("step3", []).append(res2)
 
             logger.info(">>>step4: run virt-who with rhsm_prefix disable")
             self.vw_option_disable("rhsm_prefix", config_file)
             data, tty_output, rhsm_output = self.vw_start()
             if "stage" in server_type:
                 res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-                results.setdefault('step3', []).append(res1)
+                results.setdefault("step3", []).append(res1)
             else:
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2", exp_thread=1, exp_send=0)
-                res2 = self.vw_msg_search(rhsm_output, 'HTTP error', exp_exist=True)
-                results.setdefault('step3', []).append(res1)
-                results.setdefault('step3', []).append(res2)
+                    data, exp_error="1|2", exp_thread=1, exp_send=0
+                )
+                res2 = self.vw_msg_search(rhsm_output, "HTTP error", exp_exist=True)
+                results.setdefault("step3", []).append(res1)
+                results.setdefault("step3", []).append(res2)
 
         finally:
             self.vw_option_enable("prefix", "/etc/rhsm/rhsm.conf")
 
         # Case Result
would reformat /tmp/lint/tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.825777 +0000
@@ -5,94 +5,98 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136630')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136630")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
 
         # Case Steps
-        logger.info(">>>step1: run virt-who with rhsm_hostname, rhsm_port, "
-                    "rhsm_prefix good value")
+        logger.info(
+            ">>>step1: run virt-who with rhsm_hostname, rhsm_port, "
+            "rhsm_prefix good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with rhsm_username=xxxxxx")
         error_msg = "Communication with subscription manager failed"
         self.vw_option_update_value("rhsm_username", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: run virt-who with rhsm_username=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ")
-        '''Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ username is not supported by candlepin'''
-        msg_list = ["codec can't decode|"
-                    "Communication with subscription manager failed"]
+        """Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ username is not supported by candlepin"""
+        msg_list = [
+            "codec can't decode|" "Communication with subscription manager failed"
+        ]
         self.vw_option_update_value("rhsm_username", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "RHEL-7" in compose_id:
-            pkg = self.pkg_check(self.ssh_host(), 'python-requests').split('-')[2]
-            if pkg[16:21] >= '2.20':
+            pkg = self.pkg_check(self.ssh_host(), "python-requests").split("-")[2]
+            if pkg[16:21] >= "2.20":
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2", exp_thread=1, exp_send=0)
+                    data, exp_error="1|2", exp_thread=1, exp_send=0
+                )
                 res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
             else:
                 msg = "not in latin1 encoding"
                 res1 = self.op_normal_value(
-                    data, exp_error="1|2", exp_thread=0, exp_send=0)
+                    data, exp_error="1|2", exp_thread=0, exp_send=0
+                )
                 res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
         else:
-            res1 = self.op_normal_value(
-                data, exp_error="1|2", exp_thread=1, exp_send=0)
+            res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: run virt-who with rhsm_username null value")
         error_msg = "system is not registered or you are not root"
         self.vw_option_update_value("rhsm_username", " ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         error_num = 1
-        if 'RHEL-9' in compose_id:
+        if "RHEL-9" in compose_id:
             error_num = 2
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: run virt-who with rhsm_username disable")
         self.vw_option_disable("rhsm_username", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.843723 +0000
@@ -5,86 +5,89 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136631')
-        hypervisor_type = self.get_config('hypervisor_type')
-        compose_id = self.get_config('rhel_compose')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136631")
+        hypervisor_type = self.get_config("hypervisor_type")
+        compose_id = self.get_config("rhel_compose")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
 
         # Case Steps
-        logger.info(">>>step1: run virt-who with rhsm_hostname, "
-                    "rhsm_port, rhsm_prefix good value")
+        logger.info(
+            ">>>step1: run virt-who with rhsm_hostname, "
+            "rhsm_port, rhsm_prefix good value"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with rhsm_password=xxxxxx")
         error_msg = "Communication with subscription manager failed"
         self.vw_option_update_value("rhsm_password", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: run virt-who with rhsm_password=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ")
-        '''Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ password is supported by candlepin'''
+        """Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ password is supported by candlepin"""
         self.vw_option_update_value("rhsm_password", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         if "RHEL-7" in compose_id:
             msg = "not in latin1 encoding"
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=0, exp_send=0)
             res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)
         else:
-            msg_list = ["codec can't decode|"
-                        "Communication with subscription manager failed"]
+            msg_list = [
+                "codec can't decode|" "Communication with subscription manager failed"
+            ]
             res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
             res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: run virt-who with rhsm_password null value")
         error_msg = "system is not registered or you are not root"
         self.vw_option_update_value("rhsm_password", " ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         error_num = 1
-        if 'RHEL-9' in compose_id:
+        if "RHEL-9" in compose_id:
             error_num = 2
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         logger.info(">>>step5: run virt-who with rhsm_password disable")
         self.vw_option_disable("rhsm_password", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py	2023-03-06 06:16:10.851160 +0000
@@ -5,29 +5,29 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136632')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136632")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
         self.system_unregister(self.ssh_host())
 
         # Case Steps
         logger.info(">>>step1: run virt-who with rhsm_encrypted_password good value")
         encrypted_value = self.vw_encrypted(register_password)
@@ -36,20 +36,20 @@
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_encrypted_password", encrypted_value, config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with rhsm_encrypted_password=xxxxxx")
         error_msg = "Communication with subscription manager failed"
         self.vw_option_update_value("rhsm_encrypted_password", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
+        res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: skip this step")
         # logger.info(">>>step3: run virt-who with rhsm_encrypted_password=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ")
         # self.vw_option_update_value("rhsm_encrypted_password", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", config_file)
         # data, tty_output, rhsm_output = self.vw_start()
@@ -60,12 +60,12 @@
 
         logger.info(">>>step4: run virt-who with rhsm_encrypted_password null value")
         error_msg = 'Option "rhsm_encrypted_password" cannot be decrypted'
         self.vw_option_update_value("rhsm_encrypted_password", " ", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        res1 = self.op_normal_value(data, exp_error='1|2', exp_thread=1, exp_send=0)
+        res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py	2023-03-06 06:16:10.937462 +0000
@@ -2,51 +2,63 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136635')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136635")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
         if "esx" in hypervisor_type or "rhevm" in hypervisor_type:
-            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}
+            steps = {"step1": "uuid", "step2": "hostname", "step3": "hwuuid"}
         else:
-            steps = {'step1':'uuid', 'step2':'hostname'}
+            steps = {"step1": "uuid", "step2": "hostname"}
 
         # Case Steps
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts".format(step, option))
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts".format(
+                    step, option
+                )
+            )
             self.vw_option_add("hypervisor_id", option, config_file)
             if option == "hwuuid":
                 hypervisorId = host_hwuuid
             elif option == "hostname":
                 hypervisorId = host_name
             else:
                 hypervisorId = host_uuid
-            wildcard = hypervisorId[:3] + '*' + hypervisorId[4:]
-            sub_steps = {'step1':hypervisorId, 'step2': "*", 'step3': wildcard, 'step4': wildcard}
-            for key, value in sorted(sub_steps.items(),key=lambda item:item[0]):
+            wildcard = hypervisorId[:3] + "*" + hypervisorId[4:]
+            sub_steps = {
+                "step1": hypervisorId,
+                "step2": "*",
+                "step3": wildcard,
+                "step4": wildcard,
+            }
+            for key, value in sorted(sub_steps.items(), key=lambda item: item[0]):
                 if key == "step4":
-                    logger.info("++++ Set filter_hosts=* and exclude_hosts=%s ++++" % value)
+                    logger.info(
+                        "++++ Set filter_hosts=* and exclude_hosts=%s ++++" % value
+                    )
                     self.vw_option_add("filter_hosts", "*", config_file)
                     self.vw_option_add("exclude_hosts", value, config_file)
                 else:
                     logger.info("++++ Set filter_hosts={0} ++++".format(value))
                     self.vw_option_add("filter_hosts", value, config_file)
would reformat /tmp/lint/tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py	2023-03-06 06:16:11.003618 +0000
@@ -2,33 +2,38 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136639')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136639")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: add xxxxxx=aaa to config file")
         self.vw_option_add("xxxxxx", "aaa", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_msg_search(rhsm_output, 'Ignoring unknown configuration option "xxxxxx"', exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        res2 = self.vw_msg_search(
+            rhsm_output,
+            'Ignoring unknown configuration option "xxxxxx"',
+            exp_exist=True,
+        )
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py	2023-03-06 06:16:11.045157 +0000
@@ -2,43 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136711')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136711")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         invalid_file = "/etc/virt-who.d/{0}.conf.txt".format(config_name)
 
         # Case Steps
         logger.info(">>>step1: run virt-who with the expected config file name")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who with the unexpected config file name")
-        logger.warning("libvirt-local mode will be used to instead when no valid config")
+        logger.warning(
+            "libvirt-local mode will be used to instead when no valid config"
+        )
         cmd = "mv {0} {1}".format(config_file, invalid_file)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="rename file")
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, ["Error in .* backend"], exp_exist=True)
-        res3 = self.vw_msg_search(rhsm_output, "not have any .*conf.* files but is not empty", exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
-        results.setdefault('step2', []).append(res3)
+        res3 = self.vw_msg_search(
+            rhsm_output, "not have any .*conf.* files but is not empty", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
+        results.setdefault("step2", []).append(res3)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py	2023-03-06 06:16:11.091189 +0000
@@ -2,61 +2,80 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136636')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('esx'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136636")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("esx"):
             self.vw_case_skip(hypervisor_type)
         # Bug 1461272 only be fixed in rhel8, so rhel7 doesn't support this function
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-7" in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         host_uuid = self.get_hypervisor_hostuuid()
         host_hwuuid = self.get_hypervisor_hwuuid()
         host_name = self.get_hypervisor_hostname()
 
         # Case Steps
-        logger.info(">>>step1: run virt-who with filter_host_parents= to check the domain_id")
+        logger.info(
+            ">>>step1: run virt-who with filter_host_parents= to check the domain_id"
+        )
         self.vw_option_add("filter_host_parents", "", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
-        domain_id = re.findall(r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid), rhsm_output)[-1]
+        results.setdefault("step1", []).append(res)
+        domain_id = re.findall(
+            r"Skipping host '{0}' because its parent '(.*?)'".format(host_hwuuid),
+            rhsm_output,
+        )[-1]
         logger.info("Succeeded to find: {0}:{1}:{0}".format(host_hwuuid, domain_id))
         self.vw_option_del("filter_host_parents", config_file)
 
-        steps = {'step2':'uuid', 'step3':'hostname', 'step4':'hwuuid'}
-        for step, option in sorted(steps.items(),key=lambda item:item[0]):
-            logger.info(">>>{0}: run virt-who to with hypervisor_id={1} and set filter_host_parents".format(step, option))
+        steps = {"step2": "uuid", "step3": "hostname", "step4": "hwuuid"}
+        for step, option in sorted(steps.items(), key=lambda item: item[0]):
+            logger.info(
+                ">>>{0}: run virt-who to with hypervisor_id={1} and set filter_host_parents".format(
+                    step, option
+                )
+            )
             self.vw_option_add("hypervisor_id", option, config_file)
             if option == "hwuuid":
                 hypervisorId = host_hwuuid
             elif option == "hostname":
                 hypervisorId = host_name
             else:
                 hypervisorId = host_uuid
-            wildcard = domain_id[:3] + '*' + domain_id[4:]
-            sub_steps = {'step1':domain_id, 'step2': "*", 'step3': wildcard, 'step4': wildcard}
-            for key, value in sorted(sub_steps.items(),key=lambda item:item[0]):
+            wildcard = domain_id[:3] + "*" + domain_id[4:]
+            sub_steps = {
+                "step1": domain_id,
+                "step2": "*",
+                "step3": wildcard,
+                "step4": wildcard,
+            }
+            for key, value in sorted(sub_steps.items(), key=lambda item: item[0]):
                 if key == "step4":
-                    logger.info("++++ Set filter_host_parents={0} and exclude_host_parents=* ++++".format(value))
+                    logger.info(
+                        "++++ Set filter_host_parents={0} and exclude_host_parents=* ++++".format(
+                            value
+                        )
+                    )
                     self.vw_option_add("exclude_host_parents", "*", config_file)
                     self.vw_option_add("filter_host_parents", value, config_file)
                 else:
                     logger.info("++++ Set filter_host_parents={0} ++++".format(value))
                     self.vw_option_add("filter_host_parents", value, config_file)
would reformat /tmp/lint/tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py	2023-03-06 06:16:11.124906 +0000
@@ -2,92 +2,93 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136637')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136637")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
 
         # Case Steps
         logger.info(">>>step1: run virt-who with filter_hosts=''")
         self.vw_option_add("filter_hosts", r"''", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step1', []).append(s2)
+        results.setdefault("step1", []).append(s2)
 
         logger.info('>>>step2: run virt-who with filter_hosts=""')
-        self.vw_option_update_value("filter_hosts", r'\"\"', config_file)
+        self.vw_option_update_value("filter_hosts", r"\"\"", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(s1)
+        results.setdefault("step2", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step2', []).append(s2)
+        results.setdefault("step2", []).append(s2)
 
         logger.info(">>>step3: run virt-who with filter_hosts='host_uuid'")
         self.vw_option_update_value("filter_hosts", r"'%s'" % host_uuid, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(s1)
+        results.setdefault("step1", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(s2)
+        results.setdefault("step1", []).append(s2)
 
         logger.info('>>>step4: run virt-who with filter_hosts="host_uuid"')
-        self.vw_option_update_value("filter_hosts", r'\"%s\"' % host_uuid, config_file)
+        self.vw_option_update_value("filter_hosts", r"\"%s\"" % host_uuid, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(s1)
+        results.setdefault("step4", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step4', []).append(s2)
+        results.setdefault("step4", []).append(s2)
         self.vw_option_del("filter_hosts", config_file)
 
         logger.info(">>>step5: run virt-who with exclude_hosts=''")
         self.vw_option_add("exclude_hosts", r"''", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step5', []).append(s1)
+        results.setdefault("step5", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step5', []).append(s2)
+        results.setdefault("step5", []).append(s2)
 
         logger.info('>>>step6: run virt-who with exclude_hosts=""')
-        self.vw_option_update_value("exclude_hosts", r'\"\"', config_file)
+        self.vw_option_update_value("exclude_hosts", r"\"\"", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step6', []).append(s1)
+        results.setdefault("step6", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)
-        results.setdefault('step6', []).append(s2)
+        results.setdefault("step6", []).append(s2)
 
         logger.info(">>>step7: run virt-who with exclude_hosts='host_uuid'")
         self.vw_option_update_value("exclude_hosts", r"'%s'" % host_uuid, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step7', []).append(s1)
+        results.setdefault("step7", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step7', []).append(s2)
+        results.setdefault("step7", []).append(s2)
 
         logger.info('>>>step8: run virt-who with exclude_hosts="host_uuid"')
-        self.vw_option_update_value("exclude_hosts", r'\"%s\"' % host_uuid, config_file)
+        self.vw_option_update_value("exclude_hosts", r"\"%s\"" % host_uuid, config_file)
         data, tty_output, rhsm_output = self.vw_start()
         s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step8', []).append(s1)
+        results.setdefault("step8", []).append(s1)
         s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)
-        results.setdefault('step8', []).append(s2)
+        results.setdefault("step8", []).append(s2)
         self.vw_option_del("exclude_hosts", config_file)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py	2023-03-06 06:16:11.138384 +0000
@@ -2,50 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136712')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136712")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_port = '443'
-        register_prefix = register_config['prefix']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_port = "443"
+        register_prefix = register_config["prefix"]
 
         # Case Steps
-        logger.info(">>>step1: run virt-who when all the options enabled with single quotes")
+        logger.info(
+            ">>>step1: run virt-who when all the options enabled with single quotes"
+        )
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", register_port, config_file)
         self.vw_option_add("rhsm_prefix", register_prefix, config_file)
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
-        cmd =  r'''sed -i "s|=\(.*\)|='\1'|g" {0}'''.format(config_file)
+        cmd = r"""sed -i "s|=\(.*\)|='\1'|g" {0}""".format(config_file)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="update file")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: run virt-who when all the options enabled with double quotes")
-        cmd =  r'''sed -i "s|'|\"|g" {0}'''.format(config_file)
+        logger.info(
+            ">>>step2: run virt-who when all the options enabled with double quotes"
+        )
+        cmd = r"""sed -i "s|'|\"|g" {0}""".format(config_file)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="update file")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py	2023-03-06 06:16:11.147166 +0000
@@ -2,43 +2,58 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136731')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136731")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: interval is null value in /etc/virt-who.conf")
         self.vw_option_enable("interval", virtwho_conf)
-        self.vw_option_update_value("interval", '', virtwho_conf)
+        self.vw_option_update_value("interval", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)
-        results.setdefault('step1', []).append(res)
+        res = self.op_normal_value(
+            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600
+        )
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: check virt-who firstly run interval in /etc/sysconfig/virt-who")
-        self.vw_option_update_value("interval", '120', virtwho_conf)
-        self.vw_option_enable("VIRTWHO_INTERVAL", '/etc/sysconfig/virt-who')
-        self.vw_option_update_value("VIRTWHO_INTERVAL", '60', '/etc/sysconfig/virt-who')
+        logger.info(
+            ">>>step2: check virt-who firstly run interval in /etc/sysconfig/virt-who"
+        )
+        self.vw_option_update_value("interval", "120", virtwho_conf)
+        self.vw_option_enable("VIRTWHO_INTERVAL", "/etc/sysconfig/virt-who")
+        self.vw_option_update_value("VIRTWHO_INTERVAL", "60", "/etc/sysconfig/virt-who")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)
-        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_loopnum=1, exp_looptime=60)
-        results.setdefault('step2', []).append(res)
+        res = self.op_normal_value(
+            data,
+            exp_error=0,
+            exp_thread=1,
+            exp_send=1,
+            exp_interval=60,
+            exp_loopnum=1,
+            exp_looptime=60,
+        )
+        results.setdefault("step2", []).append(res)
 
         # Case Result
         notes = list()
-        notes.append("Bug(Step1): failed to report mappings if configure 'interval=' value to null")
+        notes.append(
+            "Bug(Step1): failed to report mappings if configure 'interval=' value to null"
+        )
         notes.append("BZ: https://bugzilla.redhat.com/show_bug.cgi?id=1523482")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2034_validate_global_interval_by_virtwho_conf.py
--- /tmp/lint/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py	2023-03-06 06:16:11.221640 +0000
@@ -5,57 +5,63 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136716')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136716")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        register_type = register_config["type"]
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        reporter_id_null = ''
+        reporter_id_null = ""
         reporter_id_non_ascii = "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ"
-        steps = {'step2': reporter_id_null,
-                 'step3': reporter_id_non_ascii}
+        steps = {"step2": reporter_id_null, "step3": reporter_id_non_ascii}
         if "satellite" in register_type:
-            del steps['step3']
+            del steps["step3"]
 
         # Case Steps
         logger.info(">>>step1: get default reporter_id")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        default_reporter_id = data['reporter_id']
+        default_reporter_id = data["reporter_id"]
         logger.info("default reporter_id is {0}".format(default_reporter_id))
         results.setdefault("step1", []).append(res)
 
         for step, value in sorted(steps.items(), key=lambda item: item[0]):
-            logger.info(">>>{0}: run virt-who to check reporter_id({1})".format(
-                step, value))
+            logger.info(
+                ">>>{0}: run virt-who to check reporter_id({1})".format(step, value)
+            )
             self.vw_option_enable("reporter_id", virtwho_conf)
             self.vw_option_update_value("reporter_id", value, virtwho_conf)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             results.setdefault(step, []).append(res)
-            data['reporter_id'] = data['reporter_id']
+            data["reporter_id"] = data["reporter_id"]
             if value == reporter_id_null:
                 value = default_reporter_id
-            if value == data['reporter_id']:
-                logger.info("Succeeded to check, reporter_id({0}) is expected".format(
-                    data['reporter_id']))
+            if value == data["reporter_id"]:
+                logger.info(
+                    "Succeeded to check, reporter_id({0}) is expected".format(
+                        data["reporter_id"]
+                    )
+                )
                 results.setdefault(step, []).append(True)
             else:
-                logger.error("Failed to check, reporter_id({0}) is not expected".format(
-                    data['reporter_id']))
+                logger.error(
+                    "Failed to check, reporter_id({0}) is not expected".format(
+                        data["reporter_id"]
+                    )
+                )
                 results.setdefault(step, []).append(False)
 
         # Case Result
         notes = list()
         notes.append("Bug(step2): virt-who still uses null value for reporter_id")
would reformat /tmp/lint/tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py
--- /tmp/lint/tier2/tc_2036_validate_global_debug_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2036_validate_global_debug_by_virtwho_conf.py	2023-03-06 06:16:11.225643 +0000
@@ -2,30 +2,31 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136721')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136721")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step: run with debug value is null in /etc/virt-who.conf")
         self.vw_option_enable("debug", virtwho_conf)
-        self.vw_option_update_value("debug", '', virtwho_conf)
+        self.vw_option_update_value("debug", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]", exp_exist=False)
-        results.setdefault('step', []).append(res1)
-        results.setdefault('step', []).append(res2)
+        results.setdefault("step", []).append(res1)
+        results.setdefault("step", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2036_validate_global_debug_by_virtwho_conf.py
--- /tmp/lint/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py	2023-03-06 06:16:11.250822 +0000
@@ -2,30 +2,31 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136719')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136719")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step: run with oneshot value is null")
         self.vw_option_enable("oneshot", virtwho_conf)
-        self.vw_option_update_value("oneshot", '', virtwho_conf)
+        self.vw_option_update_value("oneshot", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step', []).append(res)
+        results.setdefault("step", []).append(res)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py
--- /tmp/lint/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py	2023-03-06 06:16:11.290012 +0000
@@ -2,65 +2,66 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137014')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137014")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name_1 = "virtwho-config-1"
         config_file_1 = "/root/{0}.conf".format(config_name_1)
         self.vw_etc_d_mode_create(config_name_1, config_file_1)
         config_name_2 = "virtwho-config-2"
         config_file_2 = "/etc/virt-who.d/{0}.conf".format(config_name_2)
         self.vw_etc_d_mode_create(config_name_2, config_file_2)
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # Case Steps
         logger.info(">>>step1: 'configs' is valid file")
-        self.vw_option_enable('configs', virtwho_conf)
-        self.vw_option_update_value('configs', config_file_1, virtwho_conf)
+        self.vw_option_enable("configs", virtwho_conf)
+        self.vw_option_update_value("configs", config_file_1, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
         # check virt-who didn't run config_file_2
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
         logger.info("Expected mapping info num: 1 for sat63 above and stage")
-        results.setdefault('step1', []).append(num == 1)
+        results.setdefault("step1", []).append(num == 1)
 
         logger.info(">>>step2: 'configs' is null value")
-        self.vw_option_update_value('configs', '', virtwho_conf)
+        self.vw_option_update_value("configs", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res1)
+        results.setdefault("step2", []).append(res1)
         # check virt-who has run config_file_2
         num = rhsm_output.count('"guestId": "{0}"'.format(guest_uuid))
         logger.info("Actual mapping info num: {0}".format(num))
         logger.info("Expected mapping info num: 1 for sat63 above and stage")
-        results.setdefault('step2', []).append(num == 1)
+        results.setdefault("step2", []).append(num == 1)
 
         logger.info(">>>step3: 'configs' is wrong value")
-        self.vw_option_update_value('configs', 'xxxxxx', virtwho_conf)
-        error_msg_1 = 'Unable to read configuration file'
-        error_msg_2 = 'No valid configuration file provided using -c/--config'
+        self.vw_option_update_value("configs", "xxxxxx", virtwho_conf)
+        error_msg_1 = "Unable to read configuration file"
+        error_msg_2 = "No valid configuration file provided using -c/--config"
         data, tty_output, rhsm_output = self.vw_start(exp_send=0, exp_error=True)
         res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg_1, exp_exist=True)
         res3 = self.vw_msg_search(rhsm_output, error_msg_2, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2038_validate_global_configs_by_virtwho_conf.py
--- /tmp/lint/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py	2023-03-06 06:16:11.385380 +0000
@@ -2,50 +2,53 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136731')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136731")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
         self.vw_option_enable("[defaults]", virtwho_conf)
         self.vw_option_enable("hypervisor_id", virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        register_owner = register_config['owner']
+        register_type = register_config["type"]
+        register_owner = register_config["owner"]
 
         # Case Steps
-        logger.info(">>>step: hypervisor_id in /etc/virt-who.d/x.conf has high priority")
-        self.vw_option_update_value('hypervisor_id', 'uuid', virtwho_conf)
-        self.vw_option_add('hypervisor_id', 'hostname', config_file)
+        logger.info(
+            ">>>step: hypervisor_id in /etc/virt-who.d/x.conf has high priority"
+        )
+        self.vw_option_update_value("hypervisor_id", "uuid", virtwho_conf)
+        self.vw_option_add("hypervisor_id", "hostname", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step', []).append(res)
+        results.setdefault("step", []).append(res)
         if host_name in data[register_owner].keys():
             logger.info("Succeeded to search hypervisorId:{0}".format(host_name))
-            results.setdefault('step', []).append(True)
+            results.setdefault("step", []).append(True)
         else:
             logger.error("Failed to search hypervisorId:{0}".format(host_name))
-            results.setdefault('step', []).append(False)
+            results.setdefault("step", []).append(False)
         if "satellite" in register_type:
             self.vw_web_host_delete(host_name, host_uuid)
         if "stage" in register_type:
             self.stage_consumer_clean(self.ssh_host(), register_config)
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py
--- /tmp/lint/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py	2023-03-06 06:16:11.540793 +0000
@@ -2,88 +2,111 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136724')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136724")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.24.6':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.24.6":
             self.vw_case_skip("virt-who version")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         self.vw_option_enable("[defaults]", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_env = register_config['env']
+        register_env = register_config["env"]
 
         # Case Steps
-        logger.info(">>>step1: disable env option in /etc/virt-who.d/, set correct env in /etc/virt-who.conf")
+        logger.info(
+            ">>>step1: disable env option in /etc/virt-who.d/, set correct env in /etc/virt-who.conf"
+        )
         self.vw_option_disable("env", config_file)
         self.vw_option_enable("env", virtwho_conf)
         self.vw_option_update_value("env", register_env, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
-        logger.info(">>>step2: disable env option in /etc/virt-who.d/, set env=xxxxxx in /etc/virt-who.conf")
+        logger.info(
+            ">>>step2: disable env option in /etc/virt-who.d/, set env=xxxxxx in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("env", "xxxxxx", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env.*differs|env.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|env.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
-        logger.info(">>>step3: disable env option in /etc/virt-who.d/, set env=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ in /etc/virt-who.conf")
+        logger.info(
+            ">>>step3: disable env option in /etc/virt-who.d/, set env=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("env", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["codec can't decode|Communication with subscription manager failed|env.*differs"]
+        msg_list = [
+            "codec can't decode|Communication with subscription manager failed|env.*differs"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
-        logger.info(">>>step4: disable env option in /etc/virt-who.d/, set env= in /etc/virt-who.conf")
+        logger.info(
+            ">>>step4: disable env option in /etc/virt-who.d/, set env= in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("env", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"]
+        msg_list = [
+            "env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
-        logger.info(">>>step5: correct env in /etc/virt-who.conf, but wrong env in /etc/virt-who.d/ config file")
+        logger.info(
+            ">>>step5: correct env in /etc/virt-who.conf, but wrong env in /etc/virt-who.d/ config file"
+        )
         self.vw_option_update_value("env", register_env, virtwho_conf)
         self.vw_option_enable("env", config_file)
         self.vw_option_update_value("env", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["env.*differs|env.* is different|Communication with subscription manager failed"]
+        msg_list = [
+            "env.*differs|env.* is different|Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         notes = list()
-        register_type = self.get_config('register_type')
+        register_type = self.get_config("register_type")
         if "stage" in register_type:
-            notes.append("Bug(Step2,Step3,Step4,Step5): Set env to wrong or special or null value, still can sent report normally for stage")
+            notes.append(
+                "Bug(Step2,Step3,Step4,Step5): Set env to wrong or special or null value, still can sent report normally for stage"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530426")
         else:
-            notes.append("Bug(Step4): Set env to null value, still can sent report normally for sat62/sat63")
+            notes.append(
+                "Bug(Step4): Set env to null value, still can sent report normally for sat62/sat63"
+            )
             notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530290")
         self.vw_case_result(results, notes)
would reformat /tmp/lint/tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py
--- /tmp/lint/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py	2023-03-06 05:02:18.595378 +0000
+++ /tmp/lint/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py	2023-03-06 06:16:11.541447 +0000
@@ -5,86 +5,98 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136727')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136727")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         self.vw_option_enable("[defaults]", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         guest_uuid = self.get_hypervisor_guestuuid()
         register_config = self.get_register_config()
-        register_owner = register_config['owner']
+        register_owner = register_config["owner"]
 
         # Case Steps
-        logger.info(">>>step1: disable owner option in /etc/virt-who.d/, "
-                    "set correct owner in /etc/virt-who.conf")
+        logger.info(
+            ">>>step1: disable owner option in /etc/virt-who.d/, "
+            "set correct owner in /etc/virt-who.conf"
+        )
         self.vw_option_disable("owner", config_file)
         self.vw_option_enable("owner", virtwho_conf)
         self.vw_option_update_value("owner", register_owner, virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
-        logger.info(">>>step2: disable owner option in /etc/virt-who.d/, "
-                    "set owner=xxxxxx in /etc/virt-who.conf")
+        logger.info(
+            ">>>step2: disable owner option in /etc/virt-who.d/, "
+            "set owner=xxxxxx in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("owner", "xxxxxx", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner.* is different|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner.* is different|" "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: skip this step because owner cannot be set to no-ascci")
         # logger.info(">>>step3: disable owner option in /etc/virt-who.d/, "
         #             "set owner=Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ in /etc/virt-who.conf")
         # self.vw_option_update_value("owner", "Á∫¢Â∏Ω¬©¬•¬Æ√∞œÄ‚àâ", virtwho_conf)
         # data, tty_output, rhsm_output = self.vw_start()
         # res1 = self.op_normal_value(data, exp_error="nz", exp_thread=1, exp_send=0)
         # results.setdefault('step3', []).append(res1)
 
-        logger.info(">>>step4: disable owner option in /etc/virt-who.d/, "
-                    "set owner= in /etc/virt-who.conf")
+        logger.info(
+            ">>>step4: disable owner option in /etc/virt-who.d/, "
+            "set owner= in /etc/virt-who.conf"
+        )
         self.vw_option_update_value("owner", "", virtwho_conf)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner not in|"
-                    "owner.* not set|"
-                    "virt-who can't be started|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner not in|"
+            "owner.* not set|"
+            "virt-who can't be started|"
+            "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2|3", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step4', []).append(res1)
-        results.setdefault('step4', []).append(res2)
+        results.setdefault("step4", []).append(res1)
+        results.setdefault("step4", []).append(res2)
 
-        logger.info(">>>step5: correct owner in /etc/virt-who.conf, "
-                    "but wrong owner in /etc/virt-who.d/ config file")
+        logger.info(
+            ">>>step5: correct owner in /etc/virt-who.conf, "
+            "but wrong owner in /etc/virt-who.d/ config file"
+        )
         self.vw_option_update_value("owner", register_owner, virtwho_conf)
         self.vw_option_enable("owner", config_file)
         self.vw_option_update_value("owner", "xxxxxx", config_file)
         data, tty_output, rhsm_output = self.vw_start()
-        msg_list = ["owner.* is different|"
-                    "Communication with subscription manager failed"]
+        msg_list = [
+            "owner.* is different|" "Communication with subscription manager failed"
+        ]
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
         res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)
-        results.setdefault('step5', []).append(res1)
-        results.setdefault('step5', []).append(res2)
+        results.setdefault("step5", []).append(res1)
+        results.setdefault("step5", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
 
 
would reformat /tmp/lint/tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py
--- /tmp/lint/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py	2023-03-06 06:16:11.564460 +0000
@@ -2,61 +2,94 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137110')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137110")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         virtwho_conf = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', virtwho_conf)
-        self.vw_option_enable('debug', virtwho_conf)
-        self.vw_option_update_value('debug', 'True', virtwho_conf)
+        self.vw_option_enable("[global]", virtwho_conf)
+        self.vw_option_enable("debug", virtwho_conf)
+        self.vw_option_update_value("debug", "True", virtwho_conf)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        ssh_sat = register_config['ssh_sat']
-        default_org = 'Default_Organization'
-        extra_org = 'Virtwho_Org'
-        org_list = {'step1':default_org, 'step2':extra_org}
+        ssh_sat = register_config["ssh_sat"]
+        default_org = "Default_Organization"
+        extra_org = "Virtwho_Org"
+        org_list = {"step1": default_org, "step2": extra_org}
 
-        for step, org in sorted(org_list.items(), key=lambda item:item[0]):
+        for step, org in sorted(org_list.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run with owner={1}".format(step, org))
-            host_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
-            if 'libvirt-local' not in hypervisor_type and 'vdsm' not in hypervisor_type:
-                self.vw_option_update_value('owner', org, config_file)
+            host_id = self.satellite_host_id(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
+            if "libvirt-local" not in hypervisor_type and "vdsm" not in hypervisor_type:
+                self.vw_option_update_value("owner", org, config_file)
             if host_id is not None and host_id != "":
                 self.vw_web_host_delete(host_name, host_uuid)
             if org == extra_org:
-                register_config['owner'] = extra_org
+                register_config["owner"] = extra_org
             self.system_unregister(self.ssh_host())
             self.system_register(self.ssh_host(), register_type, register_config)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             if org == default_org:
-                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True)
-                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=False)
+                res2 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    default_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=True,
+                )
+                res3 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    extra_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=False,
+                )
             else:
-                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=False)
-                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True)
+                res2 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    default_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=False,
+                )
+                res3 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    extra_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=True,
+                )
             results.setdefault(step, []).append(res1)
             results.setdefault(step, []).append(res2)
             results.setdefault(step, []).append(res3)
 
         logger.info(">>>step finally: delete host and hypervisor from extra_org")
-        host_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
+        host_id = self.satellite_host_id(
+            self.ssh_host(), register_config, host_name, host_uuid
+        )
         if host_id is not None and host_id != "":
             self.vw_web_host_delete(host_name, host_uuid)
         self.system_unregister(self.ssh_host())
 
         # Case Result
would reformat /tmp/lint/tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py
--- /tmp/lint/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py	2023-03-06 06:16:11.693111 +0000
@@ -2,35 +2,36 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137111')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137111")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
-        if 'stage' in register_type:
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         self.system_unregister(self.ssh_host())
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
-        register_prefix = register_config['prefix']
-        ssh_sat = register_config['ssh_sat']
-        default_org = 'Default_Organization'
-        extra_org = 'Virtwho_Org'
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
+        register_prefix = register_config["prefix"]
+        ssh_sat = register_config["ssh_sat"]
+        default_org = "Default_Organization"
+        extra_org = "Virtwho_Org"
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_add("rhsm_hostname", register_server, config_file)
         self.vw_option_add("rhsm_port", "443", config_file)
@@ -38,48 +39,86 @@
         self.vw_option_add("rhsm_username", register_username, config_file)
         self.vw_option_add("rhsm_password", register_password, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
 
-        org_list = {'step1':default_org, 'step2':extra_org}
-        for step, org in sorted(org_list.items(), key=lambda item:item[0]):
+        org_list = {"step1": default_org, "step2": extra_org}
+        for step, org in sorted(org_list.items(), key=lambda item: item[0]):
             logger.info(">>>{0}: run with owner={1}".format(step, org))
-            self.vw_option_update_value('owner', '{0}'.format(org), config_file)
-            host_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
+            self.vw_option_update_value("owner", "{0}".format(org), config_file)
+            host_id = self.satellite_host_id(
+                self.ssh_host(), register_config, host_name, host_uuid
+            )
             if host_id is not None and host_id != "":
                 self.vw_web_host_delete(host_name, host_uuid)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             if org == default_org:
-                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True)
-                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=False)
+                res2 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    default_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=True,
+                )
+                res3 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    extra_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=False,
+                )
             else:
-                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=False)
-                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True)
+                res2 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    default_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=False,
+                )
+                res3 = self.satellite_hosts_search(
+                    ssh_sat,
+                    register_config,
+                    extra_org,
+                    host_name,
+                    host_uuid,
+                    exp_exist=True,
+                )
             results.setdefault(step, []).append(res1)
             results.setdefault(step, []).append(res2)
             results.setdefault(step, []).append(res3)
 
-        logger.info(">>>step3: run with owner=%s and owner=%s" % (default_org, extra_org))
+        logger.info(
+            ">>>step3: run with owner=%s and owner=%s" % (default_org, extra_org)
+        )
         self.vw_web_host_delete(host_name, host_uuid)
         config_name_2 = "virtwho-config-2"
         config_file_2 = "/etc/virt-who.d/{0}.conf".format(config_name_2)
         cmd = "cp {0} {1}".format(config_file, config_file_2)
-        ret, output = self.runcmd(cmd, self.ssh_host(), desc='create config_file_2')
-        self.vw_option_update_value('[.*]', '[config_2]', config_file_2)
-        self.vw_option_update_value('owner', '{0}'.format(default_org), config_file)
-        self.vw_option_update_value('owner', '{0}'.format(extra_org), config_file_2)
+        ret, output = self.runcmd(cmd, self.ssh_host(), desc="create config_file_2")
+        self.vw_option_update_value("[.*]", "[config_2]", config_file_2)
+        self.vw_option_update_value("owner", "{0}".format(default_org), config_file)
+        self.vw_option_update_value("owner", "{0}".format(extra_org), config_file_2)
         data, tty_output, rhsm_output = self.vw_start(exp_send=2)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=2)
-        res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True)
-        res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
-        results.setdefault('step3', []).append(res3)
+        res2 = self.satellite_hosts_search(
+            ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True
+        )
+        res3 = self.satellite_hosts_search(
+            ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
+        results.setdefault("step3", []).append(res3)
 
         logger.info(">>>step finally: delete host/hypervisor from webui")
-        host_id = self.satellite_host_id(self.ssh_host(), register_config, host_name, host_uuid)
+        host_id = self.satellite_host_id(
+            self.ssh_host(), register_config, host_name, host_uuid
+        )
         if host_id is not None and host_id != "":
             self.vw_web_host_delete(host_name, host_uuid)
         self.vw_web_host_delete(host_name, host_uuid)
         self.system_unregister(self.ssh_host())
 
would reformat /tmp/lint/tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py
--- /tmp/lint/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py	2023-03-06 06:16:11.814535 +0000
@@ -2,24 +2,25 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137102')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137102")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         host_uuid = self.get_hypervisor_hostuuid()
@@ -30,54 +31,70 @@
 
         # Case Steps
         logger.info(">>>step1: run virt-who to send mappings")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: get guest_id and vw_host_uuid")
-        if 'libvirt-local' in hypervisor_type or 'vdsm' in hypervisor_type:
-            exp_list = {'hypervisor':'admin', 'guest':'admin'}
+        if "libvirt-local" in hypervisor_type or "vdsm" in hypervisor_type:
+            exp_list = {"hypervisor": "admin", "guest": "admin"}
         else:
             # vw_host_name = self.get_hostname(self.ssh_host())
             # out = self.satellite_hosts_get(self.ssh_host(), register_config, vw_host_name, "xxx")
             # vw_host_uuid = out['subscription_facet_attributes']['uuid']
             # hypervisor should be vw_host_uuid, but due to Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1455041
-            exp_list = {'hypervisor':'null', 'guest':'admin'}
+            exp_list = {"hypervisor": "null", "guest": "admin"}
 
         logger.info(">>>step3: check registered_by info for hypervisor and guest")
-        for check_type, exp in sorted(exp_list.items(), key=lambda item:item[0]):
+        for check_type, exp in sorted(exp_list.items(), key=lambda item: item[0]):
             logger.info(">>>check {0}".format(check_type))
             logger.info(">>>exp:{0}".format(exp))
             if check_type == "hypervisor":
-                output = self.satellite_hosts_get(self.ssh_host(), register_config,
-                                                  host_name, host_uuid, desc="get hypervisor info")
+                output = self.satellite_hosts_get(
+                    self.ssh_host(),
+                    register_config,
+                    host_name,
+                    host_uuid,
+                    desc="get hypervisor info",
+                )
             else:
-                output = self.satellite_hosts_get(self.ssh_host(), register_config,
-                                                  guest_name, guest_uuid, desc="get guest info")
+                output = self.satellite_hosts_get(
+                    self.ssh_host(),
+                    register_config,
+                    guest_name,
+                    guest_uuid,
+                    desc="get guest info",
+                )
             if output is not None:
                 user = output["subscription_facet_attributes"]["user"]
-                if user is not False and user is not None and 'login' in user.keys():
-                    registered_by = user['login']
+                if user is not False and user is not None and "login" in user.keys():
+                    registered_by = user["login"]
                     if registered_by == exp:
-                        logger.info("succeded to check registered_by is '{}'".format(exp))
-                        results.setdefault('step3', []).append(True)
+                        logger.info(
+                            "succeded to check registered_by is '{}'".format(exp)
+                        )
+                        results.setdefault("step3", []).append(True)
                     else:
-                        logger.error("failed to check registered_by is {0}, actually it's '{1}'" \
-                                .format(exp, registered_by))
-                        results.setdefault('step3', []).append(False)
+                        logger.error(
+                            "failed to check registered_by is {0}, actually it's '{1}'".format(
+                                exp, registered_by
+                            )
+                        )
+                        results.setdefault("step3", []).append(False)
                 else:
                     if output == exp:
-                        logger.info("succeded to check registered_by is '{}'".format(exp))
-                        results.setdefault('step3', []).append(True)
+                        logger.info(
+                            "succeded to check registered_by is '{}'".format(exp)
+                        )
+                        results.setdefault("step3", []).append(True)
             else:
                 logger.error("failed to get satellite {} info".format(check_type))
-                results.setdefault('step3', []).append(False)
+                results.setdefault("step3", []).append(False)
 
         # Case Result
         # notes = list()
         # if "libvirt-local" not in hypervisor_type and "vdsm" not in hypervisor_type:
         #     notes.append("Bug(step3): should show virt-who UUID under 'registered by' for hypervisor")
         #     notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1455041")
         # self.vw_case_result(results, notes)
         self.vw_case_result(results)
-
would reformat /tmp/lint/tier2/tc_2046_check_registered_by_item_in_satellite_webui.py
--- /tmp/lint/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py	2023-03-06 06:16:11.900474 +0000
@@ -5,61 +5,60 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137103')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137103")
+        hypervisor_type = self.get_config("hypervisor_type")
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # Case Steps
         logger.info(">>>step1: run virt-who to send mappings")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: delete virt-who host from webui")
         try:
             vw_host_name = self.get_hostname(self.ssh_host())
-            vw_host_uuid='xxx'
+            vw_host_uuid = "xxx"
             res1 = self.vw_web_host_delete(vw_host_name, vw_host_uuid)
             data, tty_output, rhsm_output = self.vw_start(exp_send=0, exp_error=True)
             res2 = self.op_normal_value(data, exp_error="1|2", exp_thread=1, exp_send=0)
-            error_msg = ["consumer no longer exists|"
-                         ".*has been deleted"]
+            error_msg = ["consumer no longer exists|" ".*has been deleted"]
             res3 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
-            results.setdefault('step2', []).append(res3)
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
+            results.setdefault("step2", []).append(res3)
         except:
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
             pass
         finally:
             logger.info(">>>step3: re-register host and run virt-who")
             self.system_unregister(self.ssh_host())
             self.system_register(self.ssh_host(), register_type, register_config)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res)
+            results.setdefault("step3", []).append(res)
 
         if "libvirt-local" not in hypervisor_type and "vdsm" not in hypervisor_type:
             logger.info(">>>step4: delete hypervisor from webui")
             host_uuid = self.get_hypervisor_hostuuid()
             host_name = self.get_hypervisor_hostname()
             self.vw_web_host_delete(host_name, host_uuid)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step3', []).append(res)
+            results.setdefault("step3", []).append(res)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py
--- /tmp/lint/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py	2023-03-06 06:16:11.949758 +0000
@@ -2,96 +2,124 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137101')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137101")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
         register_config = self.get_register_config()
-        admin_user = register_config['username']
-        admin_passwd = register_config['password']
-        server = register_config['server']
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
-        default_org = register_config['owner']
-        api = register_config['api']
+        admin_user = register_config["username"]
+        admin_passwd = register_config["password"]
+        server = register_config["server"]
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
+        default_org = register_config["owner"]
+        api = register_config["api"]
 
         # Case Steps
         logger.info(">>>step1: run virt-who to send mappings")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
-        logger.info(">>>step2: attach physical vdc for hypervisor, then check subscriptions")
-        physical_sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        physical_pool_id = physical_sku_attrs['pool_id']
+        logger.info(
+            ">>>step2: attach physical vdc for hypervisor, then check subscriptions"
+        )
+        physical_sku_attrs = self.system_sku_attr(
+            self.ssh_host(), vdc_physical_sku, "physical"
+        )
+        physical_pool_id = physical_sku_attrs["pool_id"]
         self.vw_web_attach(host_name, host_uuid, physical_pool_id)
-        virtual_sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        virtual_pool_id = virtual_sku_attrs['pool_id']
-        katello_id = self.satellite_katello_id(self.ssh_host(), register_config, virtual_pool_id)
-        default_org_id = self.satellite_org_id_get(self.ssh_host(), register_config, default_org)
+        virtual_sku_attrs = self.system_sku_attr(
+            self.ssh_guest(), vdc_virtual_sku, "virtual"
+        )
+        virtual_pool_id = virtual_sku_attrs["pool_id"]
+        katello_id = self.satellite_katello_id(
+            self.ssh_host(), register_config, virtual_pool_id
+        )
+        default_org_id = self.satellite_org_id_get(
+            self.ssh_host(), register_config, default_org
+        )
 
         name_list = []
-        if 'libvirt-local' in hypervisor_type or 'vdsm' in hypervisor_type:
-            name_list = ['{0}'.format(host_name)]
+        if "libvirt-local" in hypervisor_type or "vdsm" in hypervisor_type:
+            name_list = ["{0}".format(host_name)]
         else:
-            key1 = 'virt-who-{0}'.format(host_name)
-            key2 = 'virt-who-{0}'.format(host_uuid)
+            key1 = "virt-who-{0}".format(host_name)
+            key2 = "virt-who-{0}".format(host_uuid)
             name_list = [key1, key2, key1.lower(), key2.lower()]
-        cmd = "curl -X GET -s -k -u {0}:{1} {2}/katello/api/organizations/{3}/subscriptions/{4}" \
-                .format(admin_user, admin_passwd, api ,default_org_id, katello_id)
+        cmd = "curl -X GET -s -k -u {0}:{1} {2}/katello/api/organizations/{3}/subscriptions/{4}".format(
+            admin_user, admin_passwd, api, default_org_id, katello_id
+        )
         ret, output = self.runcmd(cmd, self.ssh_host())
         output = self.is_json(output.strip())
         if ret == 0 and output is not False and output is not None:
-            if output["type"] == "STACK_DERIVED" and output["virt_only"] is True and \
-                    any(key in output["hypervisor"]["name"] for key in name_list):
+            if (
+                output["type"] == "STACK_DERIVED"
+                and output["virt_only"] is True
+                and any(key in output["hypervisor"]["name"] for key in name_list)
+            ):
                 logger.info("succeeded to check bonus pool coming from %s" % name_list)
-                results.setdefault('step2', []).append(True)
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("failed to check bonus pool coming from %s" % name_list)
-                results.setdefault('step2', []).append(False)
-            if output["available"] == -1 and output["quantity"] == -1 and output["consumed"] == 0:
-                logger.info("succeeded to check consumed status is '0 out of Unlimitted'")
-                results.setdefault('step2', []).append(True)
+                results.setdefault("step2", []).append(False)
+            if (
+                output["available"] == -1
+                and output["quantity"] == -1
+                and output["consumed"] == 0
+            ):
+                logger.info(
+                    "succeeded to check consumed status is '0 out of Unlimitted'"
+                )
+                results.setdefault("step2", []).append(True)
             else:
                 logger.error("failed to check consumed status is '0 out of Unlimitted'")
-                results.setdefault('step2', []).append(False)
+                results.setdefault("step2", []).append(False)
         else:
             logger.error("failed to get subscritons info")
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         logger.info(">>>step3: attach bonus vdc for guest, then check subscriptions")
         self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)
         time.sleep(60)
         for i in range(3):
             ret, output = self.runcmd(cmd, self.ssh_host())
             output = self.is_json(output.strip())
             if ret == 0 and output is not False and output is not None:
-                if output["available"] == -2 or output["available"] == -1 and output["quantity"] == -1 and output["consumed"] == 1:
-                    logger.info("succeeded to check consumed status is '1 out of Unlimitted'")
-                    results.setdefault('step3', []).append(True)
+                if (
+                    output["available"] == -2
+                    or output["available"] == -1
+                    and output["quantity"] == -1
+                    and output["consumed"] == 1
+                ):
+                    logger.info(
+                        "succeeded to check consumed status is '1 out of Unlimitted'"
+                    )
+                    results.setdefault("step3", []).append(True)
                     break
                 logger.warning("webui has not been refreshed, try again after 60s...")
                 time.sleep(60)
-        if 'step3' not in results.keys():
+        if "step3" not in results.keys():
             logger.error("failed to check consumed status")
-            results.setdefault('step3', []).append(False)
+            results.setdefault("step3", []).append(False)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py
--- /tmp/lint/tier2/tc_2044_subscribe_guest_with_activation_key.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2044_subscribe_guest_with_activation_key.py	2023-03-06 06:16:11.976432 +0000
@@ -5,129 +5,152 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137100')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137100")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         register_config = self.get_register_config()
-        ssh_sat = register_config['ssh_sat']
-        default_org = register_config['owner']
-        vdc_phys = register_config['vdc']
-        vdc_virt = register_config['vdc_bonus']
-        limit_sku = register_config['limit']
+        ssh_sat = register_config["ssh_sat"]
+        default_org = register_config["owner"]
+        vdc_phys = register_config["vdc"]
+        vdc_virt = register_config["vdc_bonus"]
+        limit_sku = register_config["limit"]
         phys_vdc_sku = self.system_sku_attr(self.ssh_host(), vdc_phys, "physical")
         phys_limit_sku = self.system_sku_attr(self.ssh_host(), limit_sku, "physical")
-        phys_vdc_pool_id = phys_vdc_sku['pool_id']
-        phys_limit_pool_id = phys_limit_sku['pool_id']
-        default_org_id = self.satellite_org_id_get(ssh_sat, register_config, default_org)
+        phys_vdc_pool_id = phys_vdc_sku["pool_id"]
+        phys_limit_pool_id = phys_limit_sku["pool_id"]
+        default_org_id = self.satellite_org_id_get(
+            ssh_sat, register_config, default_org
+        )
         ak_list = {
-            'libvirt-local':    'libvirt-local_ak',
-            'libvirt-remote':   'libvirt-remote_ak',
-            'esx':              'esx_ak',
-            'hyperv':           'hyperv_ak',
-            'xen':              'xen_ak',
-            'vdsm':             'vdsm_ak',
-            'rhevm':            'rhevm_ak',
-            'kubevirt':         'kubevirt_ak',
-            'ahv':              'ahv_ak'
-            }
+            "libvirt-local": "libvirt-local_ak",
+            "libvirt-remote": "libvirt-remote_ak",
+            "esx": "esx_ak",
+            "hyperv": "hyperv_ak",
+            "xen": "xen_ak",
+            "vdsm": "vdsm_ak",
+            "rhevm": "rhevm_ak",
+            "kubevirt": "kubevirt_ak",
+            "ahv": "ahv_ak",
+        }
         ak_name = ak_list[hypervisor_type]
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
         guest_name = self.get_hostname(self.ssh_guest())
         guest_uuid = self.get_hypervisor_guestuuid()
 
         # Case Steps
         try:
-            logger.info(">>>step1: create activation key and "
-                        "register virt-who host with activation key")
+            logger.info(
+                ">>>step1: create activation key and "
+                "register virt-who host with activation key"
+            )
             self.satellite_active_key_create(
-                ssh_sat, register_config, ak_name, default_org_id)
+                ssh_sat, register_config, ak_name, default_org_id
+            )
             self.system_register_with_ak(self.ssh_host(), register_config, ak_name)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step1', []).append(res)
+            results.setdefault("step1", []).append(res)
 
-            logger.info(">>>step2: Register guest with auto-attach enabled "
-                        "withou sku in the key, "
-                        "but virt_vdc_sku is available out of the key")
+            logger.info(
+                ">>>step2: Register guest with auto-attach enabled "
+                "withou sku in the key, "
+                "but virt_vdc_sku is available out of the key"
+            )
             # guest will be auto-attached the best matched pool from all available skus
             self.system_sku_unattach(self.ssh_host())
             self.vw_web_attach(host_name, host_uuid, phys_vdc_pool_id)
             virt_vdc_sku = self.system_sku_attr(self.ssh_guest(), vdc_virt, "virtual")
-            virt_vdc_pool_id = virt_vdc_sku['pool_id']
+            virt_vdc_pool_id = virt_vdc_sku["pool_id"]
             self.system_register_with_ak(self.ssh_guest(), register_config, ak_name)
             output = self.system_sku_consumed(self.ssh_guest())
             res1 = self.vw_msg_search(output, virt_vdc_pool_id, exp_exist=True)
-            results.setdefault('step2', []).append(res1)
+            results.setdefault("step2", []).append(res1)
 
-            logger.info(">>>step3: Register guest with auto-attach enabled "
-                        "with only virtual_limit_sku in the key "
-                        "and virt_vdc_sku out of the key")
+            logger.info(
+                ">>>step3: Register guest with auto-attach enabled "
+                "with only virtual_limit_sku in the key "
+                "and virt_vdc_sku out of the key"
+            )
             # guest will be auto-attached with the best matched pool in key
             self.vw_web_attach(host_name, host_uuid, phys_limit_pool_id)
-            virt_limit_sku = self.system_sku_attr(self.ssh_guest(), limit_sku, "virtual")
-            virt_limit_pool_id = virt_limit_sku['pool_id']
+            virt_limit_sku = self.system_sku_attr(
+                self.ssh_guest(), limit_sku, "virtual"
+            )
+            virt_limit_pool_id = virt_limit_sku["pool_id"]
             limit_katello_id = self.satellite_katello_id(
-                ssh_sat, register_config, virt_limit_pool_id)
+                ssh_sat, register_config, virt_limit_pool_id
+            )
             self.satellite_active_key_attach_sku(
-                ssh_sat, register_config, ak_name, limit_katello_id, default_org_id)
+                ssh_sat, register_config, ak_name, limit_katello_id, default_org_id
+            )
             self.system_register_with_ak(self.ssh_guest(), register_config, ak_name)
             output = self.system_sku_consumed(self.ssh_guest())
             res1 = self.vw_msg_search(output, virt_limit_pool_id, exp_exist=True)
             res2 = self.vw_msg_search(output, virt_vdc_pool_id, exp_exist=False)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
-            logger.info(">>>step4: Register guest with auto-attach disabled "
-                        "with both virt_vdc_sku and virt_limit_sku in the key")
+            logger.info(
+                ">>>step4: Register guest with auto-attach disabled "
+                "with both virt_vdc_sku and virt_limit_sku in the key"
+            )
             # guest will be auto-attached with both two skus
             vdc_katello_id = self.satellite_katello_id(
-                ssh_sat, register_config, virt_vdc_pool_id)
+                ssh_sat, register_config, virt_vdc_pool_id
+            )
             self.satellite_active_key_attach_sku(
-                ssh_sat, register_config, ak_name, vdc_katello_id, default_org_id)
+                ssh_sat, register_config, ak_name, vdc_katello_id, default_org_id
+            )
             self.satellite_active_key_auto_attach_enable(
-                ssh_sat, register_config, ak_name, default_org_id, auto_attach='false')
+                ssh_sat, register_config, ak_name, default_org_id, auto_attach="false"
+            )
             self.system_register_with_ak(self.ssh_guest(), register_config, ak_name)
             output = self.system_sku_consumed(self.ssh_guest())
             res1 = self.vw_msg_search(output, virt_limit_pool_id, exp_exist=True)
             res2 = self.vw_msg_search(output, virt_vdc_pool_id, exp_exist=True)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
 
-            logger.info(">>>step5: Register guest with auto-attach disabled "
-                        "without sku in the key, "
-                        "but both virt_vdc_sku and virt_limit_sku out of key")
+            logger.info(
+                ">>>step5: Register guest with auto-attach disabled "
+                "without sku in the key, "
+                "but both virt_vdc_sku and virt_limit_sku out of key"
+            )
             # guest will not be auto-attached to any sku
             self.satellite_active_key_unattach_sku(
-                ssh_sat, register_config, ak_name, limit_katello_id, default_org_id)
+                ssh_sat, register_config, ak_name, limit_katello_id, default_org_id
+            )
             self.satellite_active_key_unattach_sku(
-                ssh_sat, register_config, ak_name, vdc_katello_id, default_org_id)
+                ssh_sat, register_config, ak_name, vdc_katello_id, default_org_id
+            )
             self.system_register_with_ak(self.ssh_guest(), register_config, ak_name)
             output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)
-            res1 = self.vw_msg_search(output, 'No consumed subscription pools')
-            results.setdefault('step5', []).append(res1)
+            res1 = self.vw_msg_search(output, "No consumed subscription pools")
+            results.setdefault("step5", []).append(res1)
 
         finally:
             logger.info(">>>Finally step: Clear environment")
             self.vw_web_host_delete(host_name, host_uuid)
             self.vw_web_host_delete(guest_name, guest_uuid)
             self.satellite_active_key_delete(
-                ssh_sat, register_config, ak_name, default_org_id)
+                ssh_sat, register_config, ak_name, default_org_id
+            )
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2044_subscribe_guest_with_activation_key.py
--- /tmp/lint/tier2/tc_2051_validate_virt_who_password_commandline.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2051_validate_virt_who_password_commandline.py	2023-03-06 06:16:12.077537 +0000
@@ -2,23 +2,26 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136708')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136708")
         self.vw_case_init()
 
         # Case Config
         results = dict()
         # Case Steps
         logger.info(">>>step1: run virt-who-password")
-        value1 = self.vw_encrypted(r'ad\"min')
-        value2 = self.vw_encrypted(r'ad\"min', "-p")
+        value1 = self.vw_encrypted(r"ad\"min")
+        value2 = self.vw_encrypted(r"ad\"min", "-p")
         value3 = self.vw_encrypted(r'"ad\"min"', "-p")
-        value4 = self.vw_encrypted(r'ad\"min', "--password")
+        value4 = self.vw_encrypted(r"ad\"min", "--password")
         value5 = self.vw_encrypted(r'"ad\"min"', "--password")
-        results.setdefault('step1', []).append(value1==value2==value3==value4==value5)
+        results.setdefault("step1", []).append(
+            value1 == value2 == value3 == value4 == value5
+        )
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2051_validate_virt_who_password_commandline.py
--- /tmp/lint/tier2/tc_2048_register_system_with_activaiton_key.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2048_register_system_with_activaiton_key.py	2023-03-06 06:16:12.090996 +0000
@@ -2,71 +2,81 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137101')
-        register_type = self.get_config('register_type')
-        if 'stage' in register_type:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-137101")
+        register_type = self.get_config("register_type")
+        if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
-        register_owner = register_config['owner']
-        active_key = 'Virtwho_AK'
+        register_owner = register_config["owner"]
+        active_key = "Virtwho_AK"
         cmd = 'subscription-manager register  --org="{0}" --activationkey="{1}"'.format(
-            register_owner, active_key)
-        msg = 'System has been registered with ID.*'
+            register_owner, active_key
+        )
+        msg = "System has been registered with ID.*"
 
         # Case Steps
         logger.info(">>>step1: register host and guest using activation key")
         for system in [self.ssh_host(), self.ssh_guest()]:
             self.system_unregister(system)
             ret, output = self.runcmd(cmd, system)
             res1 = self.vw_msg_search(output, msg, exp_exist=True)
-            results.setdefault('step1', []).append(res1)
+            results.setdefault("step1", []).append(res1)
 
         logger.info(">>>step2: check temporary sku is attached by auto in guest")
         output = self.system_sku_consumed(self.ssh_guest())
-        res1 = self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=True)
-        results.setdefault('step2', []).append(res1)
+        res1 = self.vw_msg_search(
+            output, "Subscription Type: .*Temporary", exp_exist=True
+        )
+        results.setdefault("step2", []).append(res1)
 
-        logger.info(">>>step3: start virt-who service to check temporary sku disappeared")
+        logger.info(
+            ">>>step3: start virt-who service to check temporary sku disappeared"
+        )
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         output = self.system_sku_consumed(self.ssh_guest())
-        res2 = self.vw_msg_search(output, 'Subscription Type: .*Temporary', exp_exist=False)
-        results.setdefault('step3', []).append(res1)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(
+            output, "Subscription Type: .*Temporary", exp_exist=False
+        )
+        results.setdefault("step3", []).append(res1)
+        results.setdefault("step3", []).append(res2)
 
-        logger.info(">>>step4: attach physical sku for host/hypervisor  \
-                    then register guest using activation key again")
+        logger.info(
+            ">>>step4: attach physical sku for host/hypervisor  \
+                    then register guest using activation key again"
+        )
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        pool_id = sku_attrs['pool_id']
+        pool_id = sku_attrs["pool_id"]
         self.vw_web_unattach(host_name, host_uuid)
         self.vw_web_attach(host_name, host_uuid, pool_id)
         self.system_unregister(self.ssh_guest())
         ret, output = self.runcmd(cmd, self.ssh_guest())
         res = self.vw_msg_search(output, msg, exp_exist=True)
-        results.setdefault('step4', []).append(res)
+        results.setdefault("step4", []).append(res)
 
         logger.info(">>>step5: check stable virtual sku is attached by auto in guest")
         output = self.system_sku_consumed(self.ssh_guest())
         res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step5', []).append(res)
+        results.setdefault("step5", []).append(res)
 
         # Case Result
-        self.vw_case_result(results)
\ No newline at end of file
+        self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2048_register_system_with_activaiton_key.py
--- /tmp/lint/tier2/tc_2049_validate_hostname_without_domain.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2049_validate_hostname_without_domain.py	2023-03-06 06:16:12.104387 +0000
@@ -2,65 +2,70 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136708')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type != 'esx':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136708")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config = self.get_hypervisor_config()
-        ssh_hypervisor = config['ssh_hypervisor']
+        ssh_hypervisor = config["ssh_hypervisor"]
         register_config = self.get_register_config()
-        register_type = register_config['type']
-        guest_name = config['guest_name']
+        register_type = register_config["type"]
+        guest_name = config["guest_name"]
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
-        hostname_non_domain = host_name.split('.')[0]
+        hostname_non_domain = host_name.split(".")[0]
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        self.vw_option_add('hypervisor_id', 'hostname', config_file)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_add("hypervisor_id", "hostname", config_file)
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
 
         # case steps
         try:
             logger.info(">>>step1: run virt-who for hostname without domain name")
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             esx_host = self.vcenter_host_get(cert, ssh_hypervisor, guest_name)
             self.vcenter_fqdn_set(cert, ssh_hypervisor, esx_host, hostname_non_domain)
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             res2 = self.vw_msg_search(str(data), hostname_non_domain, exp_exist=True)
             res3 = self.vw_msg_search(str(data), host_name, exp_exist=False)
-            results.setdefault('step1', []).append(res1)
-            results.setdefault('step1', []).append(res2)
-            results.setdefault('step1', []).append(res3)
+            results.setdefault("step1", []).append(res1)
+            results.setdefault("step1", []).append(res2)
+            results.setdefault("step1", []).append(res3)
         except:
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
             pass
         finally:
             logger.info(">>>step2: start to recovery hostname")
             if "satellite" in register_type:
                 self.vw_web_host_delete(hostname_non_domain, host_uuid)
             if "stage" in register_type:
                 self.stage_consumer_clean(self.ssh_host(), register_config)
-            cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+            cert = self.vcenter_cert(
+                config["server"], config["username"], config["password"]
+            )
             esx_host = self.vcenter_host_get(cert, ssh_hypervisor, guest_name)
             self.vcenter_fqdn_set(cert, ssh_hypervisor, esx_host, host_name)
             if self.get_hypervisor_hostname() == host_name:
-                logger.info('Succeeded to change back hostname')
-                results.setdefault('step2', []).append(True)
+                logger.info("Succeeded to change back hostname")
+                results.setdefault("step2", []).append(True)
             else:
-                logger.error('Failed to change back hostname')
-                results.setdefault('step2', []).append(False)
+                logger.error("Failed to change back hostname")
+                results.setdefault("step2", []).append(False)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2049_validate_hostname_without_domain.py
--- /tmp/lint/tier2/tc_2052_validate_hypervisors_connection.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2052_validate_hypervisors_connection.py	2023-03-06 06:16:12.250853 +0000
@@ -2,41 +2,46 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136725")
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         if hypervisor_type in ("libvirt-local", "vdsm", "xen"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
         # self.vw_option_enable('debug', '/etc/virt-who.conf')
         # self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
-        self.vw_option_enable('interval', '/etc/virt-who.conf')
-        self.vw_option_update_value('interval', '60', '/etc/virt-who.conf')
+        self.vw_option_enable("interval", "/etc/virt-who.conf")
+        self.vw_option_update_value("interval", "60", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: virt-who host can access hyperivosr by default")
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "restart")
         time.sleep(60)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
         send_num = self.vw_callback_send_num()
-        logger.info("error_num: {0}, thread_num: {1}, send_num: {2}".format(error_num, thread_num, send_num))
-        results.setdefault('step1', []).append(error_num == 0)
-        results.setdefault('step1', []).append(thread_num == 1)
-        results.setdefault('step1', []).append(send_num == 1)
+        logger.info(
+            "error_num: {0}, thread_num: {1}, send_num: {2}".format(
+                error_num, thread_num, send_num
+            )
+        )
+        results.setdefault("step1", []).append(error_num == 0)
+        results.setdefault("step1", []).append(thread_num == 1)
+        results.setdefault("step1", []).append(send_num == 1)
 
         try:
             logger.info(">>>step2: disconnect virt-who host from hyperivosr")
             self.hypervisor_firewall_setup("off")
             start = time.time()
@@ -44,44 +49,62 @@
                 time.sleep(30)
                 end = time.time()
                 spend_time = int(end - start)
                 error_num, error_list = self.vw_callback_error_num()
                 thread_num = self.vw_callback_thread_num()
-                logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
-                ret, rhsm_output = self.runcmd("cat /var/log/rhsm/rhsm.log", self.ssh_host(), desc="check rhsm.log")
+                logger.info(
+                    "error_num: {0}, thread_num: {1}".format(error_num, thread_num)
+                )
+                ret, rhsm_output = self.runcmd(
+                    "cat /var/log/rhsm/rhsm.log", self.ssh_host(), desc="check rhsm.log"
+                )
                 if thread_num == 0:
                     logger.info("virt-who is terminated by no thread")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
                     break
-                if error_num != 0 or "timed out" in rhsm_output or "timeout" in rhsm_output:
+                if (
+                    error_num != 0
+                    or "timed out" in rhsm_output
+                    or "timeout" in rhsm_output
+                ):
                     logger.info("virt-who is disconnected from hyperivosr by timeout")
-                    results.setdefault('step2', []).append(True)
+                    results.setdefault("step2", []).append(True)
                     break
                 if spend_time >= 900:
                     logger.info("virt-who is timeout(900s)")
-                    results.setdefault('step2', []).append(False)
+                    results.setdefault("step2", []).append(False)
                     break
         except:
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
             pass
         finally:
             logger.info(">>>step3: connect virt-who host from hyperivosr again")
             self.hypervisor_firewall_setup("on")
             time.sleep(60)
-            ret, output = self.runcmd("rm -rf /var/log/rhsm/*", self.ssh_host(), desc="rhsm.log clean")
+            ret, output = self.runcmd(
+                "rm -rf /var/log/rhsm/*", self.ssh_host(), desc="rhsm.log clean"
+            )
             time.sleep(60)
-            ret, rhsm_output = self.runcmd("cat /var/log/rhsm/rhsm.log", self.ssh_host(), desc="check rhsm.log")
+            ret, rhsm_output = self.runcmd(
+                "cat /var/log/rhsm/rhsm.log", self.ssh_host(), desc="check rhsm.log"
+            )
             error_num, error_list = self.vw_callback_error_num()
             thread_num = self.vw_callback_thread_num()
             logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
-            if thread_num == 1 and error_num == 0 and "timed out" not in rhsm_output and "timeout" not in rhsm_output:
+            if (
+                thread_num == 1
+                and error_num == 0
+                and "timed out" not in rhsm_output
+                and "timeout" not in rhsm_output
+            ):
                 logger.info("virt-who is connected to hyperivosr normally")
-                results.setdefault('step3', []).append(True)
+                results.setdefault("step3", []).append(True)
             else:
-                results.setdefault('step3', []).append(False)
+                results.setdefault("step3", []).append(False)
 
         # case result
         notes = list()
-        notes.append("(step2) No any response after xen hypervisor lost its connection with virt-who host")
+        notes.append(
+            "(step2) No any response after xen hypervisor lost its connection with virt-who host"
+        )
         notes.append("Bug: https://bugzilla.redhat.com/show_bug.cgi?id=2065097")
         self.vw_case_result(results, notes)
-
would reformat /tmp/lint/tier2/tc_2052_validate_hypervisors_connection.py
--- /tmp/lint/tier2/tc_2054_validate_trigger_event_with_different_interval.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2054_validate_trigger_event_with_different_interval.py	2023-03-06 06:16:12.263645 +0000
@@ -2,44 +2,59 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136726")
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "1.31.0":
             self.vw_case_skip("virt-who version")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type != 'esx':
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         virt_config = "/etc/sysconfig/virt-who"
-        self.vw_option_enable("VIRTWHO_DEBUG",virt_config)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', virt_config)
+        self.vw_option_enable("VIRTWHO_DEBUG", virt_config)
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", virt_config)
         self.vw_option_enable("VIRTWHO_INTERVAL", virt_config)
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         try:
-            logger.info(">>>step1: run virt-who with event(guest_suspend) for interval 60")
-            self.vw_option_update_value("VIRTWHO_INTERVAL", '60', virt_config)
-            data, tty_output, rhsm_output = self.vw_start(exp_send=2, event="guest_suspend")
-            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=2, exp_interval=60)
-            results.setdefault('step1', []).append(res1)
+            logger.info(
+                ">>>step1: run virt-who with event(guest_suspend) for interval 60"
+            )
+            self.vw_option_update_value("VIRTWHO_INTERVAL", "60", virt_config)
+            data, tty_output, rhsm_output = self.vw_start(
+                exp_send=2, event="guest_suspend"
+            )
+            res1 = self.op_normal_value(
+                data, exp_error=0, exp_thread=1, exp_send=2, exp_interval=60
+            )
+            results.setdefault("step1", []).append(res1)
         except:
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
             pass
         finally:
-            logger.info(">>>step2: run virt-who with event(guest_resume) for interval 120")
-            self.vw_option_update_value("VIRTWHO_INTERVAL", '120', filename="/etc/sysconfig/virt-who")
-            data, tty_output, rhsm_output = self.vw_start(exp_send=2, event="guest_resume")
-            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=2, exp_interval=120)
-            results.setdefault('step2', []).append(res1)
+            logger.info(
+                ">>>step2: run virt-who with event(guest_resume) for interval 120"
+            )
+            self.vw_option_update_value(
+                "VIRTWHO_INTERVAL", "120", filename="/etc/sysconfig/virt-who"
+            )
+            data, tty_output, rhsm_output = self.vw_start(
+                exp_send=2, event="guest_resume"
+            )
+            res1 = self.op_normal_value(
+                data, exp_error=0, exp_thread=1, exp_send=2, exp_interval=120
+            )
+            results.setdefault("step2", []).append(res1)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2054_validate_trigger_event_with_different_interval.py
--- /tmp/lint/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py	2023-03-06 06:16:12.292460 +0000
@@ -2,44 +2,47 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136781")
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         if "rhevm" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
         config = self.get_hypervisor_config()
-        hypervisor_server = config['server']
+        hypervisor_server = config["server"]
 
         # case steps
         logger.info(">>>step1: run virt-who for rhevm with ovirt-engine")
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: run virt-who for rhevm with ovirt-engine/")
-        self.vw_option_update_value("server", hypervisor_server+'/', config_file)
+        self.vw_option_update_value("server", hypervisor_server + "/", config_file)
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res)
+        results.setdefault("step2", []).append(res)
 
         logger.info(">>>step3: run virt-who for rhevm without /ovirt-engine")
-        self.vw_option_update_value("server", hypervisor_server.rstrip('/ovirt-engine'), config_file)
+        self.vw_option_update_value(
+            "server", hypervisor_server.rstrip("/ovirt-engine"), config_file
+        )
         data, tty_output, rhsm_output = self.vw_start()
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res)
+        results.setdefault("step3", []).append(res)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py
--- /tmp/lint/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py	2023-03-06 06:16:12.405067 +0000
@@ -2,119 +2,136 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136733")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('kubevirt', 'ahv'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("kubevirt", "ahv"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         register_config = self.get_register_config()
-        vdc_physical_sku = register_config['vdc']
-        vdc_virtual_sku = register_config['vdc_bonus']
+        vdc_physical_sku = register_config["vdc"]
+        vdc_virtual_sku = register_config["vdc_bonus"]
         host_name = self.get_hypervisor_hostname()
         host_uuid = self.get_hypervisor_hostuuid()
         guest_uuid = self.get_hypervisor_guestuuid()
-        owner = register_config['owner']
+        owner = register_config["owner"]
 
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
-        self.vw_option_enable('interval', '/etc/virt-who.conf')
-        self.vw_option_update_value('interval', '60', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
+        self.vw_option_enable("interval", "/etc/virt-who.conf")
+        self.vw_option_update_value("interval", "60", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: run virt-who and attach VDC for host/guest")
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
         sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, "physical")
-        self.vw_web_attach(host_name, host_uuid, sku_attrs['pool_id'])
+        self.vw_web_attach(host_name, host_uuid, sku_attrs["pool_id"])
         sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, "virtual")
-        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])
+        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs["pool_id"])
         output = self.system_sku_consumed(self.ssh_guest())
         res2 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
-        results.setdefault('step1', []).append(res1)
-        results.setdefault('step1', []).append(res2)
+        results.setdefault("step1", []).append(res1)
+        results.setdefault("step1", []).append(res2)
 
         try:
             logger.info(">>>step2: suspend guest, and then restart virt-who")
             self.hypervisor_guest_suspend()
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             if hypervisor_type in ("libvirt-remote", "libvirt-local", "hyperv", "esx"):
                 res2 = self.validate_guest_state(data, owner, guest_uuid, exp_state=3)
             else:
-                res2 = self.validate_guest_state(data, owner, guest_uuid, exp_state=False)
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+                res2 = self.validate_guest_state(
+                    data, owner, guest_uuid, exp_state=False
+                )
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
         except:
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
             pass
         finally:
             logger.info(">>>step3: resume guest, and then restart virt-who")
             self.hypervisor_guest_resume()
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             output = self.system_sku_consumed(self.ssh_guest())
             res2 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
             res3 = self.validate_guest_state(data, owner, guest_uuid, exp_state=1)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
-            results.setdefault('step3', []).append(res3)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
+            results.setdefault("step3", []).append(res3)
 
         try:
             logger.info(">>>step4: stop guest, and then restart virt-who")
-            ret, output = self.runcmd("sync;sync;sync", self.ssh_guest(), desc="sync data")
+            ret, output = self.runcmd(
+                "sync;sync;sync", self.ssh_guest(), desc="sync data"
+            )
             self.hypervisor_guest_stop()
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            if hypervisor_type in ("libvirt-remote", "libvirt-local",  "hyperv", "esx"):
-                res2 = self.validate_guest_state(data, owner, guest_uuid, exp_state="3|4|5")
+            if hypervisor_type in ("libvirt-remote", "libvirt-local", "hyperv", "esx"):
+                res2 = self.validate_guest_state(
+                    data, owner, guest_uuid, exp_state="3|4|5"
+                )
             else:
-                res2 = self.validate_guest_state(data, owner, guest_uuid, exp_state=False)
-            results.setdefault('step4', []).append(res1)
-            results.setdefault('step4', []).append(res2)
+                res2 = self.validate_guest_state(
+                    data, owner, guest_uuid, exp_state=False
+                )
+            results.setdefault("step4", []).append(res1)
+            results.setdefault("step4", []).append(res2)
         except:
-            results.setdefault('step4', []).append(False)
+            results.setdefault("step4", []).append(False)
             pass
         finally:
             logger.info(">>>step5: start guest, and then restart virt-who")
             self.hypervisor_guest_start()
             data, tty_output, rhsm_output = self.vw_start()
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             output = self.system_sku_consumed(self.ssh_guest())
             res2 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)
             res3 = self.validate_guest_state(data, owner, guest_uuid, exp_state=1)
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
-            results.setdefault('step5', []).append(res3)
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
+            results.setdefault("step5", []).append(res3)
 
         # case result
         self.vw_case_result(results)
 
     def validate_guest_state(self, data, owner, guest_uuid, exp_state):
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         if exp_state is False:
-            if hypervisor_type in ('libvirt-local', 'vdsm'):
+            if hypervisor_type in ("libvirt-local", "vdsm"):
                 state = guest_uuid in data.keys()
             else:
                 state = guest_uuid in data[owner].keys()
         else:
-            if hypervisor_type in ('libvirt-local', 'vdsm'):
-                state = data[guest_uuid]['state']
+            if hypervisor_type in ("libvirt-local", "vdsm"):
+                state = data[guest_uuid]["state"]
             else:
-                state = data[owner][guest_uuid]['state']
+                state = data[owner][guest_uuid]["state"]
         if str(state) in str(exp_state):
-            logger.info("Expected guest state({0}) is matched({1}) for {2}".format(exp_state, state, hypervisor_type))
+            logger.info(
+                "Expected guest state({0}) is matched({1}) for {2}".format(
+                    exp_state, state, hypervisor_type
+                )
+            )
             return True
         else:
-            logger.error("Expected guest state({0}) is not matched({1}) for {2}".format(exp_state, state, hypervisor_type))
+            logger.error(
+                "Expected guest state({0}) is not matched({1}) for {2}".format(
+                    exp_state, state, hypervisor_type
+                )
+            )
             return False
would reformat /tmp/lint/tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py
--- /tmp/lint/tier2/tc_2057_validate_subscription_register_clean_together.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2057_validate_subscription_register_clean_together.py	2023-03-06 06:16:12.461799 +0000
@@ -1,67 +1,68 @@
 # coding:utf-8
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
+
 
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136773")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
         register_config = self.get_register_config()
-        register_type = register_config['type']
+        register_type = register_config["type"]
 
         # case steps
         logger.info(">>>step1: start virt-who by run_service")
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "restart")
         time.sleep(30)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
-        logger.info("error_num: {0}, thread_num: {1}" .format(error_num, thread_num))
-        results.setdefault('step1', []).append(error_num == 0)
-        results.setdefault('step1', []).append(thread_num == 1)
+        logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
+        results.setdefault("step1", []).append(error_num == 0)
+        results.setdefault("step1", []).append(thread_num == 1)
 
         logger.info(">>>step2: unregister, and the clean")
         cmd1 = "subscription-manager unregister"
         cmd2 = "subscription-manager clean"
         ret, output = self.runcmd(cmd1, self.ssh_host(), desc="unregister")
         time.sleep(15)
         ret, output = self.runcmd(cmd2, self.ssh_host(), desc="clean")
         time.sleep(30)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
-        logger.info("error_num: {0}, thread_num: {1}" .format(error_num, thread_num))
-        results.setdefault('step2', []).append(thread_num == 1)
+        logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
+        results.setdefault("step2", []).append(thread_num == 1)
 
         logger.info(">>>step3: register, start virt-who")
         self.system_register(self.ssh_host(), register_type, register_config)
         self.vw_thread_clean()
         ret, output = self.run_service(self.ssh_host(), "virt-who", "restart")
         time.sleep(30)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
-        logger.info("error_num: {0}, thread_num: {1}" .format(error_num, thread_num))
-        results.setdefault('step3', []).append(error_num == 0)
-        results.setdefault('step3', []).append(thread_num == 1)
+        logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
+        results.setdefault("step3", []).append(error_num == 0)
+        results.setdefault("step3", []).append(thread_num == 1)
 
         logger.info(">>>step4: unregister and clean together")
         cmd1 = "subscription-manager unregister; subscription-manager clean"
         ret, output = self.runcmd(cmd1, self.ssh_host(), desc="unregister and clean")
         time.sleep(30)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
-        logger.info("error_num: {0}, thread_num: {1}" .format(error_num, thread_num))
-        results.setdefault('step4', []).append(thread_num == 1)
+        logger.info("error_num: {0}, thread_num: {1}".format(error_num, thread_num))
+        results.setdefault("step4", []).append(thread_num == 1)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2057_validate_subscription_register_clean_together.py
--- /tmp/lint/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py	2023-03-06 06:16:12.539538 +0000
@@ -5,48 +5,50 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175019')
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-175019")
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
         option = "hypervisor_id"
         # bz1751603, only print war_msg for rhel8 using python3
         war_msg = "option '{0}' in section .* already exists".format(option)
 
         # Case Steps
-        logger.info(">>>step1: run virt-who with hypervisor_id=uuid "
-                    "and hypervisor_id=hostname together")
-        self.vw_option_add(option, 'uuid', config_file)
-        self.vw_option_add(option, 'hostname', config_file)
+        logger.info(
+            ">>>step1: run virt-who with hypervisor_id=uuid "
+            "and hypervisor_id=hostname together"
+        )
+        self.vw_option_add(option, "uuid", config_file)
+        self.vw_option_add(option, "hostname", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
         if "RHEL-8" in compose_id:
             res2 = self.vw_msg_search(rhsm_output, war_msg)
-            results.setdefault('step1', []).append(res2)
+            results.setdefault("step1", []).append(res2)
 
         logger.info(">>>step2: add another hypervisor_id=xxx")
         # if redundant options are configured, virt-who uses the last one
-        self.vw_option_add(option, 'xxx', config_file)
+        self.vw_option_add(option, "xxx", config_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-        res1 = self.op_normal_value(data, exp_error='nz', exp_thread=0, exp_send=0)
-        results.setdefault('step2', []).append(res1)
+        res1 = self.op_normal_value(data, exp_error="nz", exp_thread=0, exp_send=0)
+        results.setdefault("step2", []).append(res1)
         if "RHEL-8" in compose_id:
             res2 = self.vw_msg_search(rhsm_output, war_msg)
-            results.setdefault('step2', []).append(res2)
+            results.setdefault("step2", []).append(res2)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py
--- /tmp/lint/tier2/tc_2056_validate_non_root_to_run_virtwho.py	2023-03-06 05:02:18.596378 +0000
+++ /tmp/lint/tier2/tc_2056_validate_non_root_to_run_virtwho.py	2023-03-06 06:16:12.539689 +0000
@@ -2,55 +2,60 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-136771")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type not in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type not in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         self.vw_etc_d_mode_create(config_name, config_file)
-        new_user ="tester"
+        new_user = "tester"
         new_passwd = "redhat"
 
         # case steps
         logger.info(">>>step1: create tester account")
-        cmd = "useradd {}" .format(new_user)
+        cmd = "useradd {}".format(new_user)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="useradd account")
-        cmd = r'echo -e "{0}:{1}" | chpasswd' .format(new_user, new_passwd)
+        cmd = r'echo -e "{0}:{1}" | chpasswd'.format(new_user, new_passwd)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="change password")
-        host_ip = self.ssh_host()['host']
+        host_ip = self.ssh_host()["host"]
         new_ssh = {"host": host_ip, "username": new_user, "password": new_passwd}
         ret, output = self.runcmd("rpm -qa kernel", new_ssh, desc="ssh connect check")
         if ret == 0 and "kernel" in output:
             logger.info("Succeeded to create tester account")
-            results.setdefault('step1', []).append(True)
+            results.setdefault("step1", []).append(True)
         else:
             logger.error("Failed to create tester account")
-            results.setdefault('step1', []).append(False)
+            results.setdefault("step1", []).append(False)
 
         logger.info(">>>step2: run virt-who service by tester account")
         self.vw_thread_clean()
         attrs = ["Password:|redhat"]
         ret, output = self.run_expect(new_ssh, "/sbin/service virt-who restart", attrs)
         time.sleep(60)
         error_num, error_list = self.vw_callback_error_num()
         thread_num = self.vw_callback_thread_num()
         send_num = self.vw_callback_send_num()
-        logger.info("error_num: {0}, thread_num: {1}, send_num: {2}" .format(error_num, thread_num, send_num))
-        results.setdefault('step2', []).append(error_num==0)
-        results.setdefault('step2', []).append(thread_num==1)
-        results.setdefault('step2', []).append(send_num==1)
+        logger.info(
+            "error_num: {0}, thread_num: {1}, send_num: {2}".format(
+                error_num, thread_num, send_num
+            )
+        )
+        results.setdefault("step2", []).append(error_num == 0)
+        results.setdefault("step2", []).append(thread_num == 1)
+        results.setdefault("step2", []).append(send_num == 1)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2056_validate_non_root_to_run_virtwho.py
--- /tmp/lint/tier2/tc_2058_post_large_json_to_rhsm.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2058_post_large_json_to_rhsm.py	2023-03-06 06:16:12.569269 +0000
@@ -2,73 +2,83 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
         self.vw_case_info(os.path.basename(__file__), case_id="RHEL-171258")
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if 'esx' not in hypervisor_type:
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if "esx" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
-        if 'satellite' not in register_type:
+        if "satellite" not in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # case config
         results = dict()
         register_config = self.get_register_config()
-        register_server = register_config['server']
-        register_username = register_config['username']
-        register_password = register_config['password']
+        register_server = register_config["server"]
+        register_username = register_config["username"]
+        register_password = register_config["password"]
 
         # case steps
         logger.info(">>>step1: create json data")
         json_file = "/root/test.json"
         json_data = self.vw_gen_json(hypervisors=100, guests=30)
-        with open(json_file, 'w') as f:
+        with open(json_file, "w") as f:
             json.dump(json_data, f)
         self.paramiko_putfile(self.ssh_host(), json_file, json_file)
 
         logger.info(">>>step2: post json data")
-        curl_header = '-H "accept:application/json,version=2" -H "content-type:application/json"'
-        curl_cert = '--cert /etc/pki/consumer/cert.pem --key /etc/pki/consumer/key.pem'
+        curl_header = (
+            '-H "accept:application/json,version=2" -H "content-type:application/json"'
+        )
+        curl_cert = "--cert /etc/pki/consumer/cert.pem --key /etc/pki/consumer/key.pem"
         curl_json = '-d @"{0}"'.format(json_file)
-        curl_host = 'https://{0}/rhsm/hypervisors'.format(register_server)
-        cmd = "curl -X POST -s -k {0} {1} {2} {3}".format(curl_header, curl_cert, curl_json, curl_host)
+        curl_host = "https://{0}/rhsm/hypervisors".format(register_server)
+        cmd = "curl -X POST -s -k {0} {1} {2} {3}".format(
+            curl_header, curl_cert, curl_json, curl_host
+        )
         ret, output = self.runcmd(cmd, self.ssh_host())
         if ret == 0 and "error" not in output:
             logger.info("Succeeded to 600 hypervisors and 18000 guests to satellite")
-            results.setdefault('step2', []).append(True)
+            results.setdefault("step2", []).append(True)
         elif "foreman_tasks_sync_task_timeout" in output:
-            task_id = re.findall(r'waiting for task (.*?) to finish exceeded', output)[-1]
-            logger.info('task id: {}'.format(task_id))
+            task_id = re.findall(r"waiting for task (.*?) to finish exceeded", output)[
+                -1
+            ]
+            logger.info("task id: {}".format(task_id))
             if task_id:
                 cmd = "curl -X GET -s -k -u {0}:{1} https://{2}/foreman_tasks/api/tasks/{3}".format(
-                        register_username, register_password, register_server, task_id) 
-                start=time.time()
+                    register_username, register_password, register_server, task_id
+                )
+                start = time.time()
                 while True:
                     ret, output = self.runcmd(cmd, self.ssh_host())
                     time.sleep(30)
-                    end=time.time()
-                    spend_time = int(end-start)
+                    end = time.time()
+                    spend_time = int(end - start)
                     data = self.is_json(output.strip())
-                    logger.info('task state: {}'.format(data['state']))
-                    logger.info('task result: {}'.format(data['result']))
+                    logger.info("task state: {}".format(data["state"]))
+                    logger.info("task result: {}".format(data["result"]))
                     if spend_time >= 900:
-                        results.setdefault('step2', []).append(False)
+                        results.setdefault("step2", []).append(False)
                         logger.info("Post timeout(900s)")
                         break
-                    if data['state'] == 'stopped':
-                        logger.info('task started_at: {}'.format(data['started_at']))
-                        logger.info('task ended_at: {}'.format(data['ended_at']))
-                        logger.info("Succeeded to 600 hypervisors and 18000 guests to satellite")
-                        results.setdefault('step2', []).append(True)
+                    if data["state"] == "stopped":
+                        logger.info("task started_at: {}".format(data["started_at"]))
+                        logger.info("task ended_at: {}".format(data["ended_at"]))
+                        logger.info(
+                            "Succeeded to 600 hypervisors and 18000 guests to satellite"
+                        )
+                        results.setdefault("step2", []).append(True)
                         break
         else:
             logger.warning("Failed to post json to satellite")
             logger.warning(output)
-            results.setdefault('step2', []).append(False)
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2058_post_large_json_to_rhsm.py
--- /tmp/lint/tier2/tc_2060_check_commented_out_line_with_tab_space.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2060_check_commented_out_line_with_tab_space.py	2023-03-06 06:16:12.660868 +0000
@@ -5,54 +5,56 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175032')
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] < '0.25.7':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-175032")
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] < "0.25.7":
             self.vw_case_skip("virt-who version")
-        hypervisor_type = self.get_config('hypervisor_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        hypervisor_type = self.get_config("hypervisor_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        compose_id = self.get_config('rhel_compose')
+        compose_id = self.get_config("rhel_compose")
 
         # Case Steps
         logger.info(">>>step1: run virt-who with all good configurations")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
         logger.info(">>>step2: add useless line with tab spaces after type=")
         cmd = "sed -i '/^type=/a \\\txxx=xxx' {0}".format(config_file)
         ret, output = self.runcmd(cmd, self.ssh_host(), desc="add new line with tab")
         data, tty_output, rhsm_output = self.vw_start(exp_send=0)
         msg = "virt-who can't be started"
         res1 = self.op_normal_value(data, exp_error="1|2", exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, msg)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: comment out the useless line")
         cmd = 'sed -i "s/xxx/#xxx/" {0}'.format(config_file)
         ret, output = self.runcmd(cmd, self.ssh_host())
         if "RHEL-7" in compose_id:
-            war_msg = "A line continuation (line starts with space) that is commented " \
-                      "out was detected in file"
+            war_msg = (
+                "A line continuation (line starts with space) that is commented "
+                "out was detected in file"
+            )
             data, tty_output, rhsm_output = self.vw_start(exp_send=0)
             res1 = self.op_normal_value(data, exp_error=1, exp_thread=0, exp_send=0)
         else:
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step3', []).append(res1)
+        results.setdefault("step3", []).append(res1)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2060_check_commented_out_line_with_tab_space.py
--- /tmp/lint/tier2/tc_2061_check_fake_mode_is_hypervisor_option.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2061_check_fake_mode_is_hypervisor_option.py	2023-03-06 06:16:12.755424 +0000
@@ -5,19 +5,19 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175058')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-175058")
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         json_file = "/tmp/fake.json"
         conf_file = "/etc/virt-who.d/fake.conf"
 
         # case steps
         logger.info(">>>step1: create json file with bad is_hypervisor")
@@ -32,29 +32,31 @@
         logger.info(">>>step2: run virt-who with fake conf")
         error_msg = "Fake virt file.*is not properly formed"
         data, tty_output, rhsm_output = self.vw_start(exp_send=0)
         res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
         res2 = self.vw_msg_search(rhsm_output, error_msg)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         logger.info(">>>step3: disabel is_hypervisor option")
-        war_msg = 'Required option: "is_hypervisor" is missing in: ' \
-                  '"fake" using default "True"'
-        self.vw_option_disable('is_hypervisor', conf_file)
+        war_msg = (
+            'Required option: "is_hypervisor" is missing in: '
+            '"fake" using default "True"'
+        )
+        self.vw_option_disable("is_hypervisor", conf_file)
         if hypervisor_type in ("libvirt-local", "vdsm"):
             data, tty_output, rhsm_output = self.vw_start(exp_send=0)
             res1 = self.op_normal_value(data, exp_error=2, exp_thread=0, exp_send=0)
             res2 = self.vw_msg_search(rhsm_output, error_msg)
             res3 = self.vw_msg_search(rhsm_output, war_msg)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
-            results.setdefault('step3', []).append(res3)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
+            results.setdefault("step3", []).append(res3)
         else:
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
             res2 = self.vw_msg_search(rhsm_output, war_msg)
-            results.setdefault('step3', []).append(res1)
-            results.setdefault('step3', []).append(res2)
+            results.setdefault("step3", []).append(res1)
+            results.setdefault("step3", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2061_check_fake_mode_is_hypervisor_option.py
--- /tmp/lint/tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py	2023-03-06 06:16:12.757317 +0000
@@ -2,51 +2,58 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195890')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-195890")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-9" in compose_id:
             self.vw_case_skip("RHEL-9")
         self.vw_case_init()
 
         # case config
         results = dict()
         sysconf_file = "/etc/sysconfig/virt-who"
         config_file = "/etc/virt-who.conf"
-        self.vw_option_enable('[global]', config_file)
-        self.vw_option_enable('debug', config_file)
-        self.vw_option_update_value('debug', 'True', config_file)
-        self.vw_etc_d_mode_create('virtwho-config', '/etc/virt-who.d/virtwho-config.conf')
+        self.vw_option_enable("[global]", config_file)
+        self.vw_option_enable("debug", config_file)
+        self.vw_option_update_value("debug", "True", config_file)
+        self.vw_etc_d_mode_create(
+            "virtwho-config", "/etc/virt-who.d/virtwho-config.conf"
+        )
 
         # case steps
         logger.info(">>>step1: check the prompt in /etc/sysconfig/virt-who")
-        cmd = 'cat {}'.format(sysconf_file)
-        ret, output = self.runcmd(cmd,self.ssh_host())
-        msg = 'The use of this file is deprecated and will be ignored in the next major'
+        cmd = "cat {}".format(sysconf_file)
+        ret, output = self.runcmd(cmd, self.ssh_host())
+        msg = "The use of this file is deprecated and will be ignored in the next major"
         res1 = self.vw_msg_search(output, msg)
-        results.setdefault('step1', []).append(res1)
+        results.setdefault("step1", []).append(res1)
 
         logger.info(">>>step2: check the prompt in /var/log/rhsm.log")
         data, tty_output, rhsm_output = self.vw_start()
         res2 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res2)
-        msg2 ='The use of environment variables and the use of the sysconfig file ' \
-              'to configure virt-who are deprecated. ' \
-              'Their use will be ignored in the next major release'
+        results.setdefault("step1", []).append(res2)
+        msg2 = (
+            "The use of environment variables and the use of the sysconfig file "
+            "to configure virt-who are deprecated. "
+            "Their use will be ignored in the next major release"
+        )
         res3 = self.vw_msg_search(rhsm_output, msg2)
-        results.setdefault('step2', []).append(res3)
+        results.setdefault("step2", []).append(res3)
 
         logger.info(">>>step3: check the prompt in man virt-who")
-        ret, output = self.runcmd("man virt-who", self.ssh_host(), desc="run man virt-who")
-        msg3 = 'Their use is deprecated'
-        msg4 = 'and will be ignored in the next major release'
+        ret, output = self.runcmd(
+            "man virt-who", self.ssh_host(), desc="run man virt-who"
+        )
+        msg3 = "Their use is deprecated"
+        msg4 = "and will be ignored in the next major release"
         res4 = self.vw_msg_search(output, msg3)
         res5 = self.vw_msg_search(output, msg4)
-        results.setdefault('step3', []).append(res4)
-        results.setdefault('step3', []).append(res5)
+        results.setdefault("step3", []).append(res4)
+        results.setdefault("step3", []).append(res5)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py
--- /tmp/lint/tier2/tc_2063_check_hypervisors_fqdn.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2063_check_hypervisors_fqdn.py	2023-03-06 06:16:12.840624 +0000
@@ -5,28 +5,28 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-188359')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if hypervisor_type in ('libvirt-local', 'vdsm'):
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-188359")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_case_skip(hypervisor_type)
         if "stage" in register_type:
             self.vw_case_skip(register_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         register_config = self.get_register_config()
-        server = register_config['server']
-        ssh_user = register_config['ssh_user']
-        ssh_passwd = register_config['ssh_passwd']
+        server = register_config["server"]
+        ssh_user = register_config["ssh_user"]
+        ssh_passwd = register_config["ssh_passwd"]
         ssh_register = {"host": server, "username": ssh_user, "password": ssh_passwd}
-        admin_user = register_config['username']
-        admin_passwd = register_config['password']
+        admin_user = register_config["username"]
+        admin_passwd = register_config["password"]
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
         self.vw_option_add("hypervisor_id", "hostname", config_file)
         json_file = "/tmp/fake.json"
@@ -41,32 +41,36 @@
         self.vw_fake_conf_create(conf_file, json_file, True)
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step2', []).append(res1)
+        results.setdefault("step2", []).append(res1)
 
         logger.info(">>>step3: use hammer command to check hypervisor's fqdn")
-        cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(admin_user, admin_passwd)
+        cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(
+            admin_user, admin_passwd
+        )
         _, result = self.runcmd(cmd, ssh_register)
         logger.info(result)
-        res2 = self.vw_msg_search(result, "virt-who-"+host_name)
-        results.setdefault('step3', []).append(res2)
+        res2 = self.vw_msg_search(result, "virt-who-" + host_name)
+        results.setdefault("step3", []).append(res2)
 
         logger.info(">>>step4: run virt-who with the new hypervisor's fqdn")
         new_name = "new" + str(random.randint(1, 10000)) + ".rhts.eng.pek2.redhat.com"
         self.vw_fake_json_update(host_name, new_name, json_file)
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res3 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step4', []).append(res3)
+        results.setdefault("step4", []).append(res3)
 
         logger.info(">>>step5: use hammer command to check the new hypervisor's fqdn")
-        cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(admin_user, admin_passwd)
+        cmd = "hammer -u {0} -p {1} host list --search 'name ~ virt-who*'".format(
+            admin_user, admin_passwd
+        )
         _, result = self.runcmd(cmd, ssh_register)
         logger.info(result)
-        res4 = self.vw_msg_search(result, "virt-who-"+new_name)
-        res5 = self.vw_msg_search(result, "virt-who-"+host_name, False)
-        results.setdefault('step5', []).append(res4)
-        results.setdefault('step5', []).append(res5)
+        res4 = self.vw_msg_search(result, "virt-who-" + new_name)
+        res5 = self.vw_msg_search(result, "virt-who-" + host_name, False)
+        results.setdefault("step5", []).append(res4)
+        results.setdefault("step5", []).append(res5)
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2063_check_hypervisors_fqdn.py
--- /tmp/lint/tier2/tc_2067_validate_uniform_mapping_format.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2067_validate_uniform_mapping_format.py	2023-03-06 06:16:12.841142 +0000
@@ -5,38 +5,40 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198374')
-        compose_id = self.get_config('rhel_compose')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-198374")
+        compose_id = self.get_config("rhel_compose")
         if "RHEL-9" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
-        hypervisor_type = self.get_config('hypervisor_type')
+        hypervisor_type = self.get_config("hypervisor_type")
         json_file = "/tmp/fake.json"
         fake_config_file = "/etc/virt-who.d/fake.conf"
 
         # case steps
         logger.info(">>>step1: create json file")
         self.vw_fake_json_create("virt-who -d -p", json_file)
         self.vw_etc_d_delete_all()
 
-        logger.info(">>>step2: check the mapping in json file is same with debug output")
+        logger.info(
+            ">>>step2: check the mapping in json file is same with debug output"
+        )
         if hypervisor_type in ("libvirt-local", "vdsm"):
             self.vw_fake_conf_create(fake_config_file, json_file, is_hypervisor=False)
         else:
             self.vw_fake_conf_create(fake_config_file, json_file, is_hypervisor=True)
-        data, tty_output, rhsm_output = self.vw_start(cli='virt-who -do', exp_send=1)
+        data, tty_output, rhsm_output = self.vw_start(cli="virt-who -do", exp_send=1)
         ret, fake_json = self.runcmd("cat {0}".format(json_file), self.ssh_host())
-        fake_json_lines = fake_json.split('\n')
+        fake_json_lines = fake_json.split("\n")
         for line in fake_json_lines:
-            results.setdefault('step2', []).append(line in tty_output)
+            results.setdefault("step2", []).append(line in tty_output)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2067_validate_uniform_mapping_format.py
--- /tmp/lint/tier2/tc_2066_validate_cluster_name_with_special_char.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2066_validate_cluster_name_with_special_char.py	2023-03-06 06:16:12.849447 +0000
@@ -5,67 +5,85 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196078')
-        hypervisor_type = self.get_config('hypervisor_type')
-        register_type = self.get_config('register_type')
-        if hypervisor_type != 'esx':
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-196078")
+        hypervisor_type = self.get_config("hypervisor_type")
+        register_type = self.get_config("register_type")
+        if hypervisor_type != "esx":
             self.vw_case_skip(hypervisor_type)
         self.vw_case_init()
 
         # Case Config
         results = dict()
         config = self.get_hypervisor_config()
-        ssh_hypervisor = config['ssh_hypervisor']
+        ssh_hypervisor = config["ssh_hypervisor"]
         register_config = self.get_register_config()
-        server = register_config['server']
-        ssh_user = register_config['ssh_user']
-        ssh_passwd = register_config['ssh_passwd']
+        server = register_config["server"]
+        ssh_user = register_config["ssh_user"]
+        ssh_passwd = register_config["ssh_passwd"]
         ssh_register = {"host": server, "username": ssh_user, "password": ssh_passwd}
 
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         host_uuid = self.get_hypervisor_hostuuid()
         host_name = self.get_hypervisor_hostname()
 
-        cert = self.vcenter_cert(config['server'], config['username'], config['password'])
+        cert = self.vcenter_cert(
+            config["server"], config["username"], config["password"]
+        )
         cluster_name = deploy.vcenter.cluster
-        new_cluster_name = "virtwho/test-" + ''.join(random.sample(string.digits, 6))
+        new_cluster_name = "virtwho/test-" + "".join(random.sample(string.digits, 6))
 
         # Case Steps
         try:
             logger.info(">>>step1: change the vcenter cluster name to: virtwho/test")
-            self.vcenter_cluster_name_set(cert, ssh_hypervisor, cluster_name, new_cluster_name)
+            self.vcenter_cluster_name_set(
+                cert, ssh_hypervisor, cluster_name, new_cluster_name
+            )
 
             logger.info(">>>step2: run virt-who service with the new cluster name")
             data, tty_output, rhsm_output = self.vw_start(exp_error=0, exp_send=1)
             res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            res2 = self.vw_msg_search(rhsm_output, '"hypervisor.cluster": "{0}"'.format(new_cluster_name))
-            results.setdefault('step2', []).append(res1)
-            results.setdefault('step2', []).append(res2)
+            res2 = self.vw_msg_search(
+                rhsm_output, '"hypervisor.cluster": "{0}"'.format(new_cluster_name)
+            )
+            results.setdefault("step2", []).append(res1)
+            results.setdefault("step2", []).append(res2)
 
             logger.info(">>>step3: check the hyperivsor facts")
             if "satellite" in register_type:
-                output = self.satellite_hosts_get(self.ssh_host(), register_config,
-                                                  host_name, host_uuid, desc="get hypervisor info")
-                cmd = "hammer host facts --name {}".format(output['name'])
+                output = self.satellite_hosts_get(
+                    self.ssh_host(),
+                    register_config,
+                    host_name,
+                    host_uuid,
+                    desc="get hypervisor info",
+                )
+                cmd = "hammer host facts --name {}".format(output["name"])
                 _, result = self.runcmd(cmd, ssh_register)
             else:
-                output = self.stage_consumer_get(self.ssh_host(), register_config,
-                                                 host_name, host_uuid, desc="get hypervisor info")
-                result = output['facts']['hypervisor.cluster']
+                output = self.stage_consumer_get(
+                    self.ssh_host(),
+                    register_config,
+                    host_name,
+                    host_uuid,
+                    desc="get hypervisor info",
+                )
+                result = output["facts"]["hypervisor.cluster"]
             res = self.vw_msg_search(result, new_cluster_name)
-            results.setdefault('step3', []).append(res)
+            results.setdefault("step3", []).append(res)
 
         finally:
             logger.info(">>>step finally: change back the vcenter cluster name")
-            self.vcenter_cluster_name_set(cert, ssh_hypervisor, new_cluster_name, cluster_name)
+            self.vcenter_cluster_name_set(
+                cert, ssh_hypervisor, new_cluster_name, cluster_name
+            )
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2066_validate_cluster_name_with_special_char.py
--- /tmp/lint/tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py	2023-03-06 05:02:18.597378 +0000
+++ /tmp/lint/tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py	2023-03-06 06:16:12.921847 +0000
@@ -5,13 +5,13 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198375')
-        compose_id = self.get_config('rhel_compose')
-        if 'RHEL-9' not in compose_id:
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-198375")
+        compose_id = self.get_config("rhel_compose")
+        if "RHEL-9" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # Case Config
         results = dict()
@@ -24,57 +24,76 @@
 
         # Case Steps
         try:
             logger.info(">>>step1: configure and backup /etc/virt-who.conf")
             self.vw_etc_conf_disable_all()
-            self.runcmd('cp {0} {1}'.format(conf_file, conf_file_backup), self.ssh_host())
+            self.runcmd(
+                "cp {0} {1}".format(conf_file, conf_file_backup), self.ssh_host()
+            )
 
             logger.info(">>>step2: create /etc/sysconfig/virt-who file")
-            cmd = ('cat <<EOF > {0}\n'
-                   'VIRTWHO_DEBUG = 1\n'
-                   'VIRTWHO_ONE_SHOT = 0\n'
-                   'VIRTWHO_INTERVAL = 120\n'
-                   'http_proxy = {1}:{2}\n'
-                   'no_proxy = *\n'
-                   'EOF'
-                   ).format(sysconfig_file, deploy.proxy.server, deploy.proxy.port)
+            cmd = (
+                "cat <<EOF > {0}\n"
+                "VIRTWHO_DEBUG = 1\n"
+                "VIRTWHO_ONE_SHOT = 0\n"
+                "VIRTWHO_INTERVAL = 120\n"
+                "http_proxy = {1}:{2}\n"
+                "no_proxy = *\n"
+                "EOF"
+            ).format(sysconfig_file, deploy.proxy.server, deploy.proxy.port)
             self.runcmd(cmd, self.ssh_host())
 
             logger.info(">>>step3: run migrateconfiguration.py script")
             cmd = "/usr/bin/python3 /usr/lib/python3.9/site-packages/virtwho/migrate/migrateconfiguration.py"
             self.runcmd(cmd, self.ssh_host())
 
-            logger.info(">>>step4: check the configurations in {0} are migrated to {1}"
-                        .format(sysconfig_file, conf_file))
+            logger.info(
+                ">>>step4: check the configurations in {0} are migrated to {1}".format(
+                    sysconfig_file, conf_file
+                )
+            )
             ret, output = self.runcmd("cat {0}".format(conf_file), self.ssh_host())
-            msg1 = "[global]\n" \
-                   "#migrated\n" \
-                   "interval=120\n" \
-                   "#migrated\n" \
-                   "debug=True\n" \
-                   "#migrated\n" \
-                   "oneshot=False"
-            msg2 = "[system_environment]\n" \
-                   "#migrated\n" \
-                   "http_proxy=squid.corp.redhat.com:3128\n" \
-                   "#migrated\n" \
-                   "no_proxy=*"
-            results.setdefault('step4', []).append(msg1 in output)
-            results.setdefault('step4', []).append(msg2 in output)
+            msg1 = (
+                "[global]\n"
+                "#migrated\n"
+                "interval=120\n"
+                "#migrated\n"
+                "debug=True\n"
+                "#migrated\n"
+                "oneshot=False"
+            )
+            msg2 = (
+                "[system_environment]\n"
+                "#migrated\n"
+                "http_proxy=squid.corp.redhat.com:3128\n"
+                "#migrated\n"
+                "no_proxy=*"
+            )
+            results.setdefault("step4", []).append(msg1 in output)
+            results.setdefault("step4", []).append(msg2 in output)
 
-            logger.info(">>>step5: run virt-who to test the migrated options working well")
+            logger.info(
+                ">>>step5: run virt-who to test the migrated options working well"
+            )
             data, tty_output, rhsm_output = self.vw_start(exp_send=1)
-            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120)
+            res1 = self.op_normal_value(
+                data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=120
+            )
             res2 = self.vw_msg_search(rhsm_output, msg="\[.*DEBUG\]")
-            results.setdefault('step5', []).append(res1)
-            results.setdefault('step5', []).append(res2)
-
+            results.setdefault("step5", []).append(res1)
+            results.setdefault("step5", []).append(res2)
 
         finally:
             logger.info(">>>step6: recover environments")
-            self.runcmd('cp {0} {1} ; rm -f {0}'.format(conf_file_backup, conf_file),
-                        self.ssh_host(), desc="recover the /etc/virt-who.conf file")
-            self.runcmd('rm -f {0}'.format(sysconfig_file),
-                        self.ssh_host(), desc="remove the /etc/sysconfig/virt-who file")
+            self.runcmd(
+                "cp {0} {1} ; rm -f {0}".format(conf_file_backup, conf_file),
+                self.ssh_host(),
+                desc="recover the /etc/virt-who.conf file",
+            )
+            self.runcmd(
+                "rm -f {0}".format(sysconfig_file),
+                self.ssh_host(),
+                desc="remove the /etc/sysconfig/virt-who file",
+            )
 
         # Case Result
         self.vw_case_result(results)
would reformat /tmp/lint/tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py
--- /tmp/lint/tier2/tc_2069_valide_insecure_option_for_kubevirt.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tier2/tc_2069_valide_insecure_option_for_kubevirt.py	2023-03-06 06:16:12.948556 +0000
@@ -5,33 +5,35 @@
 from virt_who.testing import Testing
 
 
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198867')
-        compose_id = self.get_config('rhel_compose')
-        hypervisor_type = self.get_config('hypervisor_type')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-198867")
+        compose_id = self.get_config("rhel_compose")
+        hypervisor_type = self.get_config("hypervisor_type")
         if "kubevirt" not in hypervisor_type:
             self.vw_case_skip(hypervisor_type)
         if "RHEL-9" not in compose_id:
             self.vw_case_skip(compose_id)
         self.vw_case_init()
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', "/etc/virt-who.conf")
-        self.vw_option_enable('debug', "/etc/virt-who.conf")
-        self.vw_option_update_value('debug', 'True', "/etc/virt-who.conf")
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_name = "virtwho-config"
         config_file = "/etc/virt-who.d/{0}.conf".format(config_name)
         self.vw_etc_d_mode_create(config_name, config_file)
 
         # case steps
         logger.info(">>>step1: configure kubeconfig without cert and run virt-who")
         kube_config_file = "/root/kube.conf_no_cert"
         kube_config_url = deploy.kubevirt.kube_config_url_no_cert
-        cmd = "rm -f {1}; curl -L {0} -o {1}; sync".format(kube_config_url, kube_config_file)
+        cmd = "rm -f {1}; curl -L {0} -o {1}; sync".format(
+            kube_config_url, kube_config_file
+        )
         self.runcmd(cmd, self.ssh_host())
         self.vw_option_update_value("kubeconfig", kube_config_file, config_file)
 
         for option in ("none", "", "0", "False"):
             if option == "none":
@@ -41,21 +43,21 @@
                 logger.info("> configure virt-who run with insecure={0}".format(option))
             data, tty_output, rhsm_output = self.vw_start(exp_error=True, exp_send=0)
             error_msg = "certificate verify failed"
             res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)
             res2 = self.vw_msg_search(rhsm_output, error_msg)
-            results.setdefault('step1', []).append(res1)
-            results.setdefault('step1', []).append(res2)
+            results.setdefault("step1", []).append(res1)
+            results.setdefault("step1", []).append(res2)
             self.vw_option_del("insecure", config_file)
 
         logger.info(">>>step2: test insecure=1/True can ignore checking cert")
         for option in ("1", "True"):
             logger.info("> configure virt-who run with insecure={0}".format(option))
             self.vw_option_add("insecure", option, config_file)
             data, tty_output, rhsm_output = self.vw_start(exp_error=False, exp_send=1)
             res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-            results.setdefault('step2', []).append(res)
+            results.setdefault("step2", []).append(res)
             self.vw_option_del("insecure", config_file)
 
         self.runcmd("rm -rf {0}".format(kube_config_file), self.ssh_host())
 
         # case result
would reformat /tmp/lint/tier2/tc_2069_valide_insecure_option_for_kubevirt.py
--- /tmp/lint/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py	2023-03-06 06:16:12.956887 +0000
@@ -2,43 +2,51 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133743')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133743")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
         config_file = "/etc/sysconfig/virt-who"
         self.vw_option_enable("VIRTWHO_DEBUG", filename=config_file)
-        self.vw_option_update_value("VIRTWHO_DEBUG", '1', filename=config_file)
-        self.vw_etc_sys_mode_enable(uid='01')
-        self.vw_etc_sys_mode_enable(uid='02')
+        self.vw_option_update_value("VIRTWHO_DEBUG", "1", filename=config_file)
+        self.vw_etc_sys_mode_enable(uid="01")
+        self.vw_etc_sys_mode_enable(uid="02")
 
         # case steps
         logger.info(">>>step1: check reporter sent and no error msg")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check how many modes in rhsm.log")
         modes = re.findall(r'Using configuration.*\("(.*?)" mode\)', rhsm_output)
         if len(modes) == 1:
-            logger.info("Succeeded to check, only one mode in rhsm.log: {0}".format(modes))
-            results.setdefault('step2', []).append(True)
+            logger.info(
+                "Succeeded to check, only one mode in rhsm.log: {0}".format(modes)
+            )
+            results.setdefault("step2", []).append(True)
         else:
-            logger.error("Failed to check, the modes number is not matched: {0}".format(modes))
-            results.setdefault('step2', []).append(False)
+            logger.error(
+                "Failed to check, the modes number is not matched: {0}".format(modes)
+            )
+            results.setdefault("step2", []).append(False)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py
--- /tmp/lint/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py	2023-03-06 06:16:12.970254 +0000
@@ -2,46 +2,50 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133733')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133733")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
         config_02_name = "virtwho-config-{0}".format(hypervisor2_type)
         config_02_file = "/etc/virt-who.d/{0}.conf".format(config_02_name)
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
-        
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
+
         # case steps
         logger.info(">>>step1: create config file include two different hypervisors")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid='02')
-        cmd = 'cat {0} >> {1} && rm -rf {0}'.format(config_02_file, config_01_file)
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid="02")
+        cmd = "cat {0} >> {1} && rm -rf {0}".format(config_02_file, config_01_file)
         ret, output = self.runcmd(cmd, self.ssh_host())
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info included two hypervisors")
         res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)
         res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py
--- /tmp/lint/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py	2023-03-06 06:16:13.039995 +0000
@@ -2,41 +2,45 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133740')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133740")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
 
         # case Steps
         logger.info(">>>step1: create a extra hypervisors in virt-who.d and run cli -d")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        cmd = self.vw_cli_base(uid='02') + "-d"
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        cmd = self.vw_cli_base(uid="02") + "-d"
         data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info included two hypervisors")
         res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)
         res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py
--- /tmp/lint/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py	2023-03-06 06:16:13.042627 +0000
@@ -2,44 +2,50 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133737')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133737")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':
+        if self.pkg_check(self.ssh_host(), "virt-who")[9:15] >= "0.23.3":
             self.vw_case_skip("virt-who version")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
 
         # case steps
-        logger.info(">>>step1: enable mode in /etc/sysconfig/virt-who and config another mode in /etc/virt-who.d/")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        self.vw_etc_sys_mode_enable(uid='02')
+        logger.info(
+            ">>>step1: enable mode in /etc/sysconfig/virt-who and config another mode in /etc/virt-who.d/"
+        )
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        self.vw_etc_sys_mode_enable(uid="02")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info included two hypervisors")
         res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)
         res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py
--- /tmp/lint/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py	2023-03-06 06:16:13.054841 +0000
@@ -2,44 +2,48 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133731')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133731")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
         config_02_name = "virtwho-config-{0}".format(hypervisor2_type)
         config_02_file = "/etc/virt-who.d/{0}.conf".format(config_02_name)
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
 
         # case steps
         logger.info(">>>step1: create two config files for two different hypervisors")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid='02')
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid="02")
         data, tty_output, rhsm_output = self.vw_start(exp_send=1)
         res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        results.setdefault('step1', []).append(res)
+        results.setdefault("step1", []).append(res)
 
         logger.info(">>>step2: check mapping info included two hypervisors")
         res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)
         res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py
--- /tmp/lint/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py	2023-03-06 05:02:18.598378 +0000
+++ /tmp/lint/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py	2023-03-06 06:16:13.091968 +0000
@@ -2,51 +2,55 @@
 from virt_who import *
 from virt_who.base import Base
 from virt_who.register import Register
 from virt_who.testing import Testing
 
+
 class Testcase(Testing):
     def test_run(self):
-        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133742')
+        self.vw_case_info(os.path.basename(__file__), case_id="RHEL-133742")
         hypervisor1_type = self.get_exported_param("HYPERVISOR_01_TYPE")
         hypervisor2_type = self.get_exported_param("HYPERVISOR_02_TYPE")
         if not hypervisor1_type or not hypervisor2_type:
             raise FailException("This case needs two hypervisors for testing")
-        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):
+        if any(
+            key in ("libvirt-local", "vdsm")
+            for key in (hypervisor1_type, hypervisor2_type)
+        ):
             self.vw_case_skip("libvirt-local or vdsm")
-        self.vw_case_init(uid='01')
+        self.vw_case_init(uid="01")
 
         # case config
         results = dict()
-        self.vw_option_enable('[global]', '/etc/virt-who.conf')
-        self.vw_option_enable('debug', '/etc/virt-who.conf')
-        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')
+        self.vw_option_enable("[global]", "/etc/virt-who.conf")
+        self.vw_option_enable("debug", "/etc/virt-who.conf")
+        self.vw_option_update_value("debug", "True", "/etc/virt-who.conf")
         config_01_name = "virtwho-config-{0}".format(hypervisor1_type)
         config_01_file = "/etc/virt-who.d/{0}.conf".format(config_01_name)
         config_02_name = "virtwho-config-{0}".format(hypervisor2_type)
         config_02_file = "/etc/virt-who.d/{0}.conf".format(config_02_name)
-        host_01_uuid = self.get_hypervisor_hostuuid(uid='01')
-        host_02_uuid = self.get_hypervisor_hostuuid(uid='02')
-        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')
-        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')
+        host_01_uuid = self.get_hypervisor_hostuuid(uid="01")
+        host_02_uuid = self.get_hypervisor_hostuuid(uid="02")
+        guest_01_uuid = self.get_hypervisor_guestuuid(uid="01")
+        guest_02_uuid = self.get_hypervisor_guestuuid(uid="02")
         json_file = "/tmp/fake.json"
         fake_conf_file = "/etc/virt-who.d/fake.conf"
 
         # case steps
         logger.info(">>>step1: create json file and fake config file")
-        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid='01')
-        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid='02')
+        self.vw_etc_d_mode_create(config_01_name, config_01_file, uid="01")
+        self.vw_etc_d_mode_create(config_02_name, config_02_file, uid="02")
         self.vw_fake_json_create("virt-who", json_file)
         self.vw_etc_d_delete_all()
         self.vw_fake_conf_create(fake_conf_file, json_file, is_hypervisor=True)
 
         logger.info(">>>step2: run virt-who with fake conf")
         data, tty_output, rhsm_output = self.vw_start()
         res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)
-        res2 = self.vw_rhsm_associate(data, host_01_uuid, guest_01_uuid, uid='01')
-        res3 = self.vw_rhsm_associate(data, host_02_uuid, guest_02_uuid, uid='02')
-        results.setdefault('step2', []).append(res1)
-        results.setdefault('step2', []).append(res2)
-        results.setdefault('step2', []).append(res3)
+        res2 = self.vw_rhsm_associate(data, host_01_uuid, guest_01_uuid, uid="01")
+        res3 = self.vw_rhsm_associate(data, host_02_uuid, guest_02_uuid, uid="02")
+        results.setdefault("step2", []).append(res1)
+        results.setdefault("step2", []).append(res2)
+        results.setdefault("step2", []).append(res3)
 
         # case result
         self.vw_case_result(results)
would reformat /tmp/lint/tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py

Oh no! üí• üíî üí•
182 files would be reformatted, 7 files would be left unchanged.

