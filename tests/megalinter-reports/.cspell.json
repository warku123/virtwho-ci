{
    "ignorePaths": [
        "**/node_modules/**",
        "**/vscode-extension/**",
        "**/.git/**",
        "**/.pnpm-lock.json",
        ".vscode",
        "package-lock.json",
        "megalinter-reports"
    ],
    "language": "en",
    "version": "0.2",
    "words": [
        "SUBMAN",
        "Sapce",
        "Unlimitted)  -- status is '1 out of Unlimitted'\"",
        "Unlimitted) -- status is '0 out of Unlimitted'\"",
        "VIRTWHO",
        "VIRTWHO)    -- Run virt-who with \"VIRTWHO_DEBUG=0\"'",
        "VIRTWHO)    -- Run virt-who with \"VIRTWHO_DEBUG=1\"'",
        "VIRTWHO)    -- Run virt-who with \"VIRTWHO_ONE_SHOT=0\"'",
        "VIRTWHO)    -- Run virt-who with \"VIRTWHO_ONE_SHOT=1\"'",
        "VIRTWHO)    -- info(\">>>step1: disable VIRTWHO_INTERVAL option\"",
        "VIRTWHO)    -- self.vw_option_enable(\"VIRTWHO_DEBUG\",virt_config",
        "Virt",
        "Virt)       -- super(VirtWhoSCATestCase, cls",
        "Virtwho",
        "WONTFIX",
        "WONTFIX)     -- due to Bug 1638182 WONTFIX'",
        "aarch",
        "activaiton",
        "activationkey",
        "ascci)      -- cannot be set to no-ascci\"",
        "baseos)     -- repo 'rhel-8-for-x86_64-baseos-rpms'\"",
        "commandline",
        "condrestart",
        "dconf",
        "disabel",
        "encryped",
        "entilement",
        "executabe",
        "exlude",
        "guestids",
        "guestuuid)  -- cls.get_hypervisor_guestuuid(cls()",
        "guestuuid)  -- self.get_hypervisor_guestuuid(",
        "guestuuid)  -- self.get_hypervisor_guestuuid(uid='01'",
        "guestuuid)  -- self.get_hypervisor_guestuuid(uid='02'",
        "hostuuid)   -- cls.get_hypervisor_hostuuid(cls()",
        "hostuuid)   -- self.get_hypervisor_hostuuid(",
        "hostuuid)   -- self.get_hypervisor_hostuuid(uid='01'",
        "hostuuid)   -- self.get_hypervisor_hostuuid(uid='02'",
        "hwuuid",
        "hwuuid)     -- (.*?)'\".format(host_hwuuid), rhsm_output",
        "hwuuid)     -- 1}:{0}\".format(host_hwuuid, domain_id)",
        "hwuuid)     -- cls.get_hypervisor_hwuuid(cls()",
        "hwuuid)     -- self.get_hypervisor_hwuuid(",
        "hyperivosr) -- connect virt-who host from hyperivosr again\"",
        "hyperivosr) -- disconnect virt-who host from hyperivosr\"",
        "hyperivosr) -- is disconnected from hyperivosr by timeout\"",
        "hyperivosr) -- who host can access hyperivosr by default\"",
        "hyperivosr) -- who is connected to hyperivosr normally\"",
        "hyperivsor) -- >>>step3: check the hyperivsor facts\"",
        "hyperv",
        "hyperv)     -- \"libvirt-local\", \"hyperv\", \"esx\"",
        "hyperv)     -- ('libvirt-remote', 'hyperv', 'kubevirt'",
        "hyperv)     -- , \"libvirt-local\", \"hyperv\", \"esx\"",
        "hyperv)     -- characters for rhevm and hyperv\"",
        "hyperv)     -- in (\"rhevm\", \"xen\", \"hyperv\"",
        "insteaded",
        "isregister) -- if self.system_isregister(self.ssh_host(",
        "katello",
        "katello)    -- api ,default_org_id, katello_id",
        "katello)    -- config, ak_name, limit_katello_id, default_org_id",
        "katello)    -- id = self.satellite_katello_id(self.ssh_host(",
        "kubeconfig",
        "kubeconfig)   -- notes.append(\"(step1) No kubeconfig option for cli\"",
        "kubeconfig) -- append(\"(step1,2) No kubeconfig option for cli\"",
        "kubeconfig) -- append(\"(step1,2,3,4) No kubeconfig option for cli\"",
        "kubeversion",
        "kubevirt",
        "kubevirt)   -- hypervisor_type in ('kubevirt', 'ahv'",
        "kubevirt)   -- libvirt-local', 'vdsm', 'kubevirt'",
        "kubevirt)   -- remote', 'hyperv', 'kubevirt'",
        "kubevirt)   -- remote', 'xen', 'rhevm', 'kubevirt'",
        "libexec",
        "libvirtd",
        "libvirtd)   -- config, and restart libvirtd service\"",
        "libvirtd)   -- service(self.ssh_host(), \"libvirtd\", \"restart\"",
        "libvirtd)   -- service(self.ssh_host(), \"libvirtd\", \"status\"",
        "loopnum",
        "loopnum)    -- 60, exp_send=1, exp_loopnum=1",
        "loopnum)    -- exp_interval=60, exp_loopnum=1, exp_looptime=60",
        "loopnum)    -- exp_loopnum=1",
        "loopnum)    -- exp_loopnum=1, exp_looptime=60",
        "loopnum)    -- start(exp_send=1, exp_loopnum=1",
        "looptime)   -- exp_interval=60, exp_looptime=60",
        "looptime)   -- exp_loopnum=1, exp_looptime=120",
        "looptime)   -- exp_loopnum=1, exp_looptime=60",
        "looptime)   -- exp_loopnum=1, exp_looptime=60)",
        "migrateconfiguration",
        "migrateconfiguration) -- info(\">>>step3: run migrateconfiguration.py script\"",
        "multiarch)  -- trigger-brew', 'trigger-multiarch'",
        "nutanix",
        "oneshot",
        "oneshot)    -- Run virt-who with \"oneshot=False\"'",
        "oneshot)    -- def test_virtwho_oneshot(self",
        "oneshot)    -- info(\">>>step: run with oneshot value is null\"",
        "oneshot)    -- oneshot=True",
        "oneshot)    -- option_update_value(\"oneshot\", '', virtwho_conf",
        "oneshot)    -- self.vw_option_enable(\"oneshot\", virtwho_conf",
        "oneshot)    -- start(cmd, exp_send=1, oneshot=False",
        "oneshot)    -- virt-who', exp_send=1, oneshot=False",
        "oneshot)    -- vw_start(exp_send=1, oneshot=False",
        "oneshot)    -- vw_start(exp_send=1, oneshot=True",
        "oneshot)    -- who -o', exp_send=1, oneshot=True",
        "onestho)    -- Run virt-who with \"onestho=True\"'",
        "ovirt",
        "ovirt)      -- hypervisor_server.rstrip('/ovirt-engine'",
        "ovirt)      -- hypervisor_server.split('ovirt-engine')[0].strip(",
        "ovirt)      -- virt-who for rhevm with ovirt-engine\"",
        "ovirt)      -- virt-who for rhevm with ovirt-engine/\"",
        "ovirt)      -- who for rhevm without /ovirt-engine\"",
        "putfile)    -- self.paramiko_putfile(self.ssh_host(",
        "reconfig",
        "reregister",
        "rhev",
        "rhevm",
        "rhevm)      -- hypervisor_type in (\"rhevm\", \"xen\", \"hyperv\"",
        "rhevm)      -- hypervisor_type in ('esx', 'rhevm'",
        "rhevm)      -- hypervisor_type in ('esx', 'rhevm', 'ahv'",
        "rhevm)      -- hypervisor_type') in ('esx', 'rhevm', 'ahv'",
        "rhevm)      -- libvirt-remote', 'xen', 'rhevm', 'kubevirt'",
        "rhevm)      -- step1: run virt-who for rhevm with ovirt-engine\"",
        "rhevm)      -- unicode characters for rhevm and hyperv\"",
        "rhsm",
        "rhsm)       -- \"rhsm_port, rhsm_prefix good value\"",
        "rhsm)       -- \"rhsm_prefix good value\"",
        "rhsm)       -- *\\(\"(.*?)\" mode\\)', rhsm_output",
        "rhsm)       -- , proxy_port, '/etc/rhsm/rhsm.conf'",
        "rhsm)       -- Failed to find /var/log/rhsm/virtwho* files\"",
        "rhsm)       -- Run virt-who to check 'rhsm.connection' info\"",
        "rhsm)       -- Succeeded to find virtwho.rhsm_log file\"",
        "rhsm)       -- check how many modes in rhsm.log\"",
        "rhsm)       -- def test_vw_rhsm_options(self",
        "rhsm)       -- disable(\"hostname\", \"/etc/rhsm/rhsm.conf\"",
        "rhsm)       -- disable(\"port\", \"/etc/rhsm/rhsm.conf\"",
        "rhsm)       -- disable(\"prefix\", \"/etc/rhsm/rhsm.conf\"",
        "rhsm)       -- format(host_hwuuid), rhsm_output",
        "rhsm)       -- guest association in rhsm.log\"",
        "rhsm)       -- host(), desc=\"check rhsm.log\"",
        "rhsm)       -- hostname\", \"/etc/rhsm/rhsm.conf\"",
        "rhsm)       -- hostname, rhsm_port, rhsm_prefix good value\"",
        "rhsm)       -- prefix\", \"/etc/rhsm/rhsm.conf\"",
        "rhsm)       -- proxy_server, '/etc/rhsm/rhsm.conf'",
        "rhsm)       -- self.msg_validation(rhsm_output, error_msg",
        "rhsm)       -- self.msg_validation(rhsm_output, msg_list",
        "rhsm)       -- self.vw_msg_search(rhsm_output, error_msg",
        "rhsm)       -- self.vw_msg_search(rhsm_output, msg",
        "rhsm)       -- self.vw_msg_search(rhsm_output, msg2",
        "rhsm)       -- self.vw_msg_search(rhsm_output, war_msg",
        "rhsm)       -- service to check the rhsm.log\"",
        "rhsm)       -- the prompt in /var/log/rhsm.log\"",
        "rhsm)       -- without rhsm_username and rhsm_password\"",
        "rhsmcertd",
        "rhsmcertd)  -- service(self.ssh_host(), \"rhsmcertd\", \"restart\"",
        "rhsmlog",
        "rhts)       -- randint(1, 10000)",
        "rpms)       -- 8-for-x86_64-baseos-rpms'\"",
        "runcmd",
        "runcmd)        -- ret, output = self.runcmd(cmd, system",
        "runcmd)     -- _, result = self.runcmd(cmd, ssh_register",
        "runcmd)     -- ret, output = self.runcmd(cmd,self.ssh_host(",
        "runcmd)     -- ret, result = self.runcmd(cmd, ssh_sat",
        "servie",
        "skus",
        "sshkey",
        "subscritons) -- error(\"failed to get subscritons info\"",
        "succeded",
        "sysconf",
        "sysconf)    -- DEBUG\", \"0\", filename=sysconf_file",
        "sysconf)    -- DEBUG\", \"1\", filename=sysconf_file",
        "sysconf)    -- DEBUG\", '1', filename=sysconf_file",
        "sysconf)    -- ONE_SHOT\", filename=sysconf_file",
        "sysconf)    -- SHOT\", \"0\", filename=sysconf_file",
        "sysconf)    -- SHOT\", \"1\", filename=sysconf_file",
        "sysconf)    -- VIRTWHO_DEBUG\", filename=sysconf_file",
        "sysconf)    -- cmd = 'cat {}'.format(sysconf_file",
        "sysconf)    -- option_tested, filename=sysconf_file",
        "sysconfig",
        "unattach",
        "unattach)   -- pool is revoked after unattach physical sku\"",
        "unattach)   -- self.system_sku_unattach(self.ssh_guest()",
        "unattach)   -- self.system_sku_unattach(self.ssh_host()",
        "unconsistent) -- virt-who by cli with unconsistent parameters\"",
        "unlimit",
        "unlimit)    -- \">>> attach virtual unlimit pool for guest\"",
        "unsupport)  -- Bug(Step3",
        "valide",
        "vdsm",
        "vdsm)       -- in (\"libvirt-local\", \"vdsm\"",
        "vdsm)       -- in (\"libvirt-local\", \"vdsm\", \"xen\"",
        "vdsm)       -- in ('libvirt-local', 'vdsm'",
        "vdsm)       -- in ('libvirt-local', 'vdsm', 'kubevirt'",
        "vdsm)       -- skip(\"libvirt-local or vdsm\"",
        "virt",
        "virt)        -- uninstall(self.ssh_host(), 'virt-who'",
        "virt)       -- check(self.ssh_host(), 'virt-who'",
        "virt)       -- enable('[global]', \"/etc/virt-who.conf\"",
        "virt)       -- enable('[global]', '/etc/virt-who.conf'",
        "virt)       -- global]\", filename=\"/etc/virt-who.conf\"",
        "virt)       -- info(\">>>step1: run virt-who-password\"",
        "virt)       -- info(self.ssh_host(), 'virt-who'",
        "virt)       -- uninstall(self.ssh_host(), 'virt-who'",
        "virtwho",
        "virtwho)    -- [global]\", filename=virtwho_conf",
        "virtwho)    -- config', '/etc/virt-who.d/virtwho-config.conf'",
        "virtwho)    -- debug\", 'True', filename=virtwho_conf",
        "virtwho)    -- def test_virtwho_debug(self",
        "virtwho)    -- def test_virtwho_hypervisor_id(self",
        "virtwho)    -- def test_virtwho_interval(self",
        "virtwho)    -- def test_virtwho_oneshot(self",
        "virtwho)    -- enable(\"[defaults]\", virtwho_conf",
        "virtwho)    -- enable(\"debug\", filename=virtwho_conf",
        "virtwho)    -- enable(\"hypervisor_id\", virtwho_conf",
        "virtwho)    -- error(\"Failed to find virtwho.destination file\"",
        "virtwho)    -- info(\"Succeeded to find virtwho.destination file\"",
        "virtwho)    -- info(\"Succeeded to find virtwho.main file\"",
        "virtwho)    -- mode_create(cls(",
        "virtwho)    -- option_enable(\"[global]\", virtwho_conf",
        "virtwho)    -- option_enable(\"debug\", virtwho_conf",
        "virtwho)    -- option_enable(\"print_\", virtwho_conf",
        "virtwho)    -- option_enable('[global]', virtwho_conf",
        "virtwho)    -- option_enable('debug', virtwho_conf",
        "virtwho)    -- runcmd('ls /var/log/rhsm/virtwho*', self.ssh_host()",
        "virtwho)    -- to find /var/log/rhsm/virtwho* files\"",
        "virtwho)    -- update_value(\"debug\", '', virtwho_conf",
        "virtwho)    -- value(\"debug\", 'True', virtwho_conf",
        "virtwho)    -- value(\"print_\", 'false', virtwho_conf",
        "virtwho)    -- value('debug', 'True', virtwho_conf",
        "virtwho)    -- vcenter cluster name to: virtwho/test\"",
        "virtwho)    -- vw_etc_d_mode_create('virtwho-config', conf_file",
        "virtwhoconfig",
        "virtwo",
        "virtwo)     -- config', '/etc/virt-who.d/virtwo_sca.conf'",
        "vitual)     -- Succeeded to check, vitual sku({0}",
        "vitual)     -- error(\"Failed to check, vitual sku({0}",
        "webui",
        "webui)      -- delete hypervisor from webui\"",
        "webui)      -- delete virt-who host from webui\"",
        "webui)      -- guest association in webui\"",
        "webui)      -- host/hypervisor from webui\"",
        "withou"
    ]
}