{
  "statistics": {
    "detectionDate": "2023-03-06T06:15:52.323Z",
    "formats": {
      "python": {
        "sources": {
          "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py": {
            "lines": 51,
            "tokens": 578,
            "sources": 1,
            "clones": 183,
            "duplicatedLines": 1556,
            "duplicatedTokens": 14267,
            "percentage": 3050.98,
            "percentageTokens": 2468.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py": {
            "lines": 41,
            "tokens": 485,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 26,
            "duplicatedTokens": 311,
            "percentage": 63.41,
            "percentageTokens": 64.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py": {
            "lines": 44,
            "tokens": 510,
            "sources": 1,
            "clones": 21,
            "duplicatedLines": 150,
            "duplicatedTokens": 1957,
            "percentage": 340.91,
            "percentageTokens": 383.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py": {
            "lines": 44,
            "tokens": 505,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 38,
            "duplicatedTokens": 438,
            "percentage": 86.36,
            "percentageTokens": 86.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py": {
            "lines": 46,
            "tokens": 543,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 47,
            "duplicatedTokens": 545,
            "percentage": 102.17,
            "percentageTokens": 100.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py": {
            "lines": 43,
            "tokens": 465,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 38,
            "duplicatedTokens": 407,
            "percentage": 88.37,
            "percentageTokens": 87.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2069_valide_insecure_option_for_kubevirt.py": {
            "lines": 61,
            "tokens": 655,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 14.75,
            "percentageTokens": 11.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py": {
            "lines": 79,
            "tokens": 674,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 11.39,
            "percentageTokens": 11.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2067_validate_uniform_mapping_format.py": {
            "lines": 41,
            "tokens": 382,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 21.95,
            "percentageTokens": 19.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2066_validate_cluster_name_with_special_char.py": {
            "lines": 70,
            "tokens": 733,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 165,
            "percentage": 25.71,
            "percentageTokens": 22.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py": {
            "lines": 51,
            "tokens": 515,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 15.69,
            "percentageTokens": 14.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2063_check_hypervisors_fqdn.py": {
            "lines": 71,
            "tokens": 770,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 12.68,
            "percentageTokens": 9.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2061_check_fake_mode_is_hypervisor_option.py": {
            "lines": 59,
            "tokens": 640,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 15.25,
            "percentageTokens": 11.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2060_check_commented_out_line_with_tab_space.py": {
            "lines": 57,
            "tokens": 664,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 233,
            "duplicatedTokens": 2084,
            "percentage": 408.77,
            "percentageTokens": 313.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py": {
            "lines": 51,
            "tokens": 525,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 29,
            "duplicatedTokens": 283,
            "percentage": 56.86,
            "percentageTokens": 53.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2058_post_large_json_to_rhsm.py": {
            "lines": 73,
            "tokens": 766,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 10.96,
            "percentageTokens": 9.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2057_validate_subscription_register_clean_together.py": {
            "lines": 66,
            "tokens": 752,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 33,
            "duplicatedTokens": 342,
            "percentage": 50,
            "percentageTokens": 45.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2056_validate_non_root_to_run_virtwho.py": {
            "lines": 55,
            "tokens": 620,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 261,
            "percentage": 56.36,
            "percentageTokens": 42.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py": {
            "lines": 44,
            "tokens": 475,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 58,
            "duplicatedTokens": 698,
            "percentage": 131.82,
            "percentageTokens": 146.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2054_validate_trigger_event_with_different_interval.py": {
            "lines": 44,
            "tokens": 475,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 18.18,
            "percentageTokens": 15.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py": {
            "lines": 119,
            "tokens": 1491,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 20,
            "duplicatedTokens": 297,
            "percentage": 16.81,
            "percentageTokens": 19.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2052_validate_hypervisors_connection.py": {
            "lines": 85,
            "tokens": 924,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 9.41,
            "percentageTokens": 8.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2051_validate_virt_who_password_commandline.py": {
            "lines": 23,
            "tokens": 221,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 34.78,
            "percentageTokens": 33.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2049_validate_hostname_without_domain.py": {
            "lines": 65,
            "tokens": 741,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 79,
            "percentage": 13.85,
            "percentageTokens": 10.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2048_register_system_with_activaiton_key.py": {
            "lines": 71,
            "tokens": 816,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 49,
            "duplicatedTokens": 404,
            "percentage": 69.01,
            "percentageTokens": 49.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py": {
            "lines": 64,
            "tokens": 726,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 76,
            "duplicatedTokens": 778,
            "percentage": 118.75,
            "percentageTokens": 107.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2046_check_registered_by_item_in_satellite_webui.py": {
            "lines": 81,
            "tokens": 814,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 57,
            "duplicatedTokens": 521,
            "percentage": 70.37,
            "percentageTokens": 64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py": {
            "lines": 96,
            "tokens": 1200,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 32,
            "duplicatedTokens": 312,
            "percentage": 33.33,
            "percentageTokens": 26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2044_subscribe_guest_with_activation_key.py": {
            "lines": 132,
            "tokens": 1349,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 29,
            "duplicatedTokens": 268,
            "percentage": 21.97,
            "percentageTokens": 19.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py": {
            "lines": 86,
            "tokens": 1172,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 70,
            "duplicatedTokens": 998,
            "percentage": 81.4,
            "percentageTokens": 85.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py": {
            "lines": 62,
            "tokens": 792,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 64,
            "duplicatedTokens": 677,
            "percentage": 103.23,
            "percentageTokens": 85.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py": {
            "lines": 50,
            "tokens": 522,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 50,
            "duplicatedTokens": 463,
            "percentage": 100,
            "percentageTokens": 88.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py": {
            "lines": 88,
            "tokens": 1055,
            "sources": 1,
            "clones": 25,
            "duplicatedLines": 169,
            "duplicatedTokens": 2274,
            "percentage": 192.05,
            "percentageTokens": 215.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py": {
            "lines": 91,
            "tokens": 893,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 92,
            "duplicatedTokens": 1053,
            "percentage": 101.1,
            "percentageTokens": 117.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2038_validate_global_configs_by_virtwho_conf.py": {
            "lines": 65,
            "tokens": 749,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 25,
            "duplicatedTokens": 240,
            "percentage": 38.46,
            "percentageTokens": 32.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py": {
            "lines": 30,
            "tokens": 287,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 172,
            "percentage": 70,
            "percentageTokens": 59.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2036_validate_global_debug_by_virtwho_conf.py": {
            "lines": 30,
            "tokens": 296,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 26.67,
            "percentageTokens": 25.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py": {
            "lines": 64,
            "tokens": 655,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 165,
            "percentage": 21.88,
            "percentageTokens": 25.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2034_validate_global_interval_by_virtwho_conf.py": {
            "lines": 43,
            "tokens": 482,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 44,
            "duplicatedTokens": 507,
            "percentage": 102.33,
            "percentageTokens": 105.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py": {
            "lines": 50,
            "tokens": 566,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 28,
            "duplicatedTokens": 282,
            "percentage": 56,
            "percentageTokens": 49.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py": {
            "lines": 43,
            "tokens": 490,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 27,
            "duplicatedTokens": 268,
            "percentage": 62.79,
            "percentageTokens": 54.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py": {
            "lines": 33,
            "tokens": 333,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 207,
            "percentage": 72.73,
            "percentageTokens": 62.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py": {
            "lines": 92,
            "tokens": 1261,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 42,
            "duplicatedTokens": 530,
            "percentage": 45.65,
            "percentageTokens": 42.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py": {
            "lines": 78,
            "tokens": 934,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 30,
            "duplicatedTokens": 329,
            "percentage": 38.46,
            "percentageTokens": 35.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py": {
            "lines": 68,
            "tokens": 803,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 44,
            "duplicatedTokens": 505,
            "percentage": 64.71,
            "percentageTokens": 62.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py": {
            "lines": 70,
            "tokens": 717,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 52,
            "duplicatedTokens": 605,
            "percentage": 74.29,
            "percentageTokens": 84.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py": {
            "lines": 89,
            "tokens": 1026,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 164,
            "duplicatedTokens": 1838,
            "percentage": 184.27,
            "percentageTokens": 179.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py": {
            "lines": 97,
            "tokens": 1125,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 84,
            "duplicatedTokens": 1014,
            "percentage": 86.6,
            "percentageTokens": 90.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py": {
            "lines": 81,
            "tokens": 908,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 64,
            "duplicatedTokens": 743,
            "percentage": 79.01,
            "percentageTokens": 81.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py": {
            "lines": 73,
            "tokens": 779,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 54,
            "duplicatedTokens": 639,
            "percentage": 73.97,
            "percentageTokens": 82.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py": {
            "lines": 82,
            "tokens": 871,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 47,
            "duplicatedTokens": 514,
            "percentage": 57.32,
            "percentageTokens": 59.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py": {
            "lines": 68,
            "tokens": 880,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 25,
            "duplicatedTokens": 243,
            "percentage": 36.76,
            "percentageTokens": 27.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py": {
            "lines": 131,
            "tokens": 1592,
            "sources": 1,
            "clones": 20,
            "duplicatedLines": 138,
            "duplicatedTokens": 1883,
            "percentage": 105.34,
            "percentageTokens": 118.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py": {
            "lines": 133,
            "tokens": 1565,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 124,
            "duplicatedTokens": 1639,
            "percentage": 93.23,
            "percentageTokens": 104.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py": {
            "lines": 137,
            "tokens": 1545,
            "sources": 1,
            "clones": 30,
            "duplicatedLines": 221,
            "duplicatedTokens": 2936,
            "percentage": 161.31,
            "percentageTokens": 190.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py": {
            "lines": 103,
            "tokens": 1253,
            "sources": 1,
            "clones": 16,
            "duplicatedLines": 109,
            "duplicatedTokens": 1486,
            "percentage": 105.83,
            "percentageTokens": 118.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py": {
            "lines": 94,
            "tokens": 1018,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 76,
            "duplicatedTokens": 911,
            "percentage": 80.85,
            "percentageTokens": 89.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py": {
            "lines": 80,
            "tokens": 963,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 39,
            "duplicatedTokens": 450,
            "percentage": 48.75,
            "percentageTokens": 46.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py": {
            "lines": 104,
            "tokens": 1241,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 41,
            "duplicatedTokens": 532,
            "percentage": 39.42,
            "percentageTokens": 42.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2013_validate_unreachable_proxy_by_config.py": {
            "lines": 107,
            "tokens": 1114,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 8.41,
            "percentageTokens": 6.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py": {
            "lines": 127,
            "tokens": 1614,
            "sources": 1,
            "clones": 28,
            "duplicatedLines": 221,
            "duplicatedTokens": 2926,
            "percentage": 174.02,
            "percentageTokens": 181.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py": {
            "lines": 117,
            "tokens": 1476,
            "sources": 1,
            "clones": 20,
            "duplicatedLines": 150,
            "duplicatedTokens": 2010,
            "percentage": 128.21,
            "percentageTokens": 136.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py": {
            "lines": 109,
            "tokens": 1368,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 112,
            "duplicatedTokens": 1453,
            "percentage": 102.75,
            "percentageTokens": 106.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py": {
            "lines": 101,
            "tokens": 1248,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 144,
            "duplicatedTokens": 1766,
            "percentage": 142.57,
            "percentageTokens": 141.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py": {
            "lines": 97,
            "tokens": 1209,
            "sources": 1,
            "clones": 13,
            "duplicatedLines": 97,
            "duplicatedTokens": 1268,
            "percentage": 100,
            "percentageTokens": 104.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2007_validate_parameters_consistency_by_cli.py": {
            "lines": 49,
            "tokens": 493,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 34,
            "duplicatedTokens": 452,
            "percentage": 69.39,
            "percentageTokens": 91.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2006_validate_config_function_by_cli.py": {
            "lines": 81,
            "tokens": 950,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 20,
            "duplicatedTokens": 221,
            "percentage": 24.69,
            "percentageTokens": 23.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2005_validate_password_option_by_cli.py": {
            "lines": 105,
            "tokens": 1165,
            "sources": 1,
            "clones": 20,
            "duplicatedLines": 156,
            "duplicatedTokens": 1935,
            "percentage": 148.57,
            "percentageTokens": 166.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2004_validate_username_option_by_cli.py": {
            "lines": 98,
            "tokens": 1120,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 108,
            "duplicatedTokens": 1331,
            "percentage": 110.2,
            "percentageTokens": 118.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2003_validate_server_option_by_cli.py": {
            "lines": 95,
            "tokens": 1041,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 63,
            "duplicatedTokens": 807,
            "percentage": 66.32,
            "percentageTokens": 77.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2002_validate_env_option_by_cli.py": {
            "lines": 87,
            "tokens": 972,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 49,
            "duplicatedTokens": 598,
            "percentage": 56.32,
            "percentageTokens": 61.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier2/tc_2001_validate_owner_option_by_cli.py": {
            "lines": 84,
            "tokens": 807,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 26,
            "duplicatedTokens": 332,
            "percentage": 30.95,
            "percentageTokens": 41.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1113_check_virtwho_status.py": {
            "lines": 98,
            "tokens": 962,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 9.18,
            "percentageTokens": 7.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1112_check_http_proxy_option_by_etc_conf.py": {
            "lines": 67,
            "tokens": 855,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 45,
            "duplicatedTokens": 645,
            "percentage": 67.16,
            "percentageTokens": 75.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1111_template_conf_validation.py": {
            "lines": 45,
            "tokens": 375,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 20,
            "percentageTokens": 20.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py": {
            "lines": 36,
            "tokens": 363,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 25,
            "percentageTokens": 20.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py": {
            "lines": 38,
            "tokens": 374,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 122,
            "duplicatedTokens": 1123,
            "percentage": 321.05,
            "percentageTokens": 300.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1108_check_hypervisor_facts.py": {
            "lines": 107,
            "tokens": 1086,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 187,
            "percentage": 19.63,
            "percentageTokens": 17.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py": {
            "lines": 52,
            "tokens": 637,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 175,
            "percentage": 38.46,
            "percentageTokens": 27.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py": {
            "lines": 77,
            "tokens": 965,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 13,
            "duplicatedTokens": 147,
            "percentage": 16.88,
            "percentageTokens": 15.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py": {
            "lines": 110,
            "tokens": 1325,
            "sources": 1,
            "clones": 33,
            "duplicatedLines": 521,
            "duplicatedTokens": 4697,
            "percentage": 473.64,
            "percentageTokens": 354.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py": {
            "lines": 52,
            "tokens": 578,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 15.38,
            "percentageTokens": 12.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py": {
            "lines": 66,
            "tokens": 714,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 18,
            "duplicatedTokens": 255,
            "percentage": 27.27,
            "percentageTokens": 35.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py": {
            "lines": 84,
            "tokens": 1101,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 119,
            "duplicatedTokens": 1438,
            "percentage": 141.67,
            "percentageTokens": 130.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py": {
            "lines": 70,
            "tokens": 874,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 66,
            "duplicatedTokens": 829,
            "percentage": 94.29,
            "percentageTokens": 94.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py": {
            "lines": 106,
            "tokens": 1226,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 74,
            "duplicatedTokens": 868,
            "percentage": 69.81,
            "percentageTokens": 70.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py": {
            "lines": 91,
            "tokens": 1076,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 119,
            "duplicatedTokens": 1212,
            "percentage": 130.77,
            "percentageTokens": 112.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py": {
            "lines": 76,
            "tokens": 930,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 78,
            "duplicatedTokens": 943,
            "percentage": 102.63,
            "percentageTokens": 101.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py": {
            "lines": 47,
            "tokens": 461,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 74,
            "duplicatedTokens": 821,
            "percentage": 157.45,
            "percentageTokens": 178.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py": {
            "lines": 56,
            "tokens": 607,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 158,
            "duplicatedTokens": 1523,
            "percentage": 282.14,
            "percentageTokens": 250.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py": {
            "lines": 56,
            "tokens": 607,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 54,
            "duplicatedTokens": 596,
            "percentage": 96.43,
            "percentageTokens": 98.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py": {
            "lines": 68,
            "tokens": 699,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 43,
            "duplicatedTokens": 441,
            "percentage": 63.24,
            "percentageTokens": 63.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py": {
            "lines": 82,
            "tokens": 939,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 83,
            "duplicatedTokens": 918,
            "percentage": 101.22,
            "percentageTokens": 97.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py": {
            "lines": 44,
            "tokens": 436,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 39,
            "duplicatedTokens": 376,
            "percentage": 88.64,
            "percentageTokens": 86.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py": {
            "lines": 74,
            "tokens": 831,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 74,
            "duplicatedTokens": 807,
            "percentage": 100,
            "percentageTokens": 97.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py": {
            "lines": 64,
            "tokens": 735,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 45,
            "duplicatedTokens": 486,
            "percentage": 70.31,
            "percentageTokens": 66.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py": {
            "lines": 65,
            "tokens": 781,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 39,
            "duplicatedTokens": 426,
            "percentage": 60,
            "percentageTokens": 54.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py": {
            "lines": 52,
            "tokens": 551,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 61,
            "duplicatedTokens": 648,
            "percentage": 117.31,
            "percentageTokens": 117.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py": {
            "lines": 52,
            "tokens": 551,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 57,
            "duplicatedTokens": 620,
            "percentage": 109.62,
            "percentageTokens": 112.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py": {
            "lines": 54,
            "tokens": 545,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 48,
            "duplicatedTokens": 464,
            "percentage": 88.89,
            "percentageTokens": 85.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py": {
            "lines": 56,
            "tokens": 600,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 353,
            "percentage": 66.07,
            "percentageTokens": 58.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py": {
            "lines": 42,
            "tokens": 418,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 358,
            "percentage": 88.1,
            "percentageTokens": 85.65,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py": {
            "lines": 52,
            "tokens": 549,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 167,
            "duplicatedTokens": 1674,
            "percentage": 321.15,
            "percentageTokens": 304.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py": {
            "lines": 52,
            "tokens": 549,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 57,
            "duplicatedTokens": 618,
            "percentage": 109.62,
            "percentageTokens": 112.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py": {
            "lines": 54,
            "tokens": 543,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 48,
            "duplicatedTokens": 462,
            "percentage": 88.89,
            "percentageTokens": 85.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py": {
            "lines": 68,
            "tokens": 752,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 45,
            "duplicatedTokens": 453,
            "percentage": 66.18,
            "percentageTokens": 60.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py": {
            "lines": 42,
            "tokens": 415,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 355,
            "percentage": 88.1,
            "percentageTokens": 85.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py": {
            "lines": 55,
            "tokens": 555,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 192,
            "percentage": 40,
            "percentageTokens": 34.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py": {
            "lines": 43,
            "tokens": 425,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 305,
            "percentage": 72.09,
            "percentageTokens": 71.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1076_check_guest_facts_by_subscription_manager.py": {
            "lines": 61,
            "tokens": 564,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 171,
            "percentage": 32.79,
            "percentageTokens": 30.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py": {
            "lines": 30,
            "tokens": 294,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 172,
            "percentage": 70,
            "percentageTokens": 58.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py": {
            "lines": 46,
            "tokens": 513,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 184,
            "percentage": 50,
            "percentageTokens": 35.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1073_check_mapping_info_point_to_specified_owner.py": {
            "lines": 43,
            "tokens": 422,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 288,
            "percentage": 79.07,
            "percentageTokens": 68.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py": {
            "lines": 59,
            "tokens": 712,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 34,
            "duplicatedTokens": 352,
            "percentage": 57.63,
            "percentageTokens": 49.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py": {
            "lines": 61,
            "tokens": 656,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 76,
            "duplicatedTokens": 797,
            "percentage": 124.59,
            "percentageTokens": 121.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py": {
            "lines": 55,
            "tokens": 578,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 569,
            "percentage": 98.18,
            "percentageTokens": 98.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py": {
            "lines": 40,
            "tokens": 385,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 303,
            "percentage": 75,
            "percentageTokens": 78.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py": {
            "lines": 61,
            "tokens": 662,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 67,
            "duplicatedTokens": 699,
            "percentage": 109.84,
            "percentageTokens": 105.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py": {
            "lines": 49,
            "tokens": 556,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 63,
            "duplicatedTokens": 822,
            "percentage": 128.57,
            "percentageTokens": 147.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py": {
            "lines": 36,
            "tokens": 362,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 32,
            "duplicatedTokens": 319,
            "percentage": 88.89,
            "percentageTokens": 88.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py": {
            "lines": 32,
            "tokens": 316,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 30,
            "duplicatedTokens": 299,
            "percentage": 93.75,
            "percentageTokens": 94.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py": {
            "lines": 36,
            "tokens": 362,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 27,
            "duplicatedTokens": 277,
            "percentage": 75,
            "percentageTokens": 76.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py": {
            "lines": 46,
            "tokens": 518,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 38,
            "duplicatedTokens": 447,
            "percentage": 82.61,
            "percentageTokens": 86.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py": {
            "lines": 44,
            "tokens": 493,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 469,
            "percentage": 95.45,
            "percentageTokens": 95.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py": {
            "lines": 85,
            "tokens": 1044,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 43,
            "duplicatedTokens": 502,
            "percentage": 50.59,
            "percentageTokens": 48.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py": {
            "lines": 42,
            "tokens": 468,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 38,
            "duplicatedTokens": 414,
            "percentage": 90.48,
            "percentageTokens": 88.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py": {
            "lines": 46,
            "tokens": 551,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 22,
            "duplicatedTokens": 298,
            "percentage": 47.83,
            "percentageTokens": 54.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py": {
            "lines": 41,
            "tokens": 453,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 25,
            "duplicatedTokens": 260,
            "percentage": 60.98,
            "percentageTokens": 57.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py": {
            "lines": 42,
            "tokens": 501,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 37,
            "duplicatedTokens": 424,
            "percentage": 88.1,
            "percentageTokens": 84.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py": {
            "lines": 30,
            "tokens": 304,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 15,
            "duplicatedTokens": 185,
            "percentage": 50,
            "percentageTokens": 60.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py": {
            "lines": 56,
            "tokens": 623,
            "sources": 1,
            "clones": 13,
            "duplicatedLines": 223,
            "duplicatedTokens": 2056,
            "percentage": 398.21,
            "percentageTokens": 330.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py": {
            "lines": 61,
            "tokens": 691,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 361,
            "percentage": 57.38,
            "percentageTokens": 52.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py": {
            "lines": 76,
            "tokens": 839,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 526,
            "percentage": 65.79,
            "percentageTokens": 62.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py": {
            "lines": 44,
            "tokens": 473,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 97,
            "duplicatedTokens": 944,
            "percentage": 220.45,
            "percentageTokens": 199.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py": {
            "lines": 64,
            "tokens": 797,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 53,
            "duplicatedTokens": 692,
            "percentage": 82.81,
            "percentageTokens": 86.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py": {
            "lines": 54,
            "tokens": 666,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 55,
            "duplicatedTokens": 709,
            "percentage": 101.85,
            "percentageTokens": 106.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py": {
            "lines": 53,
            "tokens": 653,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 35,
            "duplicatedTokens": 380,
            "percentage": 66.04,
            "percentageTokens": 58.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py": {
            "lines": 56,
            "tokens": 674,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 33,
            "duplicatedTokens": 367,
            "percentage": 58.93,
            "percentageTokens": 54.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py": {
            "lines": 56,
            "tokens": 674,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 299,
            "percentage": 55.36,
            "percentageTokens": 44.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py": {
            "lines": 112,
            "tokens": 1315,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 71,
            "duplicatedTokens": 806,
            "percentage": 63.39,
            "percentageTokens": 61.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py": {
            "lines": 62,
            "tokens": 701,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 54,
            "duplicatedTokens": 655,
            "percentage": 87.1,
            "percentageTokens": 93.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py": {
            "lines": 49,
            "tokens": 526,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 45,
            "duplicatedTokens": 481,
            "percentage": 91.84,
            "percentageTokens": 91.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py": {
            "lines": 60,
            "tokens": 685,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 58,
            "duplicatedTokens": 681,
            "percentage": 96.67,
            "percentageTokens": 99.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py": {
            "lines": 40,
            "tokens": 427,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 172,
            "percentage": 45,
            "percentageTokens": 40.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1040_check_virt_who_password_function.py": {
            "lines": 25,
            "tokens": 217,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 32,
            "percentageTokens": 34.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py": {
            "lines": 69,
            "tokens": 883,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 498,
            "percentage": 49.28,
            "percentageTokens": 56.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py": {
            "lines": 34,
            "tokens": 379,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 23.53,
            "percentageTokens": 19.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1037_check_sam_satellite_options_by_cli.py": {
            "lines": 37,
            "tokens": 374,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 24.32,
            "percentageTokens": 20.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py": {
            "lines": 43,
            "tokens": 439,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 276,
            "percentage": 72.09,
            "percentageTokens": 62.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py": {
            "lines": 46,
            "tokens": 470,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 27,
            "duplicatedTokens": 314,
            "percentage": 58.7,
            "percentageTokens": 66.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py": {
            "lines": 30,
            "tokens": 280,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 183,
            "percentage": 73.33,
            "percentageTokens": 65.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py": {
            "lines": 42,
            "tokens": 465,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 27,
            "duplicatedTokens": 248,
            "percentage": 64.29,
            "percentageTokens": 53.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1028_check_guest_attr_by_curl.py": {
            "lines": 59,
            "tokens": 660,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 158,
            "percentage": 23.73,
            "percentageTokens": 23.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py": {
            "lines": 56,
            "tokens": 608,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 14.29,
            "percentageTokens": 12.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1025_start_virtwho_service_by_ssh.py": {
            "lines": 46,
            "tokens": 454,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 17.39,
            "percentageTokens": 16.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py": {
            "lines": 43,
            "tokens": 468,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 18,
            "duplicatedTokens": 235,
            "percentage": 41.86,
            "percentageTokens": 50.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py": {
            "lines": 37,
            "tokens": 330,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 21.62,
            "percentageTokens": 22.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py": {
            "lines": 50,
            "tokens": 443,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 16,
            "percentageTokens": 16.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1021_check_reporter_id_function_by_cli.py": {
            "lines": 43,
            "tokens": 454,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 47,
            "duplicatedTokens": 541,
            "percentage": 109.3,
            "percentageTokens": 119.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1020_check_log_file_function_by_cli.py": {
            "lines": 46,
            "tokens": 563,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 17,
            "duplicatedTokens": 155,
            "percentage": 36.96,
            "percentageTokens": 27.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1019_check_log_dir_function_by_cli.py": {
            "lines": 47,
            "tokens": 564,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 383,
            "percentage": 63.83,
            "percentageTokens": 67.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1018_check_log_per_config_function_by_cli.py": {
            "lines": 77,
            "tokens": 953,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 37,
            "duplicatedTokens": 466,
            "percentage": 48.05,
            "percentageTokens": 48.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1017_check_config_function_by_cli.py": {
            "lines": 34,
            "tokens": 347,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 13,
            "duplicatedTokens": 150,
            "percentage": 38.24,
            "percentageTokens": 43.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1016_check_print_function_by_cli.py": {
            "lines": 54,
            "tokens": 585,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 16.67,
            "percentageTokens": 12.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1015_check_interval_function_by_etc_sysconfig.py": {
            "lines": 57,
            "tokens": 646,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 37,
            "duplicatedTokens": 461,
            "percentage": 64.91,
            "percentageTokens": 71.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1014_check_interval_function_by_cli.py": {
            "lines": 65,
            "tokens": 714,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 21,
            "duplicatedTokens": 228,
            "percentage": 32.31,
            "percentageTokens": 31.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py": {
            "lines": 42,
            "tokens": 476,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 38,
            "duplicatedTokens": 414,
            "percentage": 90.48,
            "percentageTokens": 86.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py": {
            "lines": 43,
            "tokens": 421,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 20.93,
            "percentageTokens": 18.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py": {
            "lines": 48,
            "tokens": 584,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 59,
            "duplicatedTokens": 772,
            "percentage": 122.92,
            "percentageTokens": 132.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1010_check_virtwho_debug_function_by_cli.py": {
            "lines": 46,
            "tokens": 492,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 142,
            "percentage": 30.43,
            "percentageTokens": 28.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py": {
            "lines": 36,
            "tokens": 332,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 23,
            "duplicatedTokens": 254,
            "percentage": 63.89,
            "percentageTokens": 76.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py": {
            "lines": 33,
            "tokens": 321,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 35,
            "duplicatedTokens": 337,
            "percentage": 106.06,
            "percentageTokens": 104.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py": {
            "lines": 33,
            "tokens": 328,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 195,
            "percentage": 54.55,
            "percentageTokens": 59.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1006_run_virtwho_with_default_config.py": {
            "lines": 38,
            "tokens": 453,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 21.05,
            "percentageTokens": 16.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1005_check_virtwho_service_function.py": {
            "lines": 41,
            "tokens": 398,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 19.51,
            "percentageTokens": 18.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py": {
            "lines": 40,
            "tokens": 423,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 20,
            "percentageTokens": 17.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1003_check_virtwho_package_info.py": {
            "lines": 56,
            "tokens": 608,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 76,
            "percentage": 16.07,
            "percentageTokens": 12.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py": {
            "lines": 42,
            "tokens": 422,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 19.05,
            "percentageTokens": 17.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py": {
            "lines": 50,
            "tokens": 423,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 75,
            "percentage": 16,
            "percentageTokens": 17.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "smoke/test_virtwho_smoke.py": {
            "lines": 229,
            "tokens": 3320,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 50,
            "duplicatedTokens": 670,
            "percentage": 21.83,
            "percentageTokens": 20.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "sca/test_virtwho_sca.py": {
            "lines": 70,
            "tokens": 876,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 114,
            "percentage": 11.43,
            "percentageTokens": 13.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "gating/test_virtwho_gating.py": {
            "lines": 114,
            "tokens": 1526,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 27,
            "duplicatedTokens": 348,
            "percentage": 23.68,
            "percentageTokens": 22.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 11581,
          "tokens": 130511,
          "sources": 182,
          "clones": 560,
          "duplicatedLines": 5350,
          "duplicatedTokens": 58147,
          "percentage": 46.2,
          "percentageTokens": 44.55,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 11581,
      "tokens": 130511,
      "sources": 182,
      "clones": 560,
      "duplicatedLines": 5350,
      "duplicatedTokens": 58147,
      "percentage": 46.2,
      "percentageTokens": 44.55,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133740'",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py",
        "start": 9,
        "end": 16,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 16,
          "column": 3,
          "position": 164
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 9,
        "end": 16,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 16,
          "column": 5,
          "position": 164
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133737'",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init(uid='01')\n\n        # case config\n        results = dict()\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 5,
          "position": 222
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 15,
          "position": 222
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_case_init(uid='01')\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_01_name = \"virtwho-config-{0}\".format(hypervisor1_type)\n        config_01_file = \"/etc/virt-who.d/{0}.conf\".format(config_01_name)\n        guest_01_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 17,
        "end": 27,
        "startLoc": {
          "line": 17,
          "column": 19,
          "position": 196
        },
        "endLoc": {
          "line": 27,
          "column": 14,
          "position": 282
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 15,
        "end": 25,
        "startLoc": {
          "line": 15,
          "column": 24,
          "position": 161
        },
        "endLoc": {
          "line": 25,
          "column": 15,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check mapping info included two hypervisors\")\n        res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)\n        res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 34,
        "end": 45,
        "startLoc": {
          "line": 34,
          "column": 2,
          "position": 362
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 510
        }
      },
      "secondFile": {
        "name": "tier3/tc_1035_check_mapping_info_with_dconf_and_cli_for_two_modes.py",
        "start": 31,
        "end": 42,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 337
        },
        "endLoc": {
          "line": 42,
          "column": 2,
          "position": 485
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133731'",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        self.vw_case_init(uid='01')\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_01_name = \"virtwho-config-{0}\".format(hypervisor1_type)\n        config_01_file = \"/etc/virt-who.d/{0}.conf\".format(config_01_name)\n        config_02_name = \"virtwho-config-{0}\".format(hypervisor2_type)\n        config_02_file = \"/etc/virt-who.d/{0}.conf\".format(config_02_name)\n        guest_01_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py",
        "start": 9,
        "end": 27,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 27,
          "column": 14,
          "position": 271
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 9,
        "end": 27,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 27,
          "column": 13,
          "position": 271
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "uid='02')\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check mapping info included two hypervisors\")\n        res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)\n        res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1032_check_mapping_info_with_two_files_for_two_modes_in_etc_virtwho_d.py",
        "start": 33,
        "end": 45,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 337
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 505
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 42,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 342
        },
        "endLoc": {
          "line": 42,
          "column": 2,
          "position": 485
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133733'",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        self.vw_case_init(uid='01')\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_01_name = \"virtwho-config-{0}\".format(hypervisor1_type)\n        config_01_file = \"/etc/virt-who.d/{0}.conf\".format(config_01_name)\n        config_02_name = \"virtwho-config-{0}\".format(hypervisor2_type)\n        config_02_file = \"/etc/virt-who.d/{0}.conf\".format(config_02_name)\n        guest_01_uuid = self.get_hypervisor_guestuuid(uid='01')\n        guest_02_uuid = self.get_hypervisor_guestuuid(uid='02')\n        \n        # case steps\n        logger.info(\">>>step1: create config file include two different hypervisors\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py",
        "start": 9,
        "end": 31,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 31,
          "column": 65,
          "position": 308
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 9,
        "end": 31,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 31,
          "column": 66,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check mapping info included two hypervisors\")\n        res1 = self.vw_msg_search(str(data), guest_01_uuid, exp_exist=True)\n        res2 = self.vw_msg_search(str(data), guest_02_uuid, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py",
        "start": 35,
        "end": 47,
        "startLoc": {
          "line": 35,
          "column": 2,
          "position": 378
        },
        "endLoc": {
          "line": 47,
          "column": 2,
          "position": 543
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 42,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 42,
          "column": 2,
          "position": 485
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133743'",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        hypervisor1_type = self.get_exported_param(\"HYPERVISOR_01_TYPE\")\n        hypervisor2_type = self.get_exported_param(\"HYPERVISOR_02_TYPE\")\n        if not hypervisor1_type or not hypervisor2_type:\n            raise FailException(\"This case needs two hypervisors for testing\")\n        if any(key in ('libvirt-local', 'vdsm') for key in (hypervisor1_type, hypervisor2_type)):\n            self.vw_case_skip(\"libvirt-local or vdsm\")\n        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init(uid='01')\n\n        # case config\n        results = dict()\n        config_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 12,
          "position": 222
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 15,
          "position": 222
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check how many modes in rhsm.log\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 49,
          "position": 287
        },
        "endLoc": {
          "line": 34,
          "column": 45,
          "position": 359
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198867'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2069_valide_insecure_option_for_kubevirt.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198375'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2068_validate_options_migration_during_virt_who_upgrade.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-198374'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2067_validate_uniform_mapping_format.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196078'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2066_validate_cluster_name_with_special_char.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195890'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2065_deprecation_warning_for_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-188359'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2063_check_hypervisors_fqdn.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175058'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2061_check_fake_mode_is_hypervisor_option.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175032'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-175019'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        compose_id = self.get_config('rhel_compose')\n        option",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 7,
          "position": 213
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 28,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 249
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-171258\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2058_post_large_json_to_rhsm.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136773\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2057_validate_subscription_register_clean_together.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        self.vw_thread_clean()\n        ret, output = self.run_service(self.ssh_host(), \"virt-who\", \"restart\")\n        time.sleep(30)\n        error_num, error_list = self.vw_callback_error_num()\n        thread_num = self.vw_callback_thread_num()\n        logger.info(\"error_num: {0}, thread_num: {1}\" .format(error_num, thread_num))\n        results.setdefault('step3'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2057_validate_subscription_register_clean_together.py",
        "start": 47,
        "end": 54,
        "startLoc": {
          "line": 47,
          "column": 16,
          "position": 502
        },
        "endLoc": {
          "line": 54,
          "column": 8,
          "position": 591
        }
      },
      "secondFile": {
        "name": "tier2/tc_2057_validate_subscription_register_clean_together.py",
        "start": 24,
        "end": 31,
        "startLoc": {
          "line": 24,
          "column": 42,
          "position": 195
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 284
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136771\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2056_validate_non_root_to_run_virtwho.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        self.vw_etc_d_mode_create(config_name, config_file)\n        new_user",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2056_validate_non_root_to_run_virtwho.py",
        "start": 12,
        "end": 23,
        "startLoc": {
          "line": 12,
          "column": 16,
          "position": 113
        },
        "endLoc": {
          "line": 23,
          "column": 9,
          "position": 202
        }
      },
      "secondFile": {
        "name": "tier2/tc_2057_validate_subscription_register_clean_together.py",
        "start": 9,
        "end": 20,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 20,
          "column": 16,
          "position": 165
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136781\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ":\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        self.vw_etc_d_mode_create(config_name, config_file)\n        config",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 16,
          "position": 100
        },
        "endLoc": {
          "line": 23,
          "column": 7,
          "position": 197
        }
      },
      "secondFile": {
        "name": "tier2/tc_2056_validate_non_root_to_run_virtwho.py",
        "start": 11,
        "end": 20,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 105
        },
        "endLoc": {
          "line": 20,
          "column": 16,
          "position": 165
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136726\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2054_validate_trigger_event_with_different_interval.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136733\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "()\n            data, tty_output, rhsm_output = self.vw_start()\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            output = self.system_sku_consumed(self.ssh_guest())\n            res2 = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)\n            res3 = self.validate_guest_state(data, owner, guest_uuid, exp_state=1)\n            results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py",
        "start": 90,
        "end": 96,
        "startLoc": {
          "line": 90,
          "column": 23,
          "position": 1108
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 1219
        }
      },
      "secondFile": {
        "name": "tier2/tc_2053_validate_guest_state_when_suspend_resume_stop_start.py",
        "start": 63,
        "end": 69,
        "startLoc": {
          "line": 63,
          "column": 24,
          "position": 715
        },
        "endLoc": {
          "line": 69,
          "column": 8,
          "position": 826
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id=\"RHEL-136725\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2052_validate_hypervisors_connection.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136708'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2051_validate_virt_who_password_commandline.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136708')\n        hypervisor_type",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2049_validate_hostname_without_domain.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 16,
          "position": 79
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 5,
          "position": 79
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137101'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2048_register_system_with_activaiton_key.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2048_register_system_with_activaiton_key.py",
        "start": 12,
        "end": 23,
        "startLoc": {
          "line": 12,
          "column": 14,
          "position": 106
        },
        "endLoc": {
          "line": 23,
          "column": 16,
          "position": 195
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 16,
          "position": 147
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137103'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 9,
          "position": 113
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 200
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 16,
        "end": 26,
        "startLoc": {
          "line": 16,
          "column": 9,
          "position": 150
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: delete virt-who host from webui\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 26,
        "end": 31,
        "startLoc": {
          "line": 26,
          "column": 42,
          "position": 208
        },
        "endLoc": {
          "line": 31,
          "column": 44,
          "position": 280
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137102'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        register_type = self.get_config('register_type')\n        if 'stage' in register_type:\n            self.vw_case_skip(register_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        host_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 18,
          "position": 88
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 208
        }
      },
      "secondFile": {
        "name": "tier2/tc_2048_register_system_with_activaiton_key.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_name = self.get_hypervisor_hostname()\n        guest_name",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 18,
        "end": 27,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 141
        },
        "endLoc": {
          "line": 27,
          "column": 11,
          "position": 230
        }
      },
      "secondFile": {
        "name": "tier2/tc_2066_validate_cluster_name_with_special_char.py",
        "start": 27,
        "end": 37,
        "startLoc": {
          "line": 27,
          "column": 9,
          "position": 229
        },
        "endLoc": {
          "line": 37,
          "column": 5,
          "position": 319
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n\n        # Case Steps\n        logger.info(\">>>step1: run virt-who to send mappings\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: get guest_id and vw_host_uuid\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 29,
        "end": 37,
        "startLoc": {
          "line": 29,
          "column": 2,
          "position": 265
        },
        "endLoc": {
          "line": 37,
          "column": 42,
          "position": 349
        }
      },
      "secondFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 23,
        "end": 38,
        "startLoc": {
          "line": 23,
          "column": 12,
          "position": 196
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137101')\n        hypervisor_type",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 16,
          "position": 79
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 79
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        register_type = self.get_config('register_type')\n        if 'stage' in register_type:\n            self.vw_case_skip(register_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 16,
          "position": 229
        }
      },
      "secondFile": {
        "name": "tier2/tc_2046_check_registered_by_item_in_satellite_webui.py",
        "start": 9,
        "end": 37,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 37,
          "column": 5,
          "position": 319
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "# Case Steps\n        logger.info(\">>>step1: run virt-who to send mappings\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical vdc for hypervisor, then check subscriptions\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2045_check_content_subscriptions_in_satellite_webui.py",
        "start": 35,
        "end": 41,
        "startLoc": {
          "line": 35,
          "column": 9,
          "position": 311
        },
        "endLoc": {
          "line": 41,
          "column": 73,
          "position": 391
        }
      },
      "secondFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 25,
        "end": 38,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 200
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137100'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2044_subscribe_guest_with_activation_key.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        register_type = self.get_config('register_type')\n        if 'stage' in register_type:\n            self.vw_case_skip(register_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        hypervisor_type",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2044_subscribe_guest_with_activation_key.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 25,
          "column": 16,
          "position": 197
        }
      },
      "secondFile": {
        "name": "tier2/tc_2048_register_system_with_activaiton_key.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step1', []).append(res)\n\n            logger.info(\">>>step2: Register guest with auto-attach enabled \"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2044_subscribe_guest_with_activation_key.py",
        "start": 60,
        "end": 65,
        "startLoc": {
          "line": 60,
          "column": 8,
          "position": 536
        },
        "endLoc": {
          "line": 65,
          "column": 53,
          "position": 608
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137111'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137110'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            if org == default_org:\n                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=True)\n                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=False)\n            else:\n                res2 = self.satellite_hosts_search(ssh_sat, register_config, default_org, host_name, host_uuid, exp_exist=False)\n                res3 = self.satellite_hosts_search(ssh_sat, register_config, extra_org, host_name, host_uuid, exp_exist=True)\n            results.setdefault(step, []).append(res1)\n            results.setdefault(step, []).append(res2)\n            results.setdefault(step, []).append(res3)\n\n        logger.info(\">>>step finally: delete host and hypervisor from extra_org\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 43,
        "end": 56,
        "startLoc": {
          "line": 43,
          "column": 16,
          "position": 475
        },
        "endLoc": {
          "line": 56,
          "column": 61,
          "position": 711
        }
      },
      "secondFile": {
        "name": "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 49,
        "end": 62,
        "startLoc": {
          "line": 49,
          "column": 10,
          "position": 546
        },
        "endLoc": {
          "line": 62,
          "column": 43,
          "position": 782
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136731'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config = self.get_register_config()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 21,
        "end": 29,
        "startLoc": {
          "line": 21,
          "column": 16,
          "position": 179
        },
        "endLoc": {
          "line": 29,
          "column": 14,
          "position": 262
        }
      },
      "secondFile": {
        "name": "tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 20,
        "end": 28,
        "startLoc": {
          "line": 20,
          "column": 8,
          "position": 164
        },
        "endLoc": {
          "line": 28,
          "column": 8,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136724'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"env.*differs|env.* is different|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 72,
        "end": 77,
        "startLoc": {
          "line": 72,
          "column": 12,
          "position": 866
        },
        "endLoc": {
          "line": 77,
          "column": 8,
          "position": 946
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 43,
        "end": 48,
        "startLoc": {
          "line": 43,
          "column": 13,
          "position": 451
        },
        "endLoc": {
          "line": 48,
          "column": 8,
          "position": 531
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136727'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 23,
          "position": 166
        }
      },
      "secondFile": {
        "name": "tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 9,
        "end": 20,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 20,
          "column": 17,
          "position": 165
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        self.vw_option_enable(\"[defaults]\", virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        register_config = self.get_register_config()\n        register_owner",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 13,
        "end": 28,
        "startLoc": {
          "line": 13,
          "column": 16,
          "position": 112
        },
        "endLoc": {
          "line": 28,
          "column": 15,
          "position": 241
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 14,
        "end": 29,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 29,
          "column": 13,
          "position": 275
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault('step1', []).append(res1)\n        results.setdefault('step1', []).append(res2)\n\n        logger.info(\">>>step2: disable owner option in /etc/virt-who.d/, \"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 35,
        "end": 42,
        "startLoc": {
          "line": 35,
          "column": 15,
          "position": 296
        },
        "endLoc": {
          "line": 42,
          "column": 55,
          "position": 405
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 35,
        "end": 42,
        "startLoc": {
          "line": 35,
          "column": 13,
          "position": 327
        },
        "endLoc": {
          "line": 42,
          "column": 89,
          "position": 436
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: skip this step because owner cannot be set to no-ascci\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 48,
        "end": 53,
        "startLoc": {
          "line": 48,
          "column": 6,
          "position": 469
        },
        "endLoc": {
          "line": 53,
          "column": 67,
          "position": 541
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 46,
        "end": 51,
        "startLoc": {
          "line": 46,
          "column": 2,
          "position": 494
        },
        "endLoc": {
          "line": 51,
          "column": 91,
          "position": 566
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: correct owner in /etc/virt-who.conf, \"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 68,
        "end": 74,
        "startLoc": {
          "line": 68,
          "column": 49,
          "position": 621
        },
        "endLoc": {
          "line": 74,
          "column": 50,
          "position": 710
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 63,
        "end": 69,
        "startLoc": {
          "line": 63,
          "column": 100,
          "position": 737
        },
        "endLoc": {
          "line": 69,
          "column": 93,
          "position": 826
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"owner.* is different|\"\n                    \"Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 78,
        "end": 84,
        "startLoc": {
          "line": 78,
          "column": 12,
          "position": 753
        },
        "endLoc": {
          "line": 84,
          "column": 8,
          "position": 836
        }
      },
      "secondFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 44,
        "end": 50,
        "startLoc": {
          "line": 44,
          "column": 13,
          "position": 423
        },
        "endLoc": {
          "line": 50,
          "column": 8,
          "position": 506
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        # Case Result\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 82,
        "end": 88,
        "startLoc": {
          "line": 82,
          "column": 6,
          "position": 799
        },
        "endLoc": {
          "line": 88,
          "column": 5,
          "position": 870
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 75,
        "end": 81,
        "startLoc": {
          "line": 75,
          "column": 2,
          "position": 909
        },
        "endLoc": {
          "line": 81,
          "column": 6,
          "position": 980
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137014'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2038_validate_global_configs_by_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name_1",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2038_validate_global_configs_by_virtwho_conf.py",
        "start": 9,
        "end": 21,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 21,
          "column": 14,
          "position": 177
        }
      },
      "secondFile": {
        "name": "tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 5,
          "position": 178
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136719'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2037_validate_global_oneshot_by_virtwho_conf.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 13,
          "position": 173
        }
      },
      "secondFile": {
        "name": "tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 13,
        "end": 25,
        "startLoc": {
          "line": 13,
          "column": 14,
          "position": 118
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136721'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2036_validate_global_debug_by_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136716'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136731')\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 3,
          "position": 79
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 16,
          "position": 79
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: interval is null value in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 11,
        "end": 25,
        "startLoc": {
          "line": 11,
          "column": 19,
          "position": 111
        },
        "endLoc": {
          "line": 25,
          "column": 57,
          "position": 215
        }
      },
      "secondFile": {
        "name": "tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 13,
        "end": 23,
        "startLoc": {
          "line": 13,
          "column": 14,
          "position": 118
        },
        "endLoc": {
          "line": 23,
          "column": 42,
          "position": 180
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136712'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 24,
          "column": 16,
          "position": 211
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 24,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 24,
          "column": 17,
          "position": 206
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who when all the options enabled with double quotes\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2033_validate_options_quoted_in_etc_virtwho_d.py",
        "start": 38,
        "end": 43,
        "startLoc": {
          "line": 38,
          "column": 14,
          "position": 377
        },
        "endLoc": {
          "line": 43,
          "column": 73,
          "position": 449
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136711'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        invalid_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py",
        "start": 9,
        "end": 23,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 23,
          "column": 13,
          "position": 200
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who with the unexpected config file name\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2032_validate_file_extension_name_in_etc_virtwho_d.py",
        "start": 26,
        "end": 31,
        "startLoc": {
          "line": 26,
          "column": 60,
          "position": 221
        },
        "endLoc": {
          "line": 31,
          "column": 62,
          "position": 290
        }
      },
      "secondFile": {
        "name": "tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 53,
          "position": 227
        },
        "endLoc": {
          "line": 32,
          "column": 54,
          "position": 296
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136639'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: add xxxxxx=aaa to config file\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2031_validate_unsupported_options_in_etc_virtwho_d.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 42,
          "position": 208
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136637'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n\n        # Case Steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 212
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 35,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136636'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py",
        "start": 16,
        "end": 28,
        "startLoc": {
          "line": 16,
          "column": 11,
          "position": 143
        },
        "endLoc": {
          "line": 28,
          "column": 14,
          "position": 243
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 15,
        "end": 24,
        "startLoc": {
          "line": 15,
          "column": 16,
          "position": 147
        },
        "endLoc": {
          "line": 24,
          "column": 17,
          "position": 206
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136635'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n        host_name = self.get_hypervisor_hostname()\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 9,
        "end": 28,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 28,
          "column": 3,
          "position": 254
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 33,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 33,
          "column": 13,
          "position": 287
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", value, config_file)\n                data, tty_output, rhsm_output = self.vw_start()\n                res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n                if key == \"step4\":\n                    res2 = self.vw_msg_search(str(data), hypervisorId, exp_exist=False)\n                    self",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 52,
        "end": 57,
        "startLoc": {
          "line": 52,
          "column": 15,
          "position": 578
        },
        "endLoc": {
          "line": 57,
          "column": 5,
          "position": 664
        }
      },
      "secondFile": {
        "name": "tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py",
        "start": 62,
        "end": 67,
        "startLoc": {
          "line": 62,
          "column": 22,
          "position": 709
        },
        "endLoc": {
          "line": 67,
          "column": 5,
          "position": 795
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n                else:\n                    res2 = self.vw_msg_search(str(data), hypervisorId, exp_exist=True)\n                results.setdefault(step, []).append(res1)\n                results.setdefault(step, []).append(res2)\n                self.vw_option_del(\"filter_hosts\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 57,
        "end": 62,
        "startLoc": {
          "line": 57,
          "column": 12,
          "position": 672
        },
        "endLoc": {
          "line": 62,
          "column": 15,
          "position": 740
        }
      },
      "secondFile": {
        "name": "tier2/tc_2029_validate_wildcard_for_filter_and_exclude_host_parents_options_in_etc_virtwho_d.py",
        "start": 66,
        "end": 71,
        "startLoc": {
          "line": 66,
          "column": 6,
          "position": 792
        },
        "endLoc": {
          "line": 71,
          "column": 23,
          "position": 860
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136632'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config['server']\n        register_username = register_config['username']\n        register_password = register_config['password']\n        register_prefix",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 28,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 28,
          "column": 16,
          "position": 242
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 27,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 27,
          "column": 14,
          "position": 241
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_encrypted_password=xxxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 43,
        "startLoc": {
          "line": 38,
          "column": 12,
          "position": 355
        },
        "endLoc": {
          "line": 43,
          "column": 61,
          "position": 427
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136631'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ")\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config['server']\n        register_username = register_config['username']\n        register_password = register_config['password']\n        register_prefix = register_config['prefix']\n        self.system_unregister(self.ssh_host())\n\n        # Case Steps\n        logger.info(\">>>step1: run virt-who with rhsm_hostname, \"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 12,
        "end": 33,
        "startLoc": {
          "line": 12,
          "column": 15,
          "position": 101
        },
        "endLoc": {
          "line": 33,
          "column": 46,
          "position": 284
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 13,
        "end": 32,
        "startLoc": {
          "line": 13,
          "column": 18,
          "position": 124
        },
        "endLoc": {
          "line": 32,
          "column": 65,
          "position": 272
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 34,
        "end": 40,
        "startLoc": {
          "line": 34,
          "column": 36,
          "position": 288
        },
        "endLoc": {
          "line": 40,
          "column": 5,
          "position": 361
        }
      },
      "secondFile": {
        "name": "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 34,
        "end": 40,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 314
        },
        "endLoc": {
          "line": 40,
          "column": 10,
          "position": 387
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_password=xxxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 18,
          "position": 355
        },
        "endLoc": {
          "line": 44,
          "column": 51,
          "position": 430
        }
      },
      "secondFile": {
        "name": "tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 38,
        "startLoc": {
          "line": 38,
          "column": 16,
          "position": 352
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n        res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: run virt-who with rhsm_password=红帽©¥®ðπ∉\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 48,
        "end": 53,
        "startLoc": {
          "line": 48,
          "column": 6,
          "position": 486
        },
        "endLoc": {
          "line": 53,
          "column": 53,
          "position": 558
        }
      },
      "secondFile": {
        "name": "tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 47,
        "end": 52,
        "startLoc": {
          "line": 47,
          "column": 6,
          "position": 483
        },
        "endLoc": {
          "line": 52,
          "column": 27,
          "position": 555
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: run virt-who with rhsm_password null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 64,
        "end": 69,
        "startLoc": {
          "line": 64,
          "column": 6,
          "position": 690
        },
        "endLoc": {
          "line": 69,
          "column": 55,
          "position": 762
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 55,
        "end": 60,
        "startLoc": {
          "line": 55,
          "column": 6,
          "position": 624
        },
        "endLoc": {
          "line": 60,
          "column": 83,
          "position": 696
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136630'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        compose_id = self.get_config('rhel_compose')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config['server']\n        register_username = register_config['username']\n        register_password = register_config['password']\n        register_prefix = register_config['prefix']\n        self.system_unregister(self.ssh_host())\n\n        # Case Steps\n        logger.info(\">>>step1: run virt-who with rhsm_hostname, rhsm_port, \"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 33,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 33,
          "column": 57,
          "position": 284
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 32,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 32,
          "column": 65,
          "position": 272
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_username=xxxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 34,
        "end": 44,
        "startLoc": {
          "line": 34,
          "column": 25,
          "position": 288
        },
        "endLoc": {
          "line": 44,
          "column": 51,
          "position": 430
        }
      },
      "secondFile": {
        "name": "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 34,
        "end": 38,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 314
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", \"xxxxxx\", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n        res2 = self.vw_msg_search(rhsm_output, error_msg, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: run virt-who with rhsm_username=红帽©¥®ðπ∉\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 46,
        "end": 53,
        "startLoc": {
          "line": 46,
          "column": 16,
          "position": 446
        },
        "endLoc": {
          "line": 53,
          "column": 53,
          "position": 558
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 46,
        "end": 52,
        "startLoc": {
          "line": 46,
          "column": 16,
          "position": 446
        },
        "endLoc": {
          "line": 52,
          "column": 27,
          "position": 555
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(\n                data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: run virt-who with rhsm_username null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 71,
        "end": 77,
        "startLoc": {
          "line": 71,
          "column": 13,
          "position": 773
        },
        "endLoc": {
          "line": 77,
          "column": 55,
          "position": 861
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 64,
        "end": 60,
        "startLoc": {
          "line": 64,
          "column": 13,
          "position": 676
        },
        "endLoc": {
          "line": 60,
          "column": 83,
          "position": 696
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ", \" \", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        error_num = 1\n        if 'RHEL-9' in compose_id:\n            error_num = 2\n        res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)\n        res2 = self.vw_msg_search(rhsm_output, error_msg)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: run virt-who with rhsm_username disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 79,
        "end": 89,
        "startLoc": {
          "line": 79,
          "column": 16,
          "position": 877
        },
        "endLoc": {
          "line": 89,
          "column": 52,
          "position": 1008
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 71,
        "end": 81,
        "startLoc": {
          "line": 71,
          "column": 16,
          "position": 778
        },
        "endLoc": {
          "line": 81,
          "column": 52,
          "position": 909
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)\n        res2 = self.vw_msg_search(rhsm_output, error_msg)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        # Case Result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 90,
        "end": 98,
        "startLoc": {
          "line": 90,
          "column": 16,
          "position": 1017
        },
        "endLoc": {
          "line": 98,
          "column": 2,
          "position": 1125
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 82,
        "end": 90,
        "startLoc": {
          "line": 82,
          "column": 16,
          "position": 918
        },
        "endLoc": {
          "line": 90,
          "column": 2,
          "position": 1026
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-137169'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config['server']\n        register_username = register_config['username']\n        register_password = register_config['password']\n        register_prefix = register_config['prefix']\n        self.system_unregister(self.ssh_host())\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 30,
          "column": 5,
          "position": 264
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 12,
        "end": 31,
        "startLoc": {
          "line": 12,
          "column": 19,
          "position": 112
        },
        "endLoc": {
          "line": 31,
          "column": 13,
          "position": 265
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "logger.info(\">>>step1: run virt-who with rhsm_hostname, \"\n                        \"rhsm_port, rhsm_prefix good value\")\n            self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n            self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n            self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n            self.vw_option_add(\"rhsm_username\", register_username, config_file)\n            self.vw_option_add(\"rhsm_password\", register_password, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step1', []).append(res)\n\n            logger.info(\">>>step2: run virt-who with rhsm_prefix=/xxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 35,
        "end": 46,
        "startLoc": {
          "line": 35,
          "column": 13,
          "position": 295
        },
        "endLoc": {
          "line": 46,
          "column": 47,
          "position": 445
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 9,
          "position": 280
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ", config_file)\n            data, tty_output, rhsm_output = self.vw_start()\n            if \"stage\" in server_type:\n                res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n                results.setdefault('step3', []).append(res1)\n            else:\n                res1 = self.op_normal_value(\n                    data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n                res2 = self.vw_msg_search(rhsm_output, 'HTTP error', exp_exist=True)\n                results.setdefault('step3', []).append(res1)\n                results.setdefault('step3', []).append(res2)\n\n        finally",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 66,
        "end": 78,
        "startLoc": {
          "line": 66,
          "column": 14,
          "position": 719
        },
        "endLoc": {
          "line": 78,
          "column": 8,
          "position": 884
        }
      },
      "secondFile": {
        "name": "tier2/tc_2024_validate_rhsm_prefix_option_in_etc_virtwho_d.py",
        "start": 53,
        "end": 65,
        "startLoc": {
          "line": 53,
          "column": 4,
          "position": 541
        },
        "endLoc": {
          "line": 65,
          "column": 7,
          "position": 706
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136628'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        compose_id = self.get_config('rhel_compose')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config['server']\n        register_username = register_config['username']\n        register_password = register_config['password']\n        register_prefix = register_config['prefix']\n        self.system_unregister(self.ssh_host())\n        self.vw_option_disable(\"port\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 30,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 30,
          "column": 7,
          "position": 279
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 30,
          "column": 9,
          "position": 268
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n            self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n            self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n            self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n            self.vw_option_add(\"rhsm_username\", register_username, config_file)\n            self.vw_option_add(\"rhsm_password\", register_password, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step1', []).append(res)\n\n            logger.info(\">>>step2: run virt-who with rhsm_port=123\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 34,
        "end": 44,
        "startLoc": {
          "line": 34,
          "column": 79,
          "position": 299
        },
        "endLoc": {
          "line": 44,
          "column": 44,
          "position": 441
        }
      },
      "secondFile": {
        "name": "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 34,
        "end": 38,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 314
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136627'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        compose_id = self.get_config('rhel_compose')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config['server']\n        register_username = register_config['username']\n        register_password = register_config['password']\n        register_prefix = register_config['prefix']\n        self.system_unregister(self.ssh_host())\n        self.vw_option_disable(\"hostname\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 31,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 31,
          "column": 11,
          "position": 280
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 10,
        "end": 30,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 30,
          "column": 9,
          "position": 268
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "logger.info(\">>>step1: run virt-who with rhsm_hostname, rhsm_port, \"\n                        \"rhsm_prefix good value\")\n            self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n            self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n            self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n            self.vw_option_add(\"rhsm_username\", register_username, config_file)\n            self.vw_option_add(\"rhsm_password\", register_password, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step1', []).append(res)\n\n            logger.info(\">>>step2: run virt-who with rhsm_hostname=xxxxxx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py",
        "start": 35,
        "end": 46,
        "startLoc": {
          "line": 35,
          "column": 13,
          "position": 295
        },
        "endLoc": {
          "line": 46,
          "column": 51,
          "position": 445
        }
      },
      "secondFile": {
        "name": "tier2/tc_2025_validate_rhsm_username_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 9,
          "position": 280
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", config_file)\n            data, tty_output, rhsm_output = self.vw_start()\n            error_num = 1\n            if 'RHEL-9' in compose_id:\n                error_num = 2\n            res1 = self.op_normal_value(data, exp_error=error_num, exp_thread=1, exp_send=0)\n            res2 = self.vw_msg_search(rhsm_output, \"Name or service not known\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2022_validate_rhsm_hostname_option_in_etc_virtwho_d.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 9,
          "position": 457
        },
        "endLoc": {
          "line": 53,
          "column": 28,
          "position": 542
        }
      },
      "secondFile": {
        "name": "tier2/tc_2026_validate_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 71,
        "end": 77,
        "startLoc": {
          "line": 71,
          "column": 4,
          "position": 781
        },
        "endLoc": {
          "line": 77,
          "column": 10,
          "position": 866
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136592'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        msg_list",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py",
        "start": 13,
        "end": 25,
        "startLoc": {
          "line": 13,
          "column": 11,
          "position": 124
        },
        "endLoc": {
          "line": 25,
          "column": 9,
          "position": 222
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 7,
          "position": 138
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n        \n        for",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2021_validate_encryped_password_option_by_virtwho_d.py",
        "start": 34,
        "end": 39,
        "startLoc": {
          "line": 34,
          "column": 2,
          "position": 313
        },
        "endLoc": {
          "line": 39,
          "column": 4,
          "position": 383
        }
      },
      "secondFile": {
        "name": "tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 43,
        "startLoc": {
          "line": 38,
          "column": 2,
          "position": 354
        },
        "endLoc": {
          "line": 43,
          "column": 7,
          "position": 423
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136591'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: password option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 35,
        "end": 40,
        "startLoc": {
          "line": 35,
          "column": 42,
          "position": 252
        },
        "endLoc": {
          "line": 40,
          "column": 43,
          "position": 324
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step2', []).append(res1)\n            results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: password option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 48,
        "end": 53,
        "startLoc": {
          "line": 48,
          "column": 8,
          "position": 439
        },
        "endLoc": {
          "line": 53,
          "column": 46,
          "position": 511
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 46,
        "end": 51,
        "startLoc": {
          "line": 46,
          "column": 2,
          "position": 494
        },
        "endLoc": {
          "line": 51,
          "column": 91,
          "position": 566
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n                res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step3', []).append(res1)\n            results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: password option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 68,
        "end": 73,
        "startLoc": {
          "line": 68,
          "column": 8,
          "position": 709
        },
        "endLoc": {
          "line": 73,
          "column": 42,
          "position": 781
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 55,
        "end": 60,
        "startLoc": {
          "line": 55,
          "column": 6,
          "position": 624
        },
        "endLoc": {
          "line": 60,
          "column": 83,
          "position": 696
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step4', []).append(res1)\n            results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: password option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 81,
        "end": 86,
        "startLoc": {
          "line": 81,
          "column": 8,
          "position": 896
        },
        "endLoc": {
          "line": 86,
          "column": 39,
          "position": 968
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 64,
        "end": 69,
        "startLoc": {
          "line": 64,
          "column": 8,
          "position": 754
        },
        "endLoc": {
          "line": 69,
          "column": 93,
          "position": 826
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step7'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 119,
        "end": 124,
        "startLoc": {
          "line": 119,
          "column": 3,
          "position": 1410
        },
        "endLoc": {
          "line": 124,
          "column": 8,
          "position": 1485
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 104,
        "end": 109,
        "startLoc": {
          "line": 104,
          "column": 14,
          "position": 1200
        },
        "endLoc": {
          "line": 109,
          "column": 8,
          "position": 1275
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136590'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: username option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 36,
        "end": 41,
        "startLoc": {
          "line": 36,
          "column": 42,
          "position": 253
        },
        "endLoc": {
          "line": 41,
          "column": 43,
          "position": 325
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(\n                    data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n                res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)\n        else:\n            res1 = self.op_normal_value(\n                data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, error_msg",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 61,
        "end": 67,
        "startLoc": {
          "line": 61,
          "column": 17,
          "position": 605
        },
        "endLoc": {
          "line": 67,
          "column": 10,
          "position": 698
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 65,
        "end": 69,
        "startLoc": {
          "line": 65,
          "column": 17,
          "position": 644
        },
        "endLoc": {
          "line": 69,
          "column": 9,
          "position": 733
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_option_update_value(option_tested, '', config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step4', []).append(res1)\n        else:\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, error_msg",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 71,
        "end": 81,
        "startLoc": {
          "line": 71,
          "column": 42,
          "position": 747
        },
        "endLoc": {
          "line": 81,
          "column": 10,
          "position": 887
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 73,
        "end": 82,
        "startLoc": {
          "line": 73,
          "column": 42,
          "position": 782
        },
        "endLoc": {
          "line": 82,
          "column": 9,
          "position": 920
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        self.vw_option_disable(option_tested, config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step5', []).append(res1)\n        else:\n            msg_list",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 85,
        "end": 94,
        "startLoc": {
          "line": 85,
          "column": 39,
          "position": 936
        },
        "endLoc": {
          "line": 94,
          "column": 9,
          "position": 1035
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 86,
        "end": 94,
        "startLoc": {
          "line": 86,
          "column": 39,
          "position": 969
        },
        "endLoc": {
          "line": 94,
          "column": 12,
          "position": 1066
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        config_name_ok = \"virtwho-config-ok\"\n        config_file_ok = \"/etc/virt-who.d/{0}.conf\".format(config_name_ok)\n        self.vw_etc_d_mode_create(config_name_ok, config_file_ok)\n        self.vw_option_disable(option_tested, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step6', []).append(res1)\n        else:\n            msg_list",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 100,
        "end": 112,
        "startLoc": {
          "line": 100,
          "column": 64,
          "position": 1131
        },
        "endLoc": {
          "line": 112,
          "column": 9,
          "position": 1263
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 100,
        "end": 111,
        "startLoc": {
          "line": 100,
          "column": 64,
          "position": 1162
        },
        "endLoc": {
          "line": 111,
          "column": 12,
          "position": 1292
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_option_enable(option_tested, config_file)\n        self.vw_option_update_value(option_tested, '', config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt-remote\" in hypervisor_type:\n            logger.warning(\n                \"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step7', []).append(res1)\n        else:\n            res1 = self.op_normal_value(data, exp_error=\"1|2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 118,
        "end": 128,
        "startLoc": {
          "line": 118,
          "column": 61,
          "position": 1359
        },
        "endLoc": {
          "line": 128,
          "column": 6,
          "position": 1488
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 117,
        "end": 126,
        "startLoc": {
          "line": 117,
          "column": 61,
          "position": 1388
        },
        "endLoc": {
          "line": 126,
          "column": 8,
          "position": 1515
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136589'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: server option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 19,
        "end": 27,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 156
        },
        "endLoc": {
          "line": 27,
          "column": 40,
          "position": 230
        }
      },
      "secondFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n \n        logger.info(\">>>step2: server option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 40,
          "position": 231
        },
        "endLoc": {
          "line": 32,
          "column": 41,
          "position": 304
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        else:\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: server option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 41,
        "end": 48,
        "startLoc": {
          "line": 41,
          "column": 2,
          "position": 394
        },
        "endLoc": {
          "line": 48,
          "column": 44,
          "position": 487
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 46,
        "end": 51,
        "startLoc": {
          "line": 46,
          "column": 5,
          "position": 418
        },
        "endLoc": {
          "line": 51,
          "column": 91,
          "position": 566
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n \n        logger.info(\">>>step4: server option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 64,
        "end": 69,
        "startLoc": {
          "line": 64,
          "column": 13,
          "position": 636
        },
        "endLoc": {
          "line": 69,
          "column": 40,
          "position": 723
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 68,
        "end": 60,
        "startLoc": {
          "line": 68,
          "column": 17,
          "position": 695
        },
        "endLoc": {
          "line": 60,
          "column": 83,
          "position": 696
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: server option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 82,
        "end": 87,
        "startLoc": {
          "line": 82,
          "column": 2,
          "position": 873
        },
        "endLoc": {
          "line": 87,
          "column": 37,
          "position": 940
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 64,
        "end": 69,
        "startLoc": {
          "line": 64,
          "column": 2,
          "position": 759
        },
        "endLoc": {
          "line": 69,
          "column": 93,
          "position": 826
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n            msg_list = [\"Name or service not known|\"\n                        \"Connection timed out|\"\n                        \"Failed to connect|\"\n                        \"Error in .* backend\"]\n            res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        else:\n            msg_list = [\"SERVER.* not set|virt-who can't be started|No host supplied\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 91,
        "end": 102,
        "startLoc": {
          "line": 91,
          "column": 95,
          "position": 987
        },
        "endLoc": {
          "line": 102,
          "column": 8,
          "position": 1119
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 73,
        "end": 84,
        "startLoc": {
          "line": 73,
          "column": 91,
          "position": 773
        },
        "endLoc": {
          "line": 84,
          "column": 8,
          "position": 905
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n \n        logger.info(\">>>step6: server option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 99,
        "end": 105,
        "startLoc": {
          "line": 99,
          "column": 62,
          "position": 1065
        },
        "endLoc": {
          "line": 105,
          "column": 62,
          "position": 1155
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 94,
        "end": 100,
        "startLoc": {
          "line": 94,
          "column": 47,
          "position": 1041
        },
        "endLoc": {
          "line": 100,
          "column": 64,
          "position": 1130
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step6', []).append(res1)\n        results.setdefault('step6', []).append(res2)\n \n        logger.info(\">>>step7: server option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 112,
        "end": 117,
        "startLoc": {
          "line": 112,
          "column": 8,
          "position": 1243
        },
        "endLoc": {
          "line": 117,
          "column": 59,
          "position": 1316
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 113,
        "end": 118,
        "startLoc": {
          "line": 113,
          "column": 6,
          "position": 1286
        },
        "endLoc": {
          "line": 118,
          "column": 61,
          "position": 1358
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7', []).append(res1)\n        results.setdefault('step7', []).append(res2)\n\n        # Case Result\n        notes",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 125,
        "end": 131,
        "startLoc": {
          "line": 125,
          "column": 9,
          "position": 1383
        },
        "endLoc": {
          "line": 131,
          "column": 6,
          "position": 1468
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 126,
        "end": 132,
        "startLoc": {
          "line": 126,
          "column": 13,
          "position": 1502
        },
        "endLoc": {
          "line": 132,
          "column": 5,
          "position": 1587
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136588'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: env option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 24,
        "end": 32,
        "startLoc": {
          "line": 24,
          "column": 9,
          "position": 211
        },
        "endLoc": {
          "line": 32,
          "column": 37,
          "position": 285
        }
      },
      "secondFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: env option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 37,
          "position": 286
        },
        "endLoc": {
          "line": 37,
          "column": 38,
          "position": 358
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", \"xxxxxx\", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"env.*differs|env.* is different|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: env option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 46,
        "startLoc": {
          "line": 38,
          "column": 14,
          "position": 367
        },
        "endLoc": {
          "line": 46,
          "column": 41,
          "position": 488
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 72,
        "end": 51,
        "startLoc": {
          "line": 72,
          "column": 6,
          "position": 860
        },
        "endLoc": {
          "line": 51,
          "column": 91,
          "position": 566
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"codec can't decode|Communication with subscription manager failed|env.*differs\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: env option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 47,
        "end": 55,
        "startLoc": {
          "line": 47,
          "column": 12,
          "position": 503
        },
        "endLoc": {
          "line": 55,
          "column": 37,
          "position": 618
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 52,
        "end": 60,
        "startLoc": {
          "line": 52,
          "column": 13,
          "position": 581
        },
        "endLoc": {
          "line": 60,
          "column": 83,
          "position": 696
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: env option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 56,
        "end": 64,
        "startLoc": {
          "line": 56,
          "column": 12,
          "position": 633
        },
        "endLoc": {
          "line": 64,
          "column": 34,
          "position": 748
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 61,
        "end": 69,
        "startLoc": {
          "line": 61,
          "column": 13,
          "position": 711
        },
        "endLoc": {
          "line": 69,
          "column": 93,
          "position": 826
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        logger.info(\">>>step6: env option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 68,
        "end": 73,
        "startLoc": {
          "line": 68,
          "column": 8,
          "position": 803
        },
        "endLoc": {
          "line": 73,
          "column": 59,
          "position": 875
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 95,
        "end": 100,
        "startLoc": {
          "line": 95,
          "column": 8,
          "position": 1058
        },
        "endLoc": {
          "line": 100,
          "column": 64,
          "position": 1130
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step6', []).append(res1)\n        results.setdefault('step6', []).append(res2)\n\n        logger.info(\">>>step7: env option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 79,
        "end": 85,
        "startLoc": {
          "line": 79,
          "column": 74,
          "position": 946
        },
        "endLoc": {
          "line": 85,
          "column": 56,
          "position": 1035
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 111,
        "end": 118,
        "startLoc": {
          "line": 111,
          "column": 56,
          "position": 1226
        },
        "endLoc": {
          "line": 118,
          "column": 61,
          "position": 1358
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"env not in|env.* not set|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 87,
        "end": 92,
        "startLoc": {
          "line": 87,
          "column": 3,
          "position": 1058
        },
        "endLoc": {
          "line": 92,
          "column": 8,
          "position": 1144
        }
      },
      "secondFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 77,
        "end": 82,
        "startLoc": {
          "line": 77,
          "column": 14,
          "position": 914
        },
        "endLoc": {
          "line": 82,
          "column": 8,
          "position": 1000
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7', []).append(res1)\n        results.setdefault('step7', []).append(res2)\n\n        # Case Result\n        notes = list()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 89,
        "end": 97,
        "startLoc": {
          "line": 89,
          "column": 74,
          "position": 1090
        },
        "endLoc": {
          "line": 97,
          "column": 14,
          "position": 1187
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 124,
        "end": 132,
        "startLoc": {
          "line": 124,
          "column": 25,
          "position": 1380
        },
        "endLoc": {
          "line": 132,
          "column": 3,
          "position": 1477
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136587'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: owner option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 19,
        "end": 27,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 142
        },
        "endLoc": {
          "line": 27,
          "column": 39,
          "position": 216
        }
      },
      "secondFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: owner option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 39,
          "position": 217
        },
        "endLoc": {
          "line": 32,
          "column": 40,
          "position": 289
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ", \"xxxxxx\", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"owner.* is different|\"\n                    \"Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: skip this step because owner cannot be set to no-ascci\")\n        # logger.info(\">>>step3: owner option is 红帽€467aa value\")",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 43,
        "startLoc": {
          "line": 33,
          "column": 14,
          "position": 298
        },
        "endLoc": {
          "line": 43,
          "column": 58,
          "position": 426
        }
      },
      "secondFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 78,
        "end": 54,
        "startLoc": {
          "line": 78,
          "column": 8,
          "position": 747
        },
        "endLoc": {
          "line": 54,
          "column": 69,
          "position": 545
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"owner not in|\"\n                    \"owner.* not set|\"\n                    \"virt-who can't be started|\"\n                    \"Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: owner option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 50,
        "end": 61,
        "startLoc": {
          "line": 50,
          "column": 12,
          "position": 461
        },
        "endLoc": {
          "line": 61,
          "column": 36,
          "position": 585
        }
      },
      "secondFile": {
        "name": "tier2/tc_2039_validate_defaults_owner_option_by_virtwho_conf.py",
        "start": 63,
        "end": 69,
        "startLoc": {
          "line": 63,
          "column": 13,
          "position": 586
        },
        "endLoc": {
          "line": 69,
          "column": 93,
          "position": 826
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        logger.info(\">>>step6: owner option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 64,
        "end": 69,
        "startLoc": {
          "line": 64,
          "column": 9,
          "position": 617
        },
        "endLoc": {
          "line": 69,
          "column": 61,
          "position": 703
        }
      },
      "secondFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 68,
        "end": 100,
        "startLoc": {
          "line": 68,
          "column": 9,
          "position": 789
        },
        "endLoc": {
          "line": 100,
          "column": 64,
          "position": 1130
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step6', []).append(res1)\n        results.setdefault('step6', []).append(res2)\n\n        logger.info(\">>>step7: owner option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 79,
        "end": 85,
        "startLoc": {
          "line": 79,
          "column": 49,
          "position": 790
        },
        "endLoc": {
          "line": 85,
          "column": 58,
          "position": 879
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 111,
        "end": 118,
        "startLoc": {
          "line": 111,
          "column": 56,
          "position": 1226
        },
        "endLoc": {
          "line": 118,
          "column": 61,
          "position": 1358
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7', []).append(res1)\n        results.setdefault('step7', []).append(res2)\n\n        # Case Result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 89,
        "end": 95,
        "startLoc": {
          "line": 89,
          "column": 9,
          "position": 928
        },
        "endLoc": {
          "line": 95,
          "column": 2,
          "position": 1018
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 126,
        "end": 132,
        "startLoc": {
          "line": 126,
          "column": 13,
          "position": 1502
        },
        "endLoc": {
          "line": 132,
          "column": 2,
          "position": 1592
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136586'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # Case Steps\n        logger.info(\">>>step1: type option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 19,
        "end": 27,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 153
        },
        "endLoc": {
          "line": 27,
          "column": 38,
          "position": 227
        }
      },
      "secondFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 133
        },
        "endLoc": {
          "line": 26,
          "column": 42,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 51,
        "end": 56,
        "startLoc": {
          "line": 51,
          "column": 8,
          "position": 589
        },
        "endLoc": {
          "line": 56,
          "column": 7,
          "position": 657
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 75,
        "end": 80,
        "startLoc": {
          "line": 75,
          "column": 2,
          "position": 909
        },
        "endLoc": {
          "line": 80,
          "column": 14,
          "position": 977
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        logger.info(\">>>step6: type option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 51,
        "end": 56,
        "startLoc": {
          "line": 51,
          "column": 2,
          "position": 594
        },
        "endLoc": {
          "line": 56,
          "column": 60,
          "position": 661
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 95,
        "end": 100,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 1063
        },
        "endLoc": {
          "line": 100,
          "column": 64,
          "position": 1130
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        logger.warning(\"libvirt-local mode will be used to instead when type option is disabled\")\n        config_name_ok = \"virtwho-config-ok\"\n        config_file_ok = \"/etc/virt-who.d/{0}.conf\".format(config_name_ok)\n        self.vw_etc_d_mode_create(config_name_ok, config_file_ok)\n        self.vw_option_disable(option_tested, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"Error in .* backend\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 56,
        "end": 63,
        "startLoc": {
          "line": 56,
          "column": 60,
          "position": 662
        },
        "endLoc": {
          "line": 63,
          "column": 22,
          "position": 739
        }
      },
      "secondFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 69,
        "end": 77,
        "startLoc": {
          "line": 69,
          "column": 61,
          "position": 704
        },
        "endLoc": {
          "line": 77,
          "column": 16,
          "position": 783
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step6', []).append(res1)\n        results.setdefault('step6', []).append(res2)\n\n        logger.info(\">>>step7: type option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2015_validate_type_option_in_etc_virtwho_d.py",
        "start": 63,
        "end": 69,
        "startLoc": {
          "line": 63,
          "column": 22,
          "position": 740
        },
        "endLoc": {
          "line": 69,
          "column": 57,
          "position": 829
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 111,
        "end": 118,
        "startLoc": {
          "line": 111,
          "column": 56,
          "position": 1226
        },
        "endLoc": {
          "line": 118,
          "column": 61,
          "position": 1358
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136585'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: header option is space value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 31,
        "end": 36,
        "startLoc": {
          "line": 31,
          "column": 40,
          "position": 251
        },
        "endLoc": {
          "line": 36,
          "column": 41,
          "position": 323
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step3', []).append(res1)\n\n        logger.info(\">>>step4: header option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 51,
        "end": 56,
        "startLoc": {
          "line": 51,
          "column": 13,
          "position": 530
        },
        "endLoc": {
          "line": 56,
          "column": 40,
          "position": 602
        }
      },
      "secondFile": {
        "name": "tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 55,
        "end": 60,
        "startLoc": {
          "line": 55,
          "column": 4,
          "position": 581
        },
        "endLoc": {
          "line": 60,
          "column": 48,
          "position": 653
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if vw_pkg[9:15] >= '0.25.7':\n            res1 = self.op_normal_value(data, exp_error=3, exp_thread=0, exp_send=0)\n        else:\n            logger.warning(\n                \"libvirt-local mode will be used when run without header option\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 70,
        "end": 76,
        "startLoc": {
          "line": 70,
          "column": 14,
          "position": 783
        },
        "endLoc": {
          "line": 76,
          "column": 65,
          "position": 858
        }
      },
      "secondFile": {
        "name": "tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 57,
        "end": 63,
        "startLoc": {
          "line": 57,
          "column": 5,
          "position": 614
        },
        "endLoc": {
          "line": 63,
          "column": 72,
          "position": 689
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"no section headers\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list)\n        results.setdefault('step7'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 96,
        "end": 101,
        "startLoc": {
          "line": 96,
          "column": 5,
          "position": 1121
        },
        "endLoc": {
          "line": 101,
          "column": 8,
          "position": 1202
        }
      },
      "secondFile": {
        "name": "tier2/tc_2014_validate_header_option_in_etc_virtwho_d.py",
        "start": 86,
        "end": 91,
        "startLoc": {
          "line": 86,
          "column": 14,
          "position": 982
        },
        "endLoc": {
          "line": 91,
          "column": 8,
          "position": 1063
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136709'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2013_validate_unreachable_proxy_by_config.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136581'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "# Case Steps\n        logger.info(\">>>step1: password option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: password option is wrong value\")\n        self.vw_option_update_value(option_tested, 'xxxxx'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 29,
        "end": 36,
        "startLoc": {
          "line": 29,
          "column": 9,
          "position": 267
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 358
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 34,
        "end": 41,
        "startLoc": {
          "line": 34,
          "column": 9,
          "position": 244
        },
        "endLoc": {
          "line": 41,
          "column": 9,
          "position": 335
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step2', []).append(res1)\n            results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: password option is 红帽€467aa value\")\n        self.vw_option_update_value(option_tested, '红帽€467aa', sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 44,
        "end": 50,
        "startLoc": {
          "line": 44,
          "column": 13,
          "position": 457
        },
        "endLoc": {
          "line": 50,
          "column": 15,
          "position": 557
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 48,
        "end": 54,
        "startLoc": {
          "line": 48,
          "column": 13,
          "position": 425
        },
        "endLoc": {
          "line": 54,
          "column": 12,
          "position": 525
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, password value is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step2', []).append(res1)\n        else:\n            msg_list = [\"Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied\"]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step3'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 50,
        "end": 60,
        "startLoc": {
          "line": 50,
          "column": 11,
          "position": 555
        },
        "endLoc": {
          "line": 60,
          "column": 8,
          "position": 704
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 36,
        "end": 46,
        "startLoc": {
          "line": 36,
          "column": 8,
          "position": 359
        },
        "endLoc": {
          "line": 46,
          "column": 8,
          "position": 508
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step3', []).append(res1)\n            results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: password option is null value\")\n        self.vw_option_update_value(option_tested, '', sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 57,
        "end": 64,
        "startLoc": {
          "line": 57,
          "column": 125,
          "position": 650
        },
        "endLoc": {
          "line": 64,
          "column": 15,
          "position": 753
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 63,
        "end": 74,
        "startLoc": {
          "line": 63,
          "column": 18,
          "position": 633
        },
        "endLoc": {
          "line": 74,
          "column": 12,
          "position": 795
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step4', []).append(res1)\n            results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: password option is disable\")\n        self.vw_option_disable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 71,
        "end": 78,
        "startLoc": {
          "line": 71,
          "column": 47,
          "position": 846
        },
        "endLoc": {
          "line": 78,
          "column": 15,
          "position": 946
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 81,
        "end": 87,
        "startLoc": {
          "line": 81,
          "column": 62,
          "position": 851
        },
        "endLoc": {
          "line": 87,
          "column": 12,
          "position": 979
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 83,
        "end": 88,
        "startLoc": {
          "line": 83,
          "column": 8,
          "position": 1017
        },
        "endLoc": {
          "line": 88,
          "column": 8,
          "position": 1093
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 69,
        "end": 74,
        "startLoc": {
          "line": 69,
          "column": 8,
          "position": 824
        },
        "endLoc": {
          "line": 74,
          "column": 8,
          "position": 900
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step5', []).append(res1)\n            results.setdefault('step5', []).append(res2)\n\n        logger.info(\">>>step6: password option is disable but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 85,
        "end": 91,
        "startLoc": {
          "line": 85,
          "column": 47,
          "position": 1039
        },
        "endLoc": {
          "line": 91,
          "column": 64,
          "position": 1128
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 94,
        "end": 100,
        "startLoc": {
          "line": 94,
          "column": 47,
          "position": 1041
        },
        "endLoc": {
          "line": 100,
          "column": 64,
          "position": 1130
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step6', []).append(res1)\n            results.setdefault('step6', []).append(res2)\n\n        logger.info(\">>>step7: password option is null but another config is ok\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 102,
        "end": 108,
        "startLoc": {
          "line": 102,
          "column": 21,
          "position": 1265
        },
        "endLoc": {
          "line": 108,
          "column": 61,
          "position": 1354
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 111,
        "end": 118,
        "startLoc": {
          "line": 111,
          "column": 56,
          "position": 1226
        },
        "endLoc": {
          "line": 118,
          "column": 61,
          "position": 1358
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step7'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 110,
        "end": 115,
        "startLoc": {
          "line": 110,
          "column": 3,
          "position": 1377
        },
        "endLoc": {
          "line": 115,
          "column": 8,
          "position": 1452
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 95,
        "end": 100,
        "startLoc": {
          "line": 95,
          "column": 14,
          "position": 1167
        },
        "endLoc": {
          "line": 100,
          "column": 8,
          "position": 1242
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set\"]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step7'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 115,
        "end": 120,
        "startLoc": {
          "line": 115,
          "column": 8,
          "position": 1453
        },
        "endLoc": {
          "line": 120,
          "column": 8,
          "position": 1529
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 100,
        "end": 105,
        "startLoc": {
          "line": 100,
          "column": 8,
          "position": 1243
        },
        "endLoc": {
          "line": 105,
          "column": 8,
          "position": 1319
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step7', []).append(res1)\n            results.setdefault('step7', []).append(res2)\n\n        # Case Result\n        notes = list()\n        if \"rhevm\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 117,
        "end": 125,
        "startLoc": {
          "line": 117,
          "column": 21,
          "position": 1475
        },
        "endLoc": {
          "line": 125,
          "column": 8,
          "position": 1574
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 124,
        "end": 132,
        "startLoc": {
          "line": 124,
          "column": 25,
          "position": 1380
        },
        "endLoc": {
          "line": 132,
          "column": 6,
          "position": 1479
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136580'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == 'libvirt-remote':\n            hypervisor_type = 'libvirt'\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        sysconfig_file = \"/etc/sysconfig/virt-who\"\n        guest_uuid = self.get_hypervisor_guestuuid()\n        option_tested = \"VIRTWHO_{0}_USERNAME\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 23,
          "position": 247
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 23,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "# Case Steps\n        logger.info(\">>>step1: username option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: username option is wrong value\")\n        self.vw_option_update_value(option_tested, 'xxxxx'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 29,
        "end": 36,
        "startLoc": {
          "line": 29,
          "column": 9,
          "position": 267
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 358
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 35,
        "end": 42,
        "startLoc": {
          "line": 35,
          "column": 9,
          "position": 245
        },
        "endLoc": {
          "line": 42,
          "column": 9,
          "position": 336
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "msg_list = [\"Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: username option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 38,
        "end": 44,
        "startLoc": {
          "line": 38,
          "column": 9,
          "position": 382
        },
        "endLoc": {
          "line": 44,
          "column": 46,
          "position": 477
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 43,
        "end": 51,
        "startLoc": {
          "line": 43,
          "column": 13,
          "position": 448
        },
        "endLoc": {
          "line": 51,
          "column": 91,
          "position": 566
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 45,
        "end": 50,
        "startLoc": {
          "line": 45,
          "column": 11,
          "position": 489
        },
        "endLoc": {
          "line": 50,
          "column": 8,
          "position": 572
        }
      },
      "secondFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 36,
        "end": 41,
        "startLoc": {
          "line": 36,
          "column": 8,
          "position": 359
        },
        "endLoc": {
          "line": 41,
          "column": 8,
          "position": 442
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "msg_list = [\"Unable to login|incorrect user.*|Authentication failure|Incorrect.*username|Unauthorized|Error.* backend|Permission denied\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: username option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 9,
          "position": 512
        },
        "endLoc": {
          "line": 53,
          "column": 42,
          "position": 607
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 57,
        "end": 60,
        "startLoc": {
          "line": 57,
          "column": 13,
          "position": 644
        },
        "endLoc": {
          "line": 60,
          "column": 83,
          "position": 696
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        self.vw_option_update_value(option_tested, '', sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step4', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 53,
        "end": 61,
        "startLoc": {
          "line": 53,
          "column": 42,
          "position": 608
        },
        "endLoc": {
          "line": 61,
          "column": 47,
          "position": 713
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 63,
        "end": 71,
        "startLoc": {
          "line": 63,
          "column": 42,
          "position": 740
        },
        "endLoc": {
          "line": 71,
          "column": 47,
          "position": 845
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step4'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 59,
        "end": 64,
        "startLoc": {
          "line": 59,
          "column": 8,
          "position": 692
        },
        "endLoc": {
          "line": 64,
          "column": 8,
          "position": 768
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 92,
        "end": 97,
        "startLoc": {
          "line": 92,
          "column": 8,
          "position": 1019
        },
        "endLoc": {
          "line": 97,
          "column": 8,
          "position": 1095
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step4', []).append(res1)\n            results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: username option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 61,
        "end": 67,
        "startLoc": {
          "line": 61,
          "column": 47,
          "position": 714
        },
        "endLoc": {
          "line": 67,
          "column": 39,
          "position": 803
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 81,
        "end": 69,
        "startLoc": {
          "line": 81,
          "column": 62,
          "position": 851
        },
        "endLoc": {
          "line": 69,
          "column": 93,
          "position": 826
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        self.vw_option_disable(option_tested, sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step5', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 67,
        "end": 75,
        "startLoc": {
          "line": 67,
          "column": 39,
          "position": 804
        },
        "endLoc": {
          "line": 75,
          "column": 47,
          "position": 906
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 77,
        "end": 85,
        "startLoc": {
          "line": 77,
          "column": 39,
          "position": 936
        },
        "endLoc": {
          "line": 85,
          "column": 47,
          "position": 1038
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step5', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step5', []).append(res1)\n            results.setdefault('step5', []).append(res2)\n\n        logger.info(\">>>step6: username option is disable but another config is ok\")\n        config_name",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 70,
        "end": 82,
        "startLoc": {
          "line": 70,
          "column": 2,
          "position": 839
        },
        "endLoc": {
          "line": 82,
          "column": 12,
          "position": 1000
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 88,
        "end": 101,
        "startLoc": {
          "line": 88,
          "column": 2,
          "position": 971
        },
        "endLoc": {
          "line": 101,
          "column": 15,
          "position": 1134
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        self.vw_option_disable(option_tested, sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step6', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 81,
        "end": 92,
        "startLoc": {
          "line": 81,
          "column": 64,
          "position": 997
        },
        "endLoc": {
          "line": 92,
          "column": 21,
          "position": 1132
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 91,
        "end": 102,
        "startLoc": {
          "line": 91,
          "column": 64,
          "position": 1129
        },
        "endLoc": {
          "line": 102,
          "column": 21,
          "position": 1264
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step6', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set\"]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 87,
        "end": 93,
        "startLoc": {
          "line": 87,
          "column": 2,
          "position": 1065
        },
        "endLoc": {
          "line": 93,
          "column": 8,
          "position": 1149
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 106,
        "end": 113,
        "startLoc": {
          "line": 106,
          "column": 2,
          "position": 1199
        },
        "endLoc": {
          "line": 113,
          "column": 6,
          "position": 1285
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step6', []).append(res1)\n            results.setdefault('step6', []).append(res2)\n\n        logger.info(\">>>step7: username option is null but another config is ok\")\n        self.vw_option_enable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 92,
        "end": 99,
        "startLoc": {
          "line": 92,
          "column": 21,
          "position": 1133
        },
        "endLoc": {
          "line": 99,
          "column": 15,
          "position": 1233
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 111,
        "end": 119,
        "startLoc": {
          "line": 111,
          "column": 56,
          "position": 1226
        },
        "endLoc": {
          "line": 119,
          "column": 12,
          "position": 1369
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        self.vw_option_enable(option_tested, sysconfig_file)\n        self.vw_option_update_value(option_tested, '', sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step7', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 98,
        "end": 107,
        "startLoc": {
          "line": 98,
          "column": 61,
          "position": 1223
        },
        "endLoc": {
          "line": 107,
          "column": 21,
          "position": 1342
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 108,
        "end": 117,
        "startLoc": {
          "line": 108,
          "column": 61,
          "position": 1355
        },
        "endLoc": {
          "line": 117,
          "column": 21,
          "position": 1474
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set\"]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step7'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 105,
        "end": 110,
        "startLoc": {
          "line": 105,
          "column": 8,
          "position": 1321
        },
        "endLoc": {
          "line": 110,
          "column": 8,
          "position": 1397
        }
      },
      "secondFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 90,
        "end": 95,
        "startLoc": {
          "line": 90,
          "column": 8,
          "position": 1111
        },
        "endLoc": {
          "line": 95,
          "column": 8,
          "position": 1187
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step7', []).append(res1)\n            results.setdefault('step7', []).append(res2)\n\n        # Case Result\n        notes = list()\n        if \"libvirt\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 107,
        "end": 115,
        "startLoc": {
          "line": 107,
          "column": 21,
          "position": 1343
        },
        "endLoc": {
          "line": 115,
          "column": 10,
          "position": 1442
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 124,
        "end": 132,
        "startLoc": {
          "line": 124,
          "column": 25,
          "position": 1380
        },
        "endLoc": {
          "line": 132,
          "column": 6,
          "position": 1479
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136579'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == 'libvirt-remote':\n            hypervisor_type = 'libvirt'\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        sysconfig_file = \"/etc/sysconfig/virt-who\"\n        guest_uuid = self.get_hypervisor_guestuuid()\n        option_tested = \"VIRTWHO_{0}_SERVER\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 21,
          "position": 247
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 23,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n\n        # Case Steps\n        logger.info(\">>>step1: server option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: server option is wrong value\")\n        self.vw_option_update_value(option_tested, 'xxxxx'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 27,
        "end": 36,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 263
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 358
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 24,
        "end": 33,
        "startLoc": {
          "line": 24,
          "column": 12,
          "position": 219
        },
        "endLoc": {
          "line": 33,
          "column": 9,
          "position": 315
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: server option is 红帽€467aa value\")\n        self.vw_option_update_value(option_tested, '红帽€467aa', sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 38,
        "end": 45,
        "startLoc": {
          "line": 38,
          "column": 87,
          "position": 388
        },
        "endLoc": {
          "line": 45,
          "column": 15,
          "position": 491
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 43,
        "end": 49,
        "startLoc": {
          "line": 43,
          "column": 125,
          "position": 454
        },
        "endLoc": {
          "line": 49,
          "column": 12,
          "position": 501
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: server option is null value\")\n        self.vw_option_update_value(option_tested, '', sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 47,
        "end": 54,
        "startLoc": {
          "line": 47,
          "column": 105,
          "position": 518
        },
        "endLoc": {
          "line": 54,
          "column": 15,
          "position": 621
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 63,
        "end": 70,
        "startLoc": {
          "line": 63,
          "column": 18,
          "position": 633
        },
        "endLoc": {
          "line": 70,
          "column": 12,
          "position": 737
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        else:\n            msg_list = [\"SERVER.* not set|virt-who can't be started|No host supplied\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: server option is disable\")\n        self.vw_option_disable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 58,
        "end": 69,
        "startLoc": {
          "line": 58,
          "column": 87,
          "position": 666
        },
        "endLoc": {
          "line": 69,
          "column": 15,
          "position": 826
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 77,
        "end": 88,
        "startLoc": {
          "line": 77,
          "column": 22,
          "position": 791
        },
        "endLoc": {
          "line": 88,
          "column": 12,
          "position": 951
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n            msg_list = [\"Name or service not known|Connection timed out|Failed to connect|Error in .* backend\"]\n            res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        else:\n            msg_list = [\"SERVER.* not set|virt-who can't be started|No host supplied\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        logger.info(\">>>step6: server option is disable but another config is ok\")\n        config_name",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 72,
        "end": 84,
        "startLoc": {
          "line": 72,
          "column": 95,
          "position": 862
        },
        "endLoc": {
          "line": 84,
          "column": 12,
          "position": 1024
        }
      },
      "secondFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 57,
        "end": 106,
        "startLoc": {
          "line": 57,
          "column": 91,
          "position": 657
        },
        "endLoc": {
          "line": 106,
          "column": 15,
          "position": 1159
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"SERVER.* not set|Error in .* backend|No host supplied\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step6', []).append(res1)\n        results.setdefault('step6', []).append(res2)\n\n        logger.info(\">>>step7: server option is null but another config is ok\")\n        self.vw_option_enable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 87,
        "end": 96,
        "startLoc": {
          "line": 87,
          "column": 15,
          "position": 1062
        },
        "endLoc": {
          "line": 96,
          "column": 15,
          "position": 1191
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 109,
        "end": 118,
        "startLoc": {
          "line": 109,
          "column": 12,
          "position": 1197
        },
        "endLoc": {
          "line": 118,
          "column": 12,
          "position": 1327
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"SERVER.* not set|Error in .* backend|No host supplied\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 97,
        "end": 102,
        "startLoc": {
          "line": 97,
          "column": 3,
          "position": 1203
        },
        "endLoc": {
          "line": 102,
          "column": 8,
          "position": 1289
        }
      },
      "secondFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 87,
        "end": 114,
        "startLoc": {
          "line": 87,
          "column": 14,
          "position": 1059
        },
        "endLoc": {
          "line": 114,
          "column": 8,
          "position": 1280
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7', []).append(res1)\n        results.setdefault('step7', []).append(res2)\n\n        # Case Result\n        notes = list()\n        if \"libvirt\" not in hypervisor_type:\n            notes.append(\"Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530557\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2010_validate_server_option_in_etc_sysconfig.py",
        "start": 99,
        "end": 109,
        "startLoc": {
          "line": 99,
          "column": 56,
          "position": 1235
        },
        "endLoc": {
          "line": 109,
          "column": 59,
          "position": 1356
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 124,
        "end": 117,
        "startLoc": {
          "line": 124,
          "column": 25,
          "position": 1380
        },
        "endLoc": {
          "line": 117,
          "column": 59,
          "position": 1464
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136578'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == 'libvirt-remote':\n            hypervisor_type = 'libvirt'\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        sysconfig_file = \"/etc/sysconfig/virt-who\"\n        guest_uuid = self.get_hypervisor_guestuuid()\n        option_tested = \"VIRTWHO_{0}_ENV\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 11,
        "end": 26,
        "startLoc": {
          "line": 11,
          "column": 7,
          "position": 102
        },
        "endLoc": {
          "line": 26,
          "column": 18,
          "position": 244
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 11,
        "end": 26,
        "startLoc": {
          "line": 11,
          "column": 11,
          "position": 105
        },
        "endLoc": {
          "line": 26,
          "column": 23,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n\n        # Case Steps\n        logger.info(\">>>step1: env option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n \n        logger.info(\">>>step2: env option is wrong value\")\n        self.vw_option_update_value(option_tested, 'xxxxx'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 27,
        "end": 36,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 260
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 356
        }
      },
      "secondFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 29,
        "end": 38,
        "startLoc": {
          "line": 29,
          "column": 12,
          "position": 274
        },
        "endLoc": {
          "line": 38,
          "column": 9,
          "position": 369
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"env.*differs|env.* is different|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: env option is 红帽€467aa value\")\n        self.vw_option_update_value(option_tested, '红帽€467aa', sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 36,
        "end": 45,
        "startLoc": {
          "line": 36,
          "column": 15,
          "position": 360
        },
        "endLoc": {
          "line": 45,
          "column": 15,
          "position": 489
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 43,
        "end": 47,
        "startLoc": {
          "line": 43,
          "column": 13,
          "position": 451
        },
        "endLoc": {
          "line": 47,
          "column": 12,
          "position": 502
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"codec can't decode|Communication with subscription manager failed|env.*differs\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: env option is null value\")\n        self.vw_option_update_value(option_tested, '', sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 45,
        "end": 54,
        "startLoc": {
          "line": 45,
          "column": 15,
          "position": 490
        },
        "endLoc": {
          "line": 54,
          "column": 15,
          "position": 619
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 52,
        "end": 56,
        "startLoc": {
          "line": 52,
          "column": 13,
          "position": 581
        },
        "endLoc": {
          "line": 56,
          "column": 12,
          "position": 632
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step4'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 54,
        "end": 59,
        "startLoc": {
          "line": 54,
          "column": 15,
          "position": 620
        },
        "endLoc": {
          "line": 59,
          "column": 8,
          "position": 700
        }
      },
      "secondFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 65,
        "end": 70,
        "startLoc": {
          "line": 65,
          "column": 12,
          "position": 760
        },
        "endLoc": {
          "line": 70,
          "column": 8,
          "position": 840
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: env option is disable\")\n        self.vw_option_disable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 57,
        "end": 63,
        "startLoc": {
          "line": 57,
          "column": 8,
          "position": 663
        },
        "endLoc": {
          "line": 63,
          "column": 15,
          "position": 746
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 82,
        "end": 65,
        "startLoc": {
          "line": 82,
          "column": 8,
          "position": 868
        },
        "endLoc": {
          "line": 65,
          "column": 12,
          "position": 759
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"env not in|env.* not set|virt-who can't be started|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        logger.info(\">>>step6: env option is disable but another config is ok\")\n        config_name",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 63,
        "end": 72,
        "startLoc": {
          "line": 63,
          "column": 14,
          "position": 744
        },
        "endLoc": {
          "line": 72,
          "column": 12,
          "position": 866
        }
      },
      "secondFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 54,
        "end": 74,
        "startLoc": {
          "line": 54,
          "column": 3,
          "position": 617
        },
        "endLoc": {
          "line": 74,
          "column": 15,
          "position": 879
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"env not in|env.* not set|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step6', []).append(res1)\n        results.setdefault('step6', []).append(res2)\n\n        logger.info(\">>>step7: env option is null but another config is ok\")\n        self.vw_option_enable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 75,
        "end": 84,
        "startLoc": {
          "line": 75,
          "column": 15,
          "position": 904
        },
        "endLoc": {
          "line": 84,
          "column": 15,
          "position": 1033
        }
      },
      "secondFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 77,
        "end": 86,
        "startLoc": {
          "line": 77,
          "column": 12,
          "position": 917
        },
        "endLoc": {
          "line": 86,
          "column": 12,
          "position": 1046
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"env not in|env.* not set|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7', []).append(res1)\n        results.setdefault('step7', []).append(res2)\n\n        # Case Result\n        notes = list()\n        register_type = self.get_config('register_type')\n        if \"stage\" in register_type:\n            notes.append(\"Bug(Step2, Step3): Set env to wrong or special value, still can sent report normally for stage\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 85,
        "end": 97,
        "startLoc": {
          "line": 85,
          "column": 3,
          "position": 1045
        },
        "endLoc": {
          "line": 97,
          "column": 97,
          "position": 1200
        }
      },
      "secondFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 75,
        "end": 99,
        "startLoc": {
          "line": 75,
          "column": 14,
          "position": 901
        },
        "endLoc": {
          "line": 99,
          "column": 116,
          "position": 1213
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136577'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == 'libvirt-remote':\n            hypervisor_type = 'libvirt'\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        sysconfig_file = \"/etc/sysconfig/virt-who\"\n        guest_uuid = self.get_hypervisor_guestuuid()\n        option_tested = \"VIRTWHO_{0}_OWNER\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 20,
          "position": 244
        }
      },
      "secondFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 23,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n\n        # Case Steps\n        logger.info(\">>>step1: owner option is good value\")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: owner option is wrong value\")\n        self.vw_option_update_value(option_tested, 'xxxxx'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 27,
        "end": 36,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 260
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 355
        }
      },
      "secondFile": {
        "name": "tier2/tc_2016_validate_owner_option_in_etc_virtwho_d.py",
        "start": 24,
        "end": 33,
        "startLoc": {
          "line": 24,
          "column": 12,
          "position": 205
        },
        "endLoc": {
          "line": 33,
          "column": 9,
          "position": 300
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: owner option is 红帽€467aa value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 38,
        "end": 44,
        "startLoc": {
          "line": 38,
          "column": 70,
          "position": 385
        },
        "endLoc": {
          "line": 44,
          "column": 43,
          "position": 474
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 45,
        "end": 51,
        "startLoc": {
          "line": 45,
          "column": 81,
          "position": 477
        },
        "endLoc": {
          "line": 51,
          "column": 91,
          "position": 566
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: owner option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 108,
          "position": 515
        },
        "endLoc": {
          "line": 53,
          "column": 39,
          "position": 604
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 54,
        "end": 60,
        "startLoc": {
          "line": 54,
          "column": 81,
          "position": 607
        },
        "endLoc": {
          "line": 60,
          "column": 83,
          "position": 696
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: owner option is disable\")\n        self.vw_option_disable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 56,
        "end": 63,
        "startLoc": {
          "line": 56,
          "column": 104,
          "position": 645
        },
        "endLoc": {
          "line": 63,
          "column": 15,
          "position": 745
        }
      },
      "secondFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 56,
        "end": 62,
        "startLoc": {
          "line": 56,
          "column": 100,
          "position": 646
        },
        "endLoc": {
          "line": 62,
          "column": 12,
          "position": 596
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        msg_list = [\"owner not in|owner.* not set|virt-who can't be started|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 63,
        "end": 68,
        "startLoc": {
          "line": 63,
          "column": 14,
          "position": 743
        },
        "endLoc": {
          "line": 68,
          "column": 8,
          "position": 826
        }
      },
      "secondFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 54,
        "end": 59,
        "startLoc": {
          "line": 54,
          "column": 3,
          "position": 616
        },
        "endLoc": {
          "line": 59,
          "column": 8,
          "position": 699
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        logger.info(\">>>step6: owner option is disable but another config is ok\")\n        config_name",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 65,
        "end": 72,
        "startLoc": {
          "line": 65,
          "column": 104,
          "position": 772
        },
        "endLoc": {
          "line": 72,
          "column": 12,
          "position": 865
        }
      },
      "secondFile": {
        "name": "tier2/tc_2017_validate_env_option_in_etc_virtwho_d.py",
        "start": 67,
        "end": 70,
        "startLoc": {
          "line": 67,
          "column": 100,
          "position": 786
        },
        "endLoc": {
          "line": 70,
          "column": 7,
          "position": 707
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step6', []).append(res1)\n        results.setdefault('step6', []).append(res2)\n\n        logger.info(\">>>step7: owner option is null but another config is ok\")\n        self.vw_option_enable(option_tested, sysconfig_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 77,
        "end": 84,
        "startLoc": {
          "line": 77,
          "column": 78,
          "position": 932
        },
        "endLoc": {
          "line": 84,
          "column": 15,
          "position": 1032
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 111,
        "end": 86,
        "startLoc": {
          "line": 111,
          "column": 56,
          "position": 1226
        },
        "endLoc": {
          "line": 86,
          "column": 12,
          "position": 890
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", sysconfig_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_error=True)\n        msg_list = [\"owner not in|owner.* not set|Communication with subscription manager failed\"]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 85,
        "end": 90,
        "startLoc": {
          "line": 85,
          "column": 3,
          "position": 1044
        },
        "endLoc": {
          "line": 90,
          "column": 8,
          "position": 1130
        }
      },
      "secondFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 75,
        "end": 80,
        "startLoc": {
          "line": 75,
          "column": 14,
          "position": 900
        },
        "endLoc": {
          "line": 80,
          "column": 8,
          "position": 986
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=1)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step7', []).append(res1)\n        results.setdefault('step7', []).append(res2)\n\n        # Case Result\n        notes = list()\n        if \"libvirt\" not in hypervisor_type:\n            notes.append(\"Bug(Step4,Step5,Step6,Step7): other unexpected ERROR msg found in rhsm.log\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1530254\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2008_validate_owner_option_in_etc_sysconfig.py",
        "start": 87,
        "end": 97,
        "startLoc": {
          "line": 87,
          "column": 78,
          "position": 1076
        },
        "endLoc": {
          "line": 97,
          "column": 59,
          "position": 1197
        }
      },
      "secondFile": {
        "name": "tier2/tc_2018_validate_server_option_in_etc_virtwho_d.py",
        "start": 124,
        "end": 117,
        "startLoc": {
          "line": 124,
          "column": 25,
          "position": 1380
        },
        "endLoc": {
          "line": 117,
          "column": 59,
          "position": 1464
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136710'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136710')\n        hypervisor_type = self.get_config('hypervisor_type')\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2006_validate_config_function_by_cli.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 3,
          "position": 91
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 11,
          "position": 92
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "num = rhsm_output.count('\"guestId\": \"{0}\"'.format(guest_uuid))\n        logger.info(\"Actual mapping info num: {0}\".format(num))\n        logger.info(\"Expected mapping info num: 1 for sat63 above and stage\")\n        results.setdefault('step2', []).append(num == 1)\n\n        logger.info(\">>>step3: check '#virt-who -o -c' with wrong config file\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2006_validate_config_function_by_cli.py",
        "start": 45,
        "end": 50,
        "startLoc": {
          "line": 45,
          "column": 9,
          "position": 493
        },
        "endLoc": {
          "line": 50,
          "column": 59,
          "position": 557
        }
      },
      "secondFile": {
        "name": "tier2/tc_2038_validate_global_configs_by_virtwho_conf.py",
        "start": 48,
        "end": 53,
        "startLoc": {
          "line": 48,
          "column": 9,
          "position": 501
        },
        "endLoc": {
          "line": 53,
          "column": 37,
          "position": 565
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136574'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: password option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 42,
          "position": 238
        },
        "endLoc": {
          "line": 38,
          "column": 43,
          "position": 313
        }
      },
      "secondFile": {
        "name": "tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step2', []).append(res1)\n        else:\n            res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n            results.setdefault('step2', []).append(res1)\n            results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: password option is 红帽€467aa value\")\n        cli",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 45,
        "end": 55,
        "startLoc": {
          "line": 45,
          "column": 34,
          "position": 383
        },
        "endLoc": {
          "line": 55,
          "column": 4,
          "position": 524
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 44,
        "end": 54,
        "startLoc": {
          "line": 44,
          "column": 76,
          "position": 374
        },
        "endLoc": {
          "line": 54,
          "column": 5,
          "position": 515
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step4', []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 78,
        "end": 84,
        "startLoc": {
          "line": 78,
          "column": 28,
          "position": 804
        },
        "endLoc": {
          "line": 84,
          "column": 11,
          "position": 899
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 67,
        "end": 73,
        "startLoc": {
          "line": 67,
          "column": 70,
          "position": 789
        },
        "endLoc": {
          "line": 73,
          "column": 12,
          "position": 884
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step5', []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 95,
        "end": 101,
        "startLoc": {
          "line": 95,
          "column": 28,
          "position": 1015
        },
        "endLoc": {
          "line": 101,
          "column": 11,
          "position": 1110
        }
      },
      "secondFile": {
        "name": "tier2/tc_2012_validate_password_option_in_etc_sysconfig.py",
        "start": 81,
        "end": 87,
        "startLoc": {
          "line": 81,
          "column": 70,
          "position": 982
        },
        "endLoc": {
          "line": 87,
          "column": 12,
          "position": 1077
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"PASSWORD.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n            results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 97,
        "end": 102,
        "startLoc": {
          "line": 97,
          "column": 8,
          "position": 1050
        },
        "endLoc": {
          "line": 102,
          "column": 8,
          "position": 1126
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 80,
        "end": 85,
        "startLoc": {
          "line": 80,
          "column": 8,
          "position": 839
        },
        "endLoc": {
          "line": 85,
          "column": 8,
          "position": 915
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136573'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        compose_id = self.get_config('rhel_compose')\n        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):\n            self.vw_case_skip(hypervisor_type)\n        if \"RHEL-7\" not in compose_id:\n            self.vw_case_skip(compose_id)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == 'libvirt-remote':\n            hypervisor_type = 'libvirt'\n        base_cli = self.vw_cli_base() + '-d'\n        msg_list = [\"Unable to login|\"\n                    \"incorrect user.*|\"\n                    \"Authentication failure|\"\n                    \"Incorrect.*username|\"\n                    \"Unauthorized|\"\n                    \"Error.* backend|\"\n                    \"Permission denied\"]\n\n        # Case Steps\n        logger.info(\">>>step1: username option is good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 10,
        "end": 33,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 33,
          "column": 42,
          "position": 237
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 10,
        "end": 33,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 33,
          "column": 42,
          "position": 237
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: username option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 42,
          "position": 238
        },
        "endLoc": {
          "line": 38,
          "column": 43,
          "position": 313
        }
      },
      "secondFile": {
        "name": "tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: username option is 红帽€467aa value\")\n        pkg",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 43,
        "end": 49,
        "startLoc": {
          "line": 43,
          "column": 9,
          "position": 365
        },
        "endLoc": {
          "line": 49,
          "column": 4,
          "position": 455
        }
      },
      "secondFile": {
        "name": "tier2/tc_2020_validate_password_option_in_etc_virtwho_d.py",
        "start": 48,
        "end": 45,
        "startLoc": {
          "line": 48,
          "column": 13,
          "position": 425
        },
        "endLoc": {
          "line": 45,
          "column": 5,
          "position": 481
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=0, exp_send=0)\n            res2 = self.vw_msg_search(rhsm_output, msg, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: username option is null value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 59,
        "end": 64,
        "startLoc": {
          "line": 59,
          "column": 13,
          "position": 603
        },
        "endLoc": {
          "line": 64,
          "column": 42,
          "position": 689
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 66,
        "end": 71,
        "startLoc": {
          "line": 66,
          "column": 13,
          "position": 648
        },
        "endLoc": {
          "line": 71,
          "column": 42,
          "position": 734
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ".format(hypervisor_type))\n        data, tty_output, rhsm_output = self.vw_start(cli)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, \"\n                           \"username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step4', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 67,
        "end": 75,
        "startLoc": {
          "line": 67,
          "column": 19,
          "position": 715
        },
        "endLoc": {
          "line": 75,
          "column": 47,
          "position": 815
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 74,
        "end": 82,
        "startLoc": {
          "line": 74,
          "column": 19,
          "position": 760
        },
        "endLoc": {
          "line": 82,
          "column": 47,
          "position": 860
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step4', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 71,
        "end": 77,
        "startLoc": {
          "line": 71,
          "column": 28,
          "position": 759
        },
        "endLoc": {
          "line": 77,
          "column": 11,
          "position": 854
        }
      },
      "secondFile": {
        "name": "tier2/tc_2011_validate_username_option_in_etc_sysconfig.py",
        "start": 57,
        "end": 63,
        "startLoc": {
          "line": 57,
          "column": 70,
          "position": 657
        },
        "endLoc": {
          "line": 63,
          "column": 12,
          "position": 752
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n            results.setdefault('step4', []).append(res1)\n            results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: username option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 75,
        "end": 81,
        "startLoc": {
          "line": 75,
          "column": 47,
          "position": 816
        },
        "endLoc": {
          "line": 81,
          "column": 39,
          "position": 905
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 82,
        "end": 88,
        "startLoc": {
          "line": 82,
          "column": 47,
          "position": 861
        },
        "endLoc": {
          "line": 88,
          "column": 39,
          "position": 950
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".format(hypervisor_type),\n                                      \" \")\n        data, tty_output, rhsm_output = self.vw_start(cli)\n        if \"libvirt\" in hypervisor_type:\n            logger.warning(\"libvirt-remote can use sshkey to connect, \"\n                           \"username is not necessary\")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step5', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 83,
        "end": 92,
        "startLoc": {
          "line": 83,
          "column": 20,
          "position": 922
        },
        "endLoc": {
          "line": 92,
          "column": 47,
          "position": 1026
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 90,
        "end": 99,
        "startLoc": {
          "line": 90,
          "column": 20,
          "position": 967
        },
        "endLoc": {
          "line": 99,
          "column": 47,
          "position": 1071
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step5', []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 88,
        "end": 94,
        "startLoc": {
          "line": 88,
          "column": 28,
          "position": 970
        },
        "endLoc": {
          "line": 94,
          "column": 11,
          "position": 1065
        }
      },
      "secondFile": {
        "name": "tier2/tc_2019_validate_username_option_in_etc_virtwho_d.py",
        "start": 90,
        "end": 96,
        "startLoc": {
          "line": 90,
          "column": 70,
          "position": 984
        },
        "endLoc": {
          "line": 96,
          "column": 12,
          "position": 1079
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", []).append(res1)\n        else:\n            msg_list = [\"USERNAME.* not set|virt-who can't be started\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n            results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 90,
        "end": 95,
        "startLoc": {
          "line": 90,
          "column": 8,
          "position": 1005
        },
        "endLoc": {
          "line": 95,
          "column": 8,
          "position": 1081
        }
      },
      "secondFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 73,
        "end": 78,
        "startLoc": {
          "line": 73,
          "column": 8,
          "position": 794
        },
        "endLoc": {
          "line": 78,
          "column": 8,
          "position": 870
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n            results.setdefault('step5', []).append(res1)\n            results.setdefault('step5', []).append(res2)\n\n        # Case Result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 92,
        "end": 99,
        "startLoc": {
          "line": 92,
          "column": 47,
          "position": 1027
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 1120
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 99,
        "end": 106,
        "startLoc": {
          "line": 99,
          "column": 47,
          "position": 1072
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 1165
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136572'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        compose_id = self.get_config('rhel_compose')\n        if hypervisor_type in ('libvirt-local', 'vdsm', 'kubevirt'):\n            self.vw_case_skip(hypervisor_type)\n        if \"RHEL-7\" not in compose_id:\n            self.vw_case_skip(compose_id)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        if hypervisor_type == 'libvirt-remote':\n            hypervisor_type = 'libvirt'\n        base_cli = self.vw_cli_base() + '-d'\n        msg_list = [\"Name or service not known|\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 10,
        "end": 24,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 24,
          "column": 29,
          "position": 207
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 10,
        "end": 24,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 24,
          "column": 19,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: server option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 30,
        "end": 35,
        "startLoc": {
          "line": 30,
          "column": 40,
          "position": 229
        },
        "endLoc": {
          "line": 35,
          "column": 41,
          "position": 304
        }
      },
      "secondFile": {
        "name": "tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ".format(hypervisor_type))\n        data, tty_output, rhsm_output = self.vw_start(cli)\n        res1 = self.op_normal_value(data, exp_error=\"1|2|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: server option is 红帽€467aa value\")\n        cli",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 38,
        "end": 46,
        "startLoc": {
          "line": 38,
          "column": 21,
          "position": 330
        },
        "endLoc": {
          "line": 46,
          "column": 4,
          "position": 446
        }
      },
      "secondFile": {
        "name": "tier2/tc_2004_validate_username_option_by_cli.py",
        "start": 41,
        "end": 49,
        "startLoc": {
          "line": 41,
          "column": 23,
          "position": 339
        },
        "endLoc": {
          "line": 49,
          "column": 5,
          "position": 491
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: server option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 72,
        "end": 78,
        "startLoc": {
          "line": 72,
          "column": 62,
          "position": 734
        },
        "endLoc": {
          "line": 78,
          "column": 37,
          "position": 823
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 82,
        "end": 88,
        "startLoc": {
          "line": 82,
          "column": 47,
          "position": 861
        },
        "endLoc": {
          "line": 88,
          "column": 39,
          "position": 950
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n            res1 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        else:\n            msg_list = [\"server.* not set|virt-who can't be started|No host supplied\"]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 85,
        "end": 92,
        "startLoc": {
          "line": 85,
          "column": 52,
          "position": 888
        },
        "endLoc": {
          "line": 92,
          "column": 8,
          "position": 1002
        }
      },
      "secondFile": {
        "name": "tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 68,
        "end": 75,
        "startLoc": {
          "line": 68,
          "column": 48,
          "position": 674
        },
        "endLoc": {
          "line": 75,
          "column": 8,
          "position": 788
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n            res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n            res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        # Case Result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2003_validate_server_option_by_cli.py",
        "start": 89,
        "end": 96,
        "startLoc": {
          "line": 89,
          "column": 62,
          "position": 948
        },
        "endLoc": {
          "line": 96,
          "column": 2,
          "position": 1041
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 99,
        "end": 106,
        "startLoc": {
          "line": 99,
          "column": 47,
          "position": 1072
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 1165
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136571'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: env option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 37,
          "position": 243
        },
        "endLoc": {
          "line": 33,
          "column": 38,
          "position": 318
        }
      },
      "secondFile": {
        "name": "tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=1, exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: env option is 红帽€467aa value\")\n        cli",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 39,
        "end": 46,
        "startLoc": {
          "line": 39,
          "column": 49,
          "position": 381
        },
        "endLoc": {
          "line": 46,
          "column": 4,
          "position": 474
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 45,
        "end": 47,
        "startLoc": {
          "line": 45,
          "column": 81,
          "position": 477
        },
        "endLoc": {
          "line": 47,
          "column": 5,
          "position": 492
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"1|3\", exp_thread=1, exp_send=0)\n        res2 = self.msg_validation(rhsm_output, msg_list, exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: env option is null value\")\n        cli",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 52,
        "end": 59,
        "startLoc": {
          "line": 52,
          "column": 15,
          "position": 534
        },
        "endLoc": {
          "line": 59,
          "column": 4,
          "position": 627
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 54,
        "end": 56,
        "startLoc": {
          "line": 54,
          "column": 81,
          "position": 607
        },
        "endLoc": {
          "line": 56,
          "column": 5,
          "position": 622
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: env option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 64,
        "end": 70,
        "startLoc": {
          "line": 64,
          "column": 28,
          "position": 684
        },
        "endLoc": {
          "line": 70,
          "column": 34,
          "position": 773
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 82,
        "end": 88,
        "startLoc": {
          "line": 82,
          "column": 47,
          "position": 861
        },
        "endLoc": {
          "line": 88,
          "column": 39,
          "position": 950
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "]\n        res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        # Case Result\n        notes",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 75,
        "end": 82,
        "startLoc": {
          "line": 75,
          "column": 53,
          "position": 826
        },
        "endLoc": {
          "line": 82,
          "column": 6,
          "position": 914
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 99,
        "end": 106,
        "startLoc": {
          "line": 99,
          "column": 47,
          "position": 1072
        },
        "endLoc": {
          "line": 106,
          "column": 5,
          "position": 1160
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        # Case Result\n        notes = list()\n        register_type = self.get_config('register_type')\n        if \"stage\" in register_type:\n            notes.append(\"Bug(Step2,Step3): Set env to wrong or special value,\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2002_validate_env_option_by_cli.py",
        "start": 77,
        "end": 85,
        "startLoc": {
          "line": 77,
          "column": 11,
          "position": 865
        },
        "endLoc": {
          "line": 85,
          "column": 55,
          "position": 949
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 76,
        "end": 84,
        "startLoc": {
          "line": 76,
          "column": 12,
          "position": 931
        },
        "endLoc": {
          "line": 84,
          "column": 116,
          "position": 1015
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-136568'",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2001_validate_owner_option_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(base_cli, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n \n        logger.info(\">>>step2: owner option is wrong value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2001_validate_owner_option_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 39,
          "position": 223
        },
        "endLoc": {
          "line": 34,
          "column": 40,
          "position": 299
        }
      },
      "secondFile": {
        "name": "tier2/tc_2007_validate_parameters_consistency_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 58,
          "position": 226
        },
        "endLoc": {
          "line": 34,
          "column": 61,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger.info(\">>>step5: owner option is disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2001_validate_owner_option_by_cli.py",
        "start": 65,
        "end": 70,
        "startLoc": {
          "line": 65,
          "column": 9,
          "position": 546
        },
        "endLoc": {
          "line": 70,
          "column": 36,
          "position": 632
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 83,
        "end": 88,
        "startLoc": {
          "line": 83,
          "column": 13,
          "position": 864
        },
        "endLoc": {
          "line": 88,
          "column": 39,
          "position": 950
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "res1 = self.op_normal_value(data, exp_error=\"0|1|2\", exp_thread=0, exp_send=0)\n        res2 = self.msg_validation(tty_output, msg_list, exp_exist=True)\n        results.setdefault('step5', []).append(res1)\n        results.setdefault('step5', []).append(res2)\n\n        # Case Result\n        notes = list()\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tier2/tc_2001_validate_owner_option_by_cli.py",
        "start": 75,
        "end": 82,
        "startLoc": {
          "line": 75,
          "column": 9,
          "position": 679
        },
        "endLoc": {
          "line": 82,
          "column": 3,
          "position": 773
        }
      },
      "secondFile": {
        "name": "tier2/tc_2005_validate_password_option_by_cli.py",
        "start": 100,
        "end": 83,
        "startLoc": {
          "line": 100,
          "column": 13,
          "position": 1075
        },
        "endLoc": {
          "line": 83,
          "column": 14,
          "position": 923
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196077'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1113_check_virtwho_status.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-196077')\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 5,
          "position": 79
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 11,
          "position": 80
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res1)\n\n        for",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 26,
        "end": 31,
        "startLoc": {
          "line": 26,
          "column": 23,
          "position": 225
        },
        "endLoc": {
          "line": 31,
          "column": 4,
          "position": 296
        }
      },
      "secondFile": {
        "name": "tier2/tc_2059_check_redundant_options_in_etc_virtwho_d.py",
        "start": 33,
        "end": 37,
        "startLoc": {
          "line": 33,
          "column": 11,
          "position": 272
        },
        "endLoc": {
          "line": 37,
          "column": 3,
          "position": 342
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195889'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1111_template_conf_validation.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-195888'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1110_send_virt-who_version_in_the_User-Agent_header.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-183803'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 17,
        "end": 24,
        "startLoc": {
          "line": 17,
          "column": 9,
          "position": 129
        },
        "endLoc": {
          "line": 24,
          "column": 5,
          "position": 204
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 19,
        "end": 26,
        "startLoc": {
          "line": 19,
          "column": 9,
          "position": 161
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "))\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 12,
          "position": 253
        },
        "endLoc": {
          "line": 34,
          "column": 56,
          "position": 326
        }
      },
      "secondFile": {
        "name": "tier3/tc_1031_check_mapping_info_with_one_file_include_two_modes_in_etc_virtwho_d.py",
        "start": 35,
        "end": 38,
        "startLoc": {
          "line": 35,
          "column": 2,
          "position": 377
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-174862'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1108_check_hypervisor_facts.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # Case Config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        self.vw_option_add",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1108_check_hypervisor_facts.py",
        "start": 15,
        "end": 27,
        "startLoc": {
          "line": 15,
          "column": 9,
          "position": 136
        },
        "endLoc": {
          "line": 27,
          "column": 14,
          "position": 247
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 14,
        "end": 24,
        "startLoc": {
          "line": 14,
          "column": 9,
          "position": 127
        },
        "endLoc": {
          "line": 24,
          "column": 23,
          "position": 206
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-171210'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        vdc_virtual_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1107_temporary_sku_can_be_changed_to_stable_by_auto.py",
        "start": 9,
        "end": 21,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 21,
          "column": 16,
          "position": 176
        }
      },
      "secondFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 13,
        "end": 24,
        "startLoc": {
          "line": 13,
          "column": 16,
          "position": 115
        },
        "endLoc": {
          "line": 24,
          "column": 17,
          "position": 206
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-171135'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res1)\n\n        logger.info('>>>step2: Configure \"print_=false\" then run virt-who by cli'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1106_check_global_print_option_in_etc_virtwho_conf.py",
        "start": 23,
        "end": 28,
        "startLoc": {
          "line": 23,
          "column": 40,
          "position": 191
        },
        "endLoc": {
          "line": 28,
          "column": 62,
          "position": 263
        }
      },
      "secondFile": {
        "name": "tier2/tc_2060_check_commented_out_line_with_tab_space.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 54,
          "position": 257
        },
        "endLoc": {
          "line": 34,
          "column": 57,
          "position": 329
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-170860'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 9,
          "position": 160
        },
        "endLoc": {
          "line": 26,
          "column": 16,
          "position": 242
        }
      },
      "secondFile": {
        "name": "tier2/tc_2042_check_virtwho_send_mapping_to_multi_org.py",
        "start": 17,
        "end": 25,
        "startLoc": {
          "line": 17,
          "column": 9,
          "position": 132
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134082'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1104_check_virtwho_config_exist_after_reboot_system.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134081'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "(\"tcp_port\", filename=libvirt_conf)\n        ret, output = self.run_service(self.ssh_host(), \"libvirtd\", \"restart\")\n        ret, output = self.run_service(self.ssh_host(), \"libvirtd\", \"status\")\n        if \"is running\" in output or \"Active: active (running)\" in output:\n            logger.info(\"Succeeded to restart libvirt service\")\n            results.setdefault('step4'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py",
        "start": 56,
        "end": 61,
        "startLoc": {
          "line": 56,
          "column": 18,
          "position": 573
        },
        "endLoc": {
          "line": 61,
          "column": 8,
          "position": 663
        }
      },
      "secondFile": {
        "name": "tier1/tc_1103_check_virtwho_threads_number_after_reconfig_libvirt.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 17,
          "position": 293
        },
        "endLoc": {
          "line": 38,
          "column": 8,
          "position": 383
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134080'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        instance_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 15,
          "position": 84
        },
        "endLoc": {
          "line": 23,
          "column": 13,
          "position": 191
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 27,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 27,
          "column": 16,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)\n        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)\n        results.setdefault('step3'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 47,
        "end": 52,
        "startLoc": {
          "line": 47,
          "column": 2,
          "position": 521
        },
        "endLoc": {
          "line": 52,
          "column": 8,
          "position": 604
        }
      },
      "secondFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 34,
        "end": 39,
        "startLoc": {
          "line": 34,
          "column": 17,
          "position": 319
        },
        "endLoc": {
          "line": 39,
          "column": 8,
          "position": 402
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n        results.setdefault('step3', []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for guest with quantity=2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 51,
        "end": 56,
        "startLoc": {
          "line": 51,
          "column": 43,
          "position": 592
        },
        "endLoc": {
          "line": 56,
          "column": 58,
          "position": 656
        }
      },
      "secondFile": {
        "name": "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 74,
        "end": 79,
        "startLoc": {
          "line": 74,
          "column": 10,
          "position": 1016
        },
        "endLoc": {
          "line": 79,
          "column": 53,
          "position": 1080
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134079'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        self.vw_case_skip(\"instance sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        instance_sku = register_config['instance']\n\n        # case steps\n        logger.info(\">>>step1: set cpu.cpu_socket(s) to 1 in guest\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 48,
          "position": 209
        }
      },
      "secondFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 48,
          "position": 209
        }
      }
    },
    {
      "format": "python",
      "lines": 42,
      "fragment": ")\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for guest without quantity\")\n        self.system_sku_unattach(self.ssh_guest())\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, \"physical\")\n        physical_pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)\n        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n        results.setdefault('step2', []).append(res3)\n\n        logger.info(\">>>step3: attach physical sku for guest with quantity=1\")\n        self.system_sku_unattach(self.ssh_guest())\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, \"physical\")\n        physical_pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=1)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)\n        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n        results.setdefault('step3', []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for guest with quantity=2\")\n        self.system_sku_unattach(self.ssh_guest())\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), instance_sku, \"physical\")\n        physical_pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_guest(), pool_id=physical_pool_id, quantity=2)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)\n        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n        results.setdefault('step4', []).append(res3)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1101_check_instance_consumed_status_in_guest_after_set_cpu_socket_1.py",
        "start": 27,
        "end": 68,
        "startLoc": {
          "line": 27,
          "column": 4,
          "position": 232
        },
        "endLoc": {
          "line": 68,
          "column": 5,
          "position": 853
        }
      },
      "secondFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 27,
        "end": 69,
        "startLoc": {
          "line": 27,
          "column": 4,
          "position": 232
        },
        "endLoc": {
          "line": 69,
          "column": 7,
          "position": 854
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134078'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 17,
        "end": 30,
        "startLoc": {
          "line": 17,
          "column": 13,
          "position": 152
        },
        "endLoc": {
          "line": 30,
          "column": 14,
          "position": 259
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 27,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 27,
          "column": 16,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(res)\n\n        logger.info(\">>>step3: attach physical sku for host without quantity\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 40,
        "end": 45,
        "startLoc": {
          "line": 40,
          "column": 67,
          "position": 368
        },
        "endLoc": {
          "line": 45,
          "column": 58,
          "position": 437
        }
      },
      "secondFile": {
        "name": "tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 12,
          "position": 313
        },
        "endLoc": {
          "line": 38,
          "column": 57,
          "position": 382
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134077'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        instance_sku = register_config['instance']\n        sku_attrs",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 14,
        "end": 28,
        "startLoc": {
          "line": 14,
          "column": 16,
          "position": 122
        },
        "endLoc": {
          "line": 28,
          "column": 10,
          "position": 239
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 202
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": ")\n            data, tty_output, rhsm_output = self.vw_start()\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step2', []).append(res)\n\n            logger.info(\">>>step3: attach physical sku for host without quantity\")\n            self.system_sku_unattach(self.ssh_host())\n            self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id)\n            output = self.system_sku_consumed(self.ssh_host())\n            res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n            res2 = self.vw_msg_search(output, 'Quantity Used:.*8', exp_exist=True)\n            res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current')\n            results.setdefault('step3', []).append(res1)\n            results.setdefault('step3', []).append(res2)\n            results.setdefault('step3', []).append(res3)\n\n            logger.info(\">>>step4: attach physical sku for host with quantity=1\")\n            self.system_sku_unattach(self.ssh_host())\n            cmd = (\"subscription-manager attach --pool={0} --quantity=1\"\n                   .format(physical_pool_id))\n            ret, output = self.runcmd(cmd, self.ssh_host(), desc=\"subscription attach\")\n            error_msg = 'must be attached using a quantity evenly divisible by 2'\n            res = self.vw_msg_search(output, error_msg, exp_exist=True)\n            results.setdefault('step4'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 38,
        "end": 61,
        "startLoc": {
          "line": 38,
          "column": 43,
          "position": 339
        },
        "endLoc": {
          "line": 61,
          "column": 8,
          "position": 658
        }
      },
      "secondFile": {
        "name": "tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 33,
        "end": 63,
        "startLoc": {
          "line": 33,
          "column": 12,
          "position": 313
        },
        "endLoc": {
          "line": 63,
          "column": 8,
          "position": 687
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)\n            output = self.system_sku_consumed(self.ssh_host())\n            msg = 'Status Details:.*Only supports 2 of 8 sockets'\n            res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n            res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)\n            res3 = self.vw_msg_search(output, msg, exp_exist=True)\n            results",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 65,
        "end": 71,
        "startLoc": {
          "line": 65,
          "column": 13,
          "position": 692
        },
        "endLoc": {
          "line": 71,
          "column": 8,
          "position": 797
        }
      },
      "secondFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 72,
        "end": 78,
        "startLoc": {
          "line": 72,
          "column": 13,
          "position": 784
        },
        "endLoc": {
          "line": 78,
          "column": 3,
          "position": 889
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            results.setdefault('step6', []).append(res1)\n            results.setdefault('step6', []).append(res2)\n            results.setdefault('step6', []).append(res3)\n            results.setdefault('step6', []).append(res4)\n\n        finally",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 82,
        "end": 88,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 979
        },
        "endLoc": {
          "line": 88,
          "column": 8,
          "position": 1051
        }
      },
      "secondFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 95,
        "end": 100,
        "startLoc": {
          "line": 95,
          "column": 43,
          "position": 1106
        },
        "endLoc": {
          "line": 100,
          "column": 7,
          "position": 1177
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134076'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ")\n        self.vw_case_skip(\"instance sku\")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type not in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        instance_sku = register_config['instance']\n\n        # case steps\n        logger.info(\">>>step1: set cpu.cpu_socket(s) to 1 in host\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 9,
        "end": 29,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 29,
          "column": 47,
          "position": 246
        }
      },
      "secondFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 26,
          "column": 48,
          "position": 209
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        results.setdefault('step1', []).append(res)\n \n        logger.info(\">>>step2: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(res)\n \n        logger.info(\">>>step3: attach physical sku for host without quantity\")\n        self.system_sku_unattach(self.ssh_host())\n        sku_attrs",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 30,
        "end": 40,
        "startLoc": {
          "line": 30,
          "column": 4,
          "position": 269
        },
        "endLoc": {
          "line": 40,
          "column": 10,
          "position": 382
        }
      },
      "secondFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 37,
        "end": 47,
        "startLoc": {
          "line": 37,
          "column": 4,
          "position": 342
        },
        "endLoc": {
          "line": 47,
          "column": 5,
          "position": 453
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_exist=True)\n        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n        results.setdefault('step3', []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for host with quantity=1\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 45,
        "end": 51,
        "startLoc": {
          "line": 45,
          "column": 20,
          "position": 479
        },
        "endLoc": {
          "line": 51,
          "column": 57,
          "position": 563
        }
      },
      "secondFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 50,
        "end": 79,
        "startLoc": {
          "line": 50,
          "column": 20,
          "position": 572
        },
        "endLoc": {
          "line": 79,
          "column": 53,
          "position": 1080
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n        results.setdefault('step3', []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for host with quantity=1\")\n        self.system_sku_unattach(self.ssh_host())\n        sku_attrs",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 46,
        "end": 53,
        "startLoc": {
          "line": 46,
          "column": 5,
          "position": 504
        },
        "endLoc": {
          "line": 53,
          "column": 10,
          "position": 579
        }
      },
      "secondFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 51,
        "end": 58,
        "startLoc": {
          "line": 51,
          "column": 43,
          "position": 538
        },
        "endLoc": {
          "line": 58,
          "column": 4,
          "position": 613
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        ret, output = self.runcmd(cmd, self.ssh_host(), desc=\"subscription attach\")\n        error_msg = 'must be attached using a quantity evenly divisible by 2'\n        res = self.vw_msg_search(output, error_msg, exp_exist=True)\n        results.setdefault('step3', []).append(res)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 55,
        "end": 60,
        "startLoc": {
          "line": 55,
          "column": 17,
          "position": 621
        },
        "endLoc": {
          "line": 60,
          "column": 5,
          "position": 695
        }
      },
      "secondFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 59,
        "end": 65,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 626
        },
        "endLoc": {
          "line": 65,
          "column": 7,
          "position": 701
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "self.system_sku_unattach(self.ssh_host())\n        sku_attrs = self.system_sku_attr(self.ssh_host(), instance_sku, \"physical\")\n        physical_pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_host(), pool_id=physical_pool_id, quantity=2)\n        output = self.system_sku_consumed(self.ssh_host())\n        res1",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 63,
        "end": 68,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 716
        },
        "endLoc": {
          "line": 68,
          "column": 5,
          "position": 798
        }
      },
      "secondFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 69,
        "end": 74,
        "startLoc": {
          "line": 69,
          "column": 13,
          "position": 740
        },
        "endLoc": {
          "line": 74,
          "column": 4,
          "position": 822
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        output = self.system_sku_consumed(self.ssh_host())\n        res1 = self.vw_msg_search(output, instance_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)\n        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)\n        results.setdefault('step5'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 66,
        "end": 71,
        "startLoc": {
          "line": 66,
          "column": 2,
          "position": 779
        },
        "endLoc": {
          "line": 71,
          "column": 8,
          "position": 862
        }
      },
      "secondFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 42,
        "end": 47,
        "startLoc": {
          "line": 42,
          "column": 17,
          "position": 428
        },
        "endLoc": {
          "line": 47,
          "column": 8,
          "position": 511
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134075'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_skip(\"instance sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 10,
          "position": 180
        }
      },
      "secondFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 28,
        "end": 33,
        "startLoc": {
          "line": 28,
          "column": 67,
          "position": 232
        },
        "endLoc": {
          "line": 33,
          "column": 52,
          "position": 301
        }
      },
      "secondFile": {
        "name": "tier2/tc_2055_validate_rhevm_url_without_ovirt_engine.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 53,
          "position": 227
        },
        "endLoc": {
          "line": 32,
          "column": 54,
          "position": 296
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134058'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        limit_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 84
        },
        "endLoc": {
          "line": 25,
          "column": 19,
          "position": 213
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 213
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 26,
        "end": 35,
        "startLoc": {
          "line": 26,
          "column": 8,
          "position": 230
        },
        "endLoc": {
          "line": 35,
          "column": 5,
          "position": 315
        }
      },
      "secondFile": {
        "name": "tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 25,
        "end": 34,
        "startLoc": {
          "line": 25,
          "column": 11,
          "position": 220
        },
        "endLoc": {
          "line": 34,
          "column": 10,
          "position": 305
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134053'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        self.vw_case_skip(\"limited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        limit_physical_sku = register_config['limit']\n        limit_virtual_sku = register_config['limit']\n\n        # Case Steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 9,
        "end": 28,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 234
        }
      },
      "secondFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 28,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 28,
          "column": 13,
          "position": 234
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self.vw_web_unattach(host_name, host_uuid)\n        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, \"physical\")\n        physical_pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, physical_pool_id)\n\n        logger.info(\">>>step3: attach virtual sku by pool_id in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, \"virtual\")\n        virtual_pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        logger.info(\">>>step4: unattach physical sku from host/hypervisor and check virtual pool\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 29,
        "end": 50,
        "startLoc": {
          "line": 29,
          "column": 9,
          "position": 237
        },
        "endLoc": {
          "line": 50,
          "column": 78,
          "position": 525
        }
      },
      "secondFile": {
        "name": "tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 28,
        "end": 50,
        "startLoc": {
          "line": 28,
          "column": 9,
          "position": 227
        },
        "endLoc": {
          "line": 50,
          "column": 77,
          "position": 525
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, limit_virtual_sku, exp_exist=False)\n        results.setdefault('step4', []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1095_check_limited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 51,
        "end": 57,
        "startLoc": {
          "line": 51,
          "column": 16,
          "position": 532
        },
        "endLoc": {
          "line": 57,
          "column": 2,
          "position": 607
        }
      },
      "secondFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 51,
        "end": 57,
        "startLoc": {
          "line": 51,
          "column": 19,
          "position": 532
        },
        "endLoc": {
          "line": 57,
          "column": 2,
          "position": 607
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134054'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        self.vw_case_skip(\"limited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 14,
          "position": 213
        }
      },
      "secondFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 213
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "limit_physical_sku = register_config['limit']\n        limit_virtual_sku = register_config['limit']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self.vw_web_unattach(host_name, host_uuid)\n        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, \"physical\")\n        pool_id",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 26,
        "end": 38,
        "startLoc": {
          "line": 26,
          "column": 9,
          "position": 223
        },
        "endLoc": {
          "line": 38,
          "column": 8,
          "position": 358
        }
      },
      "secondFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 25,
        "end": 37,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 213
        },
        "endLoc": {
          "line": 37,
          "column": 17,
          "position": 348
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134073'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 43,
      "fragment": ")\n        self.vw_case_skip(\"limited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        limit_physical_sku = register_config['limit']\n        limit_virtual_sku = register_config['limit']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self.vw_web_unattach(host_name, host_uuid)\n        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, \"physical\")\n        pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step3: check virtual sku attrs in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), limit_virtual_sku, \"virtual\")\n        available = sku_attrs['available']\n        if available == \"1\":\n            logger.info(\"Succeeded to check, vitual sku({0}) Available({1})\".format(limit_virtual_sku, available))\n            results.setdefault('step3', []).append(True)\n        else:\n            logger.error(\"Failed to check, vitual sku({0}) Available({1})\".format(limit_virtual_sku, available))\n            results.setdefault('step3', []).append(False)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 9,
        "end": 51,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 51,
          "column": 7,
          "position": 504
        }
      },
      "secondFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 51,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 51,
          "column": 4,
          "position": 504
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        output = self.system_sku_consumed(self.ssh_guest())\n        res1 = self.vw_msg_search(output, limit_virtual_sku, exp_exist=True)\n        res2 = self.vw_msg_search(output, 'Quantity Used:.*1', exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 53,
        "end": 60,
        "startLoc": {
          "line": 53,
          "column": 8,
          "position": 536
        },
        "endLoc": {
          "line": 60,
          "column": 7,
          "position": 630
        }
      },
      "secondFile": {
        "name": "tier1/tc_1094_check_limited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 54,
        "end": 60,
        "startLoc": {
          "line": 54,
          "column": 2,
          "position": 535
        },
        "endLoc": {
          "line": 60,
          "column": 7,
          "position": 628
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134068'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": ")\n        self.vw_case_skip(\"limited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        limit_physical_sku = register_config['limit']\n        limit_virtual_sku = register_config['limit']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        self.vw_web_unattach(host_name, host_uuid)\n        sku_attrs = self.system_sku_attr(self.ssh_host(), limit_physical_sku, \"physical\")\n        pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step3: check virtual sku is created or not in guest\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1092_check_limited_virtual_pool_created_in_guest.py",
        "start": 9,
        "end": 40,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 40,
          "column": 57,
          "position": 377
        }
      },
      "secondFile": {
        "name": "tier1/tc_1096_check_limited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 41,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 41,
          "column": 45,
          "position": 387
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134055'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        vdc_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 17,
          "position": 215
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 26,
          "column": 19,
          "position": 223
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 26,
        "end": 35,
        "startLoc": {
          "line": 26,
          "column": 12,
          "position": 232
        },
        "endLoc": {
          "line": 35,
          "column": 17,
          "position": 332
        }
      },
      "secondFile": {
        "name": "tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 25,
        "end": 34,
        "startLoc": {
          "line": 25,
          "column": 11,
          "position": 220
        },
        "endLoc": {
          "line": 34,
          "column": 13,
          "position": 320
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n\n        logger.info(\">>>step5: check repo status in guest\")\n        cmd = \"subscription-manager repos --list\"\n        ret, output = self.runcmd(cmd, self.ssh_guest())\n        if \"stage\" in register_type:\n            res = self.vw_msg_search(output, \"Available Repositories\" , exp_exist=True)\n        else:\n            res = self.vw_msg_search(output, \"no repositories available\" , exp_exist=True)\n        results.setdefault('step5', []).append(res)\n\n        logger.info(\">>>step6: check subscription status in guest\")\n        cmd = \"subscription-manager status\"\n        ret, output = self.runcmd(cmd, self.ssh_guest())\n        res1 = self.vw_msg_search(output, \"Overall Status: Current\" , exp_exist=True)\n        res2 = self.vw_msg_search(output, \"Invalid\" , exp_exist=False)\n        results.setdefault('step6', []).append(res1)\n        results.setdefault('step6', []).append(res2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 55,
        "end": 74,
        "startLoc": {
          "line": 55,
          "column": 2,
          "position": 594
        },
        "endLoc": {
          "line": 74,
          "column": 14,
          "position": 823
        }
      },
      "secondFile": {
        "name": "tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 58,
        "end": 77,
        "startLoc": {
          "line": 58,
          "column": 5,
          "position": 626
        },
        "endLoc": {
          "line": 77,
          "column": 7,
          "position": 855
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134057'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 24,
          "column": 17,
          "position": 205
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 213
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(res)\n\n        logger.info(\">>>step3: attach physical sku for host/hypervisor\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 29,
        "end": 37,
        "startLoc": {
          "line": 29,
          "column": 4,
          "position": 256
        },
        "endLoc": {
          "line": 37,
          "column": 52,
          "position": 351
        }
      },
      "secondFile": {
        "name": "tier1/tc_1100_check_instance_consumed_status_by_auto_in_host_after_set_cpu_socket_8.py",
        "start": 37,
        "end": 38,
        "startLoc": {
          "line": 37,
          "column": 4,
          "position": 342
        },
        "endLoc": {
          "line": 38,
          "column": 57,
          "position": 382
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_exist=True)\n        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)\n        results.setdefault('step4', []).append(res1)\n        results.setdefault('step4', []).append(res2)\n        results.setdefault('step4', []).append(res3)\n\n        logger.info(\">>>step5: attach virtual sku for guest with quantity=2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 49,
        "end": 55,
        "startLoc": {
          "line": 49,
          "column": 20,
          "position": 519
        },
        "endLoc": {
          "line": 55,
          "column": 57,
          "position": 603
        }
      },
      "secondFile": {
        "name": "tier1/tc_1102_check_instance_consumed_status_in_guest_after_set_cpu_socket_8.py",
        "start": 63,
        "end": 69,
        "startLoc": {
          "line": 63,
          "column": 20,
          "position": 774
        },
        "endLoc": {
          "line": 69,
          "column": 58,
          "position": 858
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134052'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type not in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        vdc_physical_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 17,
          "position": 220
        }
      },
      "secondFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 11,
        "end": 27,
        "startLoc": {
          "line": 11,
          "column": 15,
          "position": 85
        },
        "endLoc": {
          "line": 27,
          "column": 16,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "(), 'cpu.cpu_socket(s)', '4')\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(res)\n\n        logger.info(\">>>step3: attach physical sku for host/hypervisor without quantity\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 30,
        "end": 38,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 263
        },
        "endLoc": {
          "line": 38,
          "column": 69,
          "position": 366
        }
      },
      "secondFile": {
        "name": "tier1/tc_1090_check_vdc_consumed_status_in_guest_after_set_cpu_socket.py",
        "start": 29,
        "end": 38,
        "startLoc": {
          "line": 29,
          "column": 10,
          "position": 248
        },
        "endLoc": {
          "line": 38,
          "column": 57,
          "position": 382
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", exp_exist=True)\n        res2 = self.vw_msg_search(output, 'Quantity Used:.*2', exp_exist=True)\n        res3 = self.vw_msg_search(output, 'Status Details:.*Subscription is current', exp_exist=True)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n        results.setdefault('step3', []).append(res3)\n\n        logger.info(\">>>step4: attach physical sku for host/hypervisor with quantity=1\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1089_check_vdc_consumed_status_in_host_after_set_cpu_socket.py",
        "start": 44,
        "end": 51,
        "startLoc": {
          "line": 44,
          "column": 17,
          "position": 459
        },
        "endLoc": {
          "line": 51,
          "column": 68,
          "position": 563
        }
      },
      "secondFile": {
        "name": "tier1/tc_1098_check_instance_consumed_status_in_host_after_set_cpu_socket_1.py",
        "start": 44,
        "end": 79,
        "startLoc": {
          "line": 44,
          "column": 13,
          "position": 459
        },
        "endLoc": {
          "line": 79,
          "column": 53,
          "position": 1080
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134070'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku = register_config['vdc']\n        vdc_virtual_sku = register_config['vdc_bonus']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 28,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 28,
          "column": 67,
          "position": 233
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 28,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 28,
          "column": 48,
          "position": 233
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "vdc_physical_sku = register_config['vdc']\n        vdc_virtual_sku = register_config['vdc_bonus']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        physical_pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, physical_pool_id)\n\n        logger.info(\">>>step3: attach virtual sku by pool_id in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, \"virtual\")\n        virtual_pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)\n        results.setdefault('step3', []).append(res)\n\n        logger.info(\">>>step4: unregister host/hypervisor and check virtual pool revoked or not\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 24,
        "end": 46,
        "startLoc": {
          "line": 24,
          "column": 9,
          "position": 205
        },
        "endLoc": {
          "line": 46,
          "column": 77,
          "position": 469
        }
      },
      "secondFile": {
        "name": "tier1/tc_1091_check_vdc_repos_in_guest_and_host_after_subscribed.py",
        "start": 25,
        "end": 47,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 215
        },
        "endLoc": {
          "line": 47,
          "column": 38,
          "position": 479
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134064'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 38,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku = register_config['vdc']\n        vdc_virtual_sku = register_config['vdc_bonus']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        physical_pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, physical_pool_id)\n\n        logger.info(\">>>step3: attach virtual sku by pool_id in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, \"virtual\")\n        virtual_pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True)\n        results.setdefault('step3', []).append(res)\n\n        logger.info(\">>>step4: unattach physical sku from host/hypervisor and check virtual pool\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 9,
        "end": 46,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 46,
          "column": 78,
          "position": 469
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 47,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 47,
          "column": 38,
          "position": 479
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, vdc_virtual_sku, exp_exist=False)\n        results.setdefault('step4', []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 16,
          "position": 476
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 551
        }
      },
      "secondFile": {
        "name": "tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 19,
          "position": 476
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 551
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134066'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        vdc_physical_sku = register_config['vdc']\n        vdc_virtual_sku = register_config['vdc_bonus']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        pool_id",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py",
        "start": 9,
        "end": 36,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 339
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 36,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 36,
          "column": 17,
          "position": 339
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134060'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku = register_config['vdc']\n        vdc_virtual_sku = register_config['vdc_bonus']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1085_check_vdc_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 9,
        "end": 38,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 38,
          "column": 7,
          "position": 354
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 39,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 39,
          "column": 4,
          "position": 364
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134062'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        vdc_physical_sku = register_config['vdc']\n        vdc_virtual_sku = register_config['vdc_bonus'] \n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step3: check virtual sku is created or not in guest\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1084_check_vdc_virtual_pool_created_in_guest.py",
        "start": 9,
        "end": 38,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 38,
          "column": 57,
          "position": 359
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 38,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 38,
          "column": 51,
          "position": 358
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134072'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 10,
        "end": 25,
        "startLoc": {
          "line": 10,
          "column": 16,
          "position": 84
        },
        "endLoc": {
          "line": 25,
          "column": 14,
          "position": 213
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 213
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "]\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 25,
        "end": 34,
        "startLoc": {
          "line": 25,
          "column": 10,
          "position": 220
        },
        "endLoc": {
          "line": 34,
          "column": 14,
          "position": 320
        }
      },
      "secondFile": {
        "name": "tier1/tc_1097_check_instance_no_virtual_pool_created_in_guest.py",
        "start": 25,
        "end": 34,
        "startLoc": {
          "line": 25,
          "column": 11,
          "position": 220
        },
        "endLoc": {
          "line": 34,
          "column": 13,
          "position": 320
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_exist=True)\n        results.setdefault('step3', []).append(res)\n\n        logger.info(\">>>step4: unregister host/hypervisor and check virtual pool revoked or not\")\n        self.vw_web_host_delete(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 43,
        "end": 49,
        "startLoc": {
          "line": 43,
          "column": 14,
          "position": 437
        },
        "endLoc": {
          "line": 49,
          "column": 14,
          "position": 514
        }
      },
      "secondFile": {
        "name": "tier1/tc_1088_check_vdc_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 43,
        "end": 49,
        "startLoc": {
          "line": 43,
          "column": 16,
          "position": 439
        },
        "endLoc": {
          "line": 49,
          "column": 16,
          "position": 516
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134071'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 38,
      "fragment": ")\n        self.vw_case_skip(\"unlimited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        unlimited_sku = register_config['unlimit']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, \"physical\")\n        physical_pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, physical_pool_id)\n\n        logger.info(\">>>step3: attach virtual sku by pool_id in guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), unlimited_sku, \"virtual\")\n        virtual_pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_guest(), pool_id=virtual_pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res = self.vw_msg_search(output, unlimited_sku, exp_exist=True)\n        results.setdefault('step3', []).append(res)\n\n        logger.info(\">>>step4: unattach physical sku from host/hypervisor and check virtual pool\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 9,
        "end": 46,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 46,
          "column": 78,
          "position": 467
        }
      },
      "secondFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 46,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 46,
          "column": 77,
          "position": 467
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", exp_exist=True)\n        results.setdefault('step3', []).append(res)\n\n        logger.info(\">>>step4: unattach physical sku from host/hypervisor and check virtual pool\")\n        self.vw_web_unattach(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 43,
        "end": 49,
        "startLoc": {
          "line": 43,
          "column": 14,
          "position": 437
        },
        "endLoc": {
          "line": 49,
          "column": 14,
          "position": 514
        }
      },
      "secondFile": {
        "name": "tier1/tc_1087_check_vdc_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 43,
        "end": 49,
        "startLoc": {
          "line": 43,
          "column": 16,
          "position": 439
        },
        "endLoc": {
          "line": 49,
          "column": 16,
          "position": 516
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "(host_name, host_uuid)\n        output = self.system_sku_consumed(self.ssh_guest(), exp_exist=False)\n        res = self.vw_msg_search(output, unlimited_sku, exp_exist=False)\n        results.setdefault('step4', []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1082_check_unlimited_virtual_pool_revoked_in_guest_after_host_unattached.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 16,
          "position": 474
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 549
        }
      },
      "secondFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 19,
          "position": 474
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 549
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134069'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        self.vw_case_skip(\"unlimited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        unlimited_sku",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 14,
          "position": 223
        }
      },
      "secondFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 19,
          "position": 223
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "unlimited_sku = register_config['unlimit']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, \"physical\")\n        pool_id",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 26,
        "end": 36,
        "startLoc": {
          "line": 26,
          "column": 9,
          "position": 223
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 337
        }
      },
      "secondFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 25,
        "end": 35,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 213
        },
        "endLoc": {
          "line": 35,
          "column": 17,
          "position": 327
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n            self.system_sku_attach(self.ssh_guest())\n            ins_attrs = self.system_sku_installed(self.ssh_guest())\n            results.setdefault('step3', []).append(ins_attrs['status'] == 'Subscribed')\n        except:\n            results.setdefault('step3', []).append(False)\n            pass\n\n        # case result\n        notes = list()\n        if \"satellite\" in register_type:\n            notes.append(\"Bug(Step3): Unable to use auto-attach\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1659014\")\n        self.vw_case_result(results, notes)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1081_check_unlimited_virtual_pool_attached_by_auto_in_guest.py",
        "start": 42,
        "end": 55,
        "startLoc": {
          "line": 42,
          "column": 14,
          "position": 417
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 543
        }
      },
      "secondFile": {
        "name": "tier1/tc_1086_check_vdc_virtual_pool_attached_by_auto_in_guest.py",
        "start": 42,
        "end": 55,
        "startLoc": {
          "line": 42,
          "column": 16,
          "position": 419
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 545
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134067'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": ")\n        self.vw_case_skip(\"unlimited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        unlimited_sku = register_config['unlimit']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, \"physical\")\n        pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 9,
        "end": 39,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 39,
          "column": 7,
          "position": 362
        }
      },
      "secondFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 39,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 39,
          "column": 4,
          "position": 362
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        cmd = \"subscription-manager repos --list\"\n        ret, output = self.runcmd(cmd, self.ssh_guest())\n        if \"stage\" in register_type:\n            res = self.vw_msg_search(output, \"Available Repositories\" , exp_exist=True)\n        else:\n            res = self.vw_msg_search(output, \"no repositories available\" , exp_exist=True)\n        results.setdefault('step4'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1080_check_unlimited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 47,
        "end": 54,
        "startLoc": {
          "line": 47,
          "column": 39,
          "position": 478
        },
        "endLoc": {
          "line": 54,
          "column": 8,
          "position": 570
        }
      },
      "secondFile": {
        "name": "tier1/tc_1093_check_limited_virtual_pool_attached_by_poolId_in_guest.py",
        "start": 60,
        "end": 67,
        "startLoc": {
          "line": 60,
          "column": 39,
          "position": 635
        },
        "endLoc": {
          "line": 67,
          "column": 8,
          "position": 727
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134065'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": ")\n        self.vw_case_skip(\"unlimited sku\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        register_config = self.get_register_config()\n        unlimited_sku = register_config['unlimit']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who and check the mapping info is sent or not\")\n        data, tty_output, rhsm_output = self.vw_start()\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), unlimited_sku, \"physical\")\n        pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step3: check virtual sku is created or not in guest\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1079_check_unlimited_virtual_pool_created_in_guest.py",
        "start": 9,
        "end": 38,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 38,
          "column": 57,
          "position": 356
        }
      },
      "secondFile": {
        "name": "tier1/tc_1083_check_unlimited_virtual_pool_revoked_in_guest_after_host_unregister.py",
        "start": 9,
        "end": 39,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 39,
          "column": 51,
          "position": 366
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134083'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        register_owner",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1078_check_temporary_bonus_pool_can_be_attached_in_guest.py",
        "start": 9,
        "end": 23,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 23,
          "column": 15,
          "position": 193
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 31,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 31,
          "column": 13,
          "position": 269
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134063'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        guest_name",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py",
        "start": 9,
        "end": 23,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 23,
          "column": 11,
          "position": 194
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 24,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 24,
          "column": 16,
          "position": 202
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\")\n        res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault('step2', []).append(res)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1077_check_associated_info_by_rhsmlog_and_webui.py",
        "start": 27,
        "end": 36,
        "startLoc": {
          "line": 27,
          "column": 33,
          "position": 230
        },
        "endLoc": {
          "line": 36,
          "column": 7,
          "position": 342
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 14,
          "position": 366
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134061'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1076_check_guest_facts_by_subscription_manager.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1076_check_guest_facts_by_subscription_manager.py",
        "start": 9,
        "end": 21,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 21,
          "column": 11,
          "position": 172
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134059'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1075_check_rhsm_connection_info_in_rhsm_log.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 13,
          "position": 173
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134056'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1074_check_mapping_info_for_hypervisor_facts.py",
        "start": 18,
        "end": 32,
        "startLoc": {
          "line": 18,
          "column": 14,
          "position": 161
        },
        "endLoc": {
          "line": 32,
          "column": 13,
          "position": 269
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 26,
          "column": 10,
          "position": 225
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133683'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1073_check_mapping_info_point_to_specified_owner.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        register_config",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1073_check_mapping_info_point_to_specified_owner.py",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 96
        },
        "endLoc": {
          "line": 26,
          "column": 16,
          "position": 219
        }
      },
      "secondFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 13,
        "end": 22,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 106
        },
        "endLoc": {
          "line": 22,
          "column": 10,
          "position": 183
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133747'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 24,
          "column": 13,
          "position": 194
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 31,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 31,
          "column": 13,
          "position": 269
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "self.system_register(self.ssh_host(), register_type, register_config)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step3', []).append(res)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py",
        "start": 54,
        "end": 59,
        "startLoc": {
          "line": 54,
          "column": 13,
          "position": 621
        },
        "endLoc": {
          "line": 59,
          "column": 14,
          "position": 704
        }
      },
      "secondFile": {
        "name": "tier2/tc_2047_check_rhsm_log_after_delete_host_hypervisor_from_server_webui.py",
        "start": 50,
        "end": 55,
        "startLoc": {
          "line": 50,
          "column": 13,
          "position": 507
        },
        "endLoc": {
          "line": 55,
          "column": 3,
          "position": 590
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133744'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133680'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 47,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        hypervisor_type = self.get_config('hypervisor_type')\n        host_name = self.get_hypervisor_hostname()\n        host_uuid = self.get_hypervisor_hostuuid()\n        guest_name = self.get_hostname(self.ssh_guest())\n        guest_uuid = self.get_hypervisor_guestuuid()\n        json_file = \"/tmp/fake.json\"\n        conf_file = \"/etc/virt-who.d/fake.conf\"\n\n        # case steps\n        logger.info(\">>>step1: create json file\")\n        cli = \"virt-who -d\"\n        self.vw_fake_json_create(cli, json_file)\n        self.vw_etc_d_delete_all()\n        if \"libvirt-local\" in hypervisor_type or \"vdsm\" in hypervisor_type:\n            self.vw_fake_conf_create(conf_file, json_file, is_hypervisor=False)\n        else:\n            self.vw_fake_conf_create(conf_file, json_file, is_hypervisor=True)\n\n        logger.info(\">>>step2: run virt-who with fake conf\")\n        data, tty_output, rhsm_output = self.vw_start(cli=\"virt-who -d\")\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info(\">>>step3: attach physical sku for host/hypervisor\")\n        sku_attrs = self.system_sku_attr(self.ssh_host(), \"RH00002\", \"physical\")\n        pool_id = sku_attrs['pool_id']\n        self.vw_web_attach(host_name, host_uuid, pool_id)\n\n        logger.info(\">>>step4: attach bonus sku for guest\")\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), \"RH00050\", \"virtual\")\n        pool_id = sku_attrs['pool_id']\n        self.system_sku_attach(self.ssh_guest(), pool_id=pool_id)\n        output = self.system_sku_consumed(self.ssh_guest())\n        res = self.vw_msg_search(output, 'RH00050', exp_exist=True)\n        results.setdefault('step4', []).append(res)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1069_check_fake_mode_subscribe_function_in_etc_virtwho_d.py",
        "start": 9,
        "end": 55,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 55,
          "column": 14,
          "position": 570
        }
      },
      "secondFile": {
        "name": "tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py",
        "start": 9,
        "end": 55,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 55,
          "column": 7,
          "position": 570
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133681'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ")\n        guest_uuid = self.get_hypervisor_guestuuid()\n        json_file = \"/tmp/fake.json\"\n        conf_file = \"/etc/virt-who.d/fake.conf\"\n\n        # case steps\n        logger.info(\">>>step1: create json file\")\n        cli = \"virt-who -d\"\n        self.vw_fake_json_create(cli, json_file)\n        self.vw_etc_d_delete_all()\n        if \"libvirt-local\" in hypervisor_type or \"vdsm\" in hypervisor_type:\n            self.vw_fake_conf_create(conf_file, json_file, is_hypervisor=False)\n        else:\n            self.vw_fake_conf_create(conf_file, json_file, is_hypervisor=True)\n\n        logger.info(\">>>step2: run virt-who with fake conf\")\n        data, tty_output, rhsm_output = self.vw_start(cli=\"virt-who -d\")\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1068_check_fake_mode_with_one_hypervisor_in_etc_virtwho_d.py",
        "start": 18,
        "end": 40,
        "startLoc": {
          "line": 18,
          "column": 2,
          "position": 149
        },
        "endLoc": {
          "line": 40,
          "column": 14,
          "position": 377
        }
      },
      "secondFile": {
        "name": "tier1/tc_1070_check_fake_mode_pool_revoked_function_in_etc_virtwho_d.py",
        "start": 20,
        "end": 42,
        "startLoc": {
          "line": 20,
          "column": 2,
          "position": 176
        },
        "endLoc": {
          "line": 42,
          "column": 7,
          "position": 404
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133703'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_enable",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 20,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 20,
          "column": 17,
          "position": 165
        }
      },
      "secondFile": {
        "name": "tier1/tc_1073_check_mapping_info_point_to_specified_owner.py",
        "start": 10,
        "end": 21,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 21,
          "column": 23,
          "position": 166
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_enable(\"[defaults]\", virtwho_conf)\n        self.vw_option_enable(\"hypervisor_id\", virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 16,
        "end": 27,
        "startLoc": {
          "line": 16,
          "column": 9,
          "position": 125
        },
        "endLoc": {
          "line": 27,
          "column": 12,
          "position": 240
        }
      },
      "secondFile": {
        "name": "tier2/tc_2041_validate_default_hypervisor_id_by_virtwho_conf.py",
        "start": 16,
        "end": 27,
        "startLoc": {
          "line": 16,
          "column": 9,
          "position": 125
        },
        "endLoc": {
          "line": 27,
          "column": 10,
          "position": 240
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "if \"esx\" in hypervisor_type or \"rhevm\" in hypervisor_type:\n            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}\n        else:\n            steps = {'step1':'uuid', 'step2':'hostname'}\n\n        # Case Steps\n        for step, option in sorted(steps.items(),key=lambda item:item[0]):\n            logger.info(\">>>{0}: Run virt-who with hypervisor_id={1} in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 32,
        "end": 39,
        "startLoc": {
          "line": 32,
          "column": 9,
          "position": 293
        },
        "endLoc": {
          "line": 39,
          "column": 68,
          "position": 391
        }
      },
      "secondFile": {
        "name": "tier2/tc_2028_validate_wildcard_for_filter_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 28,
        "end": 35,
        "startLoc": {
          "line": 28,
          "column": 9,
          "position": 254
        },
        "endLoc": {
          "line": 35,
          "column": 70,
          "position": 352
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133695'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ":\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        register_config = self.get_register_config()\n        register_owner = register_config['owner']\n        register_env",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 10,
        "end": 26,
        "startLoc": {
          "line": 10,
          "column": 9,
          "position": 103
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 239
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 13,
        "end": 29,
        "startLoc": {
          "line": 13,
          "column": 9,
          "position": 138
        },
        "endLoc": {
          "line": 29,
          "column": 13,
          "position": 241
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault('step1', []).append(res1)\n        results.setdefault('step1', []).append(res2)\n\n        logger.info(\">>>step2: Run virt-who with owner and env setting in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 314
        },
        "endLoc": {
          "line": 39,
          "column": 74,
          "position": 403
        }
      },
      "secondFile": {
        "name": "tier2/tc_2040_validate_defaults_env_option_by_virtwho_conf.py",
        "start": 36,
        "end": 42,
        "startLoc": {
          "line": 36,
          "column": 2,
          "position": 347
        },
        "endLoc": {
          "line": 42,
          "column": 89,
          "position": 436
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", virtwho_conf)\n        self.vw_option_update_value(\"env\", register_env, virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault('step2'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 41,
        "end": 46,
        "startLoc": {
          "line": 41,
          "column": 15,
          "position": 426
        },
        "endLoc": {
          "line": 46,
          "column": 8,
          "position": 517
        }
      },
      "secondFile": {
        "name": "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 31,
        "end": 36,
        "startLoc": {
          "line": 31,
          "column": 6,
          "position": 277
        },
        "endLoc": {
          "line": 36,
          "column": 8,
          "position": 368
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133698'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        register_config = self.get_register_config()\n        register_owner = register_config['owner']\n\n        # case steps\n        logger.info(\">>>step1: Run virt-who with owner setting in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 66,
          "position": 212
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 30,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 30,
          "column": 55,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault('step1', []).append(res1)\n        results.setdefault('step1', []).append(res2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1065_check_defaults_owner_option_in_etc_virtwho_conf.py",
        "start": 29,
        "end": 36,
        "startLoc": {
          "line": 29,
          "column": 15,
          "position": 246
        },
        "endLoc": {
          "line": 36,
          "column": 14,
          "position": 354
        }
      },
      "secondFile": {
        "name": "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 32,
        "end": 42,
        "startLoc": {
          "line": 32,
          "column": 13,
          "position": 291
        },
        "endLoc": {
          "line": 42,
          "column": 7,
          "position": 432
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133692'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 23,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 23,
          "column": 13,
          "position": 184
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 22,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 22,
          "column": 10,
          "position": 183
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault('step1', []).append(res1)\n        results.setdefault('step1', []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1064_check_defaults_section_header_in_etc_virtwho_conf.py",
        "start": 25,
        "end": 33,
        "startLoc": {
          "line": 25,
          "column": 13,
          "position": 200
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 316
        }
      },
      "secondFile": {
        "name": "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 13,
          "position": 291
        },
        "endLoc": {
          "line": 37,
          "column": 2,
          "position": 362
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133690'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/tmp/{0}.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py",
        "start": 11,
        "end": 22,
        "startLoc": {
          "line": 11,
          "column": 16,
          "position": 99
        },
        "endLoc": {
          "line": 22,
          "column": 16,
          "position": 185
        }
      },
      "secondFile": {
        "name": "tier1/tc_1099_check_instance_consumed_status_in_host_after_set_cpu_socket_8.py",
        "start": 13,
        "end": 24,
        "startLoc": {
          "line": 13,
          "column": 7,
          "position": 113
        },
        "endLoc": {
          "line": 24,
          "column": 27,
          "position": 199
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(rhsm_output, guest_uuid, exp_exist=True)\n        results.setdefault('step1', []).append(res1)\n        results.setdefault('step1', []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1063_check_global_configs_option_in_etc_virtwho_conf.py",
        "start": 29,
        "end": 37,
        "startLoc": {
          "line": 29,
          "column": 12,
          "position": 246
        },
        "endLoc": {
          "line": 37,
          "column": 2,
          "position": 362
        }
      },
      "secondFile": {
        "name": "tier1/tc_1066_check_defaults_env_option_in_etc_virtwho_conf.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 13,
          "position": 291
        },
        "endLoc": {
          "line": 37,
          "column": 2,
          "position": 362
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133693'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        log_dir",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 8,
          "position": 183
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 22,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 22,
          "column": 10,
          "position": 183
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133688'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n        log_dir = \"/var/log/rhsm/virtwho/\"\n        log_file = \"/var/log/rhsm/virtwho/rhsm.log\"\n\n        # case steps\n        logger.info(\">>>step1: Run virt-who with log-dir setting in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 26,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 26,
          "column": 68,
          "position": 205
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 26,
          "column": 64,
          "position": 205
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n        ret, output = self.runcmd(\"ls {0}\".format(log_file), self.ssh_host())\n        if ret == 0:\n            logger.info(\"Succeeded to find file: {0}\".format(log_file))\n            ret, output = self.runcmd(\"cat {0}\".format(log_file), self.ssh_host())\n            d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)\n            d2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n            if d1 is False or d2 is False:\n                results.setdefault('step1', []).append(False)\n        else:\n            logger.error(\"{0} is not exist\".format(log_file))\n            results.setdefault('step1', []).append(False)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1061_check_global_log_dir_option_in_etc_virtwho_conf.py",
        "start": 28,
        "end": 45,
        "startLoc": {
          "line": 28,
          "column": 8,
          "position": 228
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 493
        }
      },
      "secondFile": {
        "name": "tier1/tc_1062_check_global_log_file_option_in_etc_virtwho_conf.py",
        "start": 30,
        "end": 47,
        "startLoc": {
          "line": 30,
          "column": 9,
          "position": 253
        },
        "endLoc": {
          "line": 47,
          "column": 2,
          "position": 518
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133689'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        guest_uuid = self.get_hypervisor_guestuuid()\n\n        # case steps\n        logger.info(\">>>step1: Run virt-who with log-per-config=False in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 24,
          "column": 73,
          "position": 191
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 24,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 24,
          "column": 59,
          "position": 191
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133686'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info('>>>step1: Run virt-who with \"onestho=True\"'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 23,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 23,
          "column": 45,
          "position": 180
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 23,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 23,
          "column": 57,
          "position": 180
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133687'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133684'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        default_reporter_id",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 21,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 21,
          "column": 20,
          "position": 172
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 25,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 214
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "self.vw_option_enable(\"reporter_id\", virtwho_conf)\n                self.vw_option_update_value(\"reporter_id\", value, virtwho_conf)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(step, []).append(res)\n            if",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1057_check_global_reporter_id_option_in_etc_virtwho_conf.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 17,
          "position": 272
        },
        "endLoc": {
          "line": 34,
          "column": 3,
          "position": 361
        }
      },
      "secondFile": {
        "name": "tier2/tc_2035_validate_global_report_id_by_virtwho_conf.py",
        "start": 42,
        "end": 47,
        "startLoc": {
          "line": 42,
          "column": 13,
          "position": 396
        },
        "endLoc": {
          "line": 47,
          "column": 5,
          "position": 485
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133685'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        virtwho_conf = \"/etc/virt-who.conf\"\n        self.vw_option_enable('[global]', virtwho_conf)\n        self.vw_option_enable('debug', virtwho_conf)\n        self.vw_option_update_value('debug', 'True', virtwho_conf)\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info(\">>>step1: enable interval and set to 10 in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 9,
        "end": 23,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 23,
          "column": 64,
          "position": 180
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 14,
        "end": 23,
        "startLoc": {
          "line": 14,
          "column": 19,
          "position": 146
        },
        "endLoc": {
          "line": 23,
          "column": 57,
          "position": 180
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: enable interval and set to 60 in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 25,
        "end": 30,
        "startLoc": {
          "line": 25,
          "column": 5,
          "position": 203
        },
        "endLoc": {
          "line": 30,
          "column": 64,
          "position": 283
        }
      },
      "secondFile": {
        "name": "tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 3,
          "position": 238
        },
        "endLoc": {
          "line": 32,
          "column": 75,
          "position": 318
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=60, exp_loopnum=1, exp_looptime=60)\n        results.setdefault('step2', []).append(res)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 31,
        "end": 36,
        "startLoc": {
          "line": 31,
          "column": 13,
          "position": 298
        },
        "endLoc": {
          "line": 36,
          "column": 7,
          "position": 386
        }
      },
      "secondFile": {
        "name": "tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 35,
        "end": 40,
        "startLoc": {
          "line": 35,
          "column": 26,
          "position": 358
        },
        "endLoc": {
          "line": 40,
          "column": 14,
          "position": 446
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133682'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "virtwho_conf)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=True)\n        results.setdefault('step1', []).append(res1)\n        results.setdefault('step1', []).append(res2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1055_check_global_section_header_in_etc_virtwho_conf.py",
        "start": 23,
        "end": 30,
        "startLoc": {
          "line": 23,
          "column": 2,
          "position": 186
        },
        "endLoc": {
          "line": 30,
          "column": 14,
          "position": 296
        }
      },
      "secondFile": {
        "name": "tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py",
        "start": 23,
        "end": 30,
        "startLoc": {
          "line": 23,
          "column": 2,
          "position": 180
        },
        "endLoc": {
          "line": 30,
          "column": 7,
          "position": 290
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133714'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ":\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 11,
        "end": 24,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 103
        },
        "endLoc": {
          "line": 24,
          "column": 12,
          "position": 211
        }
      },
      "secondFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 12,
        "end": 35,
        "startLoc": {
          "line": 12,
          "column": 6,
          "position": 107
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        register_owner = register_config['owner']\n        if \"esx\" in hypervisor_type or \"rhevm\" in hypervisor_type:\n            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}\n        else:\n            steps = {'step1':'uuid', 'step2':'hostname'}\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 19,
        "end": 34,
        "startLoc": {
          "line": 19,
          "column": 21,
          "position": 167
        },
        "endLoc": {
          "line": 34,
          "column": 13,
          "position": 324
        }
      },
      "secondFile": {
        "name": "tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 22,
        "end": 37,
        "startLoc": {
          "line": 22,
          "column": 13,
          "position": 196
        },
        "endLoc": {
          "line": 37,
          "column": 13,
          "position": 353
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133709'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        register_owner = register_config['owner']\n        if \"esx\" in hypervisor_type or \"rhevm\" in hypervisor_type:\n            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}\n        else:\n            steps = {'step1':'uuid', 'step2':'hostname'}\n\n        # case steps\n        for step, option in sorted(steps.items(),key=lambda item:item[0]):\n            logger.info(\">>>{0}: run virt-who to with hypervisor_id={1} and set filter_hosts\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1053_check_hypervisor_id_and_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 36,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 36,
          "column": 70,
          "position": 362
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 36,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 36,
          "column": 71,
          "position": 362
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133705'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n        host_name = self.get_hypervisor_hostname()\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        register_owner = register_config['owner']\n        if \"esx\" in hypervisor_type or \"rhevm\" in hypervisor_type:\n            steps = {'step1':'uuid', 'step2':'hostname', 'step3':'hwuuid'}\n        else:\n            steps = {'step1':'uuid', 'step2':'hostname'}\n\n        # case steps\n        for step, option in sorted(steps.items(),key=lambda item:item[0]):\n            logger.info(\">>>{0}: run virt-who with hypervisor_id={1}\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 36,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 36,
          "column": 46,
          "position": 362
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 36,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 36,
          "column": 71,
          "position": 362
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "= host_uuid\n            if hypervisorId in data[register_owner].keys():\n                logger.info(\"Succeeded to search hypervisorId:{0}\".format(hypervisorId))\n                results.setdefault(step, []).append(True)\n            else:\n                logger.error(\"Failed to search hypervisorId:{0}\".format(hypervisorId))\n                results.setdefault(step, []).append(False)\n            if",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py",
        "start": 49,
        "end": 56,
        "startLoc": {
          "line": 49,
          "column": 2,
          "position": 512
        },
        "endLoc": {
          "line": 56,
          "column": 3,
          "position": 598
        }
      },
      "secondFile": {
        "name": "tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 49,
        "end": 56,
        "startLoc": {
          "line": 49,
          "column": 2,
          "position": 518
        },
        "endLoc": {
          "line": 56,
          "column": 5,
          "position": 604
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "))\n                results.setdefault(step, []).append(False)\n            self.vw_option_del(\"hypervisor_id\", filename=config_file)\n            self.vw_web_host_delete(host_name, hypervisorId)\n        if \"stage\" in register_type:\n            self.stage_consumer_clean(self.ssh_host(), register_config)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1052_check_hypervisor_id_option_in_etc_virtwho_d.py",
        "start": 69,
        "end": 77,
        "startLoc": {
          "line": 69,
          "column": 19,
          "position": 760
        },
        "endLoc": {
          "line": 77,
          "column": 2,
          "position": 839
        }
      },
      "secondFile": {
        "name": "tier1/tc_1067_check_defaults_hypervisor_id_option_in_etc_virtwho_conf.py",
        "start": 54,
        "end": 62,
        "startLoc": {
          "line": 54,
          "column": 13,
          "position": 583
        },
        "endLoc": {
          "line": 62,
          "column": 2,
          "position": 662
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133705')\n        hypervisor_type = self.get_config('hypervisor_type')\n        if \"esx\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 6,
          "position": 93
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 16,
          "position": 93
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ":\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 11,
        "end": 26,
        "startLoc": {
          "line": 11,
          "column": 16,
          "position": 100
        },
        "endLoc": {
          "line": 26,
          "column": 13,
          "position": 220
        }
      },
      "secondFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 12,
        "end": 25,
        "startLoc": {
          "line": 12,
          "column": 6,
          "position": 107
        },
        "endLoc": {
          "line": 25,
          "column": 10,
          "position": 222
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133707'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n\n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 212
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 35,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(s1)\n\n        logger.info(\">>>step2: run virt-who with filter_hosts=[host_uuid] and exclude_hosts=[host_uuid]\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 26,
        "end": 31,
        "startLoc": {
          "line": 26,
          "column": 64,
          "position": 220
        },
        "endLoc": {
          "line": 31,
          "column": 85,
          "position": 289
        }
      },
      "secondFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 60,
          "position": 228
        },
        "endLoc": {
          "line": 32,
          "column": 50,
          "position": 297
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)\n        results.setdefault('step2', []).append(s2)\n        self",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 321
        },
        "endLoc": {
          "line": 39,
          "column": 5,
          "position": 426
        }
      },
      "secondFile": {
        "name": "tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 35,
        "end": 42,
        "startLoc": {
          "line": 35,
          "column": 2,
          "position": 359
        },
        "endLoc": {
          "line": 42,
          "column": 7,
          "position": 465
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step4', []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)\n        results.setdefault('step4', []).append(s2)\n        self.vw_option_del(\"exclude_hosts\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 55,
        "end": 61,
        "startLoc": {
          "line": 55,
          "column": 2,
          "position": 657
        },
        "endLoc": {
          "line": 61,
          "column": 16,
          "position": 766
        }
      },
      "secondFile": {
        "name": "tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 51,
        "end": 57,
        "startLoc": {
          "line": 51,
          "column": 2,
          "position": 617
        },
        "endLoc": {
          "line": 57,
          "column": 15,
          "position": 726
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133700'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if \"esx\" not in hypervisor_type:\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n\n        # case steps\n        logger.info(\">>>step1: run virt-who with exlude_host_parents=* to get domain_id\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 27,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 27,
          "column": 69,
          "position": 227
        }
      },
      "secondFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 27,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 27,
          "column": 60,
          "position": 227
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)\n        results.setdefault('step1', []).append(s2)\n        domain_id",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 34,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 243
        },
        "endLoc": {
          "line": 34,
          "column": 10,
          "position": 348
        }
      },
      "secondFile": {
        "name": "tier2/tc_2030_validate_quotes_for_filter_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 34,
        "startLoc": {
          "line": 27,
          "column": 2,
          "position": 234
        },
        "endLoc": {
          "line": 34,
          "column": 7,
          "position": 340
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", filename=config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)\n        results.setdefault('step2', []).append(s2)\n\n        logger.info(\">>>step3: run virt-who with exclude_host_parents=\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 39,
        "end": 46,
        "startLoc": {
          "line": 39,
          "column": 10,
          "position": 422
        },
        "endLoc": {
          "line": 46,
          "column": 52,
          "position": 536
        }
      },
      "secondFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 33,
        "end": 42,
        "startLoc": {
          "line": 33,
          "column": 7,
          "position": 309
        },
        "endLoc": {
          "line": 42,
          "column": 55,
          "position": 469
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", filename=config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step4', []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=True)\n        results.setdefault('step4', []).append(s2)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 47,
        "end": 54,
        "startLoc": {
          "line": 47,
          "column": 3,
          "position": 548
        },
        "endLoc": {
          "line": 54,
          "column": 14,
          "position": 658
        }
      },
      "secondFile": {
        "name": "tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 55,
        "end": 57,
        "startLoc": {
          "line": 55,
          "column": 10,
          "position": 653
        },
        "endLoc": {
          "line": 57,
          "column": 5,
          "position": 722
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133702'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if \"esx\" not in hypervisor_type:\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_hwuuid = self.get_hypervisor_hwuuid()\n\n        # case steps\n        logger.info(\">>>step1: run virt-who with filter_host_parents='' to get domain_id\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 27,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 27,
          "column": 70,
          "position": 227
        }
      },
      "secondFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 27,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 27,
          "column": 60,
          "position": 227
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", filename=config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(s1)\n        s2 = self.vw_msg_search(str(data), host_uuid, exp_exist=False)\n        results.setdefault('step1', []).append(s2)\n        domain_id = re.findall(r\"Skipping host '{0}' because its parent '(.*?)'\".format(host_hwuuid), rhsm_output)[-1]\n        logger.info(\"Succeeded to find: {0}:{1}:{2}\".format(host_hwuuid, domain_id, host_uuid))\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1048_check_filter_host_parents_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 3,
          "position": 239
        },
        "endLoc": {
          "line": 37,
          "column": 7,
          "position": 393
        }
      },
      "secondFile": {
        "name": "tier1/tc_1049_check_exclude_host_parents_option_in_etc_virtwho_d.py",
        "start": 28,
        "end": 36,
        "startLoc": {
          "line": 28,
          "column": 4,
          "position": 239
        },
        "endLoc": {
          "line": 36,
          "column": 5,
          "position": 392
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133694'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_str",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 24,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 24,
          "column": 9,
          "position": 211
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 35,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(s1)\n\n        logger.info(\">>>step2: run virt-who with exclude_hosts=[host_uuid]\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 47,
          "position": 232
        },
        "endLoc": {
          "line": 32,
          "column": 56,
          "position": 301
        }
      },
      "secondFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 60,
          "position": 228
        },
        "endLoc": {
          "line": 32,
          "column": 50,
          "position": 297
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        self.vw_option_add(\"exclude_hosts\", host_uuid, filename=config_file)\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(s1)\n        s2 = self.vw_msg_search(rhsm_output",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1047_check_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 32,
        "end": 37,
        "startLoc": {
          "line": 32,
          "column": 56,
          "position": 302
        },
        "endLoc": {
          "line": 37,
          "column": 12,
          "position": 390
        }
      },
      "secondFile": {
        "name": "tier1/tc_1050_check_filter_hosts_and_exclude_hosts_options_in_etc_virtwho_d.py",
        "start": 32,
        "end": 39,
        "startLoc": {
          "line": 32,
          "column": 12,
          "position": 306
        },
        "endLoc": {
          "line": 39,
          "column": 4,
          "position": 432
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133697'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        host_str = '\"hypervisorId\": \"{0}\"'.format(host_uuid)\n\n        # case steps\n        logger.info(\">>>step1: run virt-who without filter_hosts\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 27,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 27,
          "column": 46,
          "position": 231
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 27,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 27,
          "column": 47,
          "position": 231
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start()\n        s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(s1)\n\n        logger.info(\">>>step2: run virt-who with filter_hosts=[host_uuid]\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1046_check_filter_hosts_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 46,
          "position": 232
        },
        "endLoc": {
          "line": 32,
          "column": 55,
          "position": 301
        }
      },
      "secondFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 60,
          "position": 228
        },
        "endLoc": {
          "line": 32,
          "column": 50,
          "position": 297
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133691'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_server = register_config['server']\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 11,
        "end": 24,
        "startLoc": {
          "line": 11,
          "column": 18,
          "position": 89
        },
        "endLoc": {
          "line": 24,
          "column": 3,
          "position": 199
        }
      },
      "secondFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 13,
        "end": 25,
        "startLoc": {
          "line": 13,
          "column": 16,
          "position": 115
        },
        "endLoc": {
          "line": 25,
          "column": 18,
          "position": 221
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n            self.vw_option_update_value(\"no_proxy\", register_server, '/etc/rhsm/rhsm.conf')\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step3', []).append(s1)\n\n            logger.info(\">>>step4: set no_proxy=* in /etc/rhsm/rhsm.conf\")\n            self.vw_option_update_value(\"no_proxy\", '*', '/etc/rhsm/rhsm.conf')\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step4', []).append(s1)\n            self.vw_option_update_value(\"no_proxy\", '', '/etc/rhsm/rhsm.conf')\n\n            logger.info(\">>>step5: set rhsm_no_proxy=[register_server] in /etc/virt-who.conf\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 57,
        "end": 70,
        "startLoc": {
          "line": 57,
          "column": 66,
          "position": 626
        },
        "endLoc": {
          "line": 70,
          "column": 70,
          "position": 807
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 60,
        "end": 73,
        "startLoc": {
          "line": 60,
          "column": 66,
          "position": 683
        },
        "endLoc": {
          "line": 73,
          "column": 70,
          "position": 864
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n            self.vw_option_enable('[defaults]', '/etc/virt-who.conf')\n            self.vw_option_enable('rhsm_no_proxy', '/etc/virt-who.conf')\n            self.vw_option_update_value('rhsm_no_proxy', register_server, '/etc/virt-who.conf')\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step5', []).append(s1)\n\n            logger.info(\">>>step6: set rhsm_no_proxy=* in /etc/virt-who.conf\")\n            self.vw_option_update_value('rhsm_no_proxy', '*', '/etc/virt-who.conf')\n            data, tty_output, rhsm_output = self.vw_start()\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault('step6', []).append(s1)\n            self.vw_option_disable('rhsm_no_proxy', '/etc/virt-who.conf')\n\n            if hypervisor_type not in ('libvirt-local', 'vdsm'):\n                # frequently start virt-who will get 429 error, sleep 15s to fix",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 70,
        "end": 86,
        "startLoc": {
          "line": 70,
          "column": 70,
          "position": 808
        },
        "endLoc": {
          "line": 86,
          "column": 65,
          "position": 1021
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 73,
        "end": 89,
        "startLoc": {
          "line": 73,
          "column": 70,
          "position": 865
        },
        "endLoc": {
          "line": 89,
          "column": 7,
          "position": 1078
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n                self.vw_option_add('rhsm_no_proxy', register_server, config_file)\n                data, tty_output, rhsm_output = self.vw_start()\n                s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n                results.setdefault('step7', []).append(s1)\n\n                time",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 88,
        "end": 94,
        "startLoc": {
          "line": 88,
          "column": 74,
          "position": 1037
        },
        "endLoc": {
          "line": 94,
          "column": 5,
          "position": 1116
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 89,
        "end": 95,
        "startLoc": {
          "line": 89,
          "column": 74,
          "position": 1083
        },
        "endLoc": {
          "line": 95,
          "column": 7,
          "position": 1162
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n                logger.info(\">>>step8: set rhsm_no_proxy=* in /etc/virt-who.d/x.conf\")\n                self.vw_option_update_value('rhsm_no_proxy', '*', config_file)\n                data, tty_output, rhsm_output = self.vw_start()\n                s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n                results.setdefault('step8', []).append(s1)\n                self.vw_option_del('rhsm_no_proxy', config_file)\n            else:\n                logger.info('Skip step7 and step8 for {0}'.format(hypervisor_type))\n        except:\n            results.setdefault('step except', []).append(False)\n            pass\n\n        finally:\n            self.vw_option_update_value('proxy_hostname'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1045_check_rhsm_proxy_function_in_rhsm_conf.py",
        "start": 94,
        "end": 108,
        "startLoc": {
          "line": 94,
          "column": 3,
          "position": 1121
        },
        "endLoc": {
          "line": 108,
          "column": 17,
          "position": 1268
        }
      },
      "secondFile": {
        "name": "tier1/tc_1105_check_rhsm_proxy_function_in_etc_virtwho_d.py",
        "start": 93,
        "end": 108,
        "startLoc": {
          "line": 93,
          "column": 3,
          "position": 1158
        },
        "endLoc": {
          "line": 108,
          "column": 11,
          "position": 1306
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133713'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        register_server",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 9,
        "end": 25,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 25,
          "column": 16,
          "position": 221
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 29,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 29,
          "column": 10,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "logger.info(\">>>step1: run virt-who with rhsm_hostname, rhsm_port, rhsm_prefix good value\")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_hostname disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 31,
        "end": 41,
        "startLoc": {
          "line": 31,
          "column": 9,
          "position": 265
        },
        "endLoc": {
          "line": 41,
          "column": 52,
          "position": 412
        }
      },
      "secondFile": {
        "name": "tier2/tc_2023_validate_rhsm_port_option_in_etc_virtwho_d.py",
        "start": 34,
        "end": 38,
        "startLoc": {
          "line": 34,
          "column": 13,
          "position": 294
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133712'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        register_server = register_config['server']\n        register_username = register_config['username']\n        register_password = register_config['password']\n        register_prefix = register_config['prefix']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who with rhsm_username and rhsm_password good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 31,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 31,
          "column": 73,
          "position": 269
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 31,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 31,
          "column": 79,
          "position": 269
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_username and rhsm_encrypted_password good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 31,
        "end": 41,
        "startLoc": {
          "line": 31,
          "column": 73,
          "position": 270
        },
        "endLoc": {
          "line": 41,
          "column": 83,
          "position": 412
        }
      },
      "secondFile": {
        "name": "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 34,
        "end": 38,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 314
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(res)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1043_check_rhsm_username_and_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 44,
        "end": 49,
        "startLoc": {
          "line": 44,
          "column": 16,
          "position": 447
        },
        "endLoc": {
          "line": 49,
          "column": 14,
          "position": 518
        }
      },
      "secondFile": {
        "name": "tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 42,
        "end": 46,
        "startLoc": {
          "line": 42,
          "column": 16,
          "position": 421
        },
        "endLoc": {
          "line": 46,
          "column": 5,
          "position": 491
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133710'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        register_config = self.get_register_config()\n        register_type = register_config['type']\n        register_server = register_config['server']\n        register_username = register_config['username']\n        register_password = register_config['password']\n        register_prefix = register_config['prefix']\n\n        # case steps\n        logger.info(\">>>step1: run virt-who without rhsm_username and rhsm_password\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 31,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 31,
          "column": 65,
          "position": 269
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 9,
        "end": 31,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 31,
          "column": 79,
          "position": 269
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who with rhsm_username and rhsm_password good value\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 31,
        "end": 36,
        "startLoc": {
          "line": 31,
          "column": 65,
          "position": 270
        },
        "endLoc": {
          "line": 36,
          "column": 73,
          "position": 342
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        self.vw_option_add(\"rhsm_hostname\", register_server, config_file)\n        self.vw_option_add(\"rhsm_port\", \"443\", config_file)\n        self.vw_option_add(\"rhsm_prefix\", register_prefix, config_file)\n        self.vw_option_add(\"rhsm_username\", register_username, config_file)\n        self.vw_option_add(\"rhsm_password\", register_password, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 36,
        "end": 44,
        "startLoc": {
          "line": 36,
          "column": 73,
          "position": 343
        },
        "endLoc": {
          "line": 44,
          "column": 8,
          "position": 467
        }
      },
      "secondFile": {
        "name": "tier2/tc_2043_check_virtwho_send_mapping_to_multi_org_with_rhsm_parameters.py",
        "start": 34,
        "end": 42,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 314
        },
        "endLoc": {
          "line": 42,
          "column": 8,
          "position": 412
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(res)\n\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 41,
        "end": 46,
        "startLoc": {
          "line": 41,
          "column": 18,
          "position": 410
        },
        "endLoc": {
          "line": 46,
          "column": 7,
          "position": 481
        }
      },
      "secondFile": {
        "name": "tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 42,
        "end": 46,
        "startLoc": {
          "line": 42,
          "column": 16,
          "position": 421
        },
        "endLoc": {
          "line": 46,
          "column": 5,
          "position": 491
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step3', []).append(res)\n\n        logger.info(\">>>step4: run virt-who with rhsm_username and rhsm_password disable\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 48,
        "end": 53,
        "startLoc": {
          "line": 48,
          "column": 3,
          "position": 511
        },
        "endLoc": {
          "line": 53,
          "column": 70,
          "position": 586
        }
      },
      "secondFile": {
        "name": "tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 49,
        "end": 45,
        "startLoc": {
          "line": 49,
          "column": 12,
          "position": 516
        },
        "endLoc": {
          "line": 45,
          "column": 62,
          "position": 509
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step4', []).append(res)\n\n        # case result",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1042_check_rhsm_username_and_rhsm_password_option_in_etc_virtwho_d.py",
        "start": 55,
        "end": 60,
        "startLoc": {
          "line": 55,
          "column": 16,
          "position": 606
        },
        "endLoc": {
          "line": 60,
          "column": 14,
          "position": 677
        }
      },
      "secondFile": {
        "name": "tier1/tc_1044_check_rhsm_hostname_port_prefix_options_in_etc_virtwho_d.py",
        "start": 56,
        "end": 60,
        "startLoc": {
          "line": 56,
          "column": 14,
          "position": 611
        },
        "endLoc": {
          "line": 60,
          "column": 5,
          "position": 681
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        \n        # case steps",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 12,
        "end": 25,
        "startLoc": {
          "line": 12,
          "column": 11,
          "position": 122
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 222
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 11,
        "end": 26,
        "startLoc": {
          "line": 11,
          "column": 7,
          "position": 102
        },
        "endLoc": {
          "line": 26,
          "column": 11,
          "position": 236
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: run virt-who with encrypted_password\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1041_check_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 26,
        "end": 31,
        "startLoc": {
          "line": 26,
          "column": 52,
          "position": 230
        },
        "endLoc": {
          "line": 31,
          "column": 49,
          "position": 302
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133706'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1040_check_virt_who_password_function.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133704'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "for step, option in sorted(steps.items(),key=lambda item:item[0]):\n            logger.info(\">>>{0}: run virt-who to check {1}\".format(step, option))\n            if option == \"http_proxy\":\n                value = \"http://{0}\".format(proxy_server)\n                bad_value = \"http://{0}\".format(bad_proxy_server)\n            if option == \"https_proxy\":\n                value = \"https://{0}\".format(proxy_server)\n                bad_value = \"https://{0}\".format(bad_proxy_server)\n            logger.info(\"> run virt-who with good {0}\".format(option))\n            self.vw_option_add",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 9,
          "position": 248
        },
        "endLoc": {
          "line": 37,
          "column": 14,
          "position": 378
        }
      },
      "secondFile": {
        "name": "tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 31,
        "end": 40,
        "startLoc": {
          "line": 31,
          "column": 9,
          "position": 296
        },
        "endLoc": {
          "line": 40,
          "column": 17,
          "position": 426
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "(option, value, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n            s1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            s2 = self.vw_msg_search(rhsm_output, \"Connection built.*{0}\".format(proxy_server), exp_exist=True)\n            s3 = self.vw_msg_search(rhsm_output, \"Using proxy.*{0}\".format(proxy_server), exp_exist=True)\n            results.setdefault(step, []).append(s1)\n            results.setdefault(step, []).append(s2)\n            results.setdefault(step, []).append(s3)\n\n            logger.info(\"> run virt-who with bad {0}\".format(option))\n            self.vw_option_update_value(option, bad_value, config_file)\n            data, tty_output, rhsm_output = self.vw_start(exp_send=0)\n            s4 = self.op_normal_value(data, exp_error=\"1|2\", exp_thread=1, exp_send=0)\n            s5 = self.msg_validation(rhsm_output, error_msg, exp_exist=True)\n            results.setdefault(step, []).append(s4)\n            results.setdefault(step, []).append(s5)\n\n            logger.info(\">>> run virt-who with no_proxy and bad proxy\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1039_check_http_proxy_option_by_etc_sysconfig.py",
        "start": 37,
        "end": 54,
        "startLoc": {
          "line": 37,
          "column": 14,
          "position": 379
        },
        "endLoc": {
          "line": 54,
          "column": 47,
          "position": 672
        }
      },
      "secondFile": {
        "name": "tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 41,
        "end": 58,
        "startLoc": {
          "line": 41,
          "column": 23,
          "position": 438
        },
        "endLoc": {
          "line": 58,
          "column": 50,
          "position": 731
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133701'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1038_check_sam_satellite_options_by_etc_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133748'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1037_check_sam_satellite_options_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133739'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "):\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        swap_file",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py",
        "start": 11,
        "end": 22,
        "startLoc": {
          "line": 11,
          "column": 16,
          "position": 99
        },
        "endLoc": {
          "line": 22,
          "column": 10,
          "position": 186
        }
      },
      "secondFile": {
        "name": "tier1/tc_1054_check_hypervisor_id_and_exclude_hosts_option_in_etc_virtwho_d.py",
        "start": 11,
        "end": 23,
        "startLoc": {
          "line": 11,
          "column": 7,
          "position": 102
        },
        "endLoc": {
          "line": 23,
          "column": 5,
          "position": 193
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n\n        logger.info(\">>>step2: check how many modes in rhsm.log\")\n        modes = re.findall(r'Using configuration.*\\(\"(.*?)\" mode\\)', rhsm_output)\n        if len(modes) == 1:\n            logger.info(\"Succeeded to check, only one mode in rhsm.log: {0}\".format(modes))\n            results.setdefault('step2', []).append(True)\n        else:\n            logger.error(\"Failed to check, the modes number is not matched: {0}\".format(modes))\n            results.setdefault('step2', []).append(False)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1036_check_ignore_swp_file_in_etc_virtwho_d.py",
        "start": 32,
        "end": 44,
        "startLoc": {
          "line": 32,
          "column": 3,
          "position": 325
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 439
        }
      },
      "secondFile": {
        "name": "tier3/tc_1027_check_two_modes_enabled_in_etc_sysconfig.py",
        "start": 32,
        "end": 44,
        "startLoc": {
          "line": 32,
          "column": 4,
          "position": 351
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 465
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133735'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type in ('libvirt-local', 'vdsm'):\n            self.vw_case_skip(hypervisor_type)\n        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '0.23.3':\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # case config",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py",
        "start": 9,
        "end": 17,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 17,
          "column": 14,
          "position": 157
        }
      },
      "secondFile": {
        "name": "tier2/tc_2009_validate_env_option_in_etc_sysconfig.py",
        "start": 9,
        "end": 17,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 17,
          "column": 14,
          "position": 157
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check mapping info duplicated or not\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 12,
          "position": 259
        },
        "endLoc": {
          "line": 34,
          "column": 49,
          "position": 334
        }
      },
      "secondFile": {
        "name": "tier2/tc_2027_validate_rhsm_encrypted_password_option_in_etc_virtwho_d.py",
        "start": 38,
        "end": 38,
        "startLoc": {
          "line": 38,
          "column": 16,
          "position": 352
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133730'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "in hypervisor_type:\n            self.vw_case_skip(hypervisor_type)\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info(\">>>step1: run virt-who service with one config file in /etc/virt-who.d/\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1030_check_mapping_info_with_one_file_include_one_mode_in_etc_virtwho_d.py",
        "start": 11,
        "end": 25,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 95
        },
        "endLoc": {
          "line": 25,
          "column": 74,
          "position": 203
        }
      },
      "secondFile": {
        "name": "tier1/tc_1051_check_simplified_vim_option_in_etc_virtwho_d.py",
        "start": 11,
        "end": 26,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 97
        },
        "endLoc": {
          "line": 26,
          "column": 52,
          "position": 229
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133746'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info(\">>>step1: restart virt-who service, check status and thread\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py",
        "start": 9,
        "end": 22,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 22,
          "column": 62,
          "position": 173
        }
      },
      "secondFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 13,
        "end": 26,
        "startLoc": {
          "line": 13,
          "column": 16,
          "position": 115
        },
        "endLoc": {
          "line": 26,
          "column": 52,
          "position": 229
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step3', []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1029_check_virtwho_status_after_restart_rhsmcertd_service.py",
        "start": 37,
        "end": 43,
        "startLoc": {
          "line": 37,
          "column": 78,
          "position": 389
        },
        "endLoc": {
          "line": 43,
          "column": 2,
          "position": 465
        }
      },
      "secondFile": {
        "name": "tier1/tc_1072_check_rhsm_log_and_thread_after_reregister_host.py",
        "start": 54,
        "end": 60,
        "startLoc": {
          "line": 54,
          "column": 16,
          "position": 636
        },
        "endLoc": {
          "line": 60,
          "column": 2,
          "position": 712
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133745'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1028_check_guest_attr_by_curl.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        self.vw_etc_d_mode_create(config_name, config_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check guest attributes by curl\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1028_check_guest_attr_by_curl.py",
        "start": 22,
        "end": 28,
        "startLoc": {
          "line": 22,
          "column": 61,
          "position": 176
        },
        "endLoc": {
          "line": 28,
          "column": 43,
          "position": 259
        }
      },
      "secondFile": {
        "name": "tier1/tc_1034_check_mapping_info_with_dconf_and_sysconf_for_the_same_mode.py",
        "start": 28,
        "end": 38,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 251
        },
        "endLoc": {
          "line": 38,
          "column": 56,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133741'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1026_check_virtwho_executabe_file_can_be_insteaded_or_not.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133738'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1025_start_virtwho_service_by_ssh.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133736'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        ret, output = self.runcmd(cmd, self.ssh_host())\n        logger.info(output)\n        if ret == 0 and output is not None and output != \"\":\n            res = self.vw_msg_search(output, \"-rw-------\")\n            results.setdefault('step2'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py",
        "start": 33,
        "end": 38,
        "startLoc": {
          "line": 33,
          "column": 9,
          "position": 337
        },
        "endLoc": {
          "line": 38,
          "column": 8,
          "position": 417
        }
      },
      "secondFile": {
        "name": "tier1/tc_1024_check_virtwho_sysconfig_and_pid_files_permission.py",
        "start": 20,
        "end": 25,
        "startLoc": {
          "line": 20,
          "column": 12,
          "position": 172
        },
        "endLoc": {
          "line": 25,
          "column": 8,
          "position": 252
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133734'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1023_run_virtwho_in_cli_when_it_is_running.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133732'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1022_check_virtwho_can_be_killed_normally_in_terminal_side.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134123'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1021_check_reporter_id_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134122'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1020_check_log_file_function_by_cli.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "))\n                results.setdefault(step, []).append(False)\n\n        # case result\n        notes = list()\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type == 'kubevirt':\n            notes.append(\"(step1,2) No kubeconfig option for cli\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441\")\n        self.vw_case_result(results, notes)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1020_check_log_file_function_by_cli.py",
        "start": 38,
        "end": 47,
        "startLoc": {
          "line": 38,
          "column": 9,
          "position": 483
        },
        "endLoc": {
          "line": 47,
          "column": 2,
          "position": 563
        }
      },
      "secondFile": {
        "name": "tier1/tc_1021_check_reporter_id_function_by_cli.py",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 12,
          "position": 374
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 454
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134121'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1019_check_log_dir_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ".format(step))\n            data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)\n            res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n            results.setdefault(step, []).append(res)\n            ret, output = self.runcmd(\"ls {0}\".format(log_file), self.ssh_host())\n            if ret == 0:\n                ret, output = self.runcmd(\"cat {0}\".format(log_file), self.ssh_host())\n                d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)\n                d2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n                if d1 is False or d2 is False:\n                    results.setdefault(step, []).append(False)\n            else:\n                logger.error(\"{0} is not exist\".format(log_file))\n                results.setdefault(step, []).append(False)\n\n        # case result\n        notes = list()\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type == 'kubevirt':\n            notes.append(\"(step1,2) No kubeconfig option for cli\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441\")\n        self.vw_case_result(results, notes)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1019_check_log_dir_function_by_cli.py",
        "start": 27,
        "end": 48,
        "startLoc": {
          "line": 27,
          "column": 44,
          "position": 257
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 564
        }
      },
      "secondFile": {
        "name": "tier1/tc_1021_check_reporter_id_function_by_cli.py",
        "start": 25,
        "end": 44,
        "startLoc": {
          "line": 25,
          "column": 48,
          "position": 239
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 454
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133696'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "for fd in files:\n                fd = fd.strip()\n                ret, output = self.runcmd(\"cat {0}\".format(fd), self.ssh_host())\n                if \"destination\" in fd:\n                    d1 = self.vw_msg_search(output, guest_uuid, exp_exist=True)\n                    d2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n                    if d1 is False or d2 is False:\n                        logger.error(\"Failed to validate virtwho.destination file\")\n                        results.setdefault(step",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 51,
        "end": 59,
        "startLoc": {
          "line": 51,
          "column": 13,
          "position": 568
        },
        "endLoc": {
          "line": 59,
          "column": 5,
          "position": 696
        }
      },
      "secondFile": {
        "name": "tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 63,
        "end": 71,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 708
        },
        "endLoc": {
          "line": 71,
          "column": 8,
          "position": 836
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", []).append(False)\n                if \"main\" in fd:\n                    m1 = self.vw_msg_search(output, \"Report for config\", exp_exist=True)\n                    m2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n                    if m1 is False or m2 is False:\n                        logger.error(\"Failed to validate virtwho.main file\")\n                        results.setdefault(step",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 59,
        "end": 65,
        "startLoc": {
          "line": 59,
          "column": 5,
          "position": 697
        },
        "endLoc": {
          "line": 65,
          "column": 5,
          "position": 789
        }
      },
      "secondFile": {
        "name": "tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 71,
        "end": 77,
        "startLoc": {
          "line": 71,
          "column": 8,
          "position": 837
        },
        "endLoc": {
          "line": 77,
          "column": 8,
          "position": 929
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", []).append(False)\n                if \"rhsm_log\" in fd:\n                    r1 = self.vw_msg_search(output, \"Using reporter_id=\", exp_exist=True)\n                    r2 = self.vw_msg_search(output, \"ERROR\", exp_exist=False)\n                    if r1 is False or r2 is False:\n                        logger.error(\"Failed to validate virtwho.rhsm_log file\")\n                        results.setdefault(step",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 65,
        "end": 71,
        "startLoc": {
          "line": 65,
          "column": 5,
          "position": 790
        },
        "endLoc": {
          "line": 71,
          "column": 5,
          "position": 882
        }
      },
      "secondFile": {
        "name": "tier1/tc_1060_check_global_log_per_config_option_in_etc_virtwho_conf.py",
        "start": 77,
        "end": 83,
        "startLoc": {
          "line": 77,
          "column": 8,
          "position": 930
        },
        "endLoc": {
          "line": 83,
          "column": 8,
          "position": 1022
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n                        results.setdefault(step, []).append(False)\n        # case result\n        notes = list()\n        hypervisor_type = self.get_config('hypervisor_type')\n        if hypervisor_type == 'kubevirt':\n            notes.append(\"(step1,2) No kubeconfig option for cli\")\n            notes.append(\"Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1751441\")\n        self.vw_case_result(results, notes)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1018_check_log_per_config_function_by_cli.py",
        "start": 70,
        "end": 78,
        "startLoc": {
          "line": 70,
          "column": 43,
          "position": 875
        },
        "endLoc": {
          "line": 78,
          "column": 2,
          "position": 953
        }
      },
      "secondFile": {
        "name": "tier1/tc_1021_check_reporter_id_function_by_cli.py",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 2,
          "position": 375
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 454
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133658'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1017_check_config_function_by_cli.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133653'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1016_check_print_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133655'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(\n            data, exp_error=0, exp_thread=1, exp_send=1, exp_interval=3600)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: enable VIRTWHO_INTERVAL and set to 10\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 27,
        "end": 33,
        "startLoc": {
          "line": 27,
          "column": 13,
          "position": 230
        },
        "endLoc": {
          "line": 33,
          "column": 50,
          "position": 309
        }
      },
      "secondFile": {
        "name": "tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 13,
          "position": 241
        },
        "endLoc": {
          "line": 32,
          "column": 75,
          "position": 318
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)\n        res = self.op_normal_value(\n            data, exp_error=0, exp_thread=1, exp_send=1,\n            exp_interval=60, exp_loopnum=1, exp_looptime=60)\n        results.setdefault('step3'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 42,
        "end": 47,
        "startLoc": {
          "line": 42,
          "column": 13,
          "position": 435
        },
        "endLoc": {
          "line": 47,
          "column": 8,
          "position": 512
        }
      },
      "secondFile": {
        "name": "tier2/tc_2034_validate_global_interval_by_virtwho_conf.py",
        "start": 35,
        "end": 38,
        "startLoc": {
          "line": 35,
          "column": 26,
          "position": 358
        },
        "endLoc": {
          "line": 38,
          "column": 8,
          "position": 432
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, exp_loopnum=1)\n        res = self.op_normal_value(\n            data, exp_error=0, exp_thread=1, exp_send=1,\n            exp_interval=120, exp_loopnum=1, exp_looptime=120)\n        results.setdefault('step4'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 50,
        "end": 55,
        "startLoc": {
          "line": 50,
          "column": 13,
          "position": 547
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 624
        }
      },
      "secondFile": {
        "name": "tier1/tc_1056_check_global_interval_option_in_etc_virtwho_conf.py",
        "start": 37,
        "end": 40,
        "startLoc": {
          "line": 37,
          "column": 13,
          "position": 405
        },
        "endLoc": {
          "line": 40,
          "column": 8,
          "position": 479
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133650'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1014_check_interval_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "exp_send=1, exp_loopnum=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1,\n                                   exp_interval=60, exp_loopnum=1, exp_looptime=60)\n        results.setdefault('step3', []).append(res)\n\n        logger.info(\">>>step4: run virt-who with -i 120 option\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1014_check_interval_function_by_cli.py",
        "start": 48,
        "end": 53,
        "startLoc": {
          "line": 48,
          "column": 2,
          "position": 486
        },
        "endLoc": {
          "line": 53,
          "column": 44,
          "position": 562
        }
      },
      "secondFile": {
        "name": "tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 43,
        "end": 49,
        "startLoc": {
          "line": 43,
          "column": 2,
          "position": 452
        },
        "endLoc": {
          "line": 49,
          "column": 51,
          "position": 530
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "exp_send=1,\n                                                      exp_loopnum=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1,\n                                   exp_interval=120, exp_loopnum=1, exp_looptime=120)\n        results.setdefault('step4', []).append(res)\n\n        # case result\n        notes",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1014_check_interval_function_by_cli.py",
        "start": 54,
        "end": 61,
        "startLoc": {
          "line": 54,
          "column": 2,
          "position": 583
        },
        "endLoc": {
          "line": 61,
          "column": 6,
          "position": 659
        }
      },
      "secondFile": {
        "name": "tier1/tc_1015_check_interval_function_by_etc_sysconfig.py",
        "start": 51,
        "end": 58,
        "startLoc": {
          "line": 51,
          "column": 2,
          "position": 564
        },
        "endLoc": {
          "line": 58,
          "column": 5,
          "position": 641
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133651'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=True)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=0, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info('>>>step2: Run virt-who with \"VIRTWHO_ONE_SHOT=0\"'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 25,
        "end": 30,
        "startLoc": {
          "line": 25,
          "column": 13,
          "position": 210
        },
        "endLoc": {
          "line": 30,
          "column": 51,
          "position": 287
        }
      },
      "secondFile": {
        "name": "tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 25,
        "end": 30,
        "startLoc": {
          "line": 25,
          "column": 13,
          "position": 206
        },
        "endLoc": {
          "line": 30,
          "column": 46,
          "position": 283
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step2', []).append(res)\n\n        logger.info('>>>step3: Run virt-who with \"VIRTWHO_ONE_SHOT\" disabled'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 31,
        "end": 36,
        "startLoc": {
          "line": 31,
          "column": 13,
          "position": 304
        },
        "endLoc": {
          "line": 36,
          "column": 58,
          "position": 381
        }
      },
      "secondFile": {
        "name": "tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 31,
        "end": 36,
        "startLoc": {
          "line": 31,
          "column": 13,
          "position": 298
        },
        "endLoc": {
          "line": 36,
          "column": 49,
          "position": 375
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1, oneshot=False)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step3', []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 37,
        "end": 43,
        "startLoc": {
          "line": 37,
          "column": 13,
          "position": 395
        },
        "endLoc": {
          "line": 43,
          "column": 2,
          "position": 476
        }
      },
      "secondFile": {
        "name": "tier1/tc_1059_check_global_oneshot_option_in_etc_virtwho_conf.py",
        "start": 37,
        "end": 43,
        "startLoc": {
          "line": 37,
          "column": 13,
          "position": 387
        },
        "endLoc": {
          "line": 43,
          "column": 2,
          "position": 468
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133649'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1012_check_virtwho_oneshot_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133662'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        if self.pkg_check(self.ssh_host(), 'virt-who')[9:15] >= '1.31.0':\n            self.vw_case_skip(\"virt-who version\")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        sysconf_file = \"/etc/sysconfig/virt-who\"\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n\n        # case steps\n        logger.info('>>>step1: Run virt-who with \"VIRTWHO_DEBUG=1\"'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 48,
          "position": 180
        }
      },
      "secondFile": {
        "name": "tier1/tc_1013_check_virtwho_oneshot_function_by_sysconfig.py",
        "start": 10,
        "end": 23,
        "startLoc": {
          "line": 10,
          "column": 14,
          "position": 77
        },
        "endLoc": {
          "line": 23,
          "column": 51,
          "position": 180
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=True)\n        results.setdefault('step1', []).append(res1)\n        results.setdefault('step1', []).append(res2)\n\n        logger.info('>>>step2: Run virt-who with \"VIRTWHO_DEBUG=0\"'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 25,
        "end": 32,
        "startLoc": {
          "line": 25,
          "column": 13,
          "position": 210
        },
        "endLoc": {
          "line": 32,
          "column": 48,
          "position": 323
        }
      },
      "secondFile": {
        "name": "tier1/tc_1058_check_global_debug_option_in_etc_virtwho_conf.py",
        "start": 23,
        "end": 30,
        "startLoc": {
          "line": 23,
          "column": 13,
          "position": 181
        },
        "endLoc": {
          "line": 30,
          "column": 44,
          "position": 294
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", filename=sysconf_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=False)\n        results.setdefault('step2', []).append(res1)\n        results.setdefault('step2', []).append(res2)\n\n        logger.info('>>>step3: Run virt-who with \"VIRTWHO_DEBUG\" disabled'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 33,
        "end": 40,
        "startLoc": {
          "line": 33,
          "column": 4,
          "position": 335
        },
        "endLoc": {
          "line": 40,
          "column": 55,
          "position": 453
        }
      },
      "secondFile": {
        "name": "tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 25,
        "end": 38,
        "startLoc": {
          "line": 25,
          "column": 4,
          "position": 205
        },
        "endLoc": {
          "line": 38,
          "column": 52,
          "position": 422
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", filename=sysconf_file)\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res1 = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        res2 = self.vw_msg_search(output=rhsm_output, msg=\"\\[.*DEBUG\\]\", exp_exist=False)\n        results.setdefault('step3', []).append(res1)\n        results.setdefault('step3', []).append(res2)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 41,
        "end": 49,
        "startLoc": {
          "line": 41,
          "column": 16,
          "position": 462
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 584
        }
      },
      "secondFile": {
        "name": "tier1/tc_1011_check_virtwho_debug_function_by_sysconfig.py",
        "start": 25,
        "end": 47,
        "startLoc": {
          "line": 25,
          "column": 4,
          "position": 205
        },
        "endLoc": {
          "line": 47,
          "column": 2,
          "position": 551
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133661'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1010_check_virtwho_debug_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        res2 = self.vw_msg_search(output=tty_output, msg=\"\\[.*DEBUG\\]\", exp_exist=True)\n        results.setdefault('step1', []).append(res1)\n        results.setdefault('step1', []).append(res2)\n\n        logger.info(\">>>step2: Run virt-who by cli without -d option\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1010_check_virtwho_debug_function_by_cli.py",
        "start": 29,
        "end": 34,
        "startLoc": {
          "line": 29,
          "column": 2,
          "position": 255
        },
        "endLoc": {
          "line": 34,
          "column": 50,
          "position": 321
        }
      },
      "secondFile": {
        "name": "tier2/tc_2006_validate_config_function_by_cli.py",
        "start": 39,
        "end": 44,
        "startLoc": {
          "line": 39,
          "column": 3,
          "position": 423
        },
        "endLoc": {
          "line": 44,
          "column": 52,
          "position": 489
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134108'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(cmd, exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\"",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py",
        "start": 27,
        "end": 32,
        "startLoc": {
          "line": 27,
          "column": 32,
          "position": 209
        },
        "endLoc": {
          "line": 32,
          "column": 56,
          "position": 284
        }
      },
      "secondFile": {
        "name": "tier1/tc_1017_check_config_function_by_cli.py",
        "start": 23,
        "end": 35,
        "startLoc": {
          "line": 23,
          "column": 12,
          "position": 180
        },
        "endLoc": {
          "line": 35,
          "column": 56,
          "position": 392
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\")\n        res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault('step2', []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1009_check_virtwho_fetch_and_send_function_by_cli.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 2,
          "position": 229
        },
        "endLoc": {
          "line": 37,
          "column": 2,
          "position": 332
        }
      },
      "secondFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 30,
        "end": 39,
        "startLoc": {
          "line": 30,
          "column": 2,
          "position": 271
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 374
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-134107'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        self.vw_case_init()\n\n        # case config\n        results = dict()\n        self.vw_option_enable('[global]', '/etc/virt-who.conf')\n        self.vw_option_enable('debug', '/etc/virt-who.conf')\n        self.vw_option_update_value('debug', 'True', '/etc/virt-who.conf')\n        config_name = \"virtwho-config\"\n        config_file = \"/etc/virt-who.d/{0}.conf\".format(config_name)\n        self.vw_etc_d_mode_create(config_name, config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        guest_uuid",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py",
        "start": 9,
        "end": 21,
        "startLoc": {
          "line": 9,
          "column": 14,
          "position": 76
        },
        "endLoc": {
          "line": 21,
          "column": 11,
          "position": 176
        }
      },
      "secondFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 13,
        "end": 35,
        "startLoc": {
          "line": 13,
          "column": 16,
          "position": 115
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ", config_file)\n        host_uuid = self.get_hypervisor_hostuuid()\n        guest_uuid = self.get_hypervisor_guestuuid()\n\n        # case steps\n        logger.info(\">>>step1: run virt-who for {0}\".format(config_file))\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\")\n        res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault('step2', []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1008_check_virtwho_fetch_and_send_function_by_virtwho_d.py",
        "start": 19,
        "end": 34,
        "startLoc": {
          "line": 19,
          "column": 12,
          "position": 159
        },
        "endLoc": {
          "line": 34,
          "column": 2,
          "position": 321
        }
      },
      "secondFile": {
        "name": "tier1/tc_1109_connect_to_hypervisor_by_read_only_account.py",
        "start": 24,
        "end": 39,
        "startLoc": {
          "line": 24,
          "column": 23,
          "position": 212
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 374
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133789'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        res = self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1)\n        results.setdefault('step1', []).append(res)\n\n        logger.info(\">>>step2: check host-to-guest association in rhsm.log\")\n        res = self.vw_rhsm_associate(data, host_uuid, guest_uuid)\n        results.setdefault('step2', []).append(res)\n\n        # case result\n        self.vw_case_result(results)",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1007_check_virtwho_fetch_and_send_function_by_sysconfig.py",
        "start": 24,
        "end": 34,
        "startLoc": {
          "line": 24,
          "column": 52,
          "position": 208
        },
        "endLoc": {
          "line": 34,
          "column": 2,
          "position": 328
        }
      },
      "secondFile": {
        "name": "tier3/tc_1033_check_mapping_info_with_dconf_and_sysconf_for_two_modes.py",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 5,
          "position": 345
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 374
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133660'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1006_run_virtwho_with_default_config.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133659'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1005_check_virtwho_service_function.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133657'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1004_check_virtwho_virtwhoconfig_man_page_and_help_exist.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133656'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1003_check_virtwho_package_info.py",
        "start": 1,
        "end": 10,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 10,
          "column": 14,
          "position": 76
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133654'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1002_check_virtwho_can_be_installed_and_uninstalled.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "# coding:utf-8\nfrom virt_who import *\nfrom virt_who.base import Base\nfrom virt_who.register import Register\nfrom virt_who.testing import Testing\n\nclass Testcase(Testing):\n    def test_run(self):\n        self.vw_case_info(os.path.basename(__file__), case_id='RHEL-133652'",
      "tokens": 0,
      "firstFile": {
        "name": "tier1/tc_1001_check_virtwho_is_shipped_by_different_arch.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      },
      "secondFile": {
        "name": "tier3/tc_1071_check_fake_mode_with_two_hypervisors_in_etc_virtwho_d.py",
        "start": 1,
        "end": 9,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 9,
          "column": 14,
          "position": 75
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        for step, option in sorted(steps.items(),key=lambda item:item[0]):\n            logger.info(\">>>{0}: run virt-who to check {1}\".format(step, option))\n            if option == \"http_proxy\":\n                value = \"http://{0}\".format(proxy_server)\n            if",
      "tokens": 0,
      "firstFile": {
        "name": "smoke/test_virtwho_smoke.py",
        "start": 60,
        "end": 65,
        "startLoc": {
          "line": 60,
          "column": 12,
          "position": 725
        },
        "endLoc": {
          "line": 65,
          "column": 3,
          "position": 797
        }
      },
      "secondFile": {
        "name": "tier1/tc_1112_check_http_proxy_option_by_etc_conf.py",
        "start": 29,
        "end": 35,
        "startLoc": {
          "line": 29,
          "column": 5,
          "position": 292
        },
        "endLoc": {
          "line": 35,
          "column": 10,
          "position": 365
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n        output = self.system_sku_consumed(self.ssh_guest())\n        assert (self.vw_msg_search(output, instance_sku))\n        assert (self.vw_msg_search(output, 'Quantity Used:.*1'))\n        assert (self.vw_msg_search(output, 'Status Details:.*Subscription is current'))\n        logger.info(\">>> attach physical instance sku for guest with quantity=2\"",
      "tokens": 0,
      "firstFile": {
        "name": "smoke/test_virtwho_smoke.py",
        "start": 197,
        "end": 202,
        "startLoc": {
          "line": 197,
          "column": 2,
          "position": 2806
        },
        "endLoc": {
          "line": 202,
          "column": 61,
          "position": 2874
        }
      },
      "secondFile": {
        "name": "smoke/test_virtwho_smoke.py",
        "start": 189,
        "end": 194,
        "startLoc": {
          "line": 189,
          "column": 2,
          "position": 2680
        },
        "endLoc": {
          "line": 194,
          "column": 61,
          "position": 2748
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n\n    def test_vw_host_to_guest_association(self):\n        data, tty_output, rhsm_output = self.vw_start(exp_send=1)\n        assert (self.op_normal_value(data, exp_error=0, exp_thread=1, exp_send=1))\n        assert (self.vw_rhsm_associate(data, self.host_uuid, self.guest_uuid))\n        assert (self.vw_web_associate(self.host_name, self.host_uuid, self.guest_name, self.guest_uuid))\n\n    def test_guest_entilement_with_sca_enabled",
      "tokens": 0,
      "firstFile": {
        "name": "sca/test_virtwho_sca.py",
        "start": 58,
        "end": 66,
        "startLoc": {
          "line": 58,
          "column": 5,
          "position": 708
        },
        "endLoc": {
          "line": 66,
          "column": 39,
          "position": 822
        }
      },
      "secondFile": {
        "name": "smoke/test_virtwho_smoke.py",
        "start": 34,
        "end": 42,
        "startLoc": {
          "line": 34,
          "column": 2,
          "position": 320
        },
        "endLoc": {
          "line": 42,
          "column": 21,
          "position": 434
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "(cls())\n        cls.host_name = cls.get_hypervisor_hostname(cls())\n        cls.host_uuid = cls.get_hypervisor_hostuuid(cls())\n        cls.host_hwuuid = cls.get_hypervisor_hwuuid(cls())\n        cls.guest_name = cls.get_guest_name(cls())\n        cls.guest_uuid = cls.get_hypervisor_guestuuid(cls())\n\n    def setUp(self):\n        self.vw_etc_conf_disable_all()\n        self.vw_etc_sys_disable_all()\n        self.vw_etc_d_delete_all()\n        self.vw_etc_d_mode_create(self.config_name, self.config_file)\n        self.vw_option_enable('[global]', self.global_file)\n        self.vw_option_enable('debug', self.global_file)\n        self.vw_option_update_value('debug', 'True', self.global_file)\n\n    def get_guest_name(self):\n        return self.get_hostname(self.ssh_guest())\n\n    def test_virtwho_debug",
      "tokens": 0,
      "firstFile": {
        "name": "gating/test_virtwho_gating.py",
        "start": 16,
        "end": 35,
        "startLoc": {
          "line": 16,
          "column": 13,
          "position": 108
        },
        "endLoc": {
          "line": 35,
          "column": 19,
          "position": 310
        }
      },
      "secondFile": {
        "name": "smoke/test_virtwho_smoke.py",
        "start": 17,
        "end": 36,
        "startLoc": {
          "line": 17,
          "column": 20,
          "position": 124
        },
        "endLoc": {
          "line": 36,
          "column": 34,
          "position": 326
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "))\n        sku_attrs = self.system_sku_attr(self.ssh_host(), vdc_physical_sku, \"physical\")\n        self.vw_web_attach(self.host_name, self.host_uuid, sku_attrs['pool_id'])\n        sku_attrs = self.system_sku_attr(self.ssh_guest(), vdc_virtual_sku, \"virtual\")\n        self.system_sku_attach(self.ssh_guest(), pool_id=sku_attrs['pool_id'])\n        output = self.system_sku_consumed(self.ssh_guest())\n        assert(self.vw_msg_search(output, vdc_virtual_sku, exp_exist=True))\n        ret, output = self.runcmd('subscription-manager repos --list', self.ssh_guest())\n        if",
      "tokens": 0,
      "firstFile": {
        "name": "gating/test_virtwho_gating.py",
        "start": 101,
        "end": 109,
        "startLoc": {
          "line": 101,
          "column": 2,
          "position": 1267
        },
        "endLoc": {
          "line": 109,
          "column": 3,
          "position": 1413
        }
      },
      "secondFile": {
        "name": "smoke/test_virtwho_smoke.py",
        "start": 120,
        "end": 128,
        "startLoc": {
          "line": 120,
          "column": 2,
          "position": 1547
        },
        "endLoc": {
          "line": 128,
          "column": 7,
          "position": 1693
        }
      }
    }
  ]
}